
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
mload
(
0x40
)
sub
(
codesize
 bytecodeSize
)
dup1
bytecodeSize
dup4
codecopy
dup2
dup2
add
0x40
mstore
0x20
dup2
lt
iszero
tag
_2
jumpi
0x00
dup1
revert
tag
_2
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
dup1
0x00
dup1
0x0100
exp
dup2
sload
dup2
0xffffffffffffffffffffffffffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mul
or
swap1
sstore
pop
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0xd015ed6a
eq
tag
_3
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_4
0x04
dup1
calldatasize
sub
0x40
dup2
lt
iszero
tag
_5
jumpi
0x00
dup1
revert
tag
_5
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
tag
_6
jump	tag
_4
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_6
0x00
dup1
0x00
swap1
sload
swap1
0x0100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0xa9059cbb
dup5
dup5
mload
(
0x40
)
dup4
0xffffffff
and
0xe0
shl
dup2
mstore
0x04
add
dup1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
0x20
mload
(
0x40
)
dup1
dup4
sub
dup2
0x00
dup8
dup1
extcodesize
iszero
dup1
iszero
tag
_8
jumpi
0x00
dup1
revert
tag
_8
pop
gas
call
iszero
dup1
iszero
tag
_10
jumpi
returndatasize
0x00
dup1
returndatacopy
returndatasize
0x00
revert
tag
_10
pop
pop
pop
pop
mload
(
0x40
)
returndatasize
0x20
dup2
lt
iszero
tag
_11
jumpi
0x00
dup1
revert
tag
_11
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
swap1
pop
swap3
swap2
pop
pop
jump	
}
