
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xec309038
eq
tag
_2
jumpi
dup1
0xfc3fa1ae
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_4
jumpi
0x0
dup1
revert
tag
_4
pop
tag
_5
jump
(
tag
_6
)
tag
_5
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_7
jumpi
0x0
dup1
revert
tag
_7
pop
tag
_8
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_9
)
tag
_8
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_6
0x0
dup1
0x0
dup1
0x93a80
0x54600
timestamp
sub
dup2
iszero
iszero
tag
_11
jumpi
invalid
tag
_11
mod
swap3
pop
0x0
dup1
sload
swap1
pop
swap2
pop
0x0
swap1
pop
tag
_12
dup2
dup2
lt
iszero
tag
_13
jumpi
0x0
dup2
dup2
sload
dup2
lt
iszero
iszero
tag
_15
jumpi
invalid
tag
_15
swap1
0x0
mstore
keccak256
(
0x0
 0x20
)
add
sload
dup4
lt
iszero
iszero
tag
_17
jumpi
0x1
swap4
pop
jump
(
tag
_10
)
tag
_17
dup1
dup1
0x1
add
swap2
pop
pop
jump
(
tag
_12
)
tag
_13
0x0
swap4
pop
tag
_10
pop
pop
pop
swap1
jump	
tag
_9
0x0
dup2
dup2
sload
dup2
lt
iszero
iszero
tag
_18
jumpi
invalid
tag
_18
swap1
0x0
mstore
keccak256
(
0x0
 0x20
)
add
0x0
swap2
pop
swap1
pop
sload
dup2
jump	
}
