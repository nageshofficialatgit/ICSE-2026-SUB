
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x6e296e45
eq
tag
_2
jumpi
dup1
0xcc51ef8e
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_4
jumpi
0x0
dup1
revert
tag
_4
pop
tag
_5
jump
(
tag
_6
)
tag
_5
mload
(
0x40
)
dup1
dup3
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_7
jumpi
0x0
dup1
revert
tag
_7
pop
tag
_8
jump
(
tag
_9
)
tag
_8
stop
tag
_6
0x3
0x0
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
jump	
tag
_9
tag
_10
jump	tag
_10
0x0
sload
(
0x1
)
dup2
sload
dup2
lt
iszero
iszero
tag
_13
jumpi
invalid
tag
_13
swap1
0x0
mstore
keccak256
(
0x0
 0x20
)
swap1
0x2
mul
add
0x40
dup1
mload
swap1
dup2
add
0x40
mstore
swap1
dup2
0x0
dup3
add
sload
dup2
mstore
0x20
add
0x1
dup3
add
0x0
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
pop
pop
swap1
pop
timestamp
sload
(
0x2
)
dup3
0x0
add
mload
add
lt
iszero
iszero
tag
_15
jumpi
0x0
dup1
revert
tag
_15
dup1
0x20
add
mload
0x3
0x0
0x100
exp
dup2
sload
dup2
0xffffffffffffffffffffffffffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mul
or
swap1
sstore
pop
0x1
dup1
0x0
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
pop
jump	
tag
_11
0x40
dup1
mload
swap1
dup2
add
0x40
mstore
dup1
0x0
dup2
mstore
0x20
add
and
(
0xffffffffffffffffffffffffffffffffffffffff
 0x0
)
dup2
mstore
pop
swap1
jump	
}
