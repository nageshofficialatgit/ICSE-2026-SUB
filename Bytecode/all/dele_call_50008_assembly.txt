
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xd1e0f308
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_4
)
tag
_3
stop
tag
_4
dup2
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
add
(
0x24
 mload
(
0x40
)
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
0x20
dup2
dup4
sub
sub
dup2
mstore
swap1
0x40
mstore
and
(
not
(
0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
)
 0x6466414b00000000000000000000000000000000000000000000000000000000
)
0x20
dup3
add
dup1
mload
0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
dup4
dup2
dup4
and
or
dup4
mstore
pop
pop
pop
pop
mload
(
0x40
)
dup1
dup3
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
0x0
tag
_6
dup4
dup2
lt
iszero
tag
_7
jumpi
dup1
dup3
add
mload
dup2
dup5
add
mstore
0x20
dup2
add
swap1
pop
jump
(
tag
_6
)
tag
_7
pop
pop
pop
pop
swap1
pop
swap1
dup2
add
swap1
0x1f
and
dup1
iszero
tag
_9
jumpi
dup1
dup3
sub
dup1
mload
0x1
dup4
0x20
sub
0x100
exp
sub
not
and
dup2
mstore
0x20
add
swap2
pop
tag
_9
pop
swap2
pop
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
gas
delegatecall
swap2
pop
pop
pop
pop
pop
jump	
}
