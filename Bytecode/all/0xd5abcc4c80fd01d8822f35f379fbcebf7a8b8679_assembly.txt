
.code
PUSH1 0x60		contract Escapable is Owned {
...
PUSH1 0x40		contract Escapable is Owned {
...
MSTORE			contract Escapable is Owned {
...
CALLVALUE			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH [ErrorTag]		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
JUMPI			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH1 0x40		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
MLOAD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH1 0x40		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSHSIZE		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP4			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
CODECOPY			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP2			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
ADD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH1 0x40		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
MSTORE			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
MLOAD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH1 0x20		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
ADD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP2			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
MLOAD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
PUSH1 0x20		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
ADD			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP2			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
SWAP1			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
tag1
 
JUMPDEST		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
tag2
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
CALLER			msg.sender
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = msg.sender
EXP			owner = msg.sender
DUP2			owner = msg.sender
SLOAD			owner = msg.sender
DUP2			owner = msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
MUL			owner = msg.sender
NOT			owner = msg.sender
AND			owner = msg.sender
SWAP1			owner = msg.sender
DUP4			owner = msg.sender
PUSH13 0x1000000000000000000000000		owner = msg.sender
SWAP1			owner = msg.sender
DUP2			owner = msg.sender
MUL			owner = msg.sender
DIV			owner = msg.sender
MUL			owner = msg.sender
OR			owner = msg.sender
SWAP1			owner = msg.sender
SSTORE			owner = msg.sender
POP			owner = msg.sender
tag3
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
DUP1			_escapeDestination
PUSH1 0x2		escapeDestination
PUSH1 0x0		escapeDestination
PUSH2 0x100		escapeDestination = _escapeDestination
EXP			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
SLOAD			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
NOT			escapeDestination = _escapeDestination
AND			escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
DUP4			escapeDestination = _escapeDestination
PUSH13 0x1000000000000000000000000		escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
DIV			escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
OR			escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
SSTORE			escapeDestination = _escapeDestination
POP			escapeDestination = _escapeDestination
DUP2			_escapeCaller
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
PUSH2 0x100		escapeCaller = _escapeCaller
EXP			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
SLOAD			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
NOT			escapeCaller = _escapeCaller
AND			escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
DUP4			escapeCaller = _escapeCaller
PUSH13 0x1000000000000000000000000		escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
DIV			escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
OR			escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
SSTORE			escapeCaller = _escapeCaller
POP			escapeCaller = _escapeCaller
tag4
 
JUMPDEST		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
tag5
 
JUMPDEST		contract Escapable is Owned {
...
PUSH #[$0]		contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH [$0]		contract Escapable is Owned {
...
PUSH1 0x0		contract Escapable is Owned {
...
CODECOPY			contract Escapable is Owned {
...
PUSH1 0x0		contract Escapable is Owned {
...
RETURN			contract Escapable is Owned {
...
.data
0
 
.code
PUSH1 0x60		contract Escapable is Owned {
...
PUSH1 0x40		contract Escapable is Owned {
...
MSTORE			contract Escapable is Owned {
...
CALLDATASIZE			contract Escapable is Owned {
...
ISZERO			contract Escapable is Owned {
...
PUSH [tag1]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
PUSH1 0x0		contract Escapable is Owned {
...
CALLDATALOAD			contract Escapable is Owned {
...
PUSH29 0x100000000000000000000000000000000000000000000000000000000		contract Escapable is Owned {
...
SWAP1			contract Escapable is Owned {
...
DIV			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0x1554611F		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag2]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0x681617C7		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag3]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0x8DA5CB5B		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag4]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0xA6F9DAE1		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag5]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0xC7238AF7		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag6]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
DUP1			contract Escapable is Owned {
...
PUSH4 0xF17F6F8A		contract Escapable is Owned {
...
EQ			contract Escapable is Owned {
...
PUSH [tag7]		contract Escapable is Owned {
...
JUMPI			contract Escapable is Owned {
...
tag1
 
JUMPDEST		contract Escapable is Owned {
...
PUSH [ErrorTag]		contract Escapable is Owned {
...
JUMP			contract Escapable is Owned {
...
tag2
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
CALLVALUE			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [ErrorTag]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMPI			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag8]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag9]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag8
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
STOP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag3
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
CALLVALUE			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [ErrorTag]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMPI			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag10]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x4		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
DUP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
DUP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
CALLDATALOAD			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x20		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
ADD			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP2			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag11]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag10
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
STOP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag4
 
JUMPDEST		address public owner
CALLVALUE			address public owner
PUSH [ErrorTag]		address public owner
JUMPI			address public owner
PUSH [tag12]		address public owner
PUSH [tag13]		address public owner
JUMP			address public owner
tag12
 
JUMPDEST		address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
DUP3			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
MSTORE			address public owner
PUSH1 0x20		address public owner
ADD			address public owner
SWAP2			address public owner
POP			address public owner
POP			address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
SWAP2			address public owner
SUB			address public owner
SWAP1			address public owner
RETURN			address public owner
tag5
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLVALUE			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [ErrorTag]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMPI			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag14]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x4		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLDATALOAD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x20		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
ADD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP2			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag15]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag14
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
STOP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag6
 
JUMPDEST		address public escapeDestination
CALLVALUE			address public escapeDestination
PUSH [ErrorTag]		address public escapeDestination
JUMPI			address public escapeDestination
PUSH [tag16]		address public escapeDestination
PUSH [tag17]		address public escapeDestination
JUMP			address public escapeDestination
tag16
 
JUMPDEST		address public escapeDestination
PUSH1 0x40		address public escapeDestination
MLOAD			address public escapeDestination
DUP1			address public escapeDestination
DUP3			address public escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeDestination
AND			address public escapeDestination
DUP2			address public escapeDestination
MSTORE			address public escapeDestination
PUSH1 0x20		address public escapeDestination
ADD			address public escapeDestination
SWAP2			address public escapeDestination
POP			address public escapeDestination
POP			address public escapeDestination
PUSH1 0x40		address public escapeDestination
MLOAD			address public escapeDestination
DUP1			address public escapeDestination
SWAP2			address public escapeDestination
SUB			address public escapeDestination
SWAP1			address public escapeDestination
RETURN			address public escapeDestination
tag7
 
JUMPDEST		address public escapeCaller
CALLVALUE			address public escapeCaller
PUSH [ErrorTag]		address public escapeCaller
JUMPI			address public escapeCaller
PUSH [tag18]		address public escapeCaller
PUSH [tag19]		address public escapeCaller
JUMP			address public escapeCaller
tag18
 
JUMPDEST		address public escapeCaller
PUSH1 0x40		address public escapeCaller
MLOAD			address public escapeCaller
DUP1			address public escapeCaller
DUP3			address public escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeCaller
AND			address public escapeCaller
DUP2			address public escapeCaller
MSTORE			address public escapeCaller
PUSH1 0x20		address public escapeCaller
ADD			address public escapeCaller
SWAP2			address public escapeCaller
POP			address public escapeCaller
POP			address public escapeCaller
PUSH1 0x40		address public escapeCaller
MLOAD			address public escapeCaller
DUP1			address public escapeCaller
SWAP2			address public escapeCaller
SUB			address public escapeCaller
SWAP1			address public escapeCaller
RETURN			address public escapeCaller
tag9
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x0		uint total
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
SWAP1			escapeCaller
SLOAD			escapeCaller
SWAP1			escapeCaller
PUSH2 0x100		escapeCaller
EXP			escapeCaller
SWAP1			escapeCaller
DIV			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller
AND			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
EQ			msg.sender != escapeCaller
ISZERO			msg.sender != escapeCaller
DUP1			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH [tag21]		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
JUMPI			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
POP			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
tag21
 
JUMPDEST		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [tag22]		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
JUMPI			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [ErrorTag]		throw
JUMP			throw
tag22
 
JUMPDEST		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
ADDRESS			this
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		this.balance
AND			this.balance
BALANCE			this.balance
SWAP1			uint total = this.balance
POP			uint total = this.balance
PUSH1 0x2		escapeDestination
PUSH1 0x0		escapeDestination
SWAP1			escapeDestination
SLOAD			escapeDestination
SWAP1			escapeDestination
PUSH2 0x100		escapeDestination
EXP			escapeDestination
SWAP1			escapeDestination
DIV			escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination
AND			escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination.send
AND			escapeDestination.send
PUSH2 0x8FC		escapeDestination.send
(
total
)
DUP3			total
SWAP1			escapeDestination.send
(
total
)
DUP2			escapeDestination.send
(
total
)
ISZERO			escapeDestination.send
(
total
)
MUL			escapeDestination.send
(
total
)
SWAP1			escapeDestination.send
(
total
)
PUSH1 0x40		escapeDestination.send
(
total
)
MLOAD			escapeDestination.send
(
total
)
DUP1			escapeDestination.send
(
total
)
SWAP1			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
PUSH1 0x0		escapeDestination.send
(
total
)
PUSH1 0x40		escapeDestination.send
(
total
)
MLOAD			escapeDestination.send
(
total
)
DUP1			escapeDestination.send
(
total
)
DUP4			escapeDestination.send
(
total
)
SUB			escapeDestination.send
(
total
)
DUP2			escapeDestination.send
(
total
)
DUP6			escapeDestination.send
(
total
)
DUP9			escapeDestination.send
(
total
)
DUP9			escapeDestination.send
(
total
)
CALL			escapeDestination.send
(
total
)
SWAP4			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
ISZERO			!escapeDestination.send
(
total
)
ISZERO			if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH [tag24]		if 
(
!escapeDestination.send
(
total
)
)
 {
...
JUMPI			if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH [ErrorTag]		throw
JUMP			throw
tag24
 
JUMPDEST		if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH32 0x2A3EF566AE160E22F4C547C4A751E6DABD0C266B98B091A909EB729B609EA186		EscapeCalled
(
total
)
DUP2			total
PUSH1 0x40		EscapeCalled
(
total
)
MLOAD			EscapeCalled
(
total
)
DUP1			EscapeCalled
(
total
)
DUP3			EscapeCalled
(
total
)
DUP2			EscapeCalled
(
total
)
MSTORE			EscapeCalled
(
total
)
PUSH1 0x20		EscapeCalled
(
total
)
ADD			EscapeCalled
(
total
)
SWAP2			EscapeCalled
(
total
)
POP			EscapeCalled
(
total
)
POP			EscapeCalled
(
total
)
PUSH1 0x40		EscapeCalled
(
total
)
MLOAD			EscapeCalled
(
total
)
DUP1			EscapeCalled
(
total
)
SWAP2			EscapeCalled
(
total
)
SUB			EscapeCalled
(
total
)
SWAP1			EscapeCalled
(
total
)
LOG1			EscapeCalled
(
total
)
tag23
 
JUMPDEST		_
tag20
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
POP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMP	[out]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag11
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
SWAP1			escapeCaller
SLOAD			escapeCaller
SWAP1			escapeCaller
PUSH2 0x100		escapeCaller
EXP			escapeCaller
SWAP1			escapeCaller
DIV			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller
AND			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
EQ			msg.sender != escapeCaller
ISZERO			msg.sender != escapeCaller
DUP1			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH [tag26]		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
JUMPI			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
POP			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
tag26
 
JUMPDEST		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [tag27]		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
JUMPI			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [ErrorTag]		throw
JUMP			throw
tag27
 
JUMPDEST		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
DUP1			_newEscapeCaller
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
PUSH2 0x100		escapeCaller = _newEscapeCaller
EXP			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
SLOAD			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
NOT			escapeCaller = _newEscapeCaller
AND			escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
DUP4			escapeCaller = _newEscapeCaller
PUSH13 0x1000000000000000000000000		escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
DIV			escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
OR			escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
SSTORE			escapeCaller = _newEscapeCaller
POP			escapeCaller = _newEscapeCaller
tag28
 
JUMPDEST		_
tag25
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMP	[out]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag13
 
JUMPDEST		address public owner
PUSH1 0x0		address public owner
PUSH1 0x0		address public owner
SWAP1			address public owner
SLOAD			address public owner
SWAP1			address public owner
PUSH2 0x100		address public owner
EXP			address public owner
SWAP1			address public owner
DIV			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
JUMP	[out]		address public owner
tag15
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag30]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag30
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_newOwner
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = _newOwner
EXP			owner = _newOwner
DUP2			owner = _newOwner
SLOAD			owner = _newOwner
DUP2			owner = _newOwner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _newOwner
MUL			owner = _newOwner
NOT			owner = _newOwner
AND			owner = _newOwner
SWAP1			owner = _newOwner
DUP4			owner = _newOwner
PUSH13 0x1000000000000000000000000		owner = _newOwner
SWAP1			owner = _newOwner
DUP2			owner = _newOwner
MUL			owner = _newOwner
DIV			owner = _newOwner
MUL			owner = _newOwner
OR			owner = _newOwner
SWAP1			owner = _newOwner
SSTORE			owner = _newOwner
POP			owner = _newOwner
tag31
 
JUMPDEST		_
tag29
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP	[out]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag17
 
JUMPDEST		address public escapeDestination
PUSH1 0x2		address public escapeDestination
PUSH1 0x0		address public escapeDestination
SWAP1			address public escapeDestination
SLOAD			address public escapeDestination
SWAP1			address public escapeDestination
PUSH2 0x100		address public escapeDestination
EXP			address public escapeDestination
SWAP1			address public escapeDestination
DIV			address public escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeDestination
AND			address public escapeDestination
DUP2			address public escapeDestination
JUMP	[out]		address public escapeDestination
tag19
 
JUMPDEST		address public escapeCaller
PUSH1 0x1		address public escapeCaller
PUSH1 0x0		address public escapeCaller
SWAP1			address public escapeCaller
SLOAD			address public escapeCaller
SWAP1			address public escapeCaller
PUSH2 0x100		address public escapeCaller
EXP			address public escapeCaller
SWAP1			address public escapeCaller
DIV			address public escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeCaller
AND			address public escapeCaller
DUP2			address public escapeCaller
JUMP	[out]		address public escapeCaller
.code
PUSH1 0x60		contract Owned {
...
PUSH1 0x40		contract Owned {
...
MSTORE			contract Owned {
...
CALLVALUE			function Owned
(
)
 { owner = msg.sender;}
PUSH [ErrorTag]		function Owned
(
)
 { owner = msg.sender;}
JUMPI			function Owned
(
)
 { owner = msg.sender;}
tag1
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
CALLER			msg.sender
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = msg.sender
EXP			owner = msg.sender
DUP2			owner = msg.sender
SLOAD			owner = msg.sender
DUP2			owner = msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
MUL			owner = msg.sender
NOT			owner = msg.sender
AND			owner = msg.sender
SWAP1			owner = msg.sender
DUP4			owner = msg.sender
PUSH13 0x1000000000000000000000000		owner = msg.sender
SWAP1			owner = msg.sender
DUP2			owner = msg.sender
MUL			owner = msg.sender
DIV			owner = msg.sender
MUL			owner = msg.sender
OR			owner = msg.sender
SWAP1			owner = msg.sender
SSTORE			owner = msg.sender
POP			owner = msg.sender
tag2
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
tag3
 
JUMPDEST		contract Owned {
...
PUSH #[$0]		contract Owned {
...
DUP1			contract Owned {
...
PUSH [$0]		contract Owned {
...
PUSH1 0x0		contract Owned {
...
CODECOPY			contract Owned {
...
PUSH1 0x0		contract Owned {
...
RETURN			contract Owned {
...
.data
0
 
.code
PUSH1 0x60		contract Owned {
...
PUSH1 0x40		contract Owned {
...
MSTORE			contract Owned {
...
PUSH1 0x0		contract Owned {
...
CALLDATALOAD			contract Owned {
...
PUSH29 0x100000000000000000000000000000000000000000000000000000000		contract Owned {
...
SWAP1			contract Owned {
...
DIV			contract Owned {
...
DUP1			contract Owned {
...
PUSH4 0x8DA5CB5B		contract Owned {
...
EQ			contract Owned {
...
PUSH [tag2]		contract Owned {
...
JUMPI			contract Owned {
...
DUP1			contract Owned {
...
PUSH4 0xA6F9DAE1		contract Owned {
...
EQ			contract Owned {
...
PUSH [tag3]		contract Owned {
...
JUMPI			contract Owned {
...
tag1
 
JUMPDEST		contract Owned {
...
PUSH [ErrorTag]		contract Owned {
...
JUMP			contract Owned {
...
tag2
 
JUMPDEST		address public owner
CALLVALUE			address public owner
PUSH [ErrorTag]		address public owner
JUMPI			address public owner
PUSH [tag4]		address public owner
PUSH [tag5]		address public owner
JUMP			address public owner
tag4
 
JUMPDEST		address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
DUP3			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
MSTORE			address public owner
PUSH1 0x20		address public owner
ADD			address public owner
SWAP2			address public owner
POP			address public owner
POP			address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
SWAP2			address public owner
SUB			address public owner
SWAP1			address public owner
RETURN			address public owner
tag3
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLVALUE			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [ErrorTag]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMPI			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag6]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x4		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLDATALOAD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x20		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
ADD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP2			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag7]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag6
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
STOP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag5
 
JUMPDEST		address public owner
PUSH1 0x0		address public owner
PUSH1 0x0		address public owner
SWAP1			address public owner
SLOAD			address public owner
SWAP1			address public owner
PUSH2 0x100		address public owner
EXP			address public owner
SWAP1			address public owner
DIV			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
JUMP	[out]		address public owner
tag7
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag9]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag9
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_newOwner
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = _newOwner
EXP			owner = _newOwner
DUP2			owner = _newOwner
SLOAD			owner = _newOwner
DUP2			owner = _newOwner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _newOwner
MUL			owner = _newOwner
NOT			owner = _newOwner
AND			owner = _newOwner
SWAP1			owner = _newOwner
DUP4			owner = _newOwner
PUSH13 0x1000000000000000000000000		owner = _newOwner
SWAP1			owner = _newOwner
DUP2			owner = _newOwner
MUL			owner = _newOwner
DIV			owner = _newOwner
MUL			owner = _newOwner
OR			owner = _newOwner
SWAP1			owner = _newOwner
SSTORE			owner = _newOwner
POP			owner = _newOwner
tag10
 
JUMPDEST		_
tag8
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP	[out]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
.code
PUSH1 0x60		contract Vault is Escapable {
...
PUSH1 0x40		contract Vault is Escapable {
...
MSTORE			contract Vault is Escapable {
...
CALLVALUE			function Vault
(
...
PUSH [ErrorTag]		function Vault
(
...
JUMPI			function Vault
(
...
PUSH1 0x40		function Vault
(
...
MLOAD			function Vault
(
...
PUSH1 0xC0		function Vault
(
...
DUP1			function Vault
(
...
PUSHSIZE		function Vault
(
...
DUP4			function Vault
(
...
CODECOPY			function Vault
(
...
DUP2			function Vault
(
...
ADD			function Vault
(
...
PUSH1 0x40		function Vault
(
...
MSTORE			function Vault
(
...
DUP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
DUP1			function Vault
(
...
MLOAD			function Vault
(
...
SWAP1			function Vault
(
...
PUSH1 0x20		function Vault
(
...
ADD			function Vault
(
...
SWAP1			function Vault
(
...
SWAP2			function Vault
(
...
SWAP1			function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
tag1
 
JUMPDEST		function Vault
(
...
DUP6			_escapeCaller
DUP6			_escapeDestination
tag2
 
JUMPDEST		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
tag3
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
CALLER			msg.sender
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = msg.sender
EXP			owner = msg.sender
DUP2			owner = msg.sender
SLOAD			owner = msg.sender
DUP2			owner = msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
MUL			owner = msg.sender
NOT			owner = msg.sender
AND			owner = msg.sender
SWAP1			owner = msg.sender
DUP4			owner = msg.sender
PUSH13 0x1000000000000000000000000		owner = msg.sender
SWAP1			owner = msg.sender
DUP2			owner = msg.sender
MUL			owner = msg.sender
DIV			owner = msg.sender
MUL			owner = msg.sender
OR			owner = msg.sender
SWAP1			owner = msg.sender
SSTORE			owner = msg.sender
POP			owner = msg.sender
tag4
 
JUMPDEST		function Owned
(
)
 { owner = msg.sender;}
DUP1			_escapeDestination
PUSH1 0x2		escapeDestination
PUSH1 0x0		escapeDestination
PUSH2 0x100		escapeDestination = _escapeDestination
EXP			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
SLOAD			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
NOT			escapeDestination = _escapeDestination
AND			escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
DUP4			escapeDestination = _escapeDestination
PUSH13 0x1000000000000000000000000		escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
DUP2			escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
DIV			escapeDestination = _escapeDestination
MUL			escapeDestination = _escapeDestination
OR			escapeDestination = _escapeDestination
SWAP1			escapeDestination = _escapeDestination
SSTORE			escapeDestination = _escapeDestination
POP			escapeDestination = _escapeDestination
DUP2			_escapeCaller
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
PUSH2 0x100		escapeCaller = _escapeCaller
EXP			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
SLOAD			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
NOT			escapeCaller = _escapeCaller
AND			escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
DUP4			escapeCaller = _escapeCaller
PUSH13 0x1000000000000000000000000		escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
DUP2			escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
DIV			escapeCaller = _escapeCaller
MUL			escapeCaller = _escapeCaller
OR			escapeCaller = _escapeCaller
SWAP1			escapeCaller = _escapeCaller
SSTORE			escapeCaller = _escapeCaller
POP			escapeCaller = _escapeCaller
tag5
 
JUMPDEST		function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
POP			function Escapable
(
address _escapeCaller
 address _escapeDestination
)
 {
...
DUP2			_securityGuard
PUSH1 0x4		securityGuard
PUSH1 0x0		securityGuard
PUSH2 0x100		securityGuard = _securityGuard
EXP			securityGuard = _securityGuard
DUP2			securityGuard = _securityGuard
SLOAD			securityGuard = _securityGuard
DUP2			securityGuard = _securityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		securityGuard = _securityGuard
MUL			securityGuard = _securityGuard
NOT			securityGuard = _securityGuard
AND			securityGuard = _securityGuard
SWAP1			securityGuard = _securityGuard
DUP4			securityGuard = _securityGuard
PUSH13 0x1000000000000000000000000		securityGuard = _securityGuard
SWAP1			securityGuard = _securityGuard
DUP2			securityGuard = _securityGuard
MUL			securityGuard = _securityGuard
DIV			securityGuard = _securityGuard
MUL			securityGuard = _securityGuard
OR			securityGuard = _securityGuard
SWAP1			securityGuard = _securityGuard
SSTORE			securityGuard = _securityGuard
POP			securityGuard = _securityGuard
DUP3			_timeLock
PUSH1 0x6		timeLock
DUP2			timeLock = _timeLock
SWAP1			timeLock = _timeLock
SSTORE			timeLock = _timeLock
POP			timeLock = _timeLock
DUP4			_absoluteMinTimeLock
PUSH1 0x5		absoluteMinTimeLock
DUP2			absoluteMinTimeLock = _absoluteMinTimeLock
SWAP1			absoluteMinTimeLock = _absoluteMinTimeLock
SSTORE			absoluteMinTimeLock = _absoluteMinTimeLock
POP			absoluteMinTimeLock = _absoluteMinTimeLock
DUP1			_maxSecurityGuardDelay
PUSH1 0x7		maxSecurityGuardDelay
DUP2			maxSecurityGuardDelay = _maxSecurityGuardDelay
SWAP1			maxSecurityGuardDelay = _maxSecurityGuardDelay
SSTORE			maxSecurityGuardDelay = _maxSecurityGuardDelay
POP			maxSecurityGuardDelay = _maxSecurityGuardDelay
tag6
 
JUMPDEST		function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
POP			function Vault
(
...
tag7
 
JUMPDEST		contract Vault is Escapable {
...
PUSH #[$0]		contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH [$0]		contract Vault is Escapable {
...
PUSH1 0x0		contract Vault is Escapable {
...
CODECOPY			contract Vault is Escapable {
...
PUSH1 0x0		contract Vault is Escapable {
...
RETURN			contract Vault is Escapable {
...
.data
0
 
.code
PUSH1 0x60		contract Vault is Escapable {
...
PUSH1 0x40		contract Vault is Escapable {
...
MSTORE			contract Vault is Escapable {
...
CALLDATASIZE			contract Vault is Escapable {
...
ISZERO			contract Vault is Escapable {
...
PUSH [tag1]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
PUSH1 0x0		contract Vault is Escapable {
...
CALLDATALOAD			contract Vault is Escapable {
...
PUSH29 0x100000000000000000000000000000000000000000000000000000000		contract Vault is Escapable {
...
SWAP1			contract Vault is Escapable {
...
DIV			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xB2E7423		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag2]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x1554611F		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag3]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x1E891C0A		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag4]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x681617C7		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag5]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x68B8C5A1		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag6]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x793C0FD4		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag7]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x8422927D		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag8]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x846A5DDE		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag9]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x8DA5CB5B		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag10]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x8E637A33		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag11]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0x92E4B8A4		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag12]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xA0927A6A		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag13]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xA3912EC8		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag14]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xA6F9DAE1		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag15]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xB2CA3EC4		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag16]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xBB2A51D1		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag17]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xC7238AF7		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag18]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xD085835A		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag19]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xD8528AF0		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag20]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xDA4793AC		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag21]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xEA8A66C7		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag22]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
DUP1			contract Vault is Escapable {
...
PUSH4 0xF17F6F8A		contract Vault is Escapable {
...
EQ			contract Vault is Escapable {
...
PUSH [tag23]		contract Vault is Escapable {
...
JUMPI			contract Vault is Escapable {
...
tag1
 
JUMPDEST		contract Vault is Escapable {
...
PUSH [tag24]		contract Vault is Escapable {
...
tag25
 
JUMPDEST		function 
(
)
 payable {
...
PUSH [tag27]		receiveEther
(
)
PUSH [tag28]		receiveEther
JUMP	[in]		receiveEther
(
)
tag27
 
JUMPDEST		receiveEther
(
)
tag26
 
JUMPDEST		function 
(
)
 payable {
...
JUMP	[out]		function 
(
)
 payable {
...
tag24
 
JUMPDEST		contract Vault is Escapable {
...
STOP			contract Vault is Escapable {
...
tag2
 
JUMPDEST		uint public maxSecurityGuardDelay
CALLVALUE			uint public maxSecurityGuardDelay
PUSH [ErrorTag]		uint public maxSecurityGuardDelay
JUMPI			uint public maxSecurityGuardDelay
PUSH [tag29]		uint public maxSecurityGuardDelay
PUSH [tag30]		uint public maxSecurityGuardDelay
JUMP			uint public maxSecurityGuardDelay
tag29
 
JUMPDEST		uint public maxSecurityGuardDelay
PUSH1 0x40		uint public maxSecurityGuardDelay
MLOAD			uint public maxSecurityGuardDelay
DUP1			uint public maxSecurityGuardDelay
DUP3			uint public maxSecurityGuardDelay
DUP2			uint public maxSecurityGuardDelay
MSTORE			uint public maxSecurityGuardDelay
PUSH1 0x20		uint public maxSecurityGuardDelay
ADD			uint public maxSecurityGuardDelay
SWAP2			uint public maxSecurityGuardDelay
POP			uint public maxSecurityGuardDelay
POP			uint public maxSecurityGuardDelay
PUSH1 0x40		uint public maxSecurityGuardDelay
MLOAD			uint public maxSecurityGuardDelay
DUP1			uint public maxSecurityGuardDelay
SWAP2			uint public maxSecurityGuardDelay
SUB			uint public maxSecurityGuardDelay
SWAP1			uint public maxSecurityGuardDelay
RETURN			uint public maxSecurityGuardDelay
tag3
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
CALLVALUE			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [ErrorTag]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMPI			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag31]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag32]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag31
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
STOP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag4
 
JUMPDEST		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
CALLVALUE			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH [ErrorTag]		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
JUMPI			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH [tag33]		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH1 0x4		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
DUP1			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
DUP1			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
CALLDATALOAD			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
SWAP1			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH1 0x20		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
ADD			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
SWAP1			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
SWAP2			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
SWAP1			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
POP			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
POP			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH [tag34]		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
JUMP			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
tag33
 
JUMPDEST		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
STOP			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
tag5
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
CALLVALUE			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [ErrorTag]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMPI			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag35]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x4		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
DUP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
DUP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
CALLDATALOAD			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x20		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
ADD			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP2			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
SWAP1			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH [tag36]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag35
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
STOP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag6
 
JUMPDEST		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
CALLVALUE			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH [ErrorTag]		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
JUMPI			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH [tag37]		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH [tag38]		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
JUMP			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
tag37
 
JUMPDEST		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH1 0x40		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
MLOAD			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
DUP1			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
DUP3			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
DUP2			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
MSTORE			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH1 0x20		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
ADD			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
SWAP2			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
POP			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
POP			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH1 0x40		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
MLOAD			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
DUP1			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
SWAP2			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
SUB			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
SWAP1			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
RETURN			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
tag7
 
JUMPDEST		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
CALLVALUE			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH [ErrorTag]		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
JUMPI			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH [tag39]		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH1 0x4		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
DUP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
DUP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
CALLDATALOAD			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH1 0x20		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
ADD			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP2			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
DUP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
CALLDATALOAD			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH1 0x20		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
ADD			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP2			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
SWAP1			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
POP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
POP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH [tag40]		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
JUMP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
tag39
 
JUMPDEST		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
STOP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
tag8
 
JUMPDEST		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
CALLVALUE			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH [ErrorTag]		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
JUMPI			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH [tag41]		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH1 0x4		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
DUP1			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
DUP1			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
CALLDATALOAD			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
SWAP1			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH1 0x20		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
ADD			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
SWAP1			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
SWAP2			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
SWAP1			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
POP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
POP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH [tag42]		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
JUMP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
tag41
 
JUMPDEST		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
STOP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
tag9
 
JUMPDEST		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
CALLVALUE			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH [ErrorTag]		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
JUMPI			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH [tag43]		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH1 0x4		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
DUP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
DUP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
CALLDATALOAD			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH1 0x20		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
ADD			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP2			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
DUP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
CALLDATALOAD			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH1 0x20		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
ADD			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP2			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
SWAP1			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
POP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
POP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH [tag44]		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
JUMP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
tag43
 
JUMPDEST		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
STOP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
tag10
 
JUMPDEST		address public owner
CALLVALUE			address public owner
PUSH [ErrorTag]		address public owner
JUMPI			address public owner
PUSH [tag45]		address public owner
PUSH [tag46]		address public owner
JUMP			address public owner
tag45
 
JUMPDEST		address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
DUP3			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
MSTORE			address public owner
PUSH1 0x20		address public owner
ADD			address public owner
SWAP2			address public owner
POP			address public owner
POP			address public owner
PUSH1 0x40		address public owner
MLOAD			address public owner
DUP1			address public owner
SWAP2			address public owner
SUB			address public owner
SWAP1			address public owner
RETURN			address public owner
tag11
 
JUMPDEST		function authorizePayment
(
...
CALLVALUE			function authorizePayment
(
...
PUSH [ErrorTag]		function authorizePayment
(
...
JUMPI			function authorizePayment
(
...
PUSH [tag47]		function authorizePayment
(
...
PUSH1 0x4		function authorizePayment
(
...
DUP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
CALLDATALOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP3			function authorizePayment
(
...
ADD			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
CALLDATALOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
PUSH1 0x1F		function authorizePayment
(
...
ADD			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
DUP1			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
DIV			function authorizePayment
(
...
MUL			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
PUSH1 0x40		function authorizePayment
(
...
MLOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP2			function authorizePayment
(
...
ADD			function authorizePayment
(
...
PUSH1 0x40		function authorizePayment
(
...
MSTORE			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
SWAP4			function authorizePayment
(
...
SWAP3			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP2			function authorizePayment
(
...
DUP2			function authorizePayment
(
...
MSTORE			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
DUP4			function authorizePayment
(
...
DUP4			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
DUP3			function authorizePayment
(
...
DUP5			function authorizePayment
(
...
CALLDATACOPY			function authorizePayment
(
...
DUP3			function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
CALLDATALOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
CALLDATALOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
CALLDATALOAD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
PUSH [tag48]		function authorizePayment
(
...
JUMP			function authorizePayment
(
...
tag47
 
JUMPDEST		function authorizePayment
(
...
PUSH1 0x40		function authorizePayment
(
...
MLOAD			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
DUP3			function authorizePayment
(
...
DUP2			function authorizePayment
(
...
MSTORE			function authorizePayment
(
...
PUSH1 0x20		function authorizePayment
(
...
ADD			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
PUSH1 0x40		function authorizePayment
(
...
MLOAD			function authorizePayment
(
...
DUP1			function authorizePayment
(
...
SWAP2			function authorizePayment
(
...
SUB			function authorizePayment
(
...
SWAP1			function authorizePayment
(
...
RETURN			function authorizePayment
(
...
tag12
 
JUMPDEST		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
CALLVALUE			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH [ErrorTag]		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
JUMPI			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH [tag49]		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH1 0x4		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
DUP1			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
DUP1			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
CALLDATALOAD			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
SWAP1			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH1 0x20		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
ADD			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
SWAP1			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
SWAP2			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
SWAP1			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
POP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
POP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH [tag50]		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
JUMP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
tag49
 
JUMPDEST		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
STOP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
tag13
 
JUMPDEST		Payment[] public authorizedPayments
CALLVALUE			Payment[] public authorizedPayments
PUSH [ErrorTag]		Payment[] public authorizedPayments
JUMPI			Payment[] public authorizedPayments
PUSH [tag51]		Payment[] public authorizedPayments
PUSH1 0x4		Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
CALLDATALOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
PUSH [tag52]		Payment[] public authorizedPayments
JUMP			Payment[] public authorizedPayments
tag51
 
JUMPDEST		Payment[] public authorizedPayments
PUSH1 0x40		Payment[] public authorizedPayments
MLOAD			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP10			Payment[] public authorizedPayments
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP9			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP8			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP7			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP6			Payment[] public authorizedPayments
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP5			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP4			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP3			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
SUB			Payment[] public authorizedPayments
DUP3			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
DUP11			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
MUL			Payment[] public authorizedPayments
SUB			Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
PUSH1 0x2		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
MUL			Payment[] public authorizedPayments
SUB			Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
PUSH1 0x2		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
PUSH [tag53]		Payment[] public authorizedPayments
JUMPI			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x1F		Payment[] public authorizedPayments
LT			Payment[] public authorizedPayments
PUSH [tag54]		Payment[] public authorizedPayments
JUMPI			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
DUP4			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
MUL			Payment[] public authorizedPayments
DUP4			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
PUSH [tag53]		Payment[] public authorizedPayments
JUMP			Payment[] public authorizedPayments
tag54
 
JUMPDEST		Payment[] public authorizedPayments
DUP3			Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
SHA3			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
tag55
 
JUMPDEST		Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
DUP4			Payment[] public authorizedPayments
GT			Payment[] public authorizedPayments
PUSH [tag55]		Payment[] public authorizedPayments
JUMPI			Payment[] public authorizedPayments
DUP3			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SUB			Payment[] public authorizedPayments
PUSH1 0x1F		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
DUP3			Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
tag53
 
JUMPDEST		Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
SWAP10			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
PUSH1 0x40		Payment[] public authorizedPayments
MLOAD			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
SUB			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
RETURN			Payment[] public authorizedPayments
tag14
 
JUMPDEST		function receiveEther
(
)
 payable {
...
PUSH [tag56]		function receiveEther
(
)
 payable {
...
PUSH [tag28]		function receiveEther
(
)
 payable {
...
JUMP			function receiveEther
(
)
 payable {
...
tag56
 
JUMPDEST		function receiveEther
(
)
 payable {
...
STOP			function receiveEther
(
)
 payable {
...
tag15
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLVALUE			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [ErrorTag]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMPI			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag57]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x4		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
DUP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
CALLDATALOAD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x20		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
ADD			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP2			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
SWAP1			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH [tag58]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag57
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
STOP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag16
 
JUMPDEST		address public securityGuard
CALLVALUE			address public securityGuard
PUSH [ErrorTag]		address public securityGuard
JUMPI			address public securityGuard
PUSH [tag59]		address public securityGuard
PUSH [tag60]		address public securityGuard
JUMP			address public securityGuard
tag59
 
JUMPDEST		address public securityGuard
PUSH1 0x40		address public securityGuard
MLOAD			address public securityGuard
DUP1			address public securityGuard
DUP3			address public securityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public securityGuard
AND			address public securityGuard
DUP2			address public securityGuard
MSTORE			address public securityGuard
PUSH1 0x20		address public securityGuard
ADD			address public securityGuard
SWAP2			address public securityGuard
POP			address public securityGuard
POP			address public securityGuard
PUSH1 0x40		address public securityGuard
MLOAD			address public securityGuard
DUP1			address public securityGuard
SWAP2			address public securityGuard
SUB			address public securityGuard
SWAP1			address public securityGuard
RETURN			address public securityGuard
tag17
 
JUMPDEST		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
CALLVALUE			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH [ErrorTag]		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
JUMPI			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH [tag61]		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH1 0x4		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
DUP1			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
DUP1			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
CALLDATALOAD			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
SWAP1			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH1 0x20		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
ADD			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
SWAP1			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
SWAP2			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
SWAP1			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
POP			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
POP			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH [tag62]		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
JUMP			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
tag61
 
JUMPDEST		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
STOP			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
tag18
 
JUMPDEST		address public escapeDestination
CALLVALUE			address public escapeDestination
PUSH [ErrorTag]		address public escapeDestination
JUMPI			address public escapeDestination
PUSH [tag63]		address public escapeDestination
PUSH [tag64]		address public escapeDestination
JUMP			address public escapeDestination
tag63
 
JUMPDEST		address public escapeDestination
PUSH1 0x40		address public escapeDestination
MLOAD			address public escapeDestination
DUP1			address public escapeDestination
DUP3			address public escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeDestination
AND			address public escapeDestination
DUP2			address public escapeDestination
MSTORE			address public escapeDestination
PUSH1 0x20		address public escapeDestination
ADD			address public escapeDestination
SWAP2			address public escapeDestination
POP			address public escapeDestination
POP			address public escapeDestination
PUSH1 0x40		address public escapeDestination
MLOAD			address public escapeDestination
DUP1			address public escapeDestination
SWAP2			address public escapeDestination
SUB			address public escapeDestination
SWAP1			address public escapeDestination
RETURN			address public escapeDestination
tag19
 
JUMPDEST		uint public timeLock
CALLVALUE			uint public timeLock
PUSH [ErrorTag]		uint public timeLock
JUMPI			uint public timeLock
PUSH [tag65]		uint public timeLock
PUSH [tag66]		uint public timeLock
JUMP			uint public timeLock
tag65
 
JUMPDEST		uint public timeLock
PUSH1 0x40		uint public timeLock
MLOAD			uint public timeLock
DUP1			uint public timeLock
DUP3			uint public timeLock
DUP2			uint public timeLock
MSTORE			uint public timeLock
PUSH1 0x20		uint public timeLock
ADD			uint public timeLock
SWAP2			uint public timeLock
POP			uint public timeLock
POP			uint public timeLock
PUSH1 0x40		uint public timeLock
MLOAD			uint public timeLock
DUP1			uint public timeLock
SWAP2			uint public timeLock
SUB			uint public timeLock
SWAP1			uint public timeLock
RETURN			uint public timeLock
tag20
 
JUMPDEST		mapping 
(
address => bool
)
 public allowedSpenders
CALLVALUE			mapping 
(
address => bool
)
 public allowedSpenders
PUSH [ErrorTag]		mapping 
(
address => bool
)
 public allowedSpenders
JUMPI			mapping 
(
address => bool
)
 public allowedSpenders
PUSH [tag67]		mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x4		mapping 
(
address => bool
)
 public allowedSpenders
DUP1			mapping 
(
address => bool
)
 public allowedSpenders
DUP1			mapping 
(
address => bool
)
 public allowedSpenders
CALLDATALOAD			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x20		mapping 
(
address => bool
)
 public allowedSpenders
ADD			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
SWAP2			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
POP			mapping 
(
address => bool
)
 public allowedSpenders
POP			mapping 
(
address => bool
)
 public allowedSpenders
PUSH [tag68]		mapping 
(
address => bool
)
 public allowedSpenders
JUMP			mapping 
(
address => bool
)
 public allowedSpenders
tag67
 
JUMPDEST		mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x40		mapping 
(
address => bool
)
 public allowedSpenders
MLOAD			mapping 
(
address => bool
)
 public allowedSpenders
DUP1			mapping 
(
address => bool
)
 public allowedSpenders
DUP3			mapping 
(
address => bool
)
 public allowedSpenders
ISZERO			mapping 
(
address => bool
)
 public allowedSpenders
ISZERO			mapping 
(
address => bool
)
 public allowedSpenders
DUP2			mapping 
(
address => bool
)
 public allowedSpenders
MSTORE			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x20		mapping 
(
address => bool
)
 public allowedSpenders
ADD			mapping 
(
address => bool
)
 public allowedSpenders
SWAP2			mapping 
(
address => bool
)
 public allowedSpenders
POP			mapping 
(
address => bool
)
 public allowedSpenders
POP			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x40		mapping 
(
address => bool
)
 public allowedSpenders
MLOAD			mapping 
(
address => bool
)
 public allowedSpenders
DUP1			mapping 
(
address => bool
)
 public allowedSpenders
SWAP2			mapping 
(
address => bool
)
 public allowedSpenders
SUB			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
RETURN			mapping 
(
address => bool
)
 public allowedSpenders
tag21
 
JUMPDEST		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
CALLVALUE			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH [ErrorTag]		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
JUMPI			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH [tag69]		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH1 0x4		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
DUP1			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
DUP1			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
CALLDATALOAD			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
SWAP1			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH1 0x20		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
ADD			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
SWAP1			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
SWAP2			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
SWAP1			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
POP			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
POP			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH [tag70]		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
JUMP			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
tag69
 
JUMPDEST		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
STOP			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
tag22
 
JUMPDEST		uint public absoluteMinTimeLock
CALLVALUE			uint public absoluteMinTimeLock
PUSH [ErrorTag]		uint public absoluteMinTimeLock
JUMPI			uint public absoluteMinTimeLock
PUSH [tag71]		uint public absoluteMinTimeLock
PUSH [tag72]		uint public absoluteMinTimeLock
JUMP			uint public absoluteMinTimeLock
tag71
 
JUMPDEST		uint public absoluteMinTimeLock
PUSH1 0x40		uint public absoluteMinTimeLock
MLOAD			uint public absoluteMinTimeLock
DUP1			uint public absoluteMinTimeLock
DUP3			uint public absoluteMinTimeLock
DUP2			uint public absoluteMinTimeLock
MSTORE			uint public absoluteMinTimeLock
PUSH1 0x20		uint public absoluteMinTimeLock
ADD			uint public absoluteMinTimeLock
SWAP2			uint public absoluteMinTimeLock
POP			uint public absoluteMinTimeLock
POP			uint public absoluteMinTimeLock
PUSH1 0x40		uint public absoluteMinTimeLock
MLOAD			uint public absoluteMinTimeLock
DUP1			uint public absoluteMinTimeLock
SWAP2			uint public absoluteMinTimeLock
SUB			uint public absoluteMinTimeLock
SWAP1			uint public absoluteMinTimeLock
RETURN			uint public absoluteMinTimeLock
tag23
 
JUMPDEST		address public escapeCaller
CALLVALUE			address public escapeCaller
PUSH [ErrorTag]		address public escapeCaller
JUMPI			address public escapeCaller
PUSH [tag73]		address public escapeCaller
PUSH [tag74]		address public escapeCaller
JUMP			address public escapeCaller
tag73
 
JUMPDEST		address public escapeCaller
PUSH1 0x40		address public escapeCaller
MLOAD			address public escapeCaller
DUP1			address public escapeCaller
DUP3			address public escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeCaller
AND			address public escapeCaller
DUP2			address public escapeCaller
MSTORE			address public escapeCaller
PUSH1 0x20		address public escapeCaller
ADD			address public escapeCaller
SWAP2			address public escapeCaller
POP			address public escapeCaller
POP			address public escapeCaller
PUSH1 0x40		address public escapeCaller
MLOAD			address public escapeCaller
DUP1			address public escapeCaller
SWAP2			address public escapeCaller
SUB			address public escapeCaller
SWAP1			address public escapeCaller
RETURN			address public escapeCaller
tag28
 
JUMPDEST		function receiveEther
(
)
 payable {
...
PUSH32 0x1E57E3BB474320BE3D2C77138F75B7C3941292D647F5F9634E33A8E94E0E069B		EtherReceived
(
msg.sender
 msg.value
)
CALLER			msg.sender
CALLVALUE			msg.value
PUSH1 0x40		EtherReceived
(
msg.sender
 msg.value
)
MLOAD			EtherReceived
(
msg.sender
 msg.value
)
DUP1			EtherReceived
(
msg.sender
 msg.value
)
DUP4			EtherReceived
(
msg.sender
 msg.value
)
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		EtherReceived
(
msg.sender
 msg.value
)
AND			EtherReceived
(
msg.sender
 msg.value
)
DUP2			EtherReceived
(
msg.sender
 msg.value
)
MSTORE			EtherReceived
(
msg.sender
 msg.value
)
PUSH1 0x20		EtherReceived
(
msg.sender
 msg.value
)
ADD			EtherReceived
(
msg.sender
 msg.value
)
DUP3			EtherReceived
(
msg.sender
 msg.value
)
DUP2			EtherReceived
(
msg.sender
 msg.value
)
MSTORE			EtherReceived
(
msg.sender
 msg.value
)
PUSH1 0x20		EtherReceived
(
msg.sender
 msg.value
)
ADD			EtherReceived
(
msg.sender
 msg.value
)
SWAP3			EtherReceived
(
msg.sender
 msg.value
)
POP			EtherReceived
(
msg.sender
 msg.value
)
POP			EtherReceived
(
msg.sender
 msg.value
)
POP			EtherReceived
(
msg.sender
 msg.value
)
PUSH1 0x40		EtherReceived
(
msg.sender
 msg.value
)
MLOAD			EtherReceived
(
msg.sender
 msg.value
)
DUP1			EtherReceived
(
msg.sender
 msg.value
)
SWAP2			EtherReceived
(
msg.sender
 msg.value
)
SUB			EtherReceived
(
msg.sender
 msg.value
)
SWAP1			EtherReceived
(
msg.sender
 msg.value
)
LOG1			EtherReceived
(
msg.sender
 msg.value
)
tag75
 
JUMPDEST		function receiveEther
(
)
 payable {
...
JUMP	[out]		function receiveEther
(
)
 payable {
...
tag30
 
JUMPDEST		uint public maxSecurityGuardDelay
PUSH1 0x7		uint public maxSecurityGuardDelay
SLOAD			uint public maxSecurityGuardDelay
DUP2			uint public maxSecurityGuardDelay
JUMP	[out]		uint public maxSecurityGuardDelay
tag32
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x0		uint total
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
SWAP1			escapeCaller
SLOAD			escapeCaller
SWAP1			escapeCaller
PUSH2 0x100		escapeCaller
EXP			escapeCaller
SWAP1			escapeCaller
DIV			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller
AND			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
EQ			msg.sender != escapeCaller
ISZERO			msg.sender != escapeCaller
DUP1			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH [tag77]		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
JUMPI			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
POP			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
tag77
 
JUMPDEST		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [tag78]		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
JUMPI			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [ErrorTag]		throw
JUMP			throw
tag78
 
JUMPDEST		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
ADDRESS			this
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		this.balance
AND			this.balance
BALANCE			this.balance
SWAP1			uint total = this.balance
POP			uint total = this.balance
PUSH1 0x2		escapeDestination
PUSH1 0x0		escapeDestination
SWAP1			escapeDestination
SLOAD			escapeDestination
SWAP1			escapeDestination
PUSH2 0x100		escapeDestination
EXP			escapeDestination
SWAP1			escapeDestination
DIV			escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination
AND			escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeDestination.send
AND			escapeDestination.send
PUSH2 0x8FC		escapeDestination.send
(
total
)
DUP3			total
SWAP1			escapeDestination.send
(
total
)
DUP2			escapeDestination.send
(
total
)
ISZERO			escapeDestination.send
(
total
)
MUL			escapeDestination.send
(
total
)
SWAP1			escapeDestination.send
(
total
)
PUSH1 0x40		escapeDestination.send
(
total
)
MLOAD			escapeDestination.send
(
total
)
DUP1			escapeDestination.send
(
total
)
SWAP1			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
PUSH1 0x0		escapeDestination.send
(
total
)
PUSH1 0x40		escapeDestination.send
(
total
)
MLOAD			escapeDestination.send
(
total
)
DUP1			escapeDestination.send
(
total
)
DUP4			escapeDestination.send
(
total
)
SUB			escapeDestination.send
(
total
)
DUP2			escapeDestination.send
(
total
)
DUP6			escapeDestination.send
(
total
)
DUP9			escapeDestination.send
(
total
)
DUP9			escapeDestination.send
(
total
)
CALL			escapeDestination.send
(
total
)
SWAP4			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
POP			escapeDestination.send
(
total
)
ISZERO			!escapeDestination.send
(
total
)
ISZERO			if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH [tag80]		if 
(
!escapeDestination.send
(
total
)
)
 {
...
JUMPI			if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH [ErrorTag]		throw
JUMP			throw
tag80
 
JUMPDEST		if 
(
!escapeDestination.send
(
total
)
)
 {
...
PUSH32 0x2A3EF566AE160E22F4C547C4A751E6DABD0C266B98B091A909EB729B609EA186		EscapeCalled
(
total
)
DUP2			total
PUSH1 0x40		EscapeCalled
(
total
)
MLOAD			EscapeCalled
(
total
)
DUP1			EscapeCalled
(
total
)
DUP3			EscapeCalled
(
total
)
DUP2			EscapeCalled
(
total
)
MSTORE			EscapeCalled
(
total
)
PUSH1 0x20		EscapeCalled
(
total
)
ADD			EscapeCalled
(
total
)
SWAP2			EscapeCalled
(
total
)
POP			EscapeCalled
(
total
)
POP			EscapeCalled
(
total
)
PUSH1 0x40		EscapeCalled
(
total
)
MLOAD			EscapeCalled
(
total
)
DUP1			EscapeCalled
(
total
)
SWAP2			EscapeCalled
(
total
)
SUB			EscapeCalled
(
total
)
SWAP1			EscapeCalled
(
total
)
LOG1			EscapeCalled
(
total
)
tag79
 
JUMPDEST		_
tag76
 
JUMPDEST		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
POP			function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
JUMP	[out]		function escapeHatch
(
)
 onlyEscapeCallerOrOwner {
...
tag34
 
JUMPDEST		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag82]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag82
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
PUSH1 0x5		absoluteMinTimeLock
SLOAD			absoluteMinTimeLock
DUP2			_newTimeLock
LT			_newTimeLock < absoluteMinTimeLock
ISZERO			if 
(
_newTimeLock < absoluteMinTimeLock
)
 throw
PUSH [tag84]		if 
(
_newTimeLock < absoluteMinTimeLock
)
 throw
JUMPI			if 
(
_newTimeLock < absoluteMinTimeLock
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag84
 
JUMPDEST		if 
(
_newTimeLock < absoluteMinTimeLock
)
 throw
DUP1			_newTimeLock
PUSH1 0x6		timeLock
DUP2			timeLock = _newTimeLock
SWAP1			timeLock = _newTimeLock
SSTORE			timeLock = _newTimeLock
POP			timeLock = _newTimeLock
tag83
 
JUMPDEST		_
tag81
 
JUMPDEST		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
POP			function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
JUMP	[out]		function setTimelock
(
uint _newTimeLock
)
 onlyOwner {
...
tag36
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
SWAP1			escapeCaller
SLOAD			escapeCaller
SWAP1			escapeCaller
PUSH2 0x100		escapeCaller
EXP			escapeCaller
SWAP1			escapeCaller
DIV			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller
AND			escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != escapeCaller
AND			msg.sender != escapeCaller
EQ			msg.sender != escapeCaller
ISZERO			msg.sender != escapeCaller
DUP1			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH [tag86]		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
JUMPI			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
POP			
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
tag86
 
JUMPDEST		
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
ISZERO			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [tag87]		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
JUMPI			if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
PUSH [ErrorTag]		throw
JUMP			throw
tag87
 
JUMPDEST		if 
(
(
msg.sender != escapeCaller
)
&&
(
msg.sender != owner
)
)
...
DUP1			_newEscapeCaller
PUSH1 0x1		escapeCaller
PUSH1 0x0		escapeCaller
PUSH2 0x100		escapeCaller = _newEscapeCaller
EXP			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
SLOAD			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
NOT			escapeCaller = _newEscapeCaller
AND			escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
DUP4			escapeCaller = _newEscapeCaller
PUSH13 0x1000000000000000000000000		escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
DUP2			escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
DIV			escapeCaller = _newEscapeCaller
MUL			escapeCaller = _newEscapeCaller
OR			escapeCaller = _newEscapeCaller
SWAP1			escapeCaller = _newEscapeCaller
SSTORE			escapeCaller = _newEscapeCaller
POP			escapeCaller = _newEscapeCaller
tag88
 
JUMPDEST		_
tag85
 
JUMPDEST		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
POP			function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
JUMP	[out]		function changeEscapeCaller
(
address _newEscapeCaller
)
 onlyEscapeCallerOrOwner {
...
tag38
 
JUMPDEST		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
PUSH1 0x0		uint
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length
SLOAD			authorizedPayments.length
SWAP1			authorizedPayments.length
POP			authorizedPayments.length
SWAP1			return authorizedPayments.length
POP			return authorizedPayments.length
tag89
 
JUMPDEST		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
SWAP1			function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
JUMP	[out]		function numberOfAuthorizedPayments
(
)
 constant returns 
(
uint
)
 {
...
tag40
 
JUMPDEST		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag91]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag91
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_authorize
PUSH1 0x8		allowedSpenders
PUSH1 0x0		allowedSpenders[_spender]
DUP5			_spender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowedSpenders[_spender]
AND			allowedSpenders[_spender]
DUP2			allowedSpenders[_spender]
MSTORE			allowedSpenders[_spender]
PUSH1 0x20		allowedSpenders[_spender]
ADD			allowedSpenders[_spender]
SWAP1			allowedSpenders[_spender]
DUP2			allowedSpenders[_spender]
MSTORE			allowedSpenders[_spender]
PUSH1 0x20		allowedSpenders[_spender]
ADD			allowedSpenders[_spender]
PUSH1 0x0		allowedSpenders[_spender]
SHA3			allowedSpenders[_spender]
PUSH1 0x0		allowedSpenders[_spender]
PUSH2 0x100		allowedSpenders[_spender] = _authorize
EXP			allowedSpenders[_spender] = _authorize
DUP2			allowedSpenders[_spender] = _authorize
SLOAD			allowedSpenders[_spender] = _authorize
DUP2			allowedSpenders[_spender] = _authorize
PUSH1 0xFF		allowedSpenders[_spender] = _authorize
MUL			allowedSpenders[_spender] = _authorize
NOT			allowedSpenders[_spender] = _authorize
AND			allowedSpenders[_spender] = _authorize
SWAP1			allowedSpenders[_spender] = _authorize
DUP4			allowedSpenders[_spender] = _authorize
PUSH32 0x100000000000000000000000000000000000000000000000000000000000000		allowedSpenders[_spender] = _authorize
SWAP1			allowedSpenders[_spender] = _authorize
DUP2			allowedSpenders[_spender] = _authorize
MUL			allowedSpenders[_spender] = _authorize
DIV			allowedSpenders[_spender] = _authorize
MUL			allowedSpenders[_spender] = _authorize
OR			allowedSpenders[_spender] = _authorize
SWAP1			allowedSpenders[_spender] = _authorize
SSTORE			allowedSpenders[_spender] = _authorize
POP			allowedSpenders[_spender] = _authorize
PUSH32 0x801F568EFBC3346A6AE3D0C3EB335A30D64E0D3CF08F1C39626D62CD5C827281		SpenderAuthorization
(
_spender
 _authorize
)
DUP3			_spender
DUP3			_authorize
PUSH1 0x40		SpenderAuthorization
(
_spender
 _authorize
)
MLOAD			SpenderAuthorization
(
_spender
 _authorize
)
DUP1			SpenderAuthorization
(
_spender
 _authorize
)
DUP4			SpenderAuthorization
(
_spender
 _authorize
)
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		SpenderAuthorization
(
_spender
 _authorize
)
AND			SpenderAuthorization
(
_spender
 _authorize
)
DUP2			SpenderAuthorization
(
_spender
 _authorize
)
MSTORE			SpenderAuthorization
(
_spender
 _authorize
)
PUSH1 0x20		SpenderAuthorization
(
_spender
 _authorize
)
ADD			SpenderAuthorization
(
_spender
 _authorize
)
DUP3			SpenderAuthorization
(
_spender
 _authorize
)
ISZERO			SpenderAuthorization
(
_spender
 _authorize
)
ISZERO			SpenderAuthorization
(
_spender
 _authorize
)
DUP2			SpenderAuthorization
(
_spender
 _authorize
)
MSTORE			SpenderAuthorization
(
_spender
 _authorize
)
PUSH1 0x20		SpenderAuthorization
(
_spender
 _authorize
)
ADD			SpenderAuthorization
(
_spender
 _authorize
)
SWAP3			SpenderAuthorization
(
_spender
 _authorize
)
POP			SpenderAuthorization
(
_spender
 _authorize
)
POP			SpenderAuthorization
(
_spender
 _authorize
)
POP			SpenderAuthorization
(
_spender
 _authorize
)
PUSH1 0x40		SpenderAuthorization
(
_spender
 _authorize
)
MLOAD			SpenderAuthorization
(
_spender
 _authorize
)
DUP1			SpenderAuthorization
(
_spender
 _authorize
)
SWAP2			SpenderAuthorization
(
_spender
 _authorize
)
SUB			SpenderAuthorization
(
_spender
 _authorize
)
SWAP1			SpenderAuthorization
(
_spender
 _authorize
)
LOG1			SpenderAuthorization
(
_spender
 _authorize
)
tag92
 
JUMPDEST		_
tag90
 
JUMPDEST		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
POP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
POP			function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
JUMP	[out]		function authorizeSpender
(
address _spender
 bool _authorize
)
 onlyOwner {
...
tag42
 
JUMPDEST		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
PUSH1 0x0		Payment p
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag94]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag94
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length
SLOAD			authorizedPayments.length
SWAP1			authorizedPayments.length
POP			authorizedPayments.length
DUP3			_idPayment
LT			_idPayment >= authorizedPayments.length
ISZERO			_idPayment >= authorizedPayments.length
ISZERO			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [tag96]		if 
(
_idPayment >= authorizedPayments.length
)
 throw
JUMPI			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag96
 
JUMPDEST		if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH1 0x3		authorizedPayments
DUP3			_idPayment
DUP2			authorizedPayments[_idPayment]
SLOAD			authorizedPayments[_idPayment]
DUP2			authorizedPayments[_idPayment]
LT			authorizedPayments[_idPayment]
ISZERO			authorizedPayments[_idPayment]
PUSH [ErrorTag]		authorizedPayments[_idPayment]
JUMPI			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
MSTORE			authorizedPayments[_idPayment]
PUSH1 0x20		authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
SHA3			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x6		authorizedPayments[_idPayment]
MUL			authorizedPayments[_idPayment]
ADD			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
tag97
 
JUMPDEST		authorizedPayments[_idPayment]
POP			authorizedPayments[_idPayment]
SWAP1			Payment p = authorizedPayments[_idPayment]
POP			Payment p = authorizedPayments[_idPayment]
DUP1			p
PUSH1 0x3		p.canceled
ADD			p.canceled
PUSH1 0x0		p.canceled
SWAP1			p.canceled
SLOAD			p.canceled
SWAP1			p.canceled
PUSH2 0x100		p.canceled
EXP			p.canceled
SWAP1			p.canceled
DIV			p.canceled
PUSH1 0xFF		p.canceled
AND			p.canceled
ISZERO			if 
(
p.canceled
)
 throw
PUSH [tag98]		if 
(
p.canceled
)
 throw
JUMPI			if 
(
p.canceled
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag98
 
JUMPDEST		if 
(
p.canceled
)
 throw
DUP1			p
PUSH1 0x3		p.paid
ADD			p.paid
PUSH1 0x1		p.paid
SWAP1			p.paid
SLOAD			p.paid
SWAP1			p.paid
PUSH2 0x100		p.paid
EXP			p.paid
SWAP1			p.paid
DIV			p.paid
PUSH1 0xFF		p.paid
AND			p.paid
ISZERO			if 
(
p.paid
)
 throw
PUSH [tag99]		if 
(
p.paid
)
 throw
JUMPI			if 
(
p.paid
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag99
 
JUMPDEST		if 
(
p.paid
)
 throw
PUSH1 0x1		true
DUP2			p
PUSH1 0x3		p.canceled
ADD			p.canceled
PUSH1 0x0		p.canceled
PUSH2 0x100		p.canceled = true
EXP			p.canceled = true
DUP2			p.canceled = true
SLOAD			p.canceled = true
DUP2			p.canceled = true
PUSH1 0xFF		p.canceled = true
MUL			p.canceled = true
NOT			p.canceled = true
AND			p.canceled = true
SWAP1			p.canceled = true
DUP4			p.canceled = true
PUSH32 0x100000000000000000000000000000000000000000000000000000000000000		p.canceled = true
SWAP1			p.canceled = true
DUP2			p.canceled = true
MUL			p.canceled = true
DIV			p.canceled = true
MUL			p.canceled = true
OR			p.canceled = true
SWAP1			p.canceled = true
SSTORE			p.canceled = true
POP			p.canceled = true
PUSH32 0xFDF197ED54809861DAFE0B4D391843652730AC67274C1E9E46DB7687DCCAA301		PaymentCanceled
(
_idPayment
)
DUP3			_idPayment
PUSH1 0x40		PaymentCanceled
(
_idPayment
)
MLOAD			PaymentCanceled
(
_idPayment
)
DUP1			PaymentCanceled
(
_idPayment
)
DUP3			PaymentCanceled
(
_idPayment
)
DUP2			PaymentCanceled
(
_idPayment
)
MSTORE			PaymentCanceled
(
_idPayment
)
PUSH1 0x20		PaymentCanceled
(
_idPayment
)
ADD			PaymentCanceled
(
_idPayment
)
SWAP2			PaymentCanceled
(
_idPayment
)
POP			PaymentCanceled
(
_idPayment
)
POP			PaymentCanceled
(
_idPayment
)
PUSH1 0x40		PaymentCanceled
(
_idPayment
)
MLOAD			PaymentCanceled
(
_idPayment
)
DUP1			PaymentCanceled
(
_idPayment
)
SWAP2			PaymentCanceled
(
_idPayment
)
SUB			PaymentCanceled
(
_idPayment
)
SWAP1			PaymentCanceled
(
_idPayment
)
LOG1			PaymentCanceled
(
_idPayment
)
tag95
 
JUMPDEST		_
tag93
 
JUMPDEST		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
POP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
POP			function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
JUMP	[out]		function cancelPayment
(
uint _idPayment
)
 onlyOwner {
...
tag44
 
JUMPDEST		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
PUSH1 0x0		Payment p
PUSH1 0x4		securityGuard
PUSH1 0x0		securityGuard
SWAP1			securityGuard
SLOAD			securityGuard
SWAP1			securityGuard
PUSH2 0x100		securityGuard
EXP			securityGuard
SWAP1			securityGuard
DIV			securityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		securityGuard
AND			securityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != securityGuard
AND			msg.sender != securityGuard
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != securityGuard
AND			msg.sender != securityGuard
EQ			msg.sender != securityGuard
ISZERO			msg.sender != securityGuard
ISZERO			if 
(
msg.sender != securityGuard
)
 throw
PUSH [tag101]		if 
(
msg.sender != securityGuard
)
 throw
JUMPI			if 
(
msg.sender != securityGuard
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag101
 
JUMPDEST		if 
(
msg.sender != securityGuard
)
 throw
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length
SLOAD			authorizedPayments.length
SWAP1			authorizedPayments.length
POP			authorizedPayments.length
DUP4			_idPayment
LT			_idPayment >= authorizedPayments.length
ISZERO			_idPayment >= authorizedPayments.length
ISZERO			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [tag103]		if 
(
_idPayment >= authorizedPayments.length
)
 throw
JUMPI			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag103
 
JUMPDEST		if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH1 0x3		authorizedPayments
DUP4			_idPayment
DUP2			authorizedPayments[_idPayment]
SLOAD			authorizedPayments[_idPayment]
DUP2			authorizedPayments[_idPayment]
LT			authorizedPayments[_idPayment]
ISZERO			authorizedPayments[_idPayment]
PUSH [ErrorTag]		authorizedPayments[_idPayment]
JUMPI			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
MSTORE			authorizedPayments[_idPayment]
PUSH1 0x20		authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
SHA3			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x6		authorizedPayments[_idPayment]
MUL			authorizedPayments[_idPayment]
ADD			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
tag104
 
JUMPDEST		authorizedPayments[_idPayment]
POP			authorizedPayments[_idPayment]
SWAP1			Payment p = authorizedPayments[_idPayment]
POP			Payment p = authorizedPayments[_idPayment]
PUSH1 0x7		maxSecurityGuardDelay
SLOAD			maxSecurityGuardDelay
DUP3			_delay
DUP3			p
PUSH1 0x5		p.securityGuardDelay
ADD			p.securityGuardDelay
SLOAD			p.securityGuardDelay
ADD			p.securityGuardDelay + _delay
GT			p.securityGuardDelay + _delay > maxSecurityGuardDelay
DUP1			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
PUSH [tag105]		
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
JUMPI			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
POP			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
DUP1			p
PUSH1 0x3		p.paid
ADD			p.paid
PUSH1 0x1		p.paid
SWAP1			p.paid
SLOAD			p.paid
SWAP1			p.paid
PUSH2 0x100		p.paid
EXP			p.paid
SWAP1			p.paid
DIV			p.paid
PUSH1 0xFF		p.paid
AND			p.paid
tag105
 
JUMPDEST		
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
DUP1			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
PUSH [tag106]		
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
JUMPI			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
POP			
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
DUP1			p
PUSH1 0x3		p.canceled
ADD			p.canceled
PUSH1 0x0		p.canceled
SWAP1			p.canceled
SLOAD			p.canceled
SWAP1			p.canceled
PUSH2 0x100		p.canceled
EXP			p.canceled
SWAP1			p.canceled
DIV			p.canceled
PUSH1 0xFF		p.canceled
AND			p.canceled
tag106
 
JUMPDEST		
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
ISZERO			if 
(
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
PUSH [tag107]		if 
(
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
JUMPI			if 
(
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
PUSH [ErrorTag]		throw
JUMP			throw
tag107
 
JUMPDEST		if 
(
(
p.securityGuardDelay + _delay > maxSecurityGuardDelay
)
 ||
...
DUP2			_delay
DUP2			p
PUSH1 0x5		p.securityGuardDelay
ADD			p.securityGuardDelay
PUSH1 0x0		p.securityGuardDelay
DUP3			p.securityGuardDelay += _delay
DUP3			p.securityGuardDelay += _delay
SLOAD			p.securityGuardDelay += _delay
ADD			p.securityGuardDelay += _delay
SWAP3			p.securityGuardDelay += _delay
POP			p.securityGuardDelay += _delay
POP			p.securityGuardDelay += _delay
DUP2			p.securityGuardDelay += _delay
SWAP1			p.securityGuardDelay += _delay
SSTORE			p.securityGuardDelay += _delay
POP			p.securityGuardDelay += _delay
DUP2			_delay
DUP2			p
PUSH1 0x2		p.earliestPayTime
ADD			p.earliestPayTime
PUSH1 0x0		p.earliestPayTime
DUP3			p.earliestPayTime += _delay
DUP3			p.earliestPayTime += _delay
SLOAD			p.earliestPayTime += _delay
ADD			p.earliestPayTime += _delay
SWAP3			p.earliestPayTime += _delay
POP			p.earliestPayTime += _delay
POP			p.earliestPayTime += _delay
DUP2			p.earliestPayTime += _delay
SWAP1			p.earliestPayTime += _delay
SSTORE			p.earliestPayTime += _delay
POP			p.earliestPayTime += _delay
tag102
 
JUMPDEST		_
tag100
 
JUMPDEST		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
POP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
POP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
POP			function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
JUMP	[out]		function delayPayment
(
uint _idPayment
 uint _delay
)
 onlySecurityGuard {
...
tag46
 
JUMPDEST		address public owner
PUSH1 0x0		address public owner
PUSH1 0x0		address public owner
SWAP1			address public owner
SLOAD			address public owner
SWAP1			address public owner
PUSH2 0x100		address public owner
EXP			address public owner
SWAP1			address public owner
DIV			address public owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
AND			address public owner
DUP2			address public owner
JUMP	[out]		address public owner
tag48
 
JUMPDEST		function authorizePayment
(
...
PUSH1 0x0		uint
PUSH1 0x0		uint idPayment
PUSH1 0x0		Payment p
PUSH1 0x8		allowedSpenders
PUSH1 0x0		allowedSpenders[msg.sender]
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowedSpenders[msg.sender]
AND			allowedSpenders[msg.sender]
DUP2			allowedSpenders[msg.sender]
MSTORE			allowedSpenders[msg.sender]
PUSH1 0x20		allowedSpenders[msg.sender]
ADD			allowedSpenders[msg.sender]
SWAP1			allowedSpenders[msg.sender]
DUP2			allowedSpenders[msg.sender]
MSTORE			allowedSpenders[msg.sender]
PUSH1 0x20		allowedSpenders[msg.sender]
ADD			allowedSpenders[msg.sender]
PUSH1 0x0		allowedSpenders[msg.sender]
SHA3			allowedSpenders[msg.sender]
PUSH1 0x0		allowedSpenders[msg.sender]
SWAP1			allowedSpenders[msg.sender]
SLOAD			allowedSpenders[msg.sender]
SWAP1			allowedSpenders[msg.sender]
PUSH2 0x100		allowedSpenders[msg.sender]
EXP			allowedSpenders[msg.sender]
SWAP1			allowedSpenders[msg.sender]
DIV			allowedSpenders[msg.sender]
PUSH1 0xFF		allowedSpenders[msg.sender]
AND			allowedSpenders[msg.sender]
ISZERO			!allowedSpenders[msg.sender]
ISZERO			if 
(
!allowedSpenders[msg.sender] 
)
 throw
PUSH [tag109]		if 
(
!allowedSpenders[msg.sender] 
)
 throw
JUMPI			if 
(
!allowedSpenders[msg.sender] 
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag109
 
JUMPDEST		if 
(
!allowedSpenders[msg.sender] 
)
 throw
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length
SLOAD			authorizedPayments.length
SWAP1			authorizedPayments.length
POP			authorizedPayments.length
SWAP2			uint idPayment = authorizedPayments.length
POP			uint idPayment = authorizedPayments.length
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length++
SLOAD			authorizedPayments.length++
DUP1			authorizedPayments.length++
SWAP2			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
ADD			authorizedPayments.length++
DUP2			authorizedPayments.length++
SLOAD			authorizedPayments.length++
DUP2			authorizedPayments.length++
DUP4			authorizedPayments.length++
SSTORE			authorizedPayments.length++
DUP2			authorizedPayments.length++
DUP2			authorizedPayments.length++
ISZERO			authorizedPayments.length++
GT			authorizedPayments.length++
PUSH [tag110]		authorizedPayments.length++
JUMPI			authorizedPayments.length++
PUSH1 0x6		authorizedPayments.length++
MUL			authorizedPayments.length++
DUP2			authorizedPayments.length++
PUSH1 0x6		authorizedPayments.length++
MUL			authorizedPayments.length++
DUP4			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
MSTORE			authorizedPayments.length++
PUSH1 0x20		authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SHA3			authorizedPayments.length++
SWAP2			authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
SWAP2			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH [tag111]		authorizedPayments.length++
SWAP2			authorizedPayments.length++
SWAP1			authorizedPayments.length++
tag112
 
JUMPDEST		authorizedPayments.length++
DUP1			authorizedPayments.length++
DUP3			authorizedPayments.length++
GT			authorizedPayments.length++
ISZERO			authorizedPayments.length++
PUSH [tag113]		authorizedPayments.length++
JUMPI			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
DUP1			authorizedPayments.length++
SLOAD			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
DUP2			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
AND			authorizedPayments.length++
ISZERO			authorizedPayments.length++
PUSH2 0x100		authorizedPayments.length++
MUL			authorizedPayments.length++
SUB			authorizedPayments.length++
AND			authorizedPayments.length++
PUSH1 0x2		authorizedPayments.length++
SWAP1			authorizedPayments.length++
DIV			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
DUP3			authorizedPayments.length++
SSTORE			authorizedPayments.length++
DUP1			authorizedPayments.length++
PUSH1 0x1F		authorizedPayments.length++
LT			authorizedPayments.length++
PUSH [tag115]		authorizedPayments.length++
JUMPI			authorizedPayments.length++
POP			authorizedPayments.length++
PUSH [tag114]		authorizedPayments.length++
JUMP			authorizedPayments.length++
tag115
 
JUMPDEST		authorizedPayments.length++
PUSH1 0x1F		authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x20		authorizedPayments.length++
SWAP1			authorizedPayments.length++
DIV			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
MSTORE			authorizedPayments.length++
PUSH1 0x20		authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SHA3			authorizedPayments.length++
SWAP1			authorizedPayments.length++
DUP2			authorizedPayments.length++
ADD			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH [tag116]		authorizedPayments.length++
SWAP2			authorizedPayments.length++
SWAP1			authorizedPayments.length++
tag117
 
JUMPDEST		authorizedPayments.length++
DUP1			authorizedPayments.length++
DUP3			authorizedPayments.length++
GT			authorizedPayments.length++
ISZERO			authorizedPayments.length++
PUSH [tag118]		authorizedPayments.length++
JUMPI			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
DUP2			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
POP			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH [tag117]		authorizedPayments.length++
JUMP			authorizedPayments.length++
tag118
 
JUMPDEST		authorizedPayments.length++
POP			authorizedPayments.length++
SWAP1			authorizedPayments.length++
JUMP			authorizedPayments.length++
tag116
 
JUMPDEST		authorizedPayments.length++
tag114
 
JUMPDEST		authorizedPayments.length++
POP			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
PUSH2 0x100		authorizedPayments.length++
EXP			authorizedPayments.length++
DUP2			authorizedPayments.length++
SLOAD			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorizedPayments.length++
MUL			authorizedPayments.length++
NOT			authorizedPayments.length++
AND			authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x2		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x3		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
PUSH2 0x100		authorizedPayments.length++
EXP			authorizedPayments.length++
DUP2			authorizedPayments.length++
SLOAD			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH1 0xFF		authorizedPayments.length++
MUL			authorizedPayments.length++
NOT			authorizedPayments.length++
AND			authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x3		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x1		authorizedPayments.length++
PUSH2 0x100		authorizedPayments.length++
EXP			authorizedPayments.length++
DUP2			authorizedPayments.length++
SLOAD			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH1 0xFF		authorizedPayments.length++
MUL			authorizedPayments.length++
NOT			authorizedPayments.length++
AND			authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x3		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x2		authorizedPayments.length++
PUSH2 0x100		authorizedPayments.length++
EXP			authorizedPayments.length++
DUP2			authorizedPayments.length++
SLOAD			authorizedPayments.length++
SWAP1			authorizedPayments.length++
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorizedPayments.length++
MUL			authorizedPayments.length++
NOT			authorizedPayments.length++
AND			authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x4		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
PUSH1 0x5		authorizedPayments.length++
DUP3			authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH1 0x0		authorizedPayments.length++
SWAP1			authorizedPayments.length++
SSTORE			authorizedPayments.length++
POP			authorizedPayments.length++
PUSH1 0x6		authorizedPayments.length++
ADD			authorizedPayments.length++
PUSH [tag112]		authorizedPayments.length++
JUMP			authorizedPayments.length++
tag113
 
JUMPDEST		authorizedPayments.length++
POP			authorizedPayments.length++
SWAP1			authorizedPayments.length++
JUMP			authorizedPayments.length++
tag111
 
JUMPDEST		authorizedPayments.length++
tag110
 
JUMPDEST		authorizedPayments.length++
POP			authorizedPayments.length++
POP			authorizedPayments.length++
POP			authorizedPayments.length++
POP			authorizedPayments.length++
PUSH1 0x3		authorizedPayments
DUP3			idPayment
DUP2			authorizedPayments[idPayment]
SLOAD			authorizedPayments[idPayment]
DUP2			authorizedPayments[idPayment]
LT			authorizedPayments[idPayment]
ISZERO			authorizedPayments[idPayment]
PUSH [ErrorTag]		authorizedPayments[idPayment]
JUMPI			authorizedPayments[idPayment]
SWAP1			authorizedPayments[idPayment]
PUSH1 0x0		authorizedPayments[idPayment]
MSTORE			authorizedPayments[idPayment]
PUSH1 0x20		authorizedPayments[idPayment]
PUSH1 0x0		authorizedPayments[idPayment]
SHA3			authorizedPayments[idPayment]
SWAP1			authorizedPayments[idPayment]
PUSH1 0x6		authorizedPayments[idPayment]
MUL			authorizedPayments[idPayment]
ADD			authorizedPayments[idPayment]
PUSH1 0x0		authorizedPayments[idPayment]
tag119
 
JUMPDEST		authorizedPayments[idPayment]
POP			authorizedPayments[idPayment]
SWAP1			Payment p = authorizedPayments[idPayment]
POP			Payment p = authorizedPayments[idPayment]
CALLER			msg.sender
DUP2			p
PUSH1 0x1		p.spender
ADD			p.spender
PUSH1 0x0		p.spender
PUSH2 0x100		p.spender = msg.sender
EXP			p.spender = msg.sender
DUP2			p.spender = msg.sender
SLOAD			p.spender = msg.sender
DUP2			p.spender = msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.spender = msg.sender
MUL			p.spender = msg.sender
NOT			p.spender = msg.sender
AND			p.spender = msg.sender
SWAP1			p.spender = msg.sender
DUP4			p.spender = msg.sender
PUSH13 0x1000000000000000000000000		p.spender = msg.sender
SWAP1			p.spender = msg.sender
DUP2			p.spender = msg.sender
MUL			p.spender = msg.sender
DIV			p.spender = msg.sender
MUL			p.spender = msg.sender
OR			p.spender = msg.sender
SWAP1			p.spender = msg.sender
SSTORE			p.spender = msg.sender
POP			p.spender = msg.sender
PUSH1 0x6		timeLock
SLOAD			timeLock
DUP5			_paymentDelay
LT			_paymentDelay >= timeLock
ISZERO			_paymentDelay >= timeLock
PUSH [tag120]		_paymentDelay >= timeLock ?
...
JUMPI			_paymentDelay >= timeLock ?
...
PUSH1 0x6		timeLock
SLOAD			timeLock
TIMESTAMP			now
ADD			now + timeLock
PUSH [tag121]		_paymentDelay >= timeLock ?
...
JUMP			_paymentDelay >= timeLock ?
...
tag120
 
JUMPDEST		_paymentDelay >= timeLock ?
...
DUP4			_paymentDelay
TIMESTAMP			now
ADD			now + _paymentDelay
tag121
 
JUMPDEST		_paymentDelay >= timeLock ?
...
DUP2			p
PUSH1 0x2		p.earliestPayTime
ADD			p.earliestPayTime
DUP2			p.earliestPayTime = _paymentDelay >= timeLock ?
...
SWAP1			p.earliestPayTime = _paymentDelay >= timeLock ?
...
SSTORE			p.earliestPayTime = _paymentDelay >= timeLock ?
...
POP			p.earliestPayTime = _paymentDelay >= timeLock ?
...
DUP6			_recipient
DUP2			p
PUSH1 0x3		p.recipient
ADD			p.recipient
PUSH1 0x2		p.recipient
PUSH2 0x100		p.recipient = _recipient
EXP			p.recipient = _recipient
DUP2			p.recipient = _recipient
SLOAD			p.recipient = _recipient
DUP2			p.recipient = _recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient = _recipient
MUL			p.recipient = _recipient
NOT			p.recipient = _recipient
AND			p.recipient = _recipient
SWAP1			p.recipient = _recipient
DUP4			p.recipient = _recipient
PUSH13 0x1000000000000000000000000		p.recipient = _recipient
SWAP1			p.recipient = _recipient
DUP2			p.recipient = _recipient
MUL			p.recipient = _recipient
DIV			p.recipient = _recipient
MUL			p.recipient = _recipient
OR			p.recipient = _recipient
SWAP1			p.recipient = _recipient
SSTORE			p.recipient = _recipient
POP			p.recipient = _recipient
DUP5			_amount
DUP2			p
PUSH1 0x4		p.amount
ADD			p.amount
DUP2			p.amount = _amount
SWAP1			p.amount = _amount
SSTORE			p.amount = _amount
POP			p.amount = _amount
DUP7			_description
DUP2			p
PUSH1 0x0		p.description
ADD			p.description
SWAP1			p.description = _description
DUP1			p.description = _description
MLOAD			p.description = _description
SWAP1			p.description = _description
PUSH1 0x20		p.description = _description
ADD			p.description = _description
SWAP1			p.description = _description
DUP3			p.description = _description
DUP1			p.description = _description
SLOAD			p.description = _description
PUSH1 0x1		p.description = _description
DUP2			p.description = _description
PUSH1 0x1		p.description = _description
AND			p.description = _description
ISZERO			p.description = _description
PUSH2 0x100		p.description = _description
MUL			p.description = _description
SUB			p.description = _description
AND			p.description = _description
PUSH1 0x2		p.description = _description
SWAP1			p.description = _description
DIV			p.description = _description
SWAP1			p.description = _description
PUSH1 0x0		p.description = _description
MSTORE			p.description = _description
PUSH1 0x20		p.description = _description
PUSH1 0x0		p.description = _description
SHA3			p.description = _description
SWAP1			p.description = _description
PUSH1 0x1F		p.description = _description
ADD			p.description = _description
PUSH1 0x20		p.description = _description
SWAP1			p.description = _description
DIV			p.description = _description
DUP2			p.description = _description
ADD			p.description = _description
SWAP3			p.description = _description
DUP3			p.description = _description
PUSH1 0x1F		p.description = _description
LT			p.description = _description
PUSH [tag123]		p.description = _description
JUMPI			p.description = _description
DUP1			p.description = _description
MLOAD			p.description = _description
PUSH1 0xFF		p.description = _description
NOT			p.description = _description
AND			p.description = _description
DUP4			p.description = _description
DUP1			p.description = _description
ADD			p.description = _description
OR			p.description = _description
DUP6			p.description = _description
SSTORE			p.description = _description
PUSH [tag122]		p.description = _description
JUMP			p.description = _description
tag123
 
JUMPDEST		p.description = _description
DUP3			p.description = _description
DUP1			p.description = _description
ADD			p.description = _description
PUSH1 0x1		p.description = _description
ADD			p.description = _description
DUP6			p.description = _description
SSTORE			p.description = _description
DUP3			p.description = _description
ISZERO			p.description = _description
PUSH [tag122]		p.description = _description
JUMPI			p.description = _description
SWAP2			p.description = _description
DUP3			p.description = _description
ADD			p.description = _description
tag124
 
JUMPDEST		p.description = _description
DUP3			p.description = _description
DUP2			p.description = _description
GT			p.description = _description
ISZERO			p.description = _description
PUSH [tag125]		p.description = _description
JUMPI			p.description = _description
DUP3			p.description = _description
MLOAD			p.description = _description
DUP3			p.description = _description
SSTORE			p.description = _description
SWAP2			p.description = _description
PUSH1 0x20		p.description = _description
ADD			p.description = _description
SWAP2			p.description = _description
SWAP1			p.description = _description
PUSH1 0x1		p.description = _description
ADD			p.description = _description
SWAP1			p.description = _description
PUSH [tag124]		p.description = _description
JUMP			p.description = _description
tag125
 
JUMPDEST		p.description = _description
tag122
 
JUMPDEST		p.description = _description
POP			p.description = _description
SWAP1			p.description = _description
POP			p.description = _description
PUSH [tag126]		p.description = _description
SWAP2			p.description = _description
SWAP1			p.description = _description
tag127
 
JUMPDEST		p.description = _description
DUP1			p.description = _description
DUP3			p.description = _description
GT			p.description = _description
ISZERO			p.description = _description
PUSH [tag128]		p.description = _description
JUMPI			p.description = _description
PUSH1 0x0		p.description = _description
DUP2			p.description = _description
PUSH1 0x0		p.description = _description
SWAP1			p.description = _description
SSTORE			p.description = _description
POP			p.description = _description
PUSH1 0x1		p.description = _description
ADD			p.description = _description
PUSH [tag127]		p.description = _description
JUMP			p.description = _description
tag128
 
JUMPDEST		p.description = _description
POP			p.description = _description
SWAP1			p.description = _description
JUMP			p.description = _description
tag126
 
JUMPDEST		p.description = _description
POP			p.description = _description
POP			p.description = _description
PUSH32 0x47E9633C99DD05FABD1B937E7C85F9E00D6866BFD2E5885E0091F40A173BE3D3		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP3			idPayment
DUP3			p
PUSH1 0x3		p.recipient
ADD			p.recipient
PUSH1 0x2		p.recipient
SWAP1			p.recipient
SLOAD			p.recipient
SWAP1			p.recipient
PUSH2 0x100		p.recipient
EXP			p.recipient
SWAP1			p.recipient
DIV			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient
AND			p.recipient
DUP4			p
PUSH1 0x4		p.amount
ADD			p.amount
SLOAD			p.amount
PUSH1 0x40		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
MLOAD			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP1			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP5			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP2			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
ADD			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP4			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
AND			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP2			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
ADD			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP3			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP2			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
ADD			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
SWAP4			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
POP			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
POP			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
POP			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
POP			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
PUSH1 0x40		PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
MLOAD			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP1			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
SWAP2			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
SUB			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
SWAP1			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
LOG1			PaymentAuthorized
(
idPayment
 p.recipient
 p.amount
)
DUP2			idPayment
SWAP3			return idPayment
POP			return idPayment
tag108
 
JUMPDEST		function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
SWAP5			function authorizePayment
(
...
SWAP4			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
POP			function authorizePayment
(
...
JUMP	[out]		function authorizePayment
(
...
tag50
 
JUMPDEST		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
PUSH1 0x0		Payment p
PUSH1 0x3		authorizedPayments
DUP1			authorizedPayments.length
SLOAD			authorizedPayments.length
SWAP1			authorizedPayments.length
POP			authorizedPayments.length
DUP3			_idPayment
LT			_idPayment >= authorizedPayments.length
ISZERO			_idPayment >= authorizedPayments.length
ISZERO			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [tag130]		if 
(
_idPayment >= authorizedPayments.length
)
 throw
JUMPI			if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag130
 
JUMPDEST		if 
(
_idPayment >= authorizedPayments.length
)
 throw
PUSH1 0x3		authorizedPayments
DUP3			_idPayment
DUP2			authorizedPayments[_idPayment]
SLOAD			authorizedPayments[_idPayment]
DUP2			authorizedPayments[_idPayment]
LT			authorizedPayments[_idPayment]
ISZERO			authorizedPayments[_idPayment]
PUSH [ErrorTag]		authorizedPayments[_idPayment]
JUMPI			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
MSTORE			authorizedPayments[_idPayment]
PUSH1 0x20		authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
SHA3			authorizedPayments[_idPayment]
SWAP1			authorizedPayments[_idPayment]
PUSH1 0x6		authorizedPayments[_idPayment]
MUL			authorizedPayments[_idPayment]
ADD			authorizedPayments[_idPayment]
PUSH1 0x0		authorizedPayments[_idPayment]
tag131
 
JUMPDEST		authorizedPayments[_idPayment]
POP			authorizedPayments[_idPayment]
SWAP1			Payment p = authorizedPayments[_idPayment]
POP			Payment p = authorizedPayments[_idPayment]
DUP1			p
PUSH1 0x3		p.recipient
ADD			p.recipient
PUSH1 0x2		p.recipient
SWAP1			p.recipient
SLOAD			p.recipient
SWAP1			p.recipient
PUSH2 0x100		p.recipient
EXP			p.recipient
SWAP1			p.recipient
DIV			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient
AND			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != p.recipient
AND			msg.sender != p.recipient
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != p.recipient
AND			msg.sender != p.recipient
EQ			msg.sender != p.recipient
ISZERO			msg.sender != p.recipient
ISZERO			if 
(
msg.sender != p.recipient
)
 throw
PUSH [tag132]		if 
(
msg.sender != p.recipient
)
 throw
JUMPI			if 
(
msg.sender != p.recipient
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag132
 
JUMPDEST		if 
(
msg.sender != p.recipient
)
 throw
PUSH1 0x8		allowedSpenders
PUSH1 0x0		allowedSpenders[p.spender]
DUP3			p
PUSH1 0x1		p.spender
ADD			p.spender
PUSH1 0x0		p.spender
SWAP1			p.spender
SLOAD			p.spender
SWAP1			p.spender
PUSH2 0x100		p.spender
EXP			p.spender
SWAP1			p.spender
DIV			p.spender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.spender
AND			p.spender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowedSpenders[p.spender]
AND			allowedSpenders[p.spender]
DUP2			allowedSpenders[p.spender]
MSTORE			allowedSpenders[p.spender]
PUSH1 0x20		allowedSpenders[p.spender]
ADD			allowedSpenders[p.spender]
SWAP1			allowedSpenders[p.spender]
DUP2			allowedSpenders[p.spender]
MSTORE			allowedSpenders[p.spender]
PUSH1 0x20		allowedSpenders[p.spender]
ADD			allowedSpenders[p.spender]
PUSH1 0x0		allowedSpenders[p.spender]
SHA3			allowedSpenders[p.spender]
PUSH1 0x0		allowedSpenders[p.spender]
SWAP1			allowedSpenders[p.spender]
SLOAD			allowedSpenders[p.spender]
SWAP1			allowedSpenders[p.spender]
PUSH2 0x100		allowedSpenders[p.spender]
EXP			allowedSpenders[p.spender]
SWAP1			allowedSpenders[p.spender]
DIV			allowedSpenders[p.spender]
PUSH1 0xFF		allowedSpenders[p.spender]
AND			allowedSpenders[p.spender]
ISZERO			!allowedSpenders[p.spender]
ISZERO			if 
(
!allowedSpenders[p.spender]
)
 throw
PUSH [tag133]		if 
(
!allowedSpenders[p.spender]
)
 throw
JUMPI			if 
(
!allowedSpenders[p.spender]
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag133
 
JUMPDEST		if 
(
!allowedSpenders[p.spender]
)
 throw
DUP1			p
PUSH1 0x2		p.earliestPayTime
ADD			p.earliestPayTime
SLOAD			p.earliestPayTime
TIMESTAMP			now
LT			now < p.earliestPayTime
ISZERO			if 
(
now < p.earliestPayTime
)
 throw
PUSH [tag134]		if 
(
now < p.earliestPayTime
)
 throw
JUMPI			if 
(
now < p.earliestPayTime
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag134
 
JUMPDEST		if 
(
now < p.earliestPayTime
)
 throw
DUP1			p
PUSH1 0x3		p.canceled
ADD			p.canceled
PUSH1 0x0		p.canceled
SWAP1			p.canceled
SLOAD			p.canceled
SWAP1			p.canceled
PUSH2 0x100		p.canceled
EXP			p.canceled
SWAP1			p.canceled
DIV			p.canceled
PUSH1 0xFF		p.canceled
AND			p.canceled
ISZERO			if 
(
p.canceled
)
 throw
PUSH [tag135]		if 
(
p.canceled
)
 throw
JUMPI			if 
(
p.canceled
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag135
 
JUMPDEST		if 
(
p.canceled
)
 throw
DUP1			p
PUSH1 0x3		p.paid
ADD			p.paid
PUSH1 0x1		p.paid
SWAP1			p.paid
SLOAD			p.paid
SWAP1			p.paid
PUSH2 0x100		p.paid
EXP			p.paid
SWAP1			p.paid
DIV			p.paid
PUSH1 0xFF		p.paid
AND			p.paid
ISZERO			if 
(
p.paid
)
 throw
PUSH [tag136]		if 
(
p.paid
)
 throw
JUMPI			if 
(
p.paid
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag136
 
JUMPDEST		if 
(
p.paid
)
 throw
DUP1			p
PUSH1 0x4		p.amount
ADD			p.amount
SLOAD			p.amount
ADDRESS			this
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		this.balance
AND			this.balance
BALANCE			this.balance
LT			this.balance < p.amount
ISZERO			if 
(
this.balance < p.amount
)
 throw
PUSH [tag137]		if 
(
this.balance < p.amount
)
 throw
JUMPI			if 
(
this.balance < p.amount
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag137
 
JUMPDEST		if 
(
this.balance < p.amount
)
 throw
PUSH1 0x1		true
DUP2			p
PUSH1 0x3		p.paid
ADD			p.paid
PUSH1 0x1		p.paid
PUSH2 0x100		p.paid = true
EXP			p.paid = true
DUP2			p.paid = true
SLOAD			p.paid = true
DUP2			p.paid = true
PUSH1 0xFF		p.paid = true
MUL			p.paid = true
NOT			p.paid = true
AND			p.paid = true
SWAP1			p.paid = true
DUP4			p.paid = true
PUSH32 0x100000000000000000000000000000000000000000000000000000000000000		p.paid = true
SWAP1			p.paid = true
DUP2			p.paid = true
MUL			p.paid = true
DIV			p.paid = true
MUL			p.paid = true
OR			p.paid = true
SWAP1			p.paid = true
SSTORE			p.paid = true
POP			p.paid = true
DUP1			p
PUSH1 0x3		p.recipient
ADD			p.recipient
PUSH1 0x2		p.recipient
SWAP1			p.recipient
SLOAD			p.recipient
SWAP1			p.recipient
PUSH2 0x100		p.recipient
EXP			p.recipient
SWAP1			p.recipient
DIV			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient
AND			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient.send
AND			p.recipient.send
PUSH2 0x8FC		p.recipient.send
(
p.amount
)
DUP3			p
PUSH1 0x4		p.amount
ADD			p.amount
SLOAD			p.amount
SWAP1			p.recipient.send
(
p.amount
)
DUP2			p.recipient.send
(
p.amount
)
ISZERO			p.recipient.send
(
p.amount
)
MUL			p.recipient.send
(
p.amount
)
SWAP1			p.recipient.send
(
p.amount
)
PUSH1 0x40		p.recipient.send
(
p.amount
)
MLOAD			p.recipient.send
(
p.amount
)
DUP1			p.recipient.send
(
p.amount
)
SWAP1			p.recipient.send
(
p.amount
)
POP			p.recipient.send
(
p.amount
)
PUSH1 0x0		p.recipient.send
(
p.amount
)
PUSH1 0x40		p.recipient.send
(
p.amount
)
MLOAD			p.recipient.send
(
p.amount
)
DUP1			p.recipient.send
(
p.amount
)
DUP4			p.recipient.send
(
p.amount
)
SUB			p.recipient.send
(
p.amount
)
DUP2			p.recipient.send
(
p.amount
)
DUP6			p.recipient.send
(
p.amount
)
DUP9			p.recipient.send
(
p.amount
)
DUP9			p.recipient.send
(
p.amount
)
CALL			p.recipient.send
(
p.amount
)
SWAP4			p.recipient.send
(
p.amount
)
POP			p.recipient.send
(
p.amount
)
POP			p.recipient.send
(
p.amount
)
POP			p.recipient.send
(
p.amount
)
POP			p.recipient.send
(
p.amount
)
ISZERO			!p.recipient.send
(
p.amount
)
ISZERO			if 
(
!p.recipient.send
(
p.amount
)
)
 {
...
PUSH [tag138]		if 
(
!p.recipient.send
(
p.amount
)
)
 {
...
JUMPI			if 
(
!p.recipient.send
(
p.amount
)
)
 {
...
PUSH [ErrorTag]		throw
JUMP			throw
tag138
 
JUMPDEST		if 
(
!p.recipient.send
(
p.amount
)
)
 {
...
PUSH32 0x7F5BFE3018715B26A7067888A5C42912FBB3485170B8154EA9A448661F2F0DE2		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP3			_idPayment
DUP3			p
PUSH1 0x3		p.recipient
ADD			p.recipient
PUSH1 0x2		p.recipient
SWAP1			p.recipient
SLOAD			p.recipient
SWAP1			p.recipient
PUSH2 0x100		p.recipient
EXP			p.recipient
SWAP1			p.recipient
DIV			p.recipient
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		p.recipient
AND			p.recipient
DUP4			p
PUSH1 0x4		p.amount
ADD			p.amount
SLOAD			p.amount
PUSH1 0x40		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
MLOAD			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP1			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP5			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP2			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
ADD			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP4			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
AND			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP2			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
ADD			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP3			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP2			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
MSTORE			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
PUSH1 0x20		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
ADD			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
SWAP4			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
POP			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
POP			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
POP			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
POP			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
PUSH1 0x40		PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
MLOAD			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
DUP1			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
SWAP2			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
SUB			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
SWAP1			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
LOG1			PaymentExecuted
(
_idPayment
 p.recipient
 p.amount
)
tag129
 
JUMPDEST		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
POP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
POP			function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
JUMP	[out]		function collectAuthorizedPayment
(
uint _idPayment
)
 {
...
tag52
 
JUMPDEST		Payment[] public authorizedPayments
PUSH1 0x3		Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
DUP2			Payment[] public authorizedPayments
LT			Payment[] public authorizedPayments
ISZERO			Payment[] public authorizedPayments
PUSH [ErrorTag]		Payment[] public authorizedPayments
JUMPI			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
MSTORE			Payment[] public authorizedPayments
PUSH1 0x20		Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
SHA3			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH1 0x6		Payment[] public authorizedPayments
MUL			Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
tag139
 
JUMPDEST		Payment[] public authorizedPayments
SWAP2			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
EXP			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x2		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x3		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
PUSH1 0x0		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
EXP			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
PUSH1 0xFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x3		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
PUSH1 0x1		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
EXP			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
PUSH1 0xFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x3		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
PUSH1 0x2		Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
PUSH2 0x100		Payment[] public authorizedPayments
EXP			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DIV			Payment[] public authorizedPayments
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Payment[] public authorizedPayments
AND			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x4		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
DUP1			Payment[] public authorizedPayments
PUSH1 0x5		Payment[] public authorizedPayments
ADD			Payment[] public authorizedPayments
SLOAD			Payment[] public authorizedPayments
SWAP1			Payment[] public authorizedPayments
POP			Payment[] public authorizedPayments
DUP9			Payment[] public authorizedPayments
JUMP	[out]		Payment[] public authorizedPayments
tag58
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag141]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag141
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_newOwner
PUSH1 0x0		owner
PUSH1 0x0		owner
PUSH2 0x100		owner = _newOwner
EXP			owner = _newOwner
DUP2			owner = _newOwner
SLOAD			owner = _newOwner
DUP2			owner = _newOwner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _newOwner
MUL			owner = _newOwner
NOT			owner = _newOwner
AND			owner = _newOwner
SWAP1			owner = _newOwner
DUP4			owner = _newOwner
PUSH13 0x1000000000000000000000000		owner = _newOwner
SWAP1			owner = _newOwner
DUP2			owner = _newOwner
MUL			owner = _newOwner
DIV			owner = _newOwner
MUL			owner = _newOwner
OR			owner = _newOwner
SWAP1			owner = _newOwner
SSTORE			owner = _newOwner
POP			owner = _newOwner
tag142
 
JUMPDEST		_
tag140
 
JUMPDEST		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
POP			function changeOwner
(
address _newOwner
)
 onlyOwner {
...
JUMP	[out]		function changeOwner
(
address _newOwner
)
 onlyOwner {
...
tag60
 
JUMPDEST		address public securityGuard
PUSH1 0x4		address public securityGuard
PUSH1 0x0		address public securityGuard
SWAP1			address public securityGuard
SLOAD			address public securityGuard
SWAP1			address public securityGuard
PUSH2 0x100		address public securityGuard
EXP			address public securityGuard
SWAP1			address public securityGuard
DIV			address public securityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public securityGuard
AND			address public securityGuard
DUP2			address public securityGuard
JUMP	[out]		address public securityGuard
tag62
 
JUMPDEST		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag144]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag144
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_newSecurityGuard
PUSH1 0x4		securityGuard
PUSH1 0x0		securityGuard
PUSH2 0x100		securityGuard = _newSecurityGuard
EXP			securityGuard = _newSecurityGuard
DUP2			securityGuard = _newSecurityGuard
SLOAD			securityGuard = _newSecurityGuard
DUP2			securityGuard = _newSecurityGuard
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		securityGuard = _newSecurityGuard
MUL			securityGuard = _newSecurityGuard
NOT			securityGuard = _newSecurityGuard
AND			securityGuard = _newSecurityGuard
SWAP1			securityGuard = _newSecurityGuard
DUP4			securityGuard = _newSecurityGuard
PUSH13 0x1000000000000000000000000		securityGuard = _newSecurityGuard
SWAP1			securityGuard = _newSecurityGuard
DUP2			securityGuard = _newSecurityGuard
MUL			securityGuard = _newSecurityGuard
DIV			securityGuard = _newSecurityGuard
MUL			securityGuard = _newSecurityGuard
OR			securityGuard = _newSecurityGuard
SWAP1			securityGuard = _newSecurityGuard
SSTORE			securityGuard = _newSecurityGuard
POP			securityGuard = _newSecurityGuard
tag145
 
JUMPDEST		_
tag143
 
JUMPDEST		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
POP			function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
JUMP	[out]		function setSecurityGuard
(
address _newSecurityGuard
)
 onlyOwner {
...
tag64
 
JUMPDEST		address public escapeDestination
PUSH1 0x2		address public escapeDestination
PUSH1 0x0		address public escapeDestination
SWAP1			address public escapeDestination
SLOAD			address public escapeDestination
SWAP1			address public escapeDestination
PUSH2 0x100		address public escapeDestination
EXP			address public escapeDestination
SWAP1			address public escapeDestination
DIV			address public escapeDestination
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeDestination
AND			address public escapeDestination
DUP2			address public escapeDestination
JUMP	[out]		address public escapeDestination
tag66
 
JUMPDEST		uint public timeLock
PUSH1 0x6		uint public timeLock
SLOAD			uint public timeLock
DUP2			uint public timeLock
JUMP	[out]		uint public timeLock
tag68
 
JUMPDEST		mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x8		mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x20		mapping 
(
address => bool
)
 public allowedSpenders
MSTORE			mapping 
(
address => bool
)
 public allowedSpenders
DUP1			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x0		mapping 
(
address => bool
)
 public allowedSpenders
MSTORE			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x40		mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x0		mapping 
(
address => bool
)
 public allowedSpenders
SHA3			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0x0		mapping 
(
address => bool
)
 public allowedSpenders
SWAP2			mapping 
(
address => bool
)
 public allowedSpenders
POP			mapping 
(
address => bool
)
 public allowedSpenders
SLOAD			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
PUSH2 0x100		mapping 
(
address => bool
)
 public allowedSpenders
EXP			mapping 
(
address => bool
)
 public allowedSpenders
SWAP1			mapping 
(
address => bool
)
 public allowedSpenders
DIV			mapping 
(
address => bool
)
 public allowedSpenders
PUSH1 0xFF		mapping 
(
address => bool
)
 public allowedSpenders
AND			mapping 
(
address => bool
)
 public allowedSpenders
DUP2			mapping 
(
address => bool
)
 public allowedSpenders
JUMP	[out]		mapping 
(
address => bool
)
 public allowedSpenders
tag70
 
JUMPDEST		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
PUSH1 0x0		owner
PUSH1 0x0		owner
SWAP1			owner
SLOAD			owner
SWAP1			owner
PUSH2 0x100		owner
EXP			owner
SWAP1			owner
DIV			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
AND			owner
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
CALLER			msg.sender
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
AND			msg.sender != owner
EQ			msg.sender != owner
ISZERO			msg.sender != owner
ISZERO			if 
(
msg.sender != owner
)
 throw
PUSH [tag147]		if 
(
msg.sender != owner
)
 throw
JUMPI			if 
(
msg.sender != owner
)
 throw
PUSH [ErrorTag]		throw
JUMP			throw
tag147
 
JUMPDEST		if 
(
msg.sender != owner
)
 throw
DUP1			_maxSecurityGuardDelay
PUSH1 0x7		maxSecurityGuardDelay
DUP2			maxSecurityGuardDelay = _maxSecurityGuardDelay
SWAP1			maxSecurityGuardDelay = _maxSecurityGuardDelay
SSTORE			maxSecurityGuardDelay = _maxSecurityGuardDelay
POP			maxSecurityGuardDelay = _maxSecurityGuardDelay
tag148
 
JUMPDEST		_
tag146
 
JUMPDEST		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
POP			function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
JUMP	[out]		function setMaxSecurityGuardDelay
(
uint _maxSecurityGuardDelay
)
 onlyOwner {
...
tag72
 
JUMPDEST		uint public absoluteMinTimeLock
PUSH1 0x5		uint public absoluteMinTimeLock
SLOAD			uint public absoluteMinTimeLock
DUP2			uint public absoluteMinTimeLock
JUMP	[out]		uint public absoluteMinTimeLock
tag74
 
JUMPDEST		address public escapeCaller
PUSH1 0x1		address public escapeCaller
PUSH1 0x0		address public escapeCaller
SWAP1			address public escapeCaller
SLOAD			address public escapeCaller
SWAP1			address public escapeCaller
PUSH2 0x100		address public escapeCaller
EXP			address public escapeCaller
SWAP1			address public escapeCaller
DIV			address public escapeCaller
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public escapeCaller
AND			address public escapeCaller
DUP2			address public escapeCaller
JUMP	[out]		address public escapeCaller
