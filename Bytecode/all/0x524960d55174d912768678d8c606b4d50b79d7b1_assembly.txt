
mstore
(
0x40
 0x60
)
jumpi
(
tag
_1
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_1
tag
_2
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x60
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x8a4068dd
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
jumpi
(
tag
_3
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_3
tag
_4
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
0x0
dup1
0x0
0x96a65609a7b84e8842732deb08f56c3e21ac6f8a
swap4
pop
0x1
swap1
pop
0xaa27f8c1160886aacba64b2319d8d5469ef2af79
swap2
pop
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mload
(
0x40
)
dup1
dup1
0x7265676973746572000000000000000000000000000000000000000000000000
dup2
mstore
pop
0x20
add
dup1
0x43656e747261546f6b656e000000000000000000000000000000000000000000
dup2
mstore
pop
0x20
add
swap1
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup7
sub
(
gas
 0x646e
)
call
swap2
pop
pop
pop
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mload
(
0x40
)
dup1
dup1
0x7472616e7366657228616464726573732c75696e743235362900000000000000
dup2
mstore
pop
0x19
add
swap1
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
keccak256
0x100000000000000000000000000000000000000000000000000000000
swap1
div
dup4
dup4
mload
(
0x40
)
dup4
0xffffffff
and
0x100000000000000000000000000000000000000000000000000000000
mul
dup2
mstore
0x4
add
dup1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup8
sub
(
gas
 0x646e
)
call
swap3
pop
pop
pop
iszero
iszero
tag
_7
jumpi
0x0
swap5
pop
jump
(
tag
_6
)
tag
_7
0x1
swap5
pop
tag
_6
pop
pop
pop
pop
swap1
jump	
}
