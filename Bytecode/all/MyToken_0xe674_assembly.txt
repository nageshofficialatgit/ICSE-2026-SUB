
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x4a74bb02
eq
tag
_3
jumpi
dup1
0xc49b9a80
eq
tag
_4
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_5
tag
_6
jump	tag
_5
mload
(
0x40
)
tag
_7
swap2
swap1
tag
_8
jump	tag
_7
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
tag
_9
0x04
dup1
calldatasize
sub
dup2
add
swap1
tag
_10
swap2
swap1
tag
_11
jump	tag
_10
tag
_12
jump	tag
_9
stop
tag
_6
0x00
dup1
sload
swap1
0x0100
exp
swap1
div
0xff
and
dup2
jump	
tag
_12
dup1
0x00
dup1
0x0100
exp
dup2
sload
dup2
0xff
mul
not
and
swap1
dup4
iszero
iszero
mul
or
swap1
sstore
pop
0x53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159
dup2
mload
(
0x40
)
tag
_14
swap2
swap1
tag
_8
jump	tag
_14
mload
(
0x40
)
dup1
swap2
sub
swap1
log1
pop
jump	
tag
_16
0x00
dup2
calldataload
swap1
pop
tag
_18
dup2
tag
_19
jump	tag
_18
swap3
swap2
pop
pop
jump	
tag
_11
0x00
0x20
dup3
dup5
sub
slt
iszero
tag
_21
jumpi
0x00
dup1
revert
tag
_21
0x00
tag
_22
dup5
dup3
dup6
add
tag
_16
jump	tag
_22
swap2
pop
pop
swap3
swap2
pop
pop
jump	
tag
_23
tag
_25
dup2
tag
_26
jump	tag
_25
dup3
mstore
pop
pop
jump	
tag
_8
0x00
0x20
dup3
add
swap1
pop
tag
_28
0x00
dup4
add
dup5
tag
_23
jump	tag
_28
swap3
swap2
pop
pop
jump	
tag
_26
0x00
dup2
iszero
iszero
swap1
pop
swap2
swap1
pop
jump	
tag
_19
tag
_31
dup2
tag
_26
jump	tag
_31
dup2
eq
tag
_32
jumpi
0x00
dup1
revert
tag
_32
pop
jump	
}
