
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xc783fb10
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
0x60
0x0
dup1
0x0
dup6
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup1
sload
dup1
0x20
mul
0x20
add
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
swap3
swap2
swap1
dup2
dup2
mstore
0x20
add
0x0
swap1
tag
_7
dup3
dup3
lt
iszero
tag
_8
jumpi
dup4
dup3
swap1
0x0
mstore
keccak256
(
0x0
 0x20
)
swap1
0x2
mul
add
0x40
dup1
mload
swap1
dup2
add
0x40
mstore
swap1
dup2
0x0
dup3
add
sload
dup2
mstore
0x20
add
0x1
dup3
add
sload
dup2
mstore
pop
pop
dup2
mstore
0x20
add
swap1
0x1
add
swap1
jump
(
tag
_7
)
tag
_8
pop
pop
pop
pop
swap2
pop
0x0
swap1
pop
tag
_10
dup2
mload
dup2
lt
iszero
tag
_11
jumpi
timestamp
dup3
dup3
dup2
mload
dup2
lt
iszero
iszero
tag
_13
jumpi
invalid
tag
_13
swap1
0x20
add
swap1
0x20
mul
add
mload
0x0
add
mload
gt
iszero
tag
_14
jumpi
dup2
dup2
dup2
mload
dup2
lt
iszero
iszero
tag
_15
jumpi
invalid
tag
_15
swap1
0x20
add
swap1
0x20
mul
add
mload
0x0
add
mload
sload
(
0x1
)
sub
0x1
dup2
swap1
sstore
pop
sload
(
0x1
)
swap3
pop
jump
(
tag
_6
)
tag
_14
dup1
0x1
add
swap1
pop
jump
(
tag
_10
)
tag
_11
tag
_6
pop
pop
swap2
swap1
pop
jump	
}
