
mstore
(
0x40
 0x80
)
0x12
0x0
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x5fc93ed7
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup1
0x20
add
dup3
dup2
sub
dup3
mstore
dup4
dup2
dup2
mload
dup2
mstore
0x20
add
swap2
pop
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
0x0
tag
_6
dup4
dup2
lt
iszero
tag
_7
jumpi
dup1
dup3
add
mload
dup2
dup5
add
mstore
0x20
dup2
add
swap1
pop
jump
(
tag
_6
)
tag
_7
pop
pop
pop
pop
swap1
pop
swap1
dup2
add
swap1
0x1f
and
dup1
iszero
tag
_9
jumpi
dup1
dup3
sub
dup1
mload
0x1
dup4
0x20
sub
0x100
exp
sub
not
and
dup2
mstore
0x20
add
swap2
pop
tag
_9
pop
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x60
0x0
timestamp
swap1
pop
sload
(
0x0
)
dup2
lt
iszero
iszero
tag
_11
jumpi
0x0
dup1
revert
tag
_11
0x40
dup1
mload
swap1
dup2
add
0x40
mstore
dup1
0xe
dup2
mstore
0x20
add
0x4861707079204269727468646179000000000000000000000000000000000000
dup2
mstore
pop
swap2
pop
pop
swap1
jump	
}
