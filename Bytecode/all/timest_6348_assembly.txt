
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x1998aeef
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
jump
(
tag
_4
)
tag
_3
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
0x0
dup1
0x64
swap1
pop
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0x95c7f715d8ba820069888095983b8c8ef0960bd6371027a386f81ad7a03dd471
callvalue
dup4
timestamp
mload
(
0x40
)
dup1
dup5
dup2
mstore
0x20
add
dup4
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap4
pop
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
log2
0x1
swap2
pop
pop
swap1
jump	
}
