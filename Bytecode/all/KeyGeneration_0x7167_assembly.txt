
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
revert
(
0x00
 0x00
)
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
revert
(
0x00
 0x00
)
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x94b248df
eq
tag
_3
jumpi
tag
_2
revert
(
0x00
 0x00
)
tag
_3
tag
_4
0x04
dup1
calldatasize
sub
dup2
add
swap1
tag
_5
swap2
swap1
tag
_6
jump	tag
_5
tag
_7
jump	tag
_4
mload
(
0x40
)
tag
_8
swap2
swap1
tag
_9
jump	tag
_8
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_7
0x00
dup2
add
(
0x20
 mload
(
0x40
)
)
tag
_11
swap2
swap1
tag
_12
jump	tag
_11
mload
(
0x40
)
0x20
dup2
dup4
sub
sub
dup2
mstore
swap1
0x40
mstore
dup1
mload
swap1
0x20
add
keccak256
swap1
pop
swap2
swap1
pop
jump	
tag
_14
0x00
0x00
revert
tag
_16
0x00
0xffffffffffffffffffffffffffffffffffffffff
dup3
and
swap1
pop
swap2
swap1
pop
jump	
tag
_17
0x00
tag
_29
dup3
tag
_16
jump	tag
_29
swap1
pop
swap2
swap1
pop
jump	
tag
_18
tag
_31
dup2
tag
_17
jump	tag
_31
dup2
eq
tag
_32
jumpi
0x00
0x00
revert
tag
_32
pop
jump	
tag
_19
0x00
dup2
calldataload
swap1
pop
tag
_34
dup2
tag
_18
jump	tag
_34
swap3
swap2
pop
pop
jump	
tag
_6
0x00
0x20
dup3
dup5
sub
slt
iszero
tag
_36
jumpi
tag
_37
tag
_14
jump	tag
_37
tag
_36
0x00
tag
_38
dup5
dup3
dup6
add
tag
_19
jump	tag
_38
swap2
pop
pop
swap3
swap2
pop
pop
jump	
tag
_20
0x00
dup2
swap1
pop
swap2
swap1
pop
jump	
tag
_21
tag
_41
dup2
tag
_20
jump	tag
_41
dup3
mstore
pop
pop
jump	
tag
_9
0x00
0x20
dup3
add
swap1
pop
tag
_43
0x00
dup4
add
dup5
tag
_21
jump	tag
_43
swap3
swap2
pop
pop
jump	
tag
_22
tag
_45
dup2
tag
_17
jump	tag
_45
dup3
mstore
pop
pop
jump	
tag
_12
0x00
0x20
dup3
add
swap1
pop
tag
_47
0x00
dup4
add
dup5
tag
_22
jump	tag
_47
swap3
swap2
pop
pop
jump	
}
