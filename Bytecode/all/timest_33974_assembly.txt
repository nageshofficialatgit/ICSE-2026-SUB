
mstore
(
0x40
 0x80
)
0x2386f26fc10000
0x0
sstore
0x0
0x1
swap1
not
(
0x0
)
and
swap1
sstore
0x14
0x2
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xccd1a621
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_4
)
tag
_3
stop
tag
_4
0x0
dup1
sload
callvalue
eq
iszero
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
sload
(
0x2
)
0xf4240
dup2
iszero
iszero
tag
_7
jumpi
invalid
tag
_7
div
swap1
pop
0x2
timestamp
coinbase
difficulty
sload
(
0x1
)
mload
(
0x40
)
dup1
dup6
dup2
mstore
0x20
add
dup5
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0x1000000000000000000000000
mul
dup2
mstore
0x14
add
dup4
dup2
mstore
0x20
add
dup3
not
(
0x0
)
and
not
(
0x0
)
and
dup2
mstore
0x20
add
swap5
pop
pop
pop
pop
pop
0x20
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup7
gas
call
iszero
dup1
iszero
tag
_8
jumpi
returndatasize
0x0
dup1
returndatacopy
returndatasize
0x0
revert
tag
_8
pop
pop
pop
mload
(
0x40
)
returndatasize
0x20
dup2
lt
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
0x1
dup2
not
(
0x0
)
and
swap1
sstore
pop
pop
pop
jump	
}
