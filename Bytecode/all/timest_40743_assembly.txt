
mstore
(
0x40
 0x80
)
0x2
0x5
sstore
0x1
0x6
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x2d2f349
eq
tag
_2
jumpi
dup1
0xb241ff03
eq
tag
_3
jumpi
dup1
0xbaaaaad2
eq
tag
_4
jumpi
dup1
0xef78d4fd
eq
tag
_5
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
pop
tag
_7
jump
(
tag
_8
)
tag
_7
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
pop
tag
_10
jump
(
tag
_11
)
tag
_10
stop
tag
_4
callvalue
dup1
iszero
tag
_12
jumpi
0x0
dup1
revert
tag
_12
pop
tag
_13
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_14
)
tag
_13
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
callvalue
dup1
iszero
tag
_15
jumpi
0x0
dup1
revert
tag
_15
pop
tag
_16
jump
(
tag
_17
)
tag
_16
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_8
sload
(
0x5
)
dup2
jump	
tag
_11
0x0
sload
(
0x6
)
0xff
and
0x5
dup2
lt
iszero
iszero
tag
_19
jumpi
invalid
tag
_19
add
sload
sload
(
0x5
)
timestamp
sub
lt
iszero
iszero
iszero
tag
_21
jumpi
0x0
dup1
revert
tag
_21
jump	
tag
_14
0x0
dup2
0x5
dup2
lt
iszero
iszero
tag
_22
jumpi
invalid
tag
_22
add
0x0
swap2
pop
swap1
pop
sload
dup2
jump	
tag
_17
sload
(
0x6
)
dup2
jump	
}
