
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xc19d93fb
eq
tag
_2
jumpi
dup1
0xea8a1af0
eq
tag
_3
jumpi
dup1
0xf5ab4c62
eq
tag
_4
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_5
jumpi
0x0
dup1
revert
tag
_5
pop
tag
_6
jump
(
tag
_7
)
tag
_6
mload
(
0x40
)
dup1
dup3
0x1
dup2
gt
iszero
tag
_8
jumpi
invalid
tag
_8
0xff
and
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
pop
tag
_10
jump
(
tag
_11
)
tag
_10
stop
tag
_4
callvalue
dup1
iszero
tag
_12
jumpi
0x0
dup1
revert
tag
_12
pop
tag
_13
jump
(
tag
_14
)
tag
_13
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_7
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
dup2
jump	
tag
_11
0x1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
eq
iszero
tag
_16
jumpi
0x0
0x1
dup2
gt
iszero
tag
_17
jumpi
invalid
tag
_17
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
0x1
dup2
gt
iszero
tag
_18
jumpi
invalid
tag
_18
eq
dup1
tag
_19
jumpi
pop
0x1
dup1
dup2
gt
iszero
tag
_20
jumpi
invalid
tag
_20
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
0x1
dup2
gt
iszero
tag
_21
jumpi
invalid
tag
_21
eq
tag
_19
iszero
iszero
tag
_22
jumpi
0x0
dup1
revert
tag
_22
jump
(
tag
_23
)
tag
_16
0x1
dup1
dup2
gt
iszero
tag
_24
jumpi
invalid
tag
_24
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
0x1
dup2
gt
iszero
tag
_25
jumpi
invalid
tag
_25
eq
dup1
iszero
tag
_26
jumpi
pop
0x0
sload
(
0x1
)
eq
iszero
tag
_26
dup1
iszero
tag
_27
jumpi
pop
0x15180
sload
(
0x1
)
add
timestamp
gt
tag
_27
iszero
iszero
tag
_28
jumpi
0x0
dup1
revert
tag
_28
tag
_23
jump	
tag
_14
sload
(
0x1
)
dup2
jump	
}
