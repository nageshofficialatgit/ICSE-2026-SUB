
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x64edfbf0
eq
tag
_2
jumpi
dup1
0x6d991cce
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_4
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
pop
tag
_7
jump
(
tag
_8
)
tag
_7
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
0x0
dup1
0x0
sload
(
0x1
)
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
swap2
pop
timestamp
swap1
pop
dup2
0x0
add
sload
dup2
lt
iszero
iszero
iszero
tag
_10
jumpi
0x0
dup1
revert
tag
_10
pop
pop
swap1
jump	
tag
_8
sload
(
0x1
)
dup2
jump	
}
