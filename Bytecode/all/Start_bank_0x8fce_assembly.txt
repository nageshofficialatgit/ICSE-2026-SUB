
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x4c2f04a4
eq
tag
_3
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_4
0x04
dup1
calldatasize
sub
0x60
dup2
lt
iszero
tag
_5
jumpi
0x00
dup1
revert
tag
_5
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
0x0100000000
dup2
gt
iszero
tag
_6
jumpi
0x00
dup1
revert
tag
_6
dup3
add
dup4
0x20
dup3
add
gt
iszero
tag
_7
jumpi
0x00
dup1
revert
tag
_7
dup1
calldataload
swap1
0x20
add
swap2
dup5
0x01
dup4
mul
dup5
add
gt
0x0100000000
dup4
gt
or
iszero
tag
_8
jumpi
0x00
dup1
revert
tag
_8
swap2
swap1
dup1
dup1
0x1f
add
0x20
dup1
swap2
div
mul
0x20
add
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
swap4
swap3
swap2
swap1
dup2
dup2
mstore
0x20
add
dup4
dup4
dup1
dup3
dup5
calldatacopy
0x00
dup2
dup5
add
mstore
not
(
0x1f
)
0x1f
dup3
add
and
swap1
pop
dup1
dup4
add
swap3
pop
pop
pop
pop
pop
pop
pop
swap2
swap3
swap2
swap3
swap1
pop
pop
pop
tag
_9
jump	tag
_4
stop
tag
_9
dup3
0xffffffffffffffffffffffffffffffffffffffff
and
0xb7206ff2308912e5342f216a6283cada7ad88c32a209fcc91aa24d4b54b5c6c0
dup3
dup5
timestamp
mload
(
0x40
)
dup1
dup1
0x20
add
dup5
dup2
mstore
0x20
add
dup4
dup2
mstore
0x20
add
dup3
dup2
sub
dup3
mstore
dup6
dup2
dup2
mload
dup2
mstore
0x20
add
swap2
pop
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
0x00
tag
_11
dup4
dup2
lt
iszero
tag
_13
jumpi
dup1
dup3
add
mload
dup2
dup5
add
mstore
0x20
dup2
add
swap1
pop
jump
(
tag
_11
)
tag
_13
pop
pop
pop
pop
swap1
pop
swap1
dup2
add
swap1
0x1f
and
dup1
iszero
tag
_14
jumpi
dup1
dup3
sub
dup1
mload
0x01
dup4
0x20
sub
0x0100
exp
sub
not
and
dup2
mstore
0x20
add
swap2
pop
tag
_14
pop
swap5
pop
pop
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
log2
pop
pop
pop
jump	
}
mstore
(
0x40
 0x80
)
0x0de0b6b3a7640000
0x02
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
mload
(
0x40
)
sub
(
codesize
 bytecodeSize
)
dup1
bytecodeSize
dup4
codecopy
dup2
dup2
add
0x40
mstore
0x20
dup2
lt
iszero
tag
_2
jumpi
0x00
dup1
revert
tag
_2
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
dup1
0x01
0x00
0x0100
exp
dup2
sload
dup2
0xffffffffffffffffffffffffffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mul
or
swap1
sstore
pop
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x3fe43822
eq
tag
_3
jumpi
dup1
0x4d6ce1e5
eq
tag
_4
jumpi
dup1
0xc2808d1a
eq
tag
_5
jumpi
dup1
0xe203b506
eq
tag
_6
jumpi
jump
(
tag
_2
)
tag
_1
jumpi
(
tag
_2
 calldatasize
)
tag
_9
0x00
tag
_10
jump	tag
_9
stop
tag
_2
tag
_13
0x00
tag
_10
jump	tag
_13
stop
tag
_3
tag
_14
0x04
dup1
calldatasize
sub
0x20
dup2
lt
iszero
tag
_15
jumpi
0x00
dup1
revert
tag
_15
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
tag
_16
jump	tag
_14
stop
tag
_4
tag
_17
0x04
dup1
calldatasize
sub
0x20
dup2
lt
iszero
tag
_18
jumpi
0x00
dup1
revert
tag
_18
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
tag
_10
jump	tag
_17
stop
tag
_5
callvalue
dup1
iszero
tag
_19
jumpi
0x00
dup1
revert
tag
_19
pop
tag
_20
tag
_21
jump	tag
_20
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_6
callvalue
dup1
iszero
tag
_22
jumpi
0x00
dup1
revert
tag
_22
pop
tag
_23
0x04
dup1
calldatasize
sub
0x20
dup2
lt
iszero
tag
_24
jumpi
0x00
dup1
revert
tag
_24
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
tag
_25
jump	tag
_23
mload
(
0x40
)
dup1
dup4
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_10
0x00
dup1
0x00
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x00
keccak256
swap1
pop
callvalue
dup2
0x01
add
0x00
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
timestamp
dup3
gt
tag
_27
jumpi
timestamp
jump
(
tag
_28
)
tag
_27
dup2
tag
_28
dup2
0x00
add
dup2
swap1
sstore
pop
0x01
0x00
swap1
sload
swap1
0x0100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0x4c2f04a4
caller
callvalue
mload
(
0x40
)
dup4
0xffffffff
and
0xe0
shl
dup2
mstore
0x04
add
dup1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
dup1
0x20
add
dup3
dup2
sub
dup3
mstore
0x03
dup2
mstore
0x20
add
dup1
0x5075740000000000000000000000000000000000000000000000000000000000
dup2
mstore
pop
0x20
add
swap4
pop
pop
pop
pop
0x00
mload
(
0x40
)
dup1
dup4
sub
dup2
0x00
dup8
dup1
extcodesize
iszero
dup1
iszero
tag
_29
jumpi
0x00
dup1
revert
tag
_29
pop
gas
call
iszero
dup1
iszero
tag
_31
jumpi
returndatasize
0x00
dup1
returndatacopy
revert
(
0x00
 returndatasize
)
tag
_31
pop
pop
pop
pop
pop
pop
jump	
tag
_16
0x00
dup1
0x00
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x00
keccak256
swap1
pop
sload
(
0x02
)
dup2
0x01
add
sload
gt
dup1
iszero
tag
_33
jumpi
pop
dup2
dup2
0x01
add
sload
lt
iszero
tag
_33
dup1
iszero
tag
_34
jumpi
pop
dup1
0x00
add
sload
timestamp
gt
tag
_34
iszero
tag
_35
jumpi
0x00
caller
0xffffffffffffffffffffffffffffffffffffffff
and
dup4
mload
(
0x40
)
dup1
0x00
add
swap1
pop
0x00
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup8
gas
call
swap3
pop
pop
pop
returndatasize
dup1
0x00
dup2
eq
tag
_38
jumpi
mload
(
0x40
)
swap2
pop
and
(
add
(
returndatasize
 0x3f
)
 not
(
0x1f
)
)
dup3
add
0x40
mstore
returndatasize
dup3
mstore
returndatasize
0x00
0x20
dup5
add
returndatacopy
jump
(
tag
_37
)
tag
_38
0x60
swap2
pop
tag
_37
pop
pop
swap1
pop
dup1
iszero
tag
_39
jumpi
dup3
dup3
0x01
add
0x00
dup3
dup3
sload
sub
swap3
pop
pop
dup2
swap1
sstore
pop
0x01
0x00
swap1
sload
swap1
0x0100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0x4c2f04a4
caller
dup6
mload
(
0x40
)
dup4
0xffffffff
and
0xe0
shl
dup2
mstore
0x04
add
dup1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
dup1
0x20
add
dup3
dup2
sub
dup3
mstore
0x07
dup2
mstore
0x20
add
dup1
0x436f6c6c65637400000000000000000000000000000000000000000000000000
dup2
mstore
pop
0x20
add
swap4
pop
pop
pop
pop
0x00
mload
(
0x40
)
dup1
dup4
sub
dup2
0x00
dup8
dup1
extcodesize
iszero
dup1
iszero
tag
_40
jumpi
0x00
dup1
revert
tag
_40
pop
gas
call
iszero
dup1
iszero
tag
_42
jumpi
returndatasize
0x00
dup1
returndatacopy
revert
(
0x00
 returndatasize
)
tag
_42
pop
pop
pop
pop
tag
_39
pop
tag
_35
pop
pop
jump	
tag
_21
sload
(
0x02
)
dup2
jump	
tag
_25
mstore
(
0x20
 0x00
)
dup1
0x00
mstore
keccak256
(
0x00
 0x40
)
0x00
swap2
pop
swap1
pop
dup1
0x00
add
sload
swap1
dup1
0x01
add
sload
swap1
pop
dup3
jump	
}
