
mstore
(
0x40
 0x80
)
0x07
0x00
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x07391dd6
eq
tag
_3
jumpi
dup1
0x8381f58a
eq
tag
_4
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_5
0x04
dup1
calldatasize
sub
dup2
add
swap1
tag
_6
swap2
swap1
tag
_7
jump	tag
_6
tag
_8
jump	tag
_5
stop
tag
_4
tag
_9
tag
_10
jump	tag
_9
mload
(
0x40
)
tag
_11
swap2
swap1
tag
_12
jump	tag
_11
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_8
dup1
0x00
dup2
swap1
sstore
pop
pop
jump	
tag
_10
sload
(
0x00
)
dup2
jump	
tag
_15
0x00
dup2
calldataload
swap1
pop
tag
_17
dup2
tag
_18
jump	tag
_17
swap3
swap2
pop
pop
jump	
tag
_7
0x00
0x20
dup3
dup5
sub
slt
iszero
tag
_20
jumpi
0x00
dup1
revert
tag
_20
0x00
tag
_21
dup5
dup3
dup6
add
tag
_15
jump	tag
_21
swap2
pop
pop
swap3
swap2
pop
pop
jump	
tag
_22
tag
_24
dup2
tag
_25
jump	tag
_24
dup3
mstore
pop
pop
jump	
tag
_12
0x00
0x20
dup3
add
swap1
pop
tag
_27
0x00
dup4
add
dup5
tag
_22
jump	tag
_27
swap3
swap2
pop
pop
jump	
tag
_25
0x00
dup2
swap1
pop
swap2
swap1
pop
jump	
tag
_18
tag
_30
dup2
tag
_25
jump	tag
_30
dup2
eq
tag
_31
jumpi
0x00
dup1
revert
tag
_31
pop
jump	
}
