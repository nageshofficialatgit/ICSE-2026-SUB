
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0xe1ef9f01
eq
tag
_3
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_4
0x04
dup1
calldatasize
sub
dup2
add
swap1
tag
_5
swap2
swap1
tag
_6
jump	tag
_5
tag
_7
jump	tag
_4
stop
tag
_7
pop
pop
pop
pop
jump	
tag
_10
0x00
dup1
dup4
0x1f
dup5
add
slt
tag
_12
jumpi
0x00
dup1
revert
tag
_12
dup3
calldataload
swap1
pop
0xffffffffffffffff
dup2
gt
iszero
tag
_13
jumpi
0x00
dup1
revert
tag
_13
0x20
dup4
add
swap2
pop
dup4
0x01
dup3
mul
dup4
add
gt
iszero
tag
_14
jumpi
0x00
dup1
revert
tag
_14
swap3
pop
swap3
swap1
pop
jump	
tag
_6
0x00
dup1
0x00
dup1
0x40
dup6
dup8
sub
slt
iszero
tag
_16
jumpi
0x00
dup1
revert
tag
_16
0x00
dup6
add
calldataload
0xffffffffffffffff
dup2
gt
iszero
tag
_17
jumpi
0x00
dup1
revert
tag
_17
tag
_18
dup8
dup3
dup9
add
tag
_10
jump	tag
_18
swap5
pop
swap5
pop
pop
0x20
dup6
add
calldataload
0xffffffffffffffff
dup2
gt
iszero
tag
_19
jumpi
0x00
dup1
revert
tag
_19
tag
_20
dup8
dup3
dup9
add
tag
_10
jump	tag
_20
swap3
pop
swap3
pop
pop
swap3
swap6
swap2
swap5
pop
swap3
pop
jump	
}
