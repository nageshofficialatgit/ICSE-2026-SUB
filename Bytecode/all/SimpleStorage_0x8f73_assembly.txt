
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
jumpi
(
tag
_2
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x2e64cec1
eq
tag
_3
jumpi
dup1
0x6057361d
eq
tag
_4
jumpi
tag
_2
0x00
dup1
revert
tag
_3
tag
_5
tag
_6
jump	tag
_5
mload
(
0x40
)
tag
_7
swap2
swap1
tag
_8
jump	tag
_7
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
tag
_9
0x04
dup1
calldatasize
sub
dup2
add
swap1
tag
_10
swap2
swap1
tag
_11
jump	tag
_10
tag
_12
jump	tag
_9
stop
tag
_6
0x00
dup1
sload
swap1
pop
swap1
jump	
tag
_12
dup1
0x00
dup2
swap1
sstore
pop
0x3564ffb2fd8f93d7b0e9d1173ffdff5ee9775d860bfe82eaca0d0dbe07c8b634
dup2
mload
(
0x40
)
tag
_15
swap2
swap1
tag
_8
jump	tag
_15
mload
(
0x40
)
dup1
swap2
sub
swap1
log1
pop
jump	
tag
_17
0x00
dup2
calldataload
swap1
pop
tag
_19
dup2
tag
_20
jump	tag
_19
swap3
swap2
pop
pop
jump	
tag
_11
0x00
0x20
dup3
dup5
sub
slt
iszero
tag
_22
jumpi
0x00
dup1
revert
tag
_22
0x00
tag
_23
dup5
dup3
dup6
add
tag
_17
jump	tag
_23
swap2
pop
pop
swap3
swap2
pop
pop
jump	
tag
_24
tag
_26
dup2
tag
_27
jump	tag
_26
dup3
mstore
pop
pop
jump	
tag
_8
0x00
0x20
dup3
add
swap1
pop
tag
_29
0x00
dup4
add
dup5
tag
_24
jump	tag
_29
swap3
swap2
pop
pop
jump	
tag
_27
0x00
dup2
swap1
pop
swap2
swap1
pop
jump	
tag
_20
tag
_32
dup2
tag
_27
jump	tag
_32
dup2
eq
tag
_33
jumpi
0x00
dup1
revert
tag
_33
pop
jump	
}
