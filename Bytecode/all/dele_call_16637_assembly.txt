
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x521eb273
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
jump
(
tag
_4
)
tag
_3
stop
tag
_4
0x0
callvalue
gt
iszero
tag
_6
jumpi
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0x8fc
callvalue
swap1
dup2
iszero
mul
swap1
mload
(
0x40
)
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup9
dup9
call
swap4
pop
pop
pop
pop
iszero
dup1
iszero
tag
_7
jumpi
returndatasize
0x0
dup1
returndatacopy
returndatasize
0x0
revert
tag
_7
pop
jump
(
tag
_8
)
tag
_6
0x0
dup1
calldatasize
swap1
pop
gt
iszero
tag
_9
jumpi
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0x0
calldatasize
mload
(
0x40
)
dup1
dup4
dup4
dup1
dup3
dup5
calldatacopy
dup3
add
swap2
pop
pop
swap3
pop
pop
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
gas
delegatecall
swap2
pop
pop
pop
tag
_9
tag
_8
jump	
}
