
mstore
(
0x40
 0x80
)
0x0
dup1
exp
(
0x100
 0x0
)
dup2
sload
dup2
0xffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffff
and
mul
or
swap1
sstore
pop
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x9a628121
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
0x1
number
sub
blockhash
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffff
and
mload
(
0x40
)
dup1
dup4
not
(
0x0
)
and
not
(
0x0
)
and
dup2
mstore
0x20
add
dup3
0xffffffffffffffff
and
0xffffffffffffffff
and
0x1000000000000000000000000000000000000000000000000
mul
dup2
mstore
0x8
add
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
keccak256
timestamp
mload
(
0x40
)
dup1
dup4
not
(
0x0
)
and
not
(
0x0
)
and
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
keccak256
0x1
swap1
div
swap1
pop
dup1
0x0
dup1
0x100
exp
dup2
sload
dup2
0xffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffff
and
mul
or
swap1
sstore
pop
dup1
swap2
pop
pop
swap1
jump	
}
