
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x435c35b6
eq
tag
_2
jumpi
dup1
0x49dcd756
eq
tag
_3
jumpi
dup1
0xf1ce9595
eq
tag
_4
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_5
jumpi
0x0
dup1
revert
tag
_5
pop
tag
_6
jump
(
tag
_7
)
tag
_6
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_8
jumpi
0x0
dup1
revert
tag
_8
pop
tag
_9
jump
(
tag
_10
)
tag
_9
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
callvalue
dup1
iszero
tag
_11
jumpi
0x0
dup1
revert
tag
_11
pop
tag
_12
jump
(
tag
_13
)
tag
_12
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_7
sload
(
0x0
)
dup2
jump	
tag
_10
0x0
dup1
0x0
dup1
timestamp
swap3
pop
sload
(
0x0
)
dup4
sub
swap2
pop
0x15180
dup3
dup2
iszero
iszero
tag
_15
jumpi
invalid
tag
_15
div
swap1
pop
0x2
dup2
mul
swap4
pop
pop
pop
pop
swap1
jump	
tag
_13
0x15180
dup2
jump	
}
