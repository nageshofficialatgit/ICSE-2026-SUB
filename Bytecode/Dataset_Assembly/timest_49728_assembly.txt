
mstore
(
0x40
 0x80
)
0x0
dup1
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x98b01fe3
eq
tag
_2
jumpi
tag
_1
0x0
dup1
0x0
0x3
coinbase
number
timestamp
mload
(
0x40
)
dup1
dup5
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
0x1000000000000000000000000
mul
dup2
mstore
0x14
add
dup4
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap4
pop
pop
pop
pop
0x20
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup7
gas
call
iszero
dup1
iszero
tag
_5
jumpi
returndatasize
0x0
dup1
returndatacopy
returndatasize
0x0
revert
tag
_5
pop
pop
pop
mul
(
0x1000000000000000000000000
 mload
(
mload
(
0x40
)
)
)
swap3
pop
0x0
0x100000000000000000000000000000000000000000000000000000000000000
mul
dup4
0x0
0x14
dup2
lt
iszero
iszero
tag
_6
jumpi
invalid
tag
_6
byte
0x100000000000000000000000000000000000000000000000000000000000000
mul
not
(
0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
)
and
eq
iszero
tag
_7
jumpi
0x0
0x100000000000000000000000000000000000000000000000000000000000000
mul
0x1
0x100000000000000000000000000000000000000000000000000000000000000
mul
dup5
0x1
0x14
dup2
lt
iszero
iszero
tag
_8
jumpi
invalid
tag
_8
byte
0x100000000000000000000000000000000000000000000000000000000000000
mul
and
not
(
0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
)
and
eq
iszero
tag
_9
jumpi
0x0
jump
(
tag
_10
)
tag
_9
0x1
tag
_10
swap2
pop
dup2
0xff
and
0x64
callvalue
mul
mul
swap1
pop
dup1
0x0
dup1
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
tag
_7
pop
pop
pop
stop
tag
_2
callvalue
dup1
iszero
tag
_11
jumpi
0x0
dup1
revert
tag
_11
pop
tag
_12
jump
(
tag
_13
)
tag
_12
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_13
sload
(
0x0
)
dup2
jump	
}
