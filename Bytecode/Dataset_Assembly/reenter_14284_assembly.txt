
mstore
(
0x40
 0x80
)
0x0
dup1
sstore
0x64
0x1
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x4071f89b
eq
tag
_2
jumpi
dup1
0xb743f7b6
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_4
jump
(
tag
_5
)
tag
_4
stop
tag
_3
callvalue
dup1
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
pop
tag
_7
jump
(
tag
_8
)
tag
_7
mload
(
0x40
)
dup1
dup3
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
sload
sload
(
0x1
)
sub
swap1
pop
0x2
0x0
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
0x61a80
swap1
mload
(
0x40
)
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup9
dup9
call
swap4
pop
pop
pop
pop
iszero
iszero
tag
_10
jumpi
dup1
sload
(
0x0
)
sub
0x0
dup2
swap1
sstore
pop
tag
_10
pop
jump	
tag
_8
0x2
0x0
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
jump	
}
