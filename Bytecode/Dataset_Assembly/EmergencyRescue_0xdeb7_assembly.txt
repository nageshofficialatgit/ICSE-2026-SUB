
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x00
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x00
codecopy
0x00
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x04
)
)
shr
(
0xe0
 calldataload
(
0x00
)
)
dup1
0x1fbe1979
eq
tag
_2
jumpi
tag
_1
0x00
dup1
revert
tag
_2
tag
_3
tag
_4
jump	tag
_3
stop
tag
_4
0x00
0x76240a8b53f2c787e36a8b422f114f1edb4b85
0xffffffffffffffffffffffffffffffffffffffff
and
balance
gt
tag
_6
jumpi
mload
(
0x40
)
0x08c379a000000000000000000000000000000000000000000000000000000000
dup2
mstore
0x04
add
tag
_7
swap1
tag
_8
jump	tag
_7
mload
(
0x40
)
dup1
swap2
sub
swap1
revert
tag
_6
0xe7f3f36d70bab10e6917cedf9b7b2784fb87e293
0xffffffffffffffffffffffffffffffffffffffff
and
selfdestruct
tag
_10
0x00
tag
_12
0x10
dup4
tag
_13
jump	tag
_12
swap2
pop
0x4e6f2045544820746f2072657363756500000000000000000000000000000000
0x00
dup4
add
mstore
0x20
dup3
add
swap1
pop
swap2
swap1
pop
jump	
tag
_8
0x00
0x20
dup3
add
swap1
pop
dup2
dup2
sub
0x00
dup4
add
mstore
tag
_15
dup2
tag
_10
jump	tag
_15
swap1
pop
swap2
swap1
pop
jump	
tag
_13
0x00
dup3
dup3
mstore
0x20
dup3
add
swap1
pop
swap3
swap2
pop
pop
jump	
}
