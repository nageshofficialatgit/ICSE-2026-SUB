
mstore
(
0x40
 0x80
)
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x58d02b09
eq
tag
_2
jumpi
tag
_1
0x8ac7230489e80000
callvalue
eq
iszero
iszero
tag
_5
jumpi
0x0
dup1
revert
tag
_5
sload
(
0x0
)
timestamp
eq
iszero
iszero
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
timestamp
0x0
dup2
swap1
sstore
pop
0x0
0xf
timestamp
dup2
iszero
iszero
tag
_7
jumpi
invalid
tag
_7
mod
eq
iszero
tag
_8
jumpi
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0x8fc
address
0xffffffffffffffffffffffffffffffffffffffff
and
balance
swap1
dup2
iszero
mul
swap1
mload
(
0x40
)
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup9
dup9
call
swap4
pop
pop
pop
pop
iszero
dup1
iszero
tag
_9
jumpi
returndatasize
0x0
dup1
returndatacopy
returndatasize
0x0
revert
tag
_9
pop
tag
_8
stop
tag
_2
callvalue
dup1
iszero
tag
_10
jumpi
0x0
dup1
revert
tag
_10
pop
tag
_11
jump
(
tag
_12
)
tag
_11
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_12
sload
(
0x0
)
dup2
jump	
}
