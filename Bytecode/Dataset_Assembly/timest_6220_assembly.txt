
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xcd9354e4
eq
tag
_2
jumpi
tag
_1
0x0
dup1
timestamp
0x0
dup1
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
0x1
number
sub
blockhash
0x1
swap1
div
swap2
pop
0x989680
0x2
sload
(
0x0
)
dup5
add
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
0x20
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup7
gas
call
iszero
dup1
iszero
tag
_5
jumpi
returndatasize
0x0
dup1
returndatacopy
returndatasize
0x0
revert
tag
_5
pop
pop
pop
mload
(
0x40
)
returndatasize
0x20
dup2
lt
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
0x1
swap1
div
dup2
iszero
iszero
tag
_7
jumpi
invalid
tag
_7
mod
swap1
pop
dup1
timestamp
lt
iszero
tag
_8
jumpi
0x1
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
0x0
dup2
sload
dup1
swap3
swap2
swap1
0x1
add
swap2
swap1
pop
sstore
pop
tag
_8
pop
pop
stop
tag
_2
callvalue
dup1
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
pop
tag
_10
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_11
)
tag
_10
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_11
mstore
(
0x20
 0x1
)
dup1
0x0
mstore
keccak256
(
0x0
 0x40
)
0x0
swap2
pop
swap1
pop
sload
dup2
jump	
}
