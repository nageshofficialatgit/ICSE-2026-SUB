
mstore
(
0x40
 0x80
)
0x64
0x1
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x6cfe5947
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup4
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
0x0
dup1
0x0
timestamp
swap3
pop
0x0
swap2
pop
tag
_7
sload
(
0x1
)
dup3
lt
iszero
tag
_8
jumpi
0x0
dup1
dup4
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
swap1
pop
dup1
0x0
add
sload
dup4
lt
iszero
dup1
iszero
tag
_10
jumpi
pop
dup1
0x1
add
sload
dup4
gt
iszero
tag
_10
iszero
tag
_11
jumpi
dup1
0x2
add
sload
dup3
swap5
pop
swap5
pop
jump
(
tag
_6
)
tag
_11
dup2
dup1
0x1
add
swap3
pop
pop
jump
(
tag
_7
)
tag
_8
tag
_6
pop
pop
pop
swap1
swap2
jump	
}
