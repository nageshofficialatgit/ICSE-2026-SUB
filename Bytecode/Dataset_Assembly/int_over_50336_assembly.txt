
mstore
(
0x40
 0x80
)
0x0
0x1
sstore
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x27e235e3
eq
tag
_2
jumpi
dup1
0xa9059cbb
eq
tag
_3
jumpi
dup1
0xdd644f72
eq
tag
_4
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_5
jumpi
0x0
dup1
revert
tag
_5
pop
tag
_6
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_7
)
tag
_6
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_8
jumpi
0x0
dup1
revert
tag
_8
pop
tag
_9
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_10
)
tag
_9
stop
tag
_4
callvalue
dup1
iszero
tag
_11
jumpi
0x0
dup1
revert
tag
_11
pop
tag
_12
jump
(
tag
_13
)
tag
_12
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_7
mstore
(
0x20
 0x0
)
dup1
0x0
mstore
keccak256
(
0x0
 0x40
)
0x0
swap2
pop
swap1
pop
sload
dup2
jump	
tag
_10
0x0
dup1
tag
_15
sload
(
0x1
)
dup5
tag
_16
swap1
swap2
swap1
0xffffffff
and
jump	tag
_15
swap2
pop
tag
_17
dup3
dup5
tag
_18
swap1
swap2
swap1
0xffffffff
and
jump	tag
_17
swap1
pop
tag
_19
dup4
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
tag
_18
swap1
swap2
swap1
0xffffffff
and
jump	tag
_19
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
tag
_20
dup2
0x0
dup1
dup8
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
tag
_21
swap1
swap2
swap1
0xffffffff
and
jump	tag
_20
0x0
dup1
dup7
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
pop
pop
pop
pop
jump	
tag
_13
sload
(
0x1
)
dup2
jump	
tag
_16
0x0
dup1
0x0
dup5
eq
iszero
tag
_23
jumpi
0x0
swap2
pop
jump
(
tag
_22
)
tag
_23
dup3
dup5
mul
swap1
pop
dup3
dup5
dup3
dup2
iszero
iszero
tag
_24
jumpi
invalid
tag
_24
div
eq
iszero
iszero
tag
_25
jumpi
invalid
tag
_25
dup1
swap2
pop
tag
_22
pop
swap3
swap2
pop
pop
jump	
tag
_18
0x0
dup3
dup3
gt
iszero
iszero
iszero
tag
_27
jumpi
invalid
tag
_27
dup2
dup4
sub
swap1
pop
swap3
swap2
pop
pop
jump	
tag
_21
0x0
dup1
dup3
dup5
add
swap1
pop
dup4
dup2
lt
iszero
iszero
iszero
tag
_29
jumpi
invalid
tag
_29
dup1
swap2
pop
pop
swap3
swap2
pop
pop
jump	
}
dataSize
(
sub_0
)
dataOffset
(
sub_0
)
0xb
dup3
dup3
dup3
codecopy
dup1
mload
0x0
byte
0x73
eq
0x0
dup2
eq
tag
_2
jumpi
jump
(
tag
_1
)
tag
_2
invalid
tag
_1
pop
address
0x0
mstore
0x73
dup2
mstore8
dup3
dup2
return
stop
sub_0
assembly
{
eq
(
address
 deployTimeAddress
(
)
)
mstore
(
0x40
 0x80
)
0x0
dup1
revert
}
