
mstore
(
0x40
 0x60
)
jumpi
(
tag
_1
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_1
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x60
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x853828b6
eq
tag
_2
jumpi
dup1
0xd0e30db0
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
jumpi
(
tag
_4
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_4
tag
_5
jump
(
tag
_6
)
tag
_5
stop
tag
_3
tag
_7
jump
(
tag
_8
)
tag
_7
stop
tag
_6
0x0
dup1
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
swap2
pop
0x0
dup3
gt
iszero
tag
_10
jumpi
dup2
0x1
0x0
dup3
dup3
sload
sub
swap3
pop
pop
dup2
swap1
sstore
pop
caller
0xffffffffffffffffffffffffffffffffffffffff
and
dup3
mload
(
0x40
)
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup8
sub
(
gas
 0x8796
)
call
swap3
pop
pop
pop
swap1
pop
dup1
iszero
iszero
tag
_11
jumpi
0x0
dup1
revert
tag
_11
0x0
dup1
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
tag
_10
pop
pop
jump	
tag
_8
callvalue
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
0x0
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
callvalue
0x1
0x0
dup3
dup3
sload
add
swap3
pop
pop
dup2
swap1
sstore
pop
jump	
}
