
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xd56b2889
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
jump
(
tag
_5
)
tag
_4
stop
tag
_5
0x0
dup1
tag
_7
0x28
address
0xffffffffffffffffffffffffffffffffffffffff
and
balance
tag
_8
swap1
swap2
swap1
0xffffffff
and
jump	tag
_7
swap2
pop
tag
_9
dup3
address
0xffffffffffffffffffffffffffffffffffffffff
and
balance
tag
_10
swap1
swap2
swap1
0xffffffff
and
jump	tag
_9
swap1
pop
address
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mload
(
0x40
)
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup8
gas
call
swap3
pop
pop
pop
iszero
iszero
tag
_11
jumpi
invalid
tag
_11
pop
pop
jump	
tag
_8
0x0
dup1
0x0
dup5
eq
iszero
tag
_13
jumpi
0x0
swap2
pop
jump
(
tag
_12
)
tag
_13
dup3
dup5
mul
swap1
pop
dup3
dup5
dup3
dup2
iszero
iszero
tag
_14
jumpi
invalid
tag
_14
div
eq
iszero
iszero
tag
_15
jumpi
invalid
tag
_15
dup1
swap2
pop
tag
_12
pop
swap3
swap2
pop
pop
jump	
tag
_10
0x0
dup3
dup3
gt
iszero
iszero
iszero
tag
_17
jumpi
invalid
tag
_17
dup2
dup4
sub
swap1
pop
swap3
swap2
pop
pop
jump	
}
dataSize
(
sub_0
)
dataOffset
(
sub_0
)
0xb
dup3
dup3
dup3
codecopy
dup1
mload
0x0
byte
0x73
eq
0x0
dup2
eq
tag
_2
jumpi
jump
(
tag
_1
)
tag
_2
invalid
tag
_1
pop
address
0x0
mstore
0x73
dup2
mstore8
dup3
dup2
return
stop
sub_0
assembly
{
eq
(
address
 deployTimeAddress
(
)
)
mstore
(
0x40
 0x80
)
0x0
dup1
revert
}
