
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x4ee16aba
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_4
)
tag
_3
stop
tag
_4
0x0
dup1
0x0
dup4
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
swap1
pop
0x1
dup2
0x0
add
0x0
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
0xff
and
eq
iszero
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
0x80
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
callvalue
dup2
mstore
0x20
add
0x0
iszero
iszero
dup2
mstore
0x20
add
timestamp
dup2
mstore
pop
dup2
0x2
add
0x0
dup4
0x1
add
0x0
dup2
sload
dup1
swap3
swap2
swap1
0x1
add
swap2
swap1
pop
sstore
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
0x0
dup3
add
mload
dup2
0x0
add
exp
(
0x100
 0x0
)
dup2
sload
dup2
0xffffffffffffffffffffffffffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mul
or
swap1
sstore
pop
0x20
dup3
add
mload
dup2
0x1
add
sstore
0x40
dup3
add
mload
dup2
0x2
add
exp
(
0x100
 0x0
)
dup2
sload
dup2
0xff
mul
not
and
swap1
dup4
iszero
iszero
mul
or
swap1
sstore
pop
0x60
dup3
add
mload
dup2
0x3
add
sstore
swap1
pop
pop
pop
pop
jump	
}
