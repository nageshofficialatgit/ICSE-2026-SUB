
mstore
(
0x40
 0x80
)
0x0
dup1
exp
(
0x100
 0x0
)
dup2
sload
dup2
0xff
mul
not
and
swap1
dup4
0x3
dup2
gt
iszero
tag
_1
jumpi
invalid
tag
_1
mul
or
swap1
sstore
pop
callvalue
dup1
iszero
tag
_2
jumpi
0x0
dup1
revert
tag
_2
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x3197cbb6
eq
tag
_2
jumpi
dup1
0xc19d93fb
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_4
jumpi
0x0
dup1
revert
tag
_4
pop
tag
_5
jump
(
tag
_6
)
tag
_5
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_7
jumpi
0x0
dup1
revert
tag
_7
pop
tag
_8
jump
(
tag
_9
)
tag
_8
mload
(
0x40
)
dup1
dup3
0x3
dup2
gt
iszero
tag
_10
jumpi
invalid
tag
_10
0xff
and
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_6
sload
(
0x1
)
dup2
jump	
tag
_9
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
dup2
jump	
}
