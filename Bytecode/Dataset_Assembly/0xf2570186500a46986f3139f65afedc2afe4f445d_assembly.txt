
mstore
(
0x40
 0x60
)
0xc63e7b1dece63a77ed7e4aeef5efb3b05c81438d
0x0
dup1
0x100
exp
dup2
sload
dup2
0xffffffffffffffffffffffffffffffffffffffff
mul
not
and
swap1
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
mul
or
swap1
sstore
pop
jumpi
(
tag
_1
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_1
tag
_2
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x60
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xb535c741
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
jumpi
(
tag
_3
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_3
tag
_4
0x4
dup1
dup1
calldataload
0xffffffff
and
swap1
0x20
add
swap1
swap2
swap1
pop
pop
jump
(
tag
_5
)
tag
_4
stop
tag
_5
0x0
dup1
swap1
pop
tag
_7
dup2
0xffffffff
and
dup2
0xffffffff
and
lt
iszero
tag
_8
jumpi
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
mload
(
0x40
)
dup1
dup1
0x67697665426c6f636b5265776172642829000000000000000000000000000000
dup2
mstore
pop
0x11
add
swap1
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
keccak256
0x100000000000000000000000000000000000000000000000000000000
swap1
div
mload
(
0x40
)
dup2
0xffffffff
and
0x100000000000000000000000000000000000000000000000000000000
mul
dup2
mstore
0x4
add
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
0x0
dup8
sub
(
gas
 0x646e
)
call
swap3
pop
pop
pop
pop
tag
_9
dup1
dup1
0x1
add
swap2
pop
pop
jump
(
tag
_7
)
tag
_8
tag
_6
pop
pop
jump	
}
