
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x1fb82d26
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
dup3
add
dup1
calldataload
swap1
0x20
add
swap1
dup1
dup1
0x1f
add
0x20
dup1
swap2
div
mul
0x20
add
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
swap4
swap3
swap2
swap1
dup2
dup2
mstore
0x20
add
dup4
dup4
dup1
dup3
dup5
calldatacopy
dup3
add
swap2
pop
pop
pop
pop
pop
pop
swap2
swap3
swap2
swap3
swap1
pop
pop
pop
jump
(
tag
_5
)
tag
_4
stop
tag
_5
timestamp
0x0
dup3
mload
(
0x40
)
dup1
dup3
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
tag
_7
0x20
dup4
lt
iszero
iszero
tag
_8
jumpi
dup1
mload
dup3
mstore
0x20
dup3
add
swap2
pop
0x20
dup2
add
swap1
pop
0x20
dup4
sub
swap3
pop
jump
(
tag
_7
)
tag
_8
0x1
dup4
0x20
sub
0x100
exp
sub
dup1
not
dup3
mload
and
dup2
dup5
mload
and
dup1
dup3
or
dup6
mstore
pop
pop
pop
pop
pop
pop
swap1
pop
add
swap2
pop
pop
swap1
dup2
mstore
0x20
add
mload
(
0x40
)
dup1
swap2
sub
swap1
keccak256
dup2
swap1
sstore
pop
pop
jump	
}
