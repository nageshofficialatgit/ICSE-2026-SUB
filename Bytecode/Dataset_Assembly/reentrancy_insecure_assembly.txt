
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x5fd8c710
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
jump
(
tag
_5
)
tag
_4
stop
tag
_5
0x0
dup1
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
swap1
pop
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
dup3
mload
(
0x40
)
dup1
0x0
add
swap1
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup8
gas
call
swap3
pop
pop
pop
returndatasize
dup1
0x0
dup2
eq
tag
_8
jumpi
0x40
mload
swap2
pop
0x1f
not
0x3f
returndatasize
add
and
dup3
add
0x40
mstore
returndatasize
dup3
mstore
returndatasize
0x0
0x20
dup5
add
returndatacopy
jump
(
tag
_7
)
tag
_8
0x60
swap2
pop
tag
_7
pop
pop
swap1
pop
dup1
iszero
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
0x0
dup1
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
pop
pop
jump	
}
