
mstore
(
0x40
 0x80
)
0x60
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
0x12c
0xffff
and
dup2
mstore
0x20
add
0x4b0
0xffff
and
dup2
mstore
0x20
add
0x258
0xffff
and
dup2
mstore
pop
0x0
swap1
0x3
tag
_1
swap3
swap2
swap1
jump	tag
_1
pop
0x0
0x3
sstore
0x0
0x4
sstore
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
jump
(
tag
_4
)
tag
_2
dup3
0x3
dup2
add
swap3
dup3
iszero
tag
_5
jumpi
swap2
0x20
mul
dup3
add
tag
_6
dup3
dup2
gt
iszero
tag
_7
jumpi
dup3
mload
dup3
swap1
0xffff
and
swap1
sstore
swap2
0x20
add
swap2
swap1
0x1
add
swap1
jump
(
tag
_6
)
tag
_7
tag
_5
pop
swap1
pop
tag
_8
swap2
swap1
jump	tag
_8
pop
swap1
jump	tag
_9
tag
_10
swap2
swap1
tag
_11
dup1
dup3
gt
iszero
tag
_12
jumpi
0x0
dup2
0x0
swap1
sstore
pop
0x1
add
jump
(
tag
_11
)
tag
_12
pop
swap1
jump
tag
_10
swap1
jump	tag
_4
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xb8aca90b
eq
tag
_2
jumpi
dup1
0xe6369e41
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_4
jumpi
0x0
dup1
revert
tag
_4
pop
tag
_5
jump
(
tag
_6
)
tag
_5
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_7
jumpi
0x0
dup1
revert
tag
_7
pop
tag
_8
jump
(
tag
_9
)
tag
_8
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_6
sload
(
0x3
)
dup2
jump	
tag
_9
sload
(
0x4
)
dup2
jump	
}
