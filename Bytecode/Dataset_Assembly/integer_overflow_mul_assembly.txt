
mstore
(
0x40
 0x60
)
0x2
0x0
sstore
jumpi
(
tag
_1
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_1
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x60
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x6661abd
eq
tag
_2
jumpi
dup1
0xa444f5e9
eq
tag
_3
jumpi
tag
_1
0x0
dup1
revert
tag
_2
jumpi
(
tag
_4
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_4
tag
_5
jump
(
tag
_6
)
tag
_5
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
jumpi
(
tag
_7
 iszero
(
callvalue
)
)
0x0
dup1
revert
tag
_7
tag
_8
0x4
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap2
swap1
pop
pop
jump
(
tag
_9
)
tag
_8
stop
tag
_6
sload
(
0x0
)
dup2
jump	
tag
_9
dup1
0x0
dup1
dup3
dup3
sload
mul
swap3
pop
pop
dup2
swap1
sstore
pop
pop
jump	
}
