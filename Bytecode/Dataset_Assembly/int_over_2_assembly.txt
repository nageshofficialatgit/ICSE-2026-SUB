
mstore
(
0x40
 0x80
)
0x0
dup1
exp
(
0x100
 0x0
)
dup2
sload
dup2
0xff
mul
not
and
swap1
dup4
0xff
and
mul
or
swap1
sstore
pop
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x2067e6a
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup2
0x0
dup1
dup3
dup3
dup3
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
add
swap3
pop
0x100
exp
dup2
sload
dup2
0xff
mul
not
and
swap1
dup4
0xff
and
mul
or
swap1
sstore
pop
0x0
dup1
swap1
sload
swap1
0x100
exp
swap1
div
0xff
and
0xff
and
swap1
pop
swap2
swap1
pop
jump	
}
