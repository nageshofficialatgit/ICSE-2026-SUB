
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
mload
(
0x40
)
0x20
dup1
bytecodeSize
dup4
codecopy
dup2
add
dup1
0x40
mstore
dup2
add
swap1
dup1
dup1
mload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
0x0
dup1
0x60
dup1
swap3
pop
dup3
0x4
add
swap2
pop
dup2
mload
(
0x40
)
swap1
dup1
dup3
mstore
dup1
0x1f
add
not
(
0x1f
)
and
0x20
add
dup3
add
0x40
mstore
dup1
iszero
tag
_4
jumpi
dup2
0x20
add
0x20
dup3
mul
dup1
codesize
dup4
codecopy
dup1
dup3
add
swap2
pop
pop
swap1
pop
tag
_4
pop
swap1
pop
dup4
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mload
(
0x40
)
dup1
dup3
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
0x0
tag
_5
dup4
dup2
lt
iszero
tag
_6
jumpi
dup1
dup3
add
mload
dup2
dup5
add
mstore
0x20
dup2
add
swap1
pop
jump
(
tag
_5
)
tag
_6
pop
pop
pop
pop
swap1
pop
swap1
dup2
add
swap1
0x1f
and
dup1
iszero
tag
_8
jumpi
dup1
dup3
sub
dup1
mload
0x1
dup4
0x20
sub
0x100
exp
sub
not
and
dup2
mstore
0x20
add
swap2
pop
tag
_8
pop
swap2
pop
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
gas
delegatecall
swap2
pop
pop
iszero
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
pop
pop
pop
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
0x0
dup1
revert
}
