
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xfb5a6b4
eq
tag
_2
jumpi
dup1
0x4b6753bc
eq
tag
_3
jumpi
dup1
0xb7a8807c
eq
tag
_4
jumpi
dup1
0xd83623dd
eq
tag
_5
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_6
jumpi
0x0
dup1
revert
tag
_6
pop
tag
_7
jump
(
tag
_8
)
tag
_7
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_3
callvalue
dup1
iszero
tag
_9
jumpi
0x0
dup1
revert
tag
_9
pop
tag
_10
jump
(
tag
_11
)
tag
_10
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
callvalue
dup1
iszero
tag
_12
jumpi
0x0
dup1
revert
tag
_12
pop
tag
_13
jump
(
tag
_14
)
tag
_13
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
callvalue
dup1
iszero
tag
_15
jumpi
0x0
dup1
revert
tag
_15
pop
tag
_16
jump
(
tag
_17
)
tag
_16
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_8
sload
(
0x2
)
dup2
jump	
tag
_11
sload
(
0x1
)
dup2
jump	
tag
_14
sload
(
0x0
)
dup2
jump	
tag
_17
0x0
timestamp
0x0
dup2
swap1
sstore
pop
tag
_19
sload
(
0x2
)
sload
(
0x0
)
tag
_20
swap1
swap2
swap1
0xffffffff
and
jump	tag
_19
0x1
dup2
swap1
sstore
pop
sload
(
0x1
)
swap1
pop
swap1
jump	
tag
_20
0x0
dup1
dup3
dup5
add
swap1
pop
dup4
dup2
lt
iszero
iszero
iszero
tag
_22
jumpi
invalid
tag
_22
dup1
swap2
pop
pop
swap3
swap2
pop
pop
jump	
}
dataSize
(
sub_0
)
dataOffset
(
sub_0
)
0xb
dup3
dup3
dup3
codecopy
dup1
mload
0x0
byte
0x73
eq
0x0
dup2
eq
tag
_2
jumpi
jump
(
tag
_1
)
tag
_2
invalid
tag
_1
pop
address
0x0
mstore
0x73
dup2
mstore8
dup3
dup2
return
stop
sub_0
assembly
{
eq
(
address
 deployTimeAddress
(
)
)
mstore
(
0x40
 0x80
)
0x0
dup1
revert
}
