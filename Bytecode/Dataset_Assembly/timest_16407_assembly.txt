
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x1e4d0caf
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
pop
pop
pop
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup4
dup2
mstore
0x20
add
dup3
dup2
mstore
0x20
add
swap3
pop
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup2
dup2
sload
dup2
lt
iszero
iszero
tag
_6
jumpi
invalid
tag
_6
swap1
0x0
mstore
keccak256
(
0x0
 0x20
)
swap1
0x3
mul
add
0x0
swap2
pop
swap1
pop
dup1
0x1
add
sload
swap1
dup1
0x2
add
sload
swap1
pop
dup3
jump	
}
