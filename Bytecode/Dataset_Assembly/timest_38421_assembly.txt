
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0x43a68e63
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
tag
_3
jump
(
tag
_4
)
tag
_3
mload
(
0x40
)
dup1
dup3
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_4
0x0
tag
_5
jump	tag
_5
timestamp
dup2
0x0
add
dup2
dup2
mstore
pop
pop
dup1
0x0
sload
(
0xa
)
0xa
dup2
lt
iszero
iszero
tag
_8
jumpi
invalid
tag
_8
add
0x0
dup3
add
mload
dup2
0x0
add
sstore
swap1
pop
pop
0xa
0x0
dup2
sload
dup1
swap3
swap2
swap1
0x1
add
swap2
swap1
pop
sstore
pop
sload
(
0xa
)
swap2
pop
pop
swap1
jump	
tag
_6
0x20
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
0x0
dup2
mstore
pop
swap1
jump	
}
