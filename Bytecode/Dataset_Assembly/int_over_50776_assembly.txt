
mstore
(
0x40
 0x80
)
callvalue
dup1
iszero
tag
_1
jumpi
0x0
dup1
revert
tag
_1
pop
dataSize
(
sub_0
)
dup1
dataOffset
(
sub_0
)
0x0
codecopy
0x0
return
stop
sub_0
assembly
{
mstore
(
0x40
 0x80
)
jumpi
(
tag
_1
 lt
(
calldatasize
 0x4
)
)
calldataload
(
0x0
)
0x100000000000000000000000000000000000000000000000000000000
swap1
div
0xffffffff
and
dup1
0xbe45fd62
eq
tag
_2
jumpi
tag
_1
0x0
dup1
revert
tag
_2
callvalue
dup1
iszero
tag
_3
jumpi
0x0
dup1
revert
tag
_3
pop
tag
_4
0x4
dup1
calldatasize
sub
dup2
add
swap1
dup1
dup1
calldataload
0xffffffffffffffffffffffffffffffffffffffff
and
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
swap3
swap2
swap1
dup1
calldataload
swap1
0x20
add
swap1
dup3
add
dup1
calldataload
swap1
0x20
add
swap1
dup1
dup1
0x1f
add
0x20
dup1
swap2
div
mul
0x20
add
mload
(
0x40
)
swap1
dup2
add
0x40
mstore
dup1
swap4
swap3
swap2
swap1
dup2
dup2
mstore
0x20
add
dup4
dup4
dup1
dup3
dup5
calldatacopy
dup3
add
swap2
pop
pop
pop
pop
pop
pop
swap2
swap3
swap2
swap3
swap1
pop
pop
pop
jump
(
tag
_5
)
tag
_4
mload
(
0x40
)
dup1
dup3
iszero
iszero
iszero
iszero
dup2
mstore
0x20
add
swap2
pop
pop
mload
(
0x40
)
dup1
swap2
sub
swap1
return
tag
_5
0x0
dup1
0x0
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
dup4
gt
iszero
iszero
iszero
tag
_7
jumpi
0x0
dup1
revert
tag
_7
tag
_8
dup4
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
tag
_9
swap1
swap2
swap1
0xffffffff
and
jump	tag
_8
0x0
dup1
caller
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
tag
_10
dup4
0x0
dup1
dup8
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
sload
tag
_11
swap1
swap2
swap1
0xffffffff
and
jump	tag
_10
0x0
dup1
dup7
0xffffffffffffffffffffffffffffffffffffffff
and
0xffffffffffffffffffffffffffffffffffffffff
and
dup2
mstore
0x20
add
swap1
dup2
mstore
0x20
add
0x0
keccak256
dup2
swap1
sstore
pop
caller
0xffffffffffffffffffffffffffffffffffffffff
and
dup4
dup4
mload
(
0x40
)
dup1
dup3
dup1
mload
swap1
0x20
add
swap1
dup1
dup4
dup4
0x0
tag
_12
dup4
dup2
lt
iszero
tag
_13
jumpi
dup1
dup3
add
mload
dup2
dup5
add
mstore
0x20
dup2
add
swap1
pop
jump
(
tag
_12
)
tag
_13
pop
pop
pop
pop
swap1
pop
swap1
dup2
add
swap1
0x1f
and
dup1
iszero
tag
_15
jumpi
dup1
dup3
sub
dup1
mload
0x1
dup4
0x20
sub
0x100
exp
sub
not
and
dup2
mstore
0x20
add
swap2
pop
tag
_15
pop
swap2
pop
pop
0x0
mload
(
0x40
)
dup1
dup4
sub
dup2
dup6
dup8
gas
call
swap3
pop
pop
pop
pop
0x1
swap1
pop
swap4
swap3
pop
pop
pop
jump	
tag
_9
0x0
dup3
dup3
gt
iszero
iszero
iszero
tag
_17
jumpi
invalid
tag
_17
dup2
dup4
sub
swap1
pop
swap3
swap2
pop
pop
jump	
tag
_11
0x0
dup1
dup3
dup5
add
swap1
pop
dup4
dup2
lt
iszero
iszero
iszero
tag
_19
jumpi
invalid
tag
_19
dup1
swap2
pop
pop
swap3
swap2
pop
pop
jump	
}
dataSize
(
sub_0
)
dataOffset
(
sub_0
)
0xb
dup3
dup3
dup3
codecopy
dup1
mload
0x0
byte
0x73
eq
0x0
dup2
eq
tag
_2
jumpi
jump
(
tag
_1
)
tag
_2
invalid
tag
_1
pop
address
0x0
mstore
0x73
dup2
mstore8
dup3
dup2
return
stop
sub_0
assembly
{
eq
(
address
 deployTimeAddress
(
)
)
mstore
(
0x40
 0x80
)
0x0
dup1
revert
}
