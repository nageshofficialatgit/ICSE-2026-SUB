Contract: CommitRevealBounty
==================================================

Function: postBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Must send ETH as a bounty)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bounties[_hash].amount == 0,Bounty already exists)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bounties[_hash] = Bounty({hash:_hash,amount:msg.value,asker:msg.sender,solved:false,solver:address(0)})

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BountyPosted(_hash,msg.sender,msg.value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: commitSolution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(commitments[msg.sender].committedHash == 0,Already committed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: commitments[msg.sender] = Commitment({committedHash:_committedHash,solver:msg.sender})

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SolutionCommitted(msg.sender,_committedHash)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: revealSolution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: computedHash = keccak256(bytes)(abi.encodePacked(_solution))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: commitment = commitments[msg.sender]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: bounty = bounties[computedHash]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(commitment.solver == msg.sender,No commitment found)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(keccak256(bytes)(abi.encodePacked(_solution)) == commitment.committedHash,Commitment mismatch)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bounty.amount > 0,No bounty for this hash)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! bounty.solved,Bounty already solved)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: bounty.solved = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: bounty.solver = msg.sender

  ID: 10
  Type: NodeType.VARIABLE
  Expression: reward = bounty.amount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: bounty.amount = 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(reward)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SolutionRevealed(computedHash,msg.sender,_solution,reward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13


