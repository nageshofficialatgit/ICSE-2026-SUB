Contract: IERC20
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: UniswapTradingBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: start
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isActive,Bot is already running)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 10000000000000000,Insufficient contract balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isActive = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BotStarted()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: stop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isActive,Bot is not running)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isActive = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BotStopped()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: executeTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isActive,Bot is not active)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: profit = checkProfitability(token,amountIn)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(profit > 0,No profitable trade found)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOut = buyTokens(token,amountIn)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: sellTokens(token,amountOut)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ProfitabilityDetected(token,profit,amountIn,gasLimit * tx.gasprice,slippageTolerance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = getPath(WETH,token)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactETHForTokens{value: amountIn}(1,path,address(this),block.timestamp + 300)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(Buy,amountIn,amounts[1],token)

  ID: 4
  Type: NodeType.RETURN
  Expression: amounts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: sellTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).approve(UNISWAP_ROUTER,amountIn)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = getPath(token,WETH)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForETH(amountIn,1,path,address(this),block.timestamp + 300)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(Sell,amountIn,amounts[1],token)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: checkProfitability
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = IUniswapV2Factory(UNISWAP_FACTORY).getPair(token,WETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != address(0),Pair not found)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (reserve0,reserve1,None) = IUniswapV2Pair(pair).getReserves()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: tokenPrice = (wethReserve * 1e18) / tokenReserve

  ID: 10
  Type: NodeType.VARIABLE
  Expression: sellPrice = tokenPrice - (tokenPrice * slippageTolerance) / 10_000

  ID: 11
  Type: NodeType.VARIABLE
  Expression: profit = (sellPrice * amountIn) / 1e18

  ID: 12
  Type: NodeType.VARIABLE
  Expression: gasCost = gasLimit * tx.gasprice

  ID: 14
  Type: NodeType.IF
  Expression: (IUniswapV2Pair(pair).token0() == WETH)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: (tokenReserve,wethReserve) = (reserve1,reserve0)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (tokenReserve,wethReserve) = (reserve0,reserve1)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: profit > (amountIn + gasCost)

  ID: 19
  Type: NodeType.RETURN
  Expression: profit - (amountIn + gasCost)

  ID: 20
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 18
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 9
  18 -> 19
  18 -> 20

Function: getPath
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = fromToken

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = toToken

  ID: 4
  Type: NodeType.RETURN
  Expression: path

  ID: 5
  Type: NodeType.RETURN
  Expression: path

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(contractBalance > 0,No funds to withdraw)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(owner).call{value: contractBalance}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Withdrawal failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: FundsWithdrawn(owner,contractBalance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: setSlippageTolerance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_slippage <= 1000,Slippage too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: slippageTolerance = _slippage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SlippageUpdated(_slippage)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setGasLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_gasLimit >= 100_000,Gas limit too low)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: gasLimit = _gasLimit

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: GasLimitUpdated(_gasLimit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: checkAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20(token).allowance(address(this),spender)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: slippageTolerance = 300

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: gasLimit = 300_000

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNISWAP_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f

Edges:
  0 -> 1
  1 -> 2


