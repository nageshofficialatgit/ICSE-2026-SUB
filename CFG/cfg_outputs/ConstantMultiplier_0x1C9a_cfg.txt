Contract: IMultiplier
==================================================


Contract: ConstantMultiplier
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _durationThresholds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: threshold = _durationThresholds[i]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(threshold.threshold > 0,ConstantMultiplier::setMultiplierThresholds: threshold = 0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(threshold.multiplier > 0,ConstantMultiplier::setMultiplierThresholds: multiplier = 0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: durationThresholds.push(threshold)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4

Function: applyMultiplier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: multiplier = getMultiplier(_amount,_duration)

  ID: 2
  Type: NodeType.RETURN
  Expression: (_amount * multiplier) / MULTIPLIER_BASIS

Edges:
  0 -> 1
  1 -> 2

Function: getMultiplier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getDurationMultiplier(_duration)

Edges:
  0 -> 1

Function: getDurationGroup
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = durationThresholds.length - 1

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i > 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: threshold = durationThresholds[i]

  ID: 6
  Type: NodeType.IF
  Expression: _duration >= threshold.threshold

  ID: 7
  Type: NodeType.RETURN
  Expression: i

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i --

  ID: 10
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 3
  1 -> 4
  2 -> 10
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 4

Function: getDurationMultiplier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: group = getDurationGroup(_duration)

  ID: 2
  Type: NodeType.RETURN
  Expression: durationThresholds[group].multiplier

Edges:
  0 -> 1
  1 -> 2

Function: getDurationThresholds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: durationThresholds

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MULTIPLIER_BASIS = 1e4

Edges:


