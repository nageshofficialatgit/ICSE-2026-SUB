Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: EDMA
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whitelist[_msgSender()] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[_msgSender()] = _totalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Received(msg.sender,msg.value)

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(burningEnabled,Burning is not enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0 && _balances[msg.sender] >= amount,Invalid token amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: checkIfCanSpend(msg.sender,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] -= amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Burned(msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingEnabled,Trading is already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tradingEnabled = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TradingEnabled()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: toggleBurning
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: burningEnabled = ! burningEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferAndVest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(msg.sender) >= amount,Insufficient balance)

  ID: 2
  Type: NodeType.IF
  Expression: vesting[recipient].totalLocked == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vesting[recipient] = VestingSchedule(amount,0,block.timestamp,false)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vesting[recipient].totalLocked = vesting[recipient].totalLocked + amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: vesting[recipient].lastRelasedTime = block.timestamp

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokensVested(recipient,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyPreSale()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: calculateToBeUnlockNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: vestinDetails = vesting[recepient]

  ID: 2
  Type: NodeType.IF
  Expression: vestinDetails.totalLocked == 0 || vestinDetails.totalLocked - vestinDetails.totalReleased <= 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: vestinDetails.isFirstReleased && block.timestamp < vestinDetails.lastRelasedTime + vestingInterval

  ID: 6
  Type: NodeType.RETURN
  Expression: 0

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: intervalPassed = (block.timestamp - vestinDetails.lastRelasedTime) / vestingInterval

  ID: 9
  Type: NodeType.IF
  Expression: tradingEnabled && ! vestinDetails.isFirstReleased

  ID: 10
  Type: NodeType.IF
  Expression: intervalPassed <= 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: intervalPassed = 1

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: toRelease = (vestinDetails.totalLocked * (intervalPassed * 20)) / 100

  ID: 15
  Type: NodeType.IF
  Expression: toRelease > vestinDetails.totalLocked - vestinDetails.totalReleased

  ID: 16
  Type: NodeType.RETURN
  Expression: vestinDetails.totalLocked - vestinDetails.totalReleased

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: toRelease

  ID: 19
  Type: NodeType.RETURN
  Expression: toUnlockAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 13
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  17 -> 18

Function: setWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whitelist[user] = isWhitelisted

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: preSaleAddress = presale

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whitelist[presale] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setvestingInterval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: vestingInterval = second

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()] - amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] - subtractedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: recoverStuckTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).transfer(recipient,amount),EDMA: Token recovery failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TokensRecovered(token,recipient,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: recoverStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balnce = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balnce > 0,EDMA: No ETH to recover)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(recipient).transfer(balnce)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ETHRecovered(recipient,balnce)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: checkIfCanSpend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: toRelease = calculateToBeUnlockNext(sender)

  ID: 2
  Type: NodeType.IF
  Expression: toRelease > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vesting[sender].totalReleased = vesting[sender].totalReleased + toRelease

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vesting[sender].lastRelasedTime = block.timestamp

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: lockedBalance = vesting[sender].totalLocked - vesting[sender].totalReleased

  ID: 7
  Type: NodeType.IF
  Expression: lockedBalance > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= balanceOf(sender) - lockedBalance,Amount exceeds unlocked balance)

  ID: 9
  Type: NodeType.IF
  Expression: ! vesting[sender].isFirstReleased && tradingEnabled

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: vesting[sender].isFirstReleased = true

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 12
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),EDMA: transfer from zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),EDMA: transfer to zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,EDMA: amount must not be zero)

  ID: 4
  Type: NodeType.IF
  Expression: ! whitelist[sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingEnabled,EDMA: trading is not enabled)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: checkIfCanSpend(sender,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),EDMA: approve from zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),EDMA: approve to zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: vestingInterval = 7776000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = EDMA

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = EDM

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 500_000_000 * 10 ** _decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


