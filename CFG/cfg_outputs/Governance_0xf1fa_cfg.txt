Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: IERC20Errors
==================================================


Contract: IERC721Errors
==================================================


Contract: IERC1155Errors
==================================================


Contract: ERC20
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += value

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fromBalance = _balances[from]

  ID: 4
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - value

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += value

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = value

  ID: 8
  Type: NodeType.IF
  Expression: emitEvent

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7


Contract: IStabilityModule
==================================================


Contract: DSMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((z = x + y) >= x,ds-math-add-overflow)

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = mul((x / mul(y,RAY)),WAD)

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: y > 3

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: z = y

  ID: 3
  Type: NodeType.VARIABLE
  Expression: x = y / 2 + 1

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: x < z

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: x = (y / x + x) / 2

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: y != 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: z = 1

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 5
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 28

Edges:
  0 -> 1


Contract: Governance
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_team != address(0),invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mint(_team,14e25)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: team = _team

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ERC20(GOV,GOV)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from != address(0) && from != vestingContract

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalVested = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: vestedBalance = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: schedules = userSchedules[from]

  ID: 5
  Type: NodeType.IF
  Expression: schedules.length > 0

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < schedules.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: schedule = vestingSchedules[from][schedules[i]]

  ID: 11
  Type: NodeType.IF
  Expression: block.timestamp >= schedule.cliffEnd

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalVested += calculateAvailableTokens(from,schedules[i])

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: vestedBalance += schedule.totalAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(value <= freeBalance + totalVested,Amount exceeds available tokens)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: super._update(from,to,value)

  ID: 21
  Type: NodeType.IF
  Expression: balanceOf(from) > vestedBalance

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: freeBalance = balanceOf(from) - vestedBalance

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: freeBalance = 0

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 19
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  5 -> 18
  6 -> 9
  7 -> 21
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 9
  17 -> 18
  18 -> 19
  19 -> 20
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 17

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = value

  ID: 8
  Type: NodeType.IF
  Expression: emitEvent

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: calculateAvailableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = vestingSchedules[account][_schedule]

  ID: 2
  Type: NodeType.IF
  Expression: block.timestamp < schedule.cliffEnd

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: block.timestamp >= schedule.vestingEnd

  ID: 6
  Type: NodeType.RETURN
  Expression: schedule.totalAmount

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: monthsSinceLastClaim = (block.timestamp - schedule.lastClaimTime) / 2592000

  ID: 9
  Type: NodeType.VARIABLE
  Expression: newVestedAmount = monthsSinceLastClaim * schedule.monthlyAmount

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalVested = schedule.amountClaimed + newVestedAmount

  ID: 12
  Type: NodeType.IF
  Expression: totalVested > schedule.totalAmount

  ID: 13
  Type: NodeType.RETURN
  Expression: schedule.totalAmount

  ID: 14
  Type: NodeType.RETURN
  Expression: totalVested

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  12 -> 13
  12 -> 14

Function: init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! initialized,contract is initialized)

  ID: 2
  Type: NodeType.IF
  Expression: rewardDistributorAddress == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ZeroAddress()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: stabilityModuleAddress == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ZeroAddress()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: vestingAddress == address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert ZeroAddress()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: rewardDistributor = rewardDistributorAddress

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: stabilityModule = IStabilityModule(stabilityModuleAddress)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: vestingContract = vestingAddress

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: initialized = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: stabilityModule.updateLastGovContractCall(msg.sender)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyTeam()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: mintDaily
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyMintAmount = 1e23

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(numDays != 0,number of days cannot be 0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalMintAmount = dailyMintAmount * numDays

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalDailyMinted + totalMintAmount <= DAILY_MINT_CAP,Daily mint cap of 72M reached)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mint(rewardDistributor,9e22 * numDays)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _mint(address(team),1e22 * numDays)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalDailyMinted += totalMintAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lastMintTimestamp = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: stabilityModule.updateLastGovContractCall(msg.sender)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: mustInit()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyTeam()

  ID: 13
  Type: NodeType.IF
  Expression: lastMintTimestamp == 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: numDays = 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: numDays = (block.timestamp - lastMintTimestamp) / 86400

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 11
  1 -> 13
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 3

Function: proposeVote
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stabilityModule.getGovernanceStake(msg.sender).amount > stabilityModule.getTotalPoolAmount() / 10,user needs to stake more tokens in pool to start vote!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: voteCount ++

  ID: 3
  Type: NodeType.VARIABLE
  Expression: voteId = voteCount

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _thisVote = voteInfo[voteId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _thisVote.initiator = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _thisVote.startTime = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _thisVote.tallyTime = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _thisVote.voteAddress = voteAddress

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _thisVote.voteFunction = voteFunction

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _thisVote.data = voteData

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: stabilityModule.updateLastGovContractCall(msg.sender)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: VoteProposed(msg.sender,voteId,_thisVote.startTime,_thisVote.voteAddress)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyVoter()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: mustInit()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  14 -> 1

Function: executeVote
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: v = voteInfo[numberOfVote]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(v.amountSupporting + v.amountAgainst + v.amountAbstained > (stabilityModule.getTotalPoolAmount() * 3) / 4,75% of pool has not voted yet!)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(v.tallyTime == 0,Vote has already been tallied)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _duration = 172800

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp - v.startTime > _duration,Time for voting has not elapsed)

  ID: 6
  Type: NodeType.IF
  Expression: v.amountSupporting > (stabilityModule.getTotalPoolAmount() * 51) / 100

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: v.result = true

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _destination = v.voteAddress

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (_succ,_res) = _destination.call(abi.encodePacked(v.voteFunction,v.data))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_succ,error running _destination.call)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: v.result = false

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: v.executed = true

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: v.tallyTime = block.timestamp

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: stabilityModule.updateLastGovContractCall(msg.sender)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: VoteExecuted(msg.sender,v.result)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: onlyVoter()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: mustInit()

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: voteExists(numberOfVote)

Edges:
  0 -> 19
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 13
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  19 -> 20
  20 -> 21
  21 -> 1

Function: vote
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: v = voteInfo[numberOfVote]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(v.tallyTime == 0,Vote has already been tallied)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! v.voted[msg.sender],Sender has already voted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: v.voted[msg.sender] = true

  ID: 5
  Type: NodeType.IF
  Expression: isAbstains

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: v.amountAbstained += balanceOf(msg.sender)

  ID: 7
  Type: NodeType.IF
  Expression: isSupports

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: v.amountSupporting += balanceOf(msg.sender)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: v.amountAgainst += balanceOf(msg.sender)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: stabilityModule.updateLastGovContractCall(msg.sender)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: lastVoteTimestamp[msg.sender] = block.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Voted(msg.sender,numberOfVote)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyVoter()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: mustInit()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: voteExists(numberOfVote)

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 11
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 16
  16 -> 17
  17 -> 1

Function: setVestingSchedule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == vestingContract,Only vesting contract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(investor != address(0),Invalid investor address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: monthlyAmount = (amount * 2592000) / vestingDuration

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vestingSchedules[investor][schedule] = VestingSchedule({totalAmount:amount,cliffEnd:block.timestamp + cliffDuration,vestingEnd:block.timestamp + cliffDuration + vestingDuration,lastClaimTime:block.timestamp + cliffDuration,monthlyAmount:monthlyAmount,amountClaimed:0,schedule:schedule})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: userSchedules[investor].push(schedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getUserVestingSchedules
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: userSchedules[user]

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastMintTimestamp = 0

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAILY_MINT_CAP = 72e24

Edges:


