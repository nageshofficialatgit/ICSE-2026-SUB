Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ERC20Basic
==================================================


Contract: ERC20
==================================================


Contract: BasicToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[_from])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= allowed[_from][msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: MintableToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[_from])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= allowed[_from][msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

Edges:


Contract: BurnableToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 2
  Type: NodeType.VARIABLE
  Expression: burner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[burner] = balances[burner].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Burn(burner,_value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = true

Edges:


Contract: PausableToken
==================================================

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.approve(_spender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = true

Edges:


Contract: AcjToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[_from])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= allowed[_from][msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: super.burn(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: AcjToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 150000000000000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = totalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: paused = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: activate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: finishMinting()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: initialTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Artist Connect Coin

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = ACJ

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2


Contract: AcjCrowdsale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: proposeNewOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyNewOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: AcjCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_presaleEnd > _presaleStart)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_icoStart > _presaleEnd)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_icoEnd > _icoStart)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: startPresale = _presaleStart

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: endPresale = _presaleEnd

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: startIco = _icoStart

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: endIco = _icoEnd

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ethTokenRate = _rate

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: admins[msg.sender] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: companyWallet = msg.sender

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: token = _token

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_adr != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admins[_adr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_adr != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admins[_adr] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateCompanyWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: companyWallet = _wallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

Edges:
  0 -> 2
  2 -> 1

Function: proposeTokenOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _token = AcjToken(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _token.proposeNewOwner(_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptTokenOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _token = AcjToken(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _token.acceptOwnership()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: activateToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _token = AcjToken(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _token.activate()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: crowdsaleSuccess()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: afterSale()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 1

Function: adjustTokenExchangeRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > endPresale && now < startIco)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ethTokenRate = _rate

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenRateUpdated(_rate)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: refundContribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! refunds[msg.sender])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributions[msg.sender] > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _amount = contributions[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenBalances[msg.sender] = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: refunds[msg.sender] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Refunded(msg.sender,contributions[msg.sender])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(_amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: crowdsaleFailed()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: afterSale()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: withdrawUnclaimed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > endIco + REFUND_PERIOD || isSuccess())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: companyWallet.transfer(this.balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reserveTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_beneficiary != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _distributed = tokensDistributed.add(_tokensQty)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_distributed <= TOKENS_TOTAL_SUPPLY)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenBalances[_beneficiary] = _tokensQty.add(tokenBalances[_beneficiary])

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: tokensDistributed = _distributed

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _token = AcjToken(token)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _token.initialTransfer(_beneficiary,_tokensQty)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: adminOnly()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: belowTotalSupply()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_beneficiary != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _weiAmount = msg.value

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _tokensQty = msg.value.mul(getBonus(_weiAmount))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _distributed = _tokensQty.add(tokensDistributed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _sold = _tokensQty.add(tokensSold)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_distributed <= TOKENS_TOTAL_SUPPLY)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sold <= TOKENS_FOR_SALE)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: contributions[_beneficiary] = _weiAmount.add(contributions[_beneficiary])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokenBalances[_beneficiary] = _tokensQty.add(tokenBalances[_beneficiary])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: weiReceived = weiReceived.add(_weiAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokensDistributed = _distributed

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: tokensSold = _sold

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Contribute(_beneficiary,msg.value)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: _token = AcjToken(token)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _token.initialTransfer(_beneficiary,_tokensQty)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: duringSale()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: aboveMinimum()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: belowHardCap()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 17
  17 -> 18
  18 -> 1

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now > endIco

Edges:
  0 -> 1

Function: isSuccess
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tokensDistributed >= TOKENS_SOFT_CAP

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: isFailed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tokensDistributed < TOKENS_SOFT_CAP && now > endIco

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: getBonus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _bonus = 0

  ID: 2
  Type: NodeType.IF
  Expression: endPresale > now

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _bonus = _bonus.add(BONUS_PRESALE)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: _wei >= BONUS_HI_QTY

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _bonus = _bonus.add(BONUS_HI)

  ID: 7
  Type: NodeType.IF
  Expression: _wei >= BONUS_MID_QTY

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _bonus = _bonus.add(BONUS_MID)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: ethTokenRate.mul(100 + _bonus) / 100

  ID: 12
  Type: NodeType.RETURN
  Expression: ethToAcj

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_PRESALE = 10

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_MID = 10

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_HI = 20

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_MID_QTY = 150000000000000000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_HI_QTY = 335000000000000000000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REFUND_PERIOD = 2592000

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKENS_TOTAL_SUPPLY = 150000000000000000000000000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKENS_FOR_SALE = 75000000000000000000000000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKENS_SOFT_CAP = 500000000000000000000000

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_CONTRIBUTION = 100000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


