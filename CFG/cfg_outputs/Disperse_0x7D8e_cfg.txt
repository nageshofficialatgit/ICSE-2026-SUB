Contract: IERC20
==================================================


Contract: TransferHelper
==================================================

Function: safeTransferETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = to.call{value: value}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeTransferWithoutRequire
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = token.call(abi.encodeWithSelector(IERC20.transfer.selector,to,value))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Token transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (token == address(0))

Edges:
  0 -> 1


Contract: Disperse
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executor = msg.sender

Edges:
  0 -> 1

Function: disperseEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < recipients.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: recipients[i].transfer(values[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 8
  Type: NodeType.IF
  Expression: balance > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(balance)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 3
  1 -> 4
  2 -> 7
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10

Function: disperseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: total = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < recipients.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: total += values[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transferFrom(msg.sender,address(this),total))

  ID: 9
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 12
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < recipients.length

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transfer(recipients[i_scope_0],values[i_scope_0]))

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 11
  9 -> 12
  11 -> 9
  12 -> 13
  12 -> 10
  13 -> 14
  14 -> 12

Function: disperseTokenSimple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < recipients.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transferFrom(msg.sender,recipients[i],values[i]))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: index < tokens.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: TransferHelper.isETH(tokens[index])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: amount = address(this).balance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amount = IERC20(tokens[index]).balanceOf(address(this))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferWithoutRequire(tokens[index],recipient,amount)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Withdraw(tokens[index],msg.sender,recipient,amount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: index ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyExecutor()

Edges:
  0 -> 14
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 4
  14 -> 3


