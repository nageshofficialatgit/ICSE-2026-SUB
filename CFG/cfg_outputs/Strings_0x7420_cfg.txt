Contract: Strings
==================================================

Function: toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: temp = value

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: temp != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: digits ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: temp /= 10

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: buffer = new bytes(digits)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: value != 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: digits -= 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: value /= 10

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: string(buffer)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 17
  14 -> 15
  15 -> 16
  16 -> 13
  17 -> 18

Function: toHexString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = new bytes(2 * length + 2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = x

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 2 * length + 1

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i > 1

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: buffer[i] = _HEX_SYMBOLS[value & 0xf]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: value >>= 4

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(value == 0,Strings: hex length insufficient)

  ID: 12
  Type: NodeType.RETURN
  Expression: string(buffer)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _HEX_SYMBOLS = 0123456789abcdef

Edges:


