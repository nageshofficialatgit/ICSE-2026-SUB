Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: EURCMirrorToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _initial = 1_000_000 * 10 ** decimals()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] = _initial

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply = _initial

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_initial)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20Metadata(realToken).name()

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20Metadata(realToken).symbol()

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20Metadata(realToken).decimals()

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[msg.sender] >= amount,Not enough balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[from] >= amount,Not enough balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance[from][msg.sender] >= amount,Not approved)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowance[from][msg.sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: withdrawERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(token).balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No token to withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).transfer(to,balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TokenWithdrawn(token,to,balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: realToken = 0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c

Edges:


