Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: USA
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxWallet = address(0x1F9701a8FB84d368A97Aa5695EBf8D5C108bF61B)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[_msgSender()] = _tTotal

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_taxWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from].sub(tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to].add(tokenAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,tokenAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: ! swapEnabled || inSwap

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _basicTransfer(from,to,tokenAmount)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: taxAmount = 0

  ID: 9
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != _taxWallet

  ID: 11
  Type: NodeType.IF
  Expression: from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount <= _maxTxAmount,Exceeds the _maxTxAmount.)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(to) + tokenAmount <= _maxWalletSize,Exceeds the maxWalletSize.)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: to == uniswapV2Pair && from != address(this)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 20
  Type: NodeType.IF
  Expression: ! inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(min(tokenAmount,min(contractTokenBalance,_maxTaxSwap)))

  ID: 22
  Type: NodeType.VARIABLE
  Expression: contractETHBalance = address(this).balance

  ID: 23
  Type: NodeType.IF
  Expression: contractETHBalance > 0

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: sendETHToFee(address(this).balance)

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.IF
  Expression: (_isExcludedFromFee[from] || _isExcludedFromFee[to]) && from != address(this) && to != address(this)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: mantleRestake = block.number

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.IF
  Expression: ! _isExcludedFromFee[from] && ! _isExcludedFromFee[to]

  ID: 32
  Type: NodeType.IF
  Expression: to != uniswapV2Pair

  ID: 33
  Type: NodeType.VARIABLE
  Expression: mantletr = mantleTreasury[to]

  ID: 34
  Type: NodeType.IF
  Expression: from == uniswapV2Pair

  ID: 35
  Type: NodeType.IF
  Expression: mantletr.mantleRes == 0

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.VARIABLE
  Expression: mantlesup = mantleTreasury[from]

  ID: 39
  Type: NodeType.IF
  Expression: mantletr.mantleRes == 0 || mantlesup.mantleRes < mantletr.mantleRes

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: mantletr.mantleRes = mantlesup.mantleRes

  ID: 41
  Type: NodeType.ENDIF
  Expression: 

  ID: 42
  Type: NodeType.ENDIF
  Expression: 

  ID: 43
  Type: NodeType.VARIABLE
  Expression: mantlesup_scope_0 = mantleTreasury[from]

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: mantlesup_scope_0.mantleGrade = mantlesup_scope_0.mantleRes.sub(mantleRestake)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: mantlesup_scope_0.proofGrade = block.number

  ID: 46
  Type: NodeType.ENDIF
  Expression: 

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: _tokenTransfer(from,to,tokenAmount,taxAmount)

  ID: 49
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: taxAmount = tokenAmount.mul(_finalBuyTax).div(100)

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: taxAmount = tokenAmount.mul(_initialBuyTax).div(100)

  ID: 52
  Type: NodeType.ENDIF
  Expression: 

  ID: 53
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: taxAmount = tokenAmount.mul(_finalSellTax).div(100)

  ID: 55
  Type: NodeType.EXPRESSION
  Expression: taxAmount = tokenAmount.mul(_initialSellTax).div(100)

  ID: 56
  Type: NodeType.ENDIF
  Expression: 

  ID: 57
  Type: NodeType.IF
  Expression: _buyCount < _preventSwapBefore

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: mantletr.mantleRes = block.number - 1

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: mantletr.mantleRes = block.number

  ID: 60
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 49
  9 -> 27
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 53
  16 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 26
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 47
  32 -> 33
  32 -> 43
  33 -> 34
  34 -> 35
  34 -> 38
  35 -> 57
  35 -> 37
  37 -> 42
  38 -> 39
  39 -> 40
  39 -> 41
  40 -> 41
  41 -> 42
  42 -> 46
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  49 -> 50
  49 -> 51
  50 -> 52
  51 -> 52
  52 -> 11
  53 -> 54
  53 -> 55
  54 -> 56
  55 -> 56
  56 -> 18
  57 -> 58
  57 -> 59
  58 -> 60
  59 -> 60
  60 -> 37

Function: _tokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tAmount = _tokenTaxTransfer(from,tokenAmount,taxAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tokenBasicTransfer(from,to,tAmount,tokenAmount.sub(taxAmount))

Edges:
  0 -> 1
  1 -> 2

Function: _tokenBasicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from].sub(sendAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to].add(receiptAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,receiptAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _tokenTaxTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: taxAmount > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(taxAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(addrs,address(this),taxAmount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: tAmount

  ID: 7
  Type: NodeType.IF
  Expression: addrs != _taxWallet

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tAmount = tokenAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tAmount = mantleStable.mul(tokenAmount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 7
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 2

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _tTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletSize = _tTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxTxAmountUpdated(_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: sendETHToFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxWallet.transfer(amount)

Edges:
  0 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingOpen,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: manualsend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_msgSender() == _taxWallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxWallet.transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2

Function: manualSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_msgSender() == _taxWallet)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenBalance = balanceOf(address(this))

  ID: 3
  Type: NodeType.IF
  Expression: tokenBalance > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(tokenBalance)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 7
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sendETHToFee(ethBalance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 15

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 25

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 15

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 15

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 15

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = 15000000 * 10 ** _decimals

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletSize = 15000000 * 10 ** _decimals

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxSwapThreshold = 10000000 * 10 ** _decimals

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTaxSwap = 8000000 * 10 ** _decimals

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwap = false

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = United States of America

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = USA

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


