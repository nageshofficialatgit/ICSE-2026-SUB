Contract: ChibiGoblin
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: taxWallet = 0xFA409f080Bc1Dc7895B61b858a3f4Cbec918602b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFee[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFee[taxWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,Allowance too low)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(from,msg.sender,currentAllowance - amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(holder != address(0) && spender != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[holder][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(holder,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0) && to != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[from] >= amount,Insufficient balance)

  ID: 3
  Type: NodeType.IF
  Expression: ! tradingOpen

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from == owner,Trading not open)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= amount

  ID: 7
  Type: NodeType.VARIABLE
  Expression: taxAmount = 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: takeFee = ! (isExcludedFromFee[from] || isExcludedFromFee[to])

  ID: 9
  Type: NodeType.IF
  Expression: takeFee

  ID: 10
  Type: NodeType.IF
  Expression: isPair[from] && ! isPair[to]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: taxAmount = (amount * buyTax) / 100

  ID: 12
  Type: NodeType.IF
  Expression: isPair[to] && ! isPair[from]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: taxAmount = (amount * sellTax) / 100

  ID: 14
  Type: NodeType.IF
  Expression: taxFreeLiquidityRemoval && isPair[from] && ! isPair[to]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: taxAmount = 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: taxAmount > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _balances[taxWallet] += taxAmount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,taxWallet,taxAmount)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: finalAmount = amount - taxAmount

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += finalAmount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,finalAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 19
  10 -> 11
  10 -> 12
  11 -> 18
  12 -> 13
  12 -> 14
  13 -> 17
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPair[pair] = status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: PairUpdated(pair,status)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setExcludeFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFee[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludedFromFee(account,excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setTaxes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_buyTax <= 25 && _sellTax <= 25,Too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyTax = _buyTax

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellTax = _sellTax

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TaxesUpdated(_buyTax,_sellTax)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TradingStatusChanged(status)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setTaxFreeLiquidityRemoval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: taxFreeLiquidityRemoval = status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TaxFreeLiquidityRemovalChanged(status)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setTaxWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newWallet != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: taxWallet = newWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TaxWalletChanged(newWallet)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyTax = 5

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellTax = 5

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: taxFreeLiquidityRemoval = true

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = ChibiGoblin

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = GOB

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 1_000_000_000 * 10 ** _decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


