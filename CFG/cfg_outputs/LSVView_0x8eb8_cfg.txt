Contract: MainnetAaveV3Addresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IAaveProtocolDataProvider
==================================================


Contract: DataTypes
==================================================


Contract: IPoolAddressesProvider
==================================================


Contract: IPoolV3
==================================================


Contract: IL2PoolV3
==================================================


Contract: AaveV3Helper
==================================================

Function: getLendingPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IL2PoolV3(IPoolAddressesProvider(_market).getPool())

Edges:
  0 -> 1

Function: getDataProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IAaveProtocolDataProvider(IPoolAddressesProvider(_market).getPoolDataProvider())

Edges:
  0 -> 1

Function: boolToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes1(0x01)

  ID: 4
  Type: NodeType.RETURN
  Expression: bytes1(0x00)

  ID: 6
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: bytesToBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x != bytes1(0x00)

  ID: 2
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1

Function: getWholeDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: STABLE_ID = 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: VARIABLE_ID = 2

  ID: 3
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (None,borrowsStable,borrowsVariable,None,None,None,None,None,None) = dataProvider.getUserReserveData(_tokenAddr,_debtOwner)

  ID: 7
  Type: NodeType.IF
  Expression: _borrowType == STABLE_ID

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsStable

  ID: 9
  Type: NodeType.IF
  Expression: _borrowType == VARIABLE_ID

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsVariable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: debt

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REFERRAL_CODE = 64

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: MainnetCompV3Addresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMET_REWARDS_ADDR = 0x1B0e765F6224C21223AeA2af16c1C46E38885a40

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMP_ETH_COMET = 0xA17581A9E3356d9A858b789D68B4d866e593aE94

Edges:
  0 -> 1


Contract: IComet
==================================================


Contract: CompV3Helper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMET_REWARDS_ADDR = 0x1B0e765F6224C21223AeA2af16c1C46E38885a40

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMP_ETH_COMET = 0xA17581A9E3356d9A858b789D68B4d866e593aE94

Edges:
  0 -> 1


Contract: LSVUtilMainnetAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETH_ADDRESS = 0xae78736Cd615f374D3085123A210448E74Fc6393

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CBETH_ADDRESS = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDRESS = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDRESS = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EZETH_ADDRESS = 0xbf5495Efe5DB9ce00f80364C8B423567e58d2110

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RENZO_MANAGER = 0x74a09653A083691711cF8215a6ab074BB4e99ef5

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROFIT_TRACKER_ADDRESS = 0xa5941F267995553dA9369F04Dc02f9411EEb2F12

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: DSMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

Edges:
  0 -> 1


Contract: IWeEth
==================================================


Contract: IERC20
==================================================


Contract: ICBETH
==================================================


Contract: IRETH
==================================================


Contract: IWstETH
==================================================


Contract: IRenzoOracle
==================================================


Contract: IRestakeManager
==================================================


Contract: LSVProfitTracker
==================================================

Function: supply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] -= downCastUintToInt(_amount)

Edges:
  0 -> 1

Function: borrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] += downCastUintToInt(_amount)

Edges:
  0 -> 1

Function: payback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] -= downCastUintToInt(_amount)

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] += downCastUintToInt(_amount)

  ID: 2
  Type: NodeType.IF
  Expression: unrealisedProfit[_protocol][msg.sender] > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: realisedProfit = uint256(unrealisedProfit[_protocol][msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] = 0

  ID: 5
  Type: NodeType.IF
  Expression: _isClosingVault

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit[_protocol][msg.sender] = 0

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: realisedProfit

  ID: 10
  Type: NodeType.RETURN
  Expression: realisedProfit

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 8
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: downCastUintToInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(uintAmount <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(uintAmount)

  ID: 3
  Type: NodeType.RETURN
  Expression: amount

Edges:
  0 -> 1
  1 -> 2


Contract: LSVUtilHelper
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: getAmountInETHFromLST
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lstAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: lstAddress == RETH_ADDRESS

  ID: 5
  Type: NodeType.RETURN
  Expression: IRETH(RETH_ADDRESS).getEthValue(lstAmount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: lstAddress == CBETH_ADDRESS

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rate = ICBETH(CBETH_ADDRESS).exchangeRate()

  ID: 9
  Type: NodeType.RETURN
  Expression: wmul(lstAmount,rate)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: lstAddress == WSTETH_ADDRESS

  ID: 12
  Type: NodeType.RETURN
  Expression: IWstETH(WSTETH_ADDRESS).getStETHByWstETH(lstAmount)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: lstAddress == WEETH_ADDRESS

  ID: 15
  Type: NodeType.RETURN
  Expression: IWeEth(WEETH_ADDRESS).getEETHByWeETH(lstAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: lstAddress == EZETH_ADDRESS

  ID: 18
  Type: NodeType.RETURN
  Expression: getRenzoRate(lstAmount,false)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: lstAmount

  ID: 21
  Type: NodeType.RETURN
  Expression: ethAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20

Function: getAmountInLSTFromETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ethAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: lstAddress == RETH_ADDRESS

  ID: 5
  Type: NodeType.RETURN
  Expression: IRETH(RETH_ADDRESS).getRethValue(ethAmount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: lstAddress == CBETH_ADDRESS

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rate = ICBETH(CBETH_ADDRESS).exchangeRate()

  ID: 9
  Type: NodeType.RETURN
  Expression: wdiv(ethAmount,rate)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: lstAddress == WSTETH_ADDRESS

  ID: 12
  Type: NodeType.RETURN
  Expression: IWstETH(WSTETH_ADDRESS).getWstETHByStETH(ethAmount)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: lstAddress == WEETH_ADDRESS

  ID: 15
  Type: NodeType.RETURN
  Expression: IWeEth(WEETH_ADDRESS).getWeETHByeETH(ethAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: lstAddress == EZETH_ADDRESS

  ID: 18
  Type: NodeType.RETURN
  Expression: getRenzoRate(ethAmount,true)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: ethAmount

  ID: 21
  Type: NodeType.RETURN
  Expression: lstAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20

Function: getRenzoRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: manager = IRestakeManager(RENZO_MANAGER)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oracle = IRenzoOracle(manager.renzoOracle())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,None,totalTVL) = manager.calculateTVLs()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ezEthTotalSupply = IERC20(EZETH_ADDRESS).totalSupply()

  ID: 7
  Type: NodeType.IF
  Expression: _convertFromEthToLst

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = oracle.calculateMintAmount(totalTVL,_amount,ezEthTotalSupply)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: rate = oracle.calculateRedeemAmount(_amount,ezEthTotalSupply,totalTVL)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: rate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETH_ADDRESS = 0xae78736Cd615f374D3085123A210448E74Fc6393

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CBETH_ADDRESS = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDRESS = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDRESS = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EZETH_ADDRESS = 0xbf5495Efe5DB9ce00f80364C8B423567e58d2110

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RENZO_MANAGER = 0x74a09653A083691711cF8215a6ab074BB4e99ef5

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROFIT_TRACKER_ADDRESS = 0xa5941F267995553dA9369F04Dc02f9411EEb2F12

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


Contract: MainnetMorphoBlueAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_BLUE_ADDRESS = 0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_WRAPPER = 0x9D03bb2092270648d7480049d0E58d2FcF0E5123

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LEGACY_MORPHO_TOKEN = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PUBLIC_ALLOCATOR = 0xfd32fA2ca22c76dD6E550706Ad913FC6CE91c75D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IMorphoBase
==================================================


Contract: IMorphoStaticTyping
==================================================


Contract: IMorphoBlue
==================================================


Contract: IIrm
==================================================


Contract: MorphoStorageLib
==================================================

Function: ownerSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(OWNER_SLOT)

Edges:
  0 -> 1

Function: feeRecipientSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(FEE_RECIPIENT_SLOT)

Edges:
  0 -> 1

Function: positionSupplySharesSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(user,keccak256(bytes)(abi.encode(id,POSITION_SLOT))))) + SUPPLY_SHARES_OFFSET)

Edges:
  0 -> 1

Function: positionBorrowSharesAndCollateralSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(user,keccak256(bytes)(abi.encode(id,POSITION_SLOT))))) + BORROW_SHARES_AND_COLLATERAL_OFFSET)

Edges:
  0 -> 1

Function: marketTotalSupplyAssetsAndSharesSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,MARKET_SLOT))) + TOTAL_SUPPLY_ASSETS_AND_SHARES_OFFSET)

Edges:
  0 -> 1

Function: marketTotalBorrowAssetsAndSharesSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,MARKET_SLOT))) + TOTAL_BORROW_ASSETS_AND_SHARES_OFFSET)

Edges:
  0 -> 1

Function: marketLastUpdateAndFeeSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,MARKET_SLOT))) + LAST_UPDATE_AND_FEE_OFFSET)

Edges:
  0 -> 1

Function: isIrmEnabledSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(irm,IS_IRM_ENABLED_SLOT))

Edges:
  0 -> 1

Function: isLltvEnabledSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(lltv,IS_LLTV_ENABLED_SLOT))

Edges:
  0 -> 1

Function: isAuthorizedSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(authorizee,keccak256(bytes)(abi.encode(authorizer,IS_AUTHORIZED_SLOT))))

Edges:
  0 -> 1

Function: nonceSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(authorizer,NONCE_SLOT))

Edges:
  0 -> 1

Function: idToLoanTokenSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,ID_TO_MARKET_PARAMS_SLOT))) + LOAN_TOKEN_OFFSET)

Edges:
  0 -> 1

Function: idToCollateralTokenSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,ID_TO_MARKET_PARAMS_SLOT))) + COLLATERAL_TOKEN_OFFSET)

Edges:
  0 -> 1

Function: idToOracleSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,ID_TO_MARKET_PARAMS_SLOT))) + ORACLE_OFFSET)

Edges:
  0 -> 1

Function: idToIrmSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,ID_TO_MARKET_PARAMS_SLOT))) + IRM_OFFSET)

Edges:
  0 -> 1

Function: idToLltvSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(keccak256(bytes)(abi.encode(id,ID_TO_MARKET_PARAMS_SLOT))) + LLTV_OFFSET)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: OWNER_SLOT = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_SLOT = 1

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: POSITION_SLOT = 2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_SLOT = 3

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IS_IRM_ENABLED_SLOT = 4

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IS_LLTV_ENABLED_SLOT = 5

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IS_AUTHORIZED_SLOT = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NONCE_SLOT = 7

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ID_TO_MARKET_PARAMS_SLOT = 8

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LOAN_TOKEN_OFFSET = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COLLATERAL_TOKEN_OFFSET = 1

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ORACLE_OFFSET = 2

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IRM_OFFSET = 3

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LLTV_OFFSET = 4

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUPPLY_SHARES_OFFSET = 0

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROW_SHARES_AND_COLLATERAL_OFFSET = 1

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOTAL_SUPPLY_ASSETS_AND_SHARES_OFFSET = 0

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOTAL_BORROW_ASSETS_AND_SHARES_OFFSET = 1

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LAST_UPDATE_AND_FEE_OFFSET = 2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18


Contract: MorphoLib
==================================================

Function: supplyShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.positionSupplySharesSlot(id,user))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(morpho.extSloads(slot)[0])

Edges:
  0 -> 1
  1 -> 2

Function: borrowShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.positionBorrowSharesAndCollateralSlot(id,user))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(uint256(morpho.extSloads(slot)[0]))

Edges:
  0 -> 1
  1 -> 2

Function: collateral
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.positionBorrowSharesAndCollateralSlot(id,user))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(morpho.extSloads(slot)[0] >> 128)

Edges:
  0 -> 1
  1 -> 2

Function: totalSupplyAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketTotalSupplyAssetsAndSharesSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(uint256(morpho.extSloads(slot)[0]))

Edges:
  0 -> 1
  1 -> 2

Function: totalSupplyShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketTotalSupplyAssetsAndSharesSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(morpho.extSloads(slot)[0] >> 128)

Edges:
  0 -> 1
  1 -> 2

Function: totalBorrowAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketTotalBorrowAssetsAndSharesSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(uint256(morpho.extSloads(slot)[0]))

Edges:
  0 -> 1
  1 -> 2

Function: totalBorrowShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketTotalBorrowAssetsAndSharesSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(morpho.extSloads(slot)[0] >> 128)

Edges:
  0 -> 1
  1 -> 2

Function: lastUpdate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketLastUpdateAndFeeSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(uint256(morpho.extSloads(slot)[0]))

Edges:
  0 -> 1
  1 -> 2

Function: fee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = _array(MorphoStorageLib.marketLastUpdateAndFeeSlot(id))

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(uint256(morpho.extSloads(slot)[0] >> 128))

Edges:
  0 -> 1
  1 -> 2

Function: _array
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: res = new bytes32[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: res[0] = x

  ID: 3
  Type: NodeType.RETURN
  Expression: res

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: MathLib
==================================================

Function: wMulDown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mulDivDown(x,y,WAD)

Edges:
  0 -> 1

Function: wDivDown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mulDivDown(x,WAD,y)

Edges:
  0 -> 1

Function: wDivUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mulDivUp(x,WAD,y)

Edges:
  0 -> 1

Function: mulDivDown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (x * y) / d

Edges:
  0 -> 1

Function: mulDivUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (x * y + (d - 1)) / d

Edges:
  0 -> 1

Function: wTaylorCompounded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: firstTerm = x * n

  ID: 2
  Type: NodeType.VARIABLE
  Expression: secondTerm = mulDivDown(firstTerm,firstTerm,2 * WAD)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: thirdTerm = mulDivDown(secondTerm,firstTerm,3 * WAD)

  ID: 4
  Type: NodeType.RETURN
  Expression: firstTerm + secondTerm + thirdTerm

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: ErrorsLib
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NOT_OWNER = not owner

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_LLTV_EXCEEDED = max LLTV exceeded

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_FEE_EXCEEDED = max fee exceeded

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ALREADY_SET = already set

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IRM_NOT_ENABLED = IRM not enabled

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LLTV_NOT_ENABLED = LLTV not enabled

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_ALREADY_CREATED = market already created

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_CODE = no code

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_NOT_CREATED = market not created

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INCONSISTENT_INPUT = inconsistent input

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO_ASSETS = zero assets

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO_ADDRESS = zero address

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNAUTHORIZED = unauthorized

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INSUFFICIENT_COLLATERAL = insufficient collateral

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INSUFFICIENT_LIQUIDITY = insufficient liquidity

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: HEALTHY_POSITION = position is healthy

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INVALID_SIGNATURE = invalid signature

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SIGNATURE_EXPIRED = signature expired

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INVALID_NONCE = invalid nonce

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSFER_REVERTED = transfer reverted

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSFER_RETURNED_FALSE = transfer returned false

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSFER_FROM_REVERTED = transferFrom reverted

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSFER_FROM_RETURNED_FALSE = transferFrom returned false

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_UINT128_EXCEEDED = max uint128 exceeded

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23


Contract: UtilsLib
==================================================

Function: exactlyOneZero
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: z = ! x ^ ! y

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: z = x ^ x ^ y * y < x

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: toUint128
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(x <= type()(uint128).max,ErrorsLib.MAX_UINT128_EXCEEDED)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint128(x)

Edges:
  0 -> 1
  1 -> 2

Function: zeroFloorSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: z = x > y * x - y

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: MarketParamsLib
==================================================

Function: id
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketParamsId = keccak256(uint256,uint256)(marketParams,MARKET_PARAMS_BYTES_LENGTH)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: marketParamsId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_PARAMS_BYTES_LENGTH = 5 * 32

Edges:


Contract: SharesMathLib
==================================================

Function: toSharesDown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets.mulDivDown(totalShares + VIRTUAL_SHARES,totalAssets + VIRTUAL_ASSETS)

Edges:
  0 -> 1

Function: toAssetsDown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares.mulDivDown(totalAssets + VIRTUAL_ASSETS,totalShares + VIRTUAL_SHARES)

Edges:
  0 -> 1

Function: toSharesUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets.mulDivUp(totalShares + VIRTUAL_SHARES,totalAssets + VIRTUAL_ASSETS)

Edges:
  0 -> 1

Function: toAssetsUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares.mulDivUp(totalAssets + VIRTUAL_ASSETS,totalShares + VIRTUAL_SHARES)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_SHARES = 1e6

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_ASSETS = 1

Edges:
  0 -> 1


Contract: MorphoBalancesLib
==================================================

Function: expectedMarketBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: id = marketParams.id()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: market = morpho.market(id)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: elapsed = block.timestamp - market.lastUpdate

  ID: 4
  Type: NodeType.IF
  Expression: elapsed != 0 && market.totalBorrowAssets != 0 && marketParams.irm != address(0)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: borrowRate = IIrm(marketParams.irm).borrowRateView(marketParams,market)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: interest = market.totalBorrowAssets.wMulDown(borrowRate.wTaylorCompounded(elapsed))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: market.totalBorrowAssets += interest.toUint128()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: market.totalSupplyAssets += interest.toUint128()

  ID: 9
  Type: NodeType.IF
  Expression: market.fee != 0

  ID: 10
  Type: NodeType.VARIABLE
  Expression: feeAmount = interest.wMulDown(market.fee)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: feeShares = feeAmount.toSharesDown(market.totalSupplyAssets - feeAmount,market.totalSupplyShares)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: market.totalSupplyShares += feeShares.toUint128()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: (market.totalSupplyAssets,market.totalSupplyShares,market.totalBorrowAssets,market.totalBorrowShares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 14
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 13
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: expectedTotalSupplyAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (totalSupplyAssets,None,None,None) = expectedMarketBalances(morpho,marketParams)

  ID: 2
  Type: NodeType.RETURN
  Expression: totalSupplyAssets

Edges:
  0 -> 1
  1 -> 2

Function: expectedTotalBorrowAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,None,totalBorrowAssets,None) = expectedMarketBalances(morpho,marketParams)

  ID: 2
  Type: NodeType.RETURN
  Expression: totalBorrowAssets

Edges:
  0 -> 1
  1 -> 2

Function: expectedTotalSupplyShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,totalSupplyShares,None,None) = expectedMarketBalances(morpho,marketParams)

  ID: 2
  Type: NodeType.RETURN
  Expression: totalSupplyShares

Edges:
  0 -> 1
  1 -> 2

Function: expectedSupplyAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: id = marketParams.id()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: supplyShares = morpho.supplyShares(id,user)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (totalSupplyAssets,totalSupplyShares,None,None) = expectedMarketBalances(morpho,marketParams)

  ID: 6
  Type: NodeType.RETURN
  Expression: supplyShares.toAssetsDown(totalSupplyAssets,totalSupplyShares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: expectedBorrowAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: id = marketParams.id()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: borrowShares = morpho.borrowShares(id,user)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (None,None,totalBorrowAssets,totalBorrowShares) = expectedMarketBalances(morpho,marketParams)

  ID: 6
  Type: NodeType.RETURN
  Expression: borrowShares.toAssetsUp(totalBorrowAssets,totalBorrowShares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: IOracle
==================================================


Contract: MorphoBlueHelper
==================================================

Function: getCurrentDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: morphoBlue.accrueInterest(marketParams)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: borrowShares = MorphoLib.borrowShares(morphoBlue,marketId,owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: currentDebtInAssets = SharesMathLib.toAssetsUp(borrowShares,MorphoLib.totalBorrowAssets(morphoBlue,marketId),MorphoLib.totalBorrowShares(morphoBlue,marketId))

  ID: 5
  Type: NodeType.RETURN
  Expression: (currentDebtInAssets,borrowShares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getSupplyShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: supplyShares = MorphoLib.supplyShares(morphoBlue,marketId,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: supplyShares

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatioUsingParams
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ratio = getRatio(marketId,marketParams,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatioUsingId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketParams = morphoBlue.idToMarketParams(marketId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ratio = getRatio(marketId,marketParams,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oraclePrice = IOracle(marketParams.oracle).price()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: morphoBlue.accrueInterest(marketParams)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: market = morphoBlue.market(marketId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: position = morphoBlue.position(marketId,owner)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: collateral = position.collateral

  ID: 6
  Type: NodeType.IF
  Expression: collateral == 0

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: debt = SharesMathLib.toAssetsUp(position.borrowShares,market.totalBorrowAssets,market.totalBorrowShares)

  ID: 10
  Type: NodeType.IF
  Expression: debt == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: 0

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ratio = collateral * oraclePrice / debt / 1e18

  ID: 14
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_BLUE_ADDRESS = 0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_WRAPPER = 0x9D03bb2092270648d7480049d0E58d2FcF0E5123

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LEGACY_MORPHO_TOKEN = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PUBLIC_ALLOCATOR = 0xfd32fA2ca22c76dD6E550706Ad913FC6CE91c75D

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: morphoBlue = IMorphoBlue(MORPHO_BLUE_ADDRESS)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_PARAMS_BYTES_LENGTH = 5 * 32

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ORACLE_PRICE_DECIMALS = 36

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_SHARES = 1e6

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_ASSETS = 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


Contract: MainnetMorphoAaveV3Addresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_ADDR = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_MARKET_STORAGE = 0x56EE33811a6C8c1Fd443E53685ed1605E43b3971

Edges:
  0 -> 1


Contract: BucketDLL
==================================================

Function: getHead
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _list.accounts[address(0)].next

Edges:
  0 -> 1

Function: getTail
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _list.accounts[address(0)].prev

Edges:
  0 -> 1

Function: getNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _list.accounts[_id].next

Edges:
  0 -> 1

Function: getPrev
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _list.accounts[_id].prev

Edges:
  0 -> 1

Function: remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: account = _list.accounts[_id]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: prev = account.prev

  ID: 3
  Type: NodeType.VARIABLE
  Expression: next = account.next

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[prev].next = next

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[next].prev = prev

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete _list.accounts[_id]

  ID: 7
  Type: NodeType.RETURN
  Expression: (prev == address(0) && next == address(0))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _head

  ID: 2
  Type: NodeType.VARIABLE
  Expression: head = _list.accounts[address(0)].next

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[address(0)].next = _id

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[head].prev = _id

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[_id].next = head

  ID: 6
  Type: NodeType.RETURN
  Expression: head == address(0)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: tail = _list.accounts[address(0)].prev

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[address(0)].prev = _id

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[tail].next = _id

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _list.accounts[_id].prev = tail

  ID: 11
  Type: NodeType.RETURN
  Expression: tail == address(0)

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11


Contract: LogarithmicBuckets
==================================================

Function: update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _id == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ZeroAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: value = _buckets.valueOf[_id]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _buckets.valueOf[_id] = _newValue

  ID: 6
  Type: NodeType.IF
  Expression: value == 0

  ID: 7
  Type: NodeType.IF
  Expression: _newValue == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ZeroValue()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _insert(_buckets,_id,computeBucket(_newValue),_head)

  ID: 11
  Type: NodeType.RETURN
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: currentBucket = computeBucket(value)

  ID: 14
  Type: NodeType.IF
  Expression: _newValue == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _remove(_buckets,_id,currentBucket)

  ID: 16
  Type: NodeType.RETURN
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: newBucket = computeBucket(_newValue)

  ID: 19
  Type: NodeType.IF
  Expression: newBucket != currentBucket

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _remove(_buckets,_id,currentBucket)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _insert(_buckets,_id,newBucket,_head)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 12
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 17
  15 -> 16
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 22
  20 -> 21
  21 -> 22

Function: getMatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bucketsMask = _buckets.bucketsMask

  ID: 2
  Type: NodeType.IF
  Expression: bucketsMask == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: address(0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: lowerMask = setLowerBits(_value)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: next = nextBucket(lowerMask,bucketsMask)

  ID: 7
  Type: NodeType.IF
  Expression: next != 0

  ID: 8
  Type: NodeType.RETURN
  Expression: _buckets.buckets[next].getHead()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: prev = prevBucket(lowerMask,bucketsMask)

  ID: 11
  Type: NodeType.RETURN
  Expression: _buckets.buckets[prev].getHead()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11

Function: _remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _buckets.buckets[_bucket].remove(_id)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _buckets.bucketsMask &= ~ _bucket

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _buckets.buckets[_bucket].insert(_id,_head)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _buckets.bucketsMask |= _bucket

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: computeBucket
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lowerMask = setLowerBits(_value)

  ID: 2
  Type: NodeType.RETURN
  Expression: lowerMask ^ (lowerMask >> 1)

Edges:
  0 -> 1
  1 -> 2

Function: setLowerBits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 2

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 4

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 8

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 16

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: x = x | x >> 64

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: y = x | x >> 128

  ID: 10
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: y

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: nextBucket
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: higherBucketsMask_nextBucket_asm_0 = ~ lowerMask & bucketsMask

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: bucket = higherBucketsMask_nextBucket_asm_0 & ~ higherBucketsMask_nextBucket_asm_0 + 1

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: bucket

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: prevBucket
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lowerBucketsMask = setLowerBits(lowerMask & bucketsMask)

  ID: 2
  Type: NodeType.RETURN
  Expression: lowerBucketsMask ^ (lowerBucketsMask >> 1)

Edges:
  0 -> 1
  1 -> 2


Contract: DataTypesAaveV3
==================================================


Contract: IPriceOracleGetter
==================================================


Contract: IAavePoolAddressesProvider
==================================================


Contract: IAaveOracle
==================================================


Contract: Types
==================================================


Contract: IMorphoGetters
==================================================


Contract: IMorphoSetters
==================================================


Contract: IMorphoAaveV3
==================================================


Contract: MainnetAuthAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AuthHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AdminVault
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = ADMIN_ADDR

Edges:
  0 -> 1
  1 -> 2

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotAdmin()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: changeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotAdmin()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: admin = _admin

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance(uint256,uint256)(balance,amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 7
  Type: NodeType.IF
  Expression: ! (success)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SendingValueFail()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalanceForCall(uint256,uint256)(balance,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isContract(target))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonContractCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 7
  Type: NodeType.IF
  Expression: success

  ID: 8
  Type: NodeType.RETURN
  Expression: returndata

  ID: 9
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 15
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  16 -> 17


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(returndata.length == 0 || abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AdminAuth
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: MorphoMarketStorage
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: morpho_aaveV3_eth = 0x33333aea097c193e66081E930c33020272b33333

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: morphoAddresses[1] = morpho_aaveV3_eth

Edges:
  0 -> 1
  1 -> 2

Function: getMorphoAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: morphoAddresses[_emodeId]

Edges:
  0 -> 1

Function: addNewMorphoAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: morphoAddresses[_emodeId] = _morphoAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: MorphoAaveV3Helper
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: getMorphoAddressByEmode
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: morphoAddr = morphoMarketStorage.getMorphoAddress(_emodeId)

  ID: 2
  Type: NodeType.IF
  Expression: morphoAddr == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidEModeId(uint256)(_emodeId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: morphoAddr

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: getSafetyRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: liqData = IMorphoAaveV3(_morphoAddr).liquidityData(_usr)

  ID: 2
  Type: NodeType.IF
  Expression: liqData.debt == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: wdiv(liqData.borrowable,liqData.debt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_ADDR = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_MARKET_STORAGE = 0x56EE33811a6C8c1Fd443E53685ed1605E43b3971

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: morphoMarketStorage = MorphoMarketStorage(MORPHO_MARKET_STORAGE)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: MainnetSparkAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_REWARDS_CONTROLLER_ADDRESS = 0x4370D3b6C9588E02ce9D22e684387859c7Ff5b34

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_ORACLE_V3 = 0x8105f69D9C41644c6A0803fDA7D03Aa70996cFD9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SDAI_ADDR = 0x83F20F44975D03b1b09e64809B757c47f942BEeA

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SparkHelper
==================================================

Function: getLendingPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IL2PoolV3(IPoolAddressesProvider(_market).getPool())

Edges:
  0 -> 1

Function: getDataProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IAaveProtocolDataProvider(IPoolAddressesProvider(_market).getPoolDataProvider())

Edges:
  0 -> 1

Function: boolToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes1(0x01)

  ID: 4
  Type: NodeType.RETURN
  Expression: bytes1(0x00)

  ID: 6
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: bytesToBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x != bytes1(0x00)

  ID: 2
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1

Function: getWholeDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: STABLE_ID = 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: VARIABLE_ID = 2

  ID: 3
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (None,borrowsStable,borrowsVariable,None,None,None,None,None,None) = dataProvider.getUserReserveData(_tokenAddr,_debtOwner)

  ID: 7
  Type: NodeType.IF
  Expression: _borrowType == STABLE_ID

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsStable

  ID: 9
  Type: NodeType.IF
  Expression: _borrowType == VARIABLE_ID

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsVariable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: debt

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_REWARDS_CONTROLLER_ADDRESS = 0x4370D3b6C9588E02ce9D22e684387859c7Ff5b34

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_ORACLE_V3 = 0x8105f69D9C41644c6A0803fDA7D03Aa70996cFD9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SDAI_ADDR = 0x83F20F44975D03b1b09e64809B757c47f942BEeA

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_REFERRAL_CODE = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: MainnetActionsUtilAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: ActionsUtilHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: DFSRegistry
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: getAddr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: entries[_id].contractAddr

Edges:
  0 -> 1

Function: isRegistered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: entries[_id].exists

Edges:
  0 -> 1

Function: addNewContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryAlreadyExistsError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: entries[_id] = Entry({contractAddr:_contractAddr,waitPeriod:_waitPeriod,changeStartTime:0,inContractChange:false,inWaitPeriodChange:false,exists:true})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: AddNewContract(msg.sender,_id,_contractAddr,_waitPeriod)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: revertToPreviousAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (entries[_id].exists)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: previousAddresses[_id] == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EmptyPrevAddrError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: currentAddr = entries[_id].contractAddr

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].contractAddr = previousAddresses[_id]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: RevertToPreviousAddress(msg.sender,_id,currentAddr,previousAddresses[_id])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: startContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AlreadyInWaitPeriodChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = block.timestamp

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = _newContractAddr

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: StartContractChange(msg.sender,_id,entries[_id].contractAddr,_newContractAddr)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: approveContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ChangeNotReadyError(uint256,uint256)(block.timestamp,(entries[_id].changeStartTime + entries[_id].waitPeriod))

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldContractAddr = entries[_id].contractAddr

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: entries[_id].contractAddr = pendingAddresses[_id]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = false

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = address(0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: previousAddresses[_id] = oldContractAddr

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ApproveContractChange(msg.sender,_id,oldContractAddr,entries[_id].contractAddr)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 17
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: cancelContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: oldContractAddr = pendingAddresses[_id]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: CancelContractChange(msg.sender,_id,oldContractAddr,entries[_id].contractAddr)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: startWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AlreadyInContractChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = _newWaitPeriod

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: StartWaitPeriodChange(msg.sender,_id,_newWaitPeriod)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: approveWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ChangeNotReadyError(uint256,uint256)(block.timestamp,(entries[_id].changeStartTime + entries[_id].waitPeriod))

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldWaitTime = entries[_id].waitPeriod

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: entries[_id].waitPeriod = pendingWaitTimes[_id]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = false

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ApproveWaitPeriodChange(msg.sender,_id,oldWaitTime,entries[_id].waitPeriod)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 16
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: cancelWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: oldWaitPeriod = pendingWaitTimes[_id]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: CancelWaitPeriodChange(msg.sender,_id,oldWaitPeriod,entries[_id].waitPeriod)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: DSAuthority
==================================================


Contract: DSAuthEvents
==================================================


Contract: DSAuth
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: setOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = owner_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAuthority
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authority = authority_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetAuthority(address(authority))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: src == address(this)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.IF
  Expression: src == owner

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.IF
  Expression: authority == DSAuthority(address(0))

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.RETURN
  Expression: authority.canCall(src,address(this),sig)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7


Contract: DSNote
==================================================


Contract: DSProxy
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (setCache(_cacheAddr))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAuthorized(msg.sender,msg.sig),Not authorized)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: setOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = owner_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAuthority
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authority = authority_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetAuthority(address(authority))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: src == address(this)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.IF
  Expression: src == owner

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.IF
  Expression: authority == DSAuthority(address(0))

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.RETURN
  Expression: authority.canCall(src,address(this),sig)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: DSProxyCache
==================================================

Function: read
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: hash = keccak256(bytes)(_code)

  ID: 2
  Type: NodeType.RETURN
  Expression: cache[hash]

Edges:
  0 -> 1
  1 -> 2

Function: write
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: target = create(uint256,uint256,uint256)(0,_code + 0x20,mload(uint256)(_code))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: switch_expr_184170_172_0_write_asm_0 = ! extcodesize(uint256)(target)

  ID: 5
  Type: NodeType.IF
  Expression: switch_expr_184170_172_0_write_asm_0 == 1

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: hash = keccak256(bytes)(_code)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cache[hash] = target

  ID: 11
  Type: NodeType.RETURN
  Expression: target

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  5 -> 6
  6 -> 8
  7 -> 6
  8 -> 9
  9 -> 10
  10 -> 11


Contract: DSProxyFactoryInterface
==================================================


Contract: IWETH
==================================================


Contract: IDSProxy
==================================================


Contract: IProxyRegistry
==================================================


Contract: MainnetUtilAddresses
==================================================

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refillCaller = 0x8973f5e6142ed2e2F50EEE8Bb34a47C2DAa6624a

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_ADDR = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EETH_ADDR = 0x35fA164735182de50811E8e2E824cFb9B6118ac2

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDR = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24


Contract: UtilHelper
==================================================

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refillCaller = 0x8973f5e6142ed2e2F50EEE8Bb34a47C2DAa6624a

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_ADDR = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EETH_ADDR = 0x35fA164735182de50811E8e2E824cFb9B6118ac2

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDR = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24


Contract: DFSProxyRegistry
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: changeMcdOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dfsProxyRegistryController = registry.getAddr(DFS_PROXY_REGISTRY_CONTROLLER_ID)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == dfsProxyRegistryController)

  ID: 3
  Type: NodeType.IF
  Expression: IDSProxy(_proxy).owner() == _user

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: changedOwners[_user] = _proxy

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5

Function: getMcdProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: proxyAddr = mcdRegistry.proxies(_user)

  ID: 2
  Type: NodeType.IF
  Expression: changedOwners[_user] != address(0)

  ID: 3
  Type: NodeType.RETURN
  Expression: changedOwners[_user]

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: proxyAddr

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: addAdditionalProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dfsProxyRegistryController = registry.getAddr(DFS_PROXY_REGISTRY_CONTROLLER_ID)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == dfsProxyRegistryController)

  ID: 3
  Type: NodeType.IF
  Expression: IDSProxy(_proxy).owner() == _user

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: additionalProxies[_user].push(_proxy)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5

Function: getAllProxies
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (getMcdProxy(_user),additionalProxies[_user])

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refillCaller = 0x8973f5e6142ed2e2F50EEE8Bb34a47C2DAa6624a

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mcdRegistry = IProxyRegistry(MKR_PROXY_REGISTRY)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_CONTROLLER_ID = 0xcbbb53f2

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_ADDR = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EETH_ADDR = 0x35fA164735182de50811E8e2E824cFb9B6118ac2

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDR = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06

  ID: 25
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564

  ID: 26
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6

  ID: 27
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 28
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 29
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf

  ID: 30
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479

  ID: 31
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 32
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 33
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 34
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 35
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 36
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 37
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

  ID: 38
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: registry = DFSRegistry(REGISTRY_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38


Contract: MainnetProxyFactoryAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:


Contract: DSProxyFactoryHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:


Contract: LSVProxyRegistry
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: addNewProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newProxy = getFromPoolOrBuild(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: proxies[msg.sender].push(newProxy)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: NewProxy(msg.sender,newProxy)

  ID: 4
  Type: NodeType.RETURN
  Expression: newProxy

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: updateRegistry
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(DSProxy(address(_proxyAddr)).owner() == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(proxies[_oldOwner][_indexNumInOldOwnerProxiesArr] == _proxyAddr)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: oldOwnersProxyCount = proxies[_oldOwner].length

  ID: 4
  Type: NodeType.IF
  Expression: oldOwnersProxyCount > 1 && _indexNumInOldOwnerProxiesArr < (oldOwnersProxyCount - 1)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: proxies[_oldOwner][_indexNumInOldOwnerProxiesArr] = proxies[_oldOwner][oldOwnersProxyCount - 1]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: proxies[_oldOwner].pop()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: proxies[msg.sender].push(_proxyAddr)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: addToPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _numNewProxies

  ID: 5
  Type: NodeType.VARIABLE
  Expression: newProxy = DSProxyFactoryInterface(PROXY_FACTORY_ADDR).build()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: proxyPool.push(address(newProxy))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 4

Function: getProxies
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: resultProxies = new address[](proxies[_user].length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < proxies[_user].length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: resultProxies[i] = proxies[_user][i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.RETURN
  Expression: resultProxies

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getProxyPoolCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: proxyPool.length

Edges:
  0 -> 1

Function: getFromPoolOrBuild
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: proxyPool.length > 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newProxy = proxyPool[proxyPool.length - 1]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: proxyPool.pop()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DSAuth(newProxy).setOwner(_user)

  ID: 5
  Type: NodeType.RETURN
  Expression: newProxy

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newProxy_scope_0 = DSProxyFactoryInterface(PROXY_FACTORY_ADDR).build(_user)

  ID: 7
  Type: NodeType.RETURN
  Expression: address(newProxy_scope_0)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refillCaller = 0x8973f5e6142ed2e2F50EEE8Bb34a47C2DAa6624a

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_ADDR = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EETH_ADDR = 0x35fA164735182de50811E8e2E824cFb9B6118ac2

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDR = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06

  ID: 25
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564

  ID: 26
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6

  ID: 27
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 28
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 29
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf

  ID: 30
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479

  ID: 31
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 32
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 33
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 34
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 35
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 36
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 37
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

  ID: 38
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38


Contract: TokenUtils
==================================================

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: IERC20(_tokenAddr).allowance(address(this),_to) < _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenAddr).safeApprove(_to,_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: pullTokensIfNeeded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,_from)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransferFrom(_from,address(this),_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _to != address(0) && _to != address(this) && _amount != 0

  ID: 5
  Type: NodeType.IF
  Expression: _token != ETH_ADDR

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_to,_amount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = _to.call{value: _amount}()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Eth send fail)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: depositWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).deposit{value: _amount}()

Edges:
  0 -> 1

Function: withdrawWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).withdraw(_amount)

Edges:
  0 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: _acc.balance

  ID: 3
  Type: NodeType.RETURN
  Expression: IERC20(_tokenAddr).balanceOf(_acc)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getTokenDecimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 18

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: IERC20(_token).decimals()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1


Contract: LSVView
==================================================

Function: getAmountInETHFromLST
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lstAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: lstAddress == RETH_ADDRESS

  ID: 5
  Type: NodeType.RETURN
  Expression: IRETH(RETH_ADDRESS).getEthValue(lstAmount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: lstAddress == CBETH_ADDRESS

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rate = ICBETH(CBETH_ADDRESS).exchangeRate()

  ID: 9
  Type: NodeType.RETURN
  Expression: wmul(lstAmount,rate)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: lstAddress == WSTETH_ADDRESS

  ID: 12
  Type: NodeType.RETURN
  Expression: IWstETH(WSTETH_ADDRESS).getStETHByWstETH(lstAmount)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: lstAddress == WEETH_ADDRESS

  ID: 15
  Type: NodeType.RETURN
  Expression: IWeEth(WEETH_ADDRESS).getEETHByWeETH(lstAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: lstAddress == EZETH_ADDRESS

  ID: 18
  Type: NodeType.RETURN
  Expression: getRenzoRate(lstAmount,false)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: lstAmount

  ID: 21
  Type: NodeType.RETURN
  Expression: ethAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20

Function: getAmountInLSTFromETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ethAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: lstAddress == RETH_ADDRESS

  ID: 5
  Type: NodeType.RETURN
  Expression: IRETH(RETH_ADDRESS).getRethValue(ethAmount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: lstAddress == CBETH_ADDRESS

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rate = ICBETH(CBETH_ADDRESS).exchangeRate()

  ID: 9
  Type: NodeType.RETURN
  Expression: wdiv(ethAmount,rate)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: lstAddress == WSTETH_ADDRESS

  ID: 12
  Type: NodeType.RETURN
  Expression: IWstETH(WSTETH_ADDRESS).getWstETHByStETH(ethAmount)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: lstAddress == WEETH_ADDRESS

  ID: 15
  Type: NodeType.RETURN
  Expression: IWeEth(WEETH_ADDRESS).getWeETHByeETH(ethAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: lstAddress == EZETH_ADDRESS

  ID: 18
  Type: NodeType.RETURN
  Expression: getRenzoRate(ethAmount,true)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: ethAmount

  ID: 21
  Type: NodeType.RETURN
  Expression: lstAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20

Function: getRenzoRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: manager = IRestakeManager(RENZO_MANAGER)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oracle = IRenzoOracle(manager.renzoOracle())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,None,totalTVL) = manager.calculateTVLs()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ezEthTotalSupply = IERC20(EZETH_ADDRESS).totalSupply()

  ID: 7
  Type: NodeType.IF
  Expression: _convertFromEthToLst

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = oracle.calculateMintAmount(totalTVL,_amount,ezEthTotalSupply)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: rate = oracle.calculateRedeemAmount(_amount,ezEthTotalSupply,totalTVL)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: rate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: getCurrentDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: morphoBlue.accrueInterest(marketParams)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: borrowShares = MorphoLib.borrowShares(morphoBlue,marketId,owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: currentDebtInAssets = SharesMathLib.toAssetsUp(borrowShares,MorphoLib.totalBorrowAssets(morphoBlue,marketId),MorphoLib.totalBorrowShares(morphoBlue,marketId))

  ID: 5
  Type: NodeType.RETURN
  Expression: (currentDebtInAssets,borrowShares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getSupplyShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: supplyShares = MorphoLib.supplyShares(morphoBlue,marketId,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: supplyShares

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatioUsingParams
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ratio = getRatio(marketId,marketParams,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatioUsingId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketParams = morphoBlue.idToMarketParams(marketId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ratio = getRatio(marketId,marketParams,owner)

  ID: 3
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oraclePrice = IOracle(marketParams.oracle).price()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: morphoBlue.accrueInterest(marketParams)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: market = morphoBlue.market(marketId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: position = morphoBlue.position(marketId,owner)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: collateral = position.collateral

  ID: 6
  Type: NodeType.IF
  Expression: collateral == 0

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: debt = SharesMathLib.toAssetsUp(position.borrowShares,market.totalBorrowAssets,market.totalBorrowShares)

  ID: 10
  Type: NodeType.IF
  Expression: debt == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: 0

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ratio = collateral * oraclePrice / debt / 1e18

  ID: 14
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14

Function: getLendingPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IL2PoolV3(IPoolAddressesProvider(_market).getPool())

Edges:
  0 -> 1

Function: getDataProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IAaveProtocolDataProvider(IPoolAddressesProvider(_market).getPoolDataProvider())

Edges:
  0 -> 1

Function: boolToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes1(0x01)

  ID: 4
  Type: NodeType.RETURN
  Expression: bytes1(0x00)

  ID: 6
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: bytesToBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x != bytes1(0x00)

  ID: 2
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1

Function: getWholeDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: STABLE_ID = 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: VARIABLE_ID = 2

  ID: 3
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (None,borrowsStable,borrowsVariable,None,None,None,None,None,None) = dataProvider.getUserReserveData(_tokenAddr,_debtOwner)

  ID: 7
  Type: NodeType.IF
  Expression: _borrowType == STABLE_ID

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsStable

  ID: 9
  Type: NodeType.IF
  Expression: _borrowType == VARIABLE_ID

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsVariable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: debt

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: getMorphoAddressByEmode
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: morphoAddr = morphoMarketStorage.getMorphoAddress(_emodeId)

  ID: 2
  Type: NodeType.IF
  Expression: morphoAddr == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidEModeId(uint256)(_emodeId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: morphoAddr

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: getSafetyRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: liqData = IMorphoAaveV3(_morphoAddr).liquidityData(_usr)

  ID: 2
  Type: NodeType.IF
  Expression: liqData.debt == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: wdiv(liqData.borrowable,liqData.debt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: getAllPositionForLSVUser
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: proxies = LSVProxyRegistry(LSV_PROXY_REGISTRY_ADDRESS).getProxies(_user)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: positions = _getPositions(_collTokens,proxies)

  ID: 3
  Type: NodeType.RETURN
  Expression: (proxies,positions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getAllPositionForDFSUser
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (mcdProxy,additionalProxies) = DFSProxyRegistry(DFS_PROXY_REGISTRY_ADDR).getAllProxies(_user)

  ID: 4
  Type: NodeType.IF
  Expression: mcdProxy == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: proxies = new address[](additionalProxies.length)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < proxies.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: proxies[i] = additionalProxies[i]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: proxies = new address[](additionalProxies.length + 1)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i_scope_0

  ID: 17
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < proxies.length - 1

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: proxies[i_scope_0] = additionalProxies[i_scope_0]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: proxies[i_scope_0] = mcdProxy

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: positions = _getPositions(_collTokens,proxies)

  ID: 23
  Type: NodeType.RETURN
  Expression: (proxies,positions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 12
  5 -> 8
  6 -> 9
  7 -> 21
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 9
  12 -> 13
  13 -> 16
  14 -> 17
  15 -> 20
  16 -> 14
  17 -> 18
  17 -> 15
  18 -> 19
  19 -> 17
  20 -> 21
  21 -> 22
  22 -> 23

Function: getAllPositionForEOA
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: users = new address[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: users[0] = _user

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: positions = _getPositions(_collTokens,users)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: proxies = new address[](positions.length)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < positions.length

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: proxies[i] = positions[i].proxy

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: (proxies,positions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 11
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 8

Function: _getPositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tempPositions = new Position[](_users.length * NUMBER_OF_SUPPORTED_PROTOCOLS)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _users.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getAaveV3Positions(_collTokens,_users[i],tempPositions,positionCounter)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getMorphoAavePositions(_collTokens,_users[i],tempPositions,positionCounter)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getCompoundV3Positions(_collTokens,_users[i],tempPositions,positionCounter)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getSparkPositions(_collTokens,_users[i],tempPositions,positionCounter)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getMorphoBluePositions(_users[i],tempPositions,positionCounter)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: positionCounter = _getAaveLidoPositions(_collTokens,_users[i],tempPositions,positionCounter)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: positions = new Position[](positionCounter)

  ID: 15
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 18
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < positionCounter

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: positions[i_scope_0] = tempPositions[i_scope_0]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 21
  Type: NodeType.RETURN
  Expression: positions

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6
  14 -> 17
  15 -> 18
  16 -> 21
  17 -> 15
  18 -> 19
  18 -> 16
  19 -> 20
  20 -> 18

Function: _getAaveV3Positions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(DEFAULT_AAVE_MARKET)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: collBalance = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: debtBalance = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = Position(uint8(Protocol.AAVE_V3),_user,_collTokens[j],TokenUtils.WETH_ADDR,collBalance,debtBalance)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: j = _collTokens.length

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: _getMorphoAavePositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: morphoAddr = getMorphoAddressByEmode(1)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: collBalance = IMorphoAaveV3(morphoAddr).collateralBalance(_collTokens[j],_user)

  ID: 8
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 9
  Type: NodeType.VARIABLE
  Expression: debtBalance = IMorphoAaveV3(morphoAddr).borrowBalance(TokenUtils.WETH_ADDR,_user)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = Position(uint8(Protocol.MORPHO_AAVE_V3),_user,_collTokens[j],TokenUtils.WETH_ADDR,collBalance,debtBalance)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: j = _collTokens.length

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 14
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: _getCompoundV3Positions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: comet = IComet(COMP_ETH_COMET)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: collBalance = comet.collateralBalanceOf(_user,_collTokens[j])

  ID: 8
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 9
  Type: NodeType.VARIABLE
  Expression: debtBalance = comet.borrowBalanceOf(_user)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = Position(uint8(Protocol.COMPOUND_V3),_user,_collTokens[j],TokenUtils.WETH_ADDR,collBalance,debtBalance)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: j = _collTokens.length

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 14
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: _getMorphoBluePositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: marketSize = 7

  ID: 3
  Type: NodeType.VARIABLE
  Expression: markets = new MarketParams[](marketSize)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: markets[0] = _morphoBlueWstEthMarketRate()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: markets[1] = _morphoBlueWstEthLidoRate945()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: markets[2] = _morphoBlueWstEthLidoRate965()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: markets[3] = _morphoBlueWeEth945()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: markets[4] = _morphoBlueWeEth86()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: markets[5] = _morphoBlueEzEth945()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: markets[6] = _morphoBlueEzEth86()

  ID: 11
  Type: NodeType.VARIABLE
  Expression: protocols = new LSVView.Protocol[](marketSize)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: protocols[0] = Protocol.MORPHO_BLUE_WSTETH_MARKET_RATE

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: protocols[1] = Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_945

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: protocols[2] = Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_965

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: protocols[3] = Protocol.MORPHO_BLUE_WEETH_RATE_945

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: protocols[4] = Protocol.MORPHO_BLUE_WEETH_RATE_86

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: protocols[5] = Protocol.MORPHO_BLUE_EZETH_945

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: protocols[6] = Protocol.MORPHO_BLUE_EZETH_86

  ID: 19
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 20
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 21
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 22
  Type: NodeType.IFLOOP
  Expression: i < marketSize

  ID: 23
  Type: NodeType.VARIABLE
  Expression: position = _getMorphoBlueWethPosition(markets[i],_user,protocols[i])

  ID: 24
  Type: NodeType.IF
  Expression: position.proxy != address(0)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = position

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 28
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 21
  19 -> 22
  20 -> 28
  21 -> 19
  22 -> 23
  22 -> 20
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 22

Function: _getMorphoBlueWethPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(_marketParams)

  ID: 2
  Type: NodeType.IF
  Expression: MorphoLib.collateral(morphoBlue,marketId,_user) > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: position = Position(uint8(_protocol),_user,_marketParams.collateralToken,TokenUtils.WETH_ADDR,MorphoLib.collateral(morphoBlue,marketId,_user),MorphoBalancesLib.expectedBorrowAssets(morphoBlue,_marketParams,_user))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: position

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getSparkPositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(DEFAULT_SPARK_MARKET)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: collBalance = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: debtBalance = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = Position(uint8(Protocol.SPARK),_user,_collTokens[j],TokenUtils.WETH_ADDR,collBalance,debtBalance)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: j = _collTokens.length

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: _getAaveLidoPositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter = _counter

  ID: 2
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(0xcfBf336fe147D643B9Cb705648500e101504B16d)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: collBalance = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: debtBalance = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _positions[counter ++] = Position(uint8(Protocol.AAVE_V3_LIDO_INSTANCE),_user,_collTokens[j],TokenUtils.WETH_ADDR,collBalance,debtBalance)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: j = _collTokens.length

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: counter

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: getInfoForLSVPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unrealisedProfit = LSVProfitTracker(LSV_PROFIT_TRACKER_ADDRESS).unrealisedProfit(_protocol,_lsvProxy)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (collBalance,ethDebtBalance,collToken) = findCollAndDebtBalance(_protocol,_lsvProxy,_collTokens)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: collBalanceInETH = getAmountInETHFromLST(collToken,collBalance)

  ID: 7
  Type: NodeType.IF
  Expression: collBalanceInETH >= ethDebtBalance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: netWorth = collBalanceInETH - ethDebtBalance

  ID: 9
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: (netWorth,unrealisedProfit)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  10 -> 11

Function: findCollAndDebtBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.AAVE_V3)

  ID: 2
  Type: NodeType.RETURN
  Expression: findCollAndDebtForAaveV3Position(_user,_collTokens)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_AAVE_V3)

  ID: 5
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoAaveV3Position(_user,_collTokens)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.COMPOUND_V3)

  ID: 8
  Type: NodeType.RETURN
  Expression: findCollAndDebtForCompV3Position(_user,_collTokens)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.SPARK)

  ID: 11
  Type: NodeType.RETURN
  Expression: findCollAndDebtForSparkPosition(_user,_collTokens)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_WSTETH_MARKET_RATE)

  ID: 14
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_945)

  ID: 17
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_965)

  ID: 20
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.AAVE_V3_LIDO_INSTANCE)

  ID: 23
  Type: NodeType.RETURN
  Expression: findCollAndDebtForAaveV3LidoPosition(_user,_collTokens)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_WEETH_RATE_945)

  ID: 26
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_WEETH_RATE_86)

  ID: 29
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_EZETH_945)

  ID: 32
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.IF
  Expression: protocol == uint8(Protocol.MORPHO_BLUE_EZETH_86)

  ID: 35
  Type: NodeType.RETURN
  Expression: findCollAndDebtForMorphoBlueWstethPosition(_user,LSVView.Protocol(protocol))

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.RETURN
  Expression: (0,0,address(0))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22
  22 -> 23
  22 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  30 -> 31
  31 -> 32
  31 -> 33
  33 -> 34
  34 -> 35
  34 -> 36
  36 -> 37

Function: findCollAndDebtForAaveV3Position
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(DEFAULT_AAVE_MARKET)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ethDebtAmount = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: lstCollAmount = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: lstCollAmount > 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: collAmount = lstCollAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: debtAmount = ethDebtAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: collToken = _collTokens[j]

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: (collAmount,debtAmount,collToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: findCollAndDebtForAaveV3LidoPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(0xcfBf336fe147D643B9Cb705648500e101504B16d)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ethDebtAmount = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: lstCollAmount = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: lstCollAmount > 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: collAmount = lstCollAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: debtAmount = ethDebtAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: collToken = _collTokens[j]

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: (collAmount,debtAmount,collToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: findCollAndDebtForSparkPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(DEFAULT_SPARK_MARKET)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: wethReserveData = lendingPool.getReserveData(TokenUtils.WETH_ADDR)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ethDebtAmount = wethReserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_collTokens[j])

  ID: 9
  Type: NodeType.IF
  Expression: reserveData.aTokenAddress != address(0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: lstCollAmount = reserveData.aTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.IF
  Expression: lstCollAmount > 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: collAmount = lstCollAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: debtAmount = ethDebtAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: collToken = _collTokens[j]

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 18
  Type: NodeType.RETURN
  Expression: (collAmount,debtAmount,collToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7

Function: findCollAndDebtForMorphoAaveV3Position
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: morphoAddr = getMorphoAddressByEmode(1)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: debtBalance = IMorphoAaveV3(morphoAddr).borrowBalance(TokenUtils.WETH_ADDR,_user)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: collBalance = IMorphoAaveV3(morphoAddr).collateralBalance(_collTokens[j],_user)

  ID: 8
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: collAmount = collBalance

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debtAmount = debtBalance

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: collToken = _collTokens[j]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 14
  Type: NodeType.RETURN
  Expression: (collAmount,debtAmount,collToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: findCollAndDebtForCompV3Position
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: comet = IComet(COMP_ETH_COMET)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: debtBalance = comet.borrowBalanceOf(_user)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: j = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: j < _collTokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: collBalance = comet.collateralBalanceOf(_user,_collTokens[j])

  ID: 8
  Type: NodeType.IF
  Expression: collBalance > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: collAmount = collBalance

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debtAmount = debtBalance

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: collToken = _collTokens[j]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 14
  Type: NodeType.RETURN
  Expression: (collAmount,debtAmount,collToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: findCollAndDebtForMorphoBlueWstethPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_WSTETH_MARKET_RATE

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueWstEthMarketRate()

  ID: 4
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_945

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueWstEthLidoRate945()

  ID: 6
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_WSTETH_LIDO_RATE_965

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueWstEthLidoRate965()

  ID: 8
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_WEETH_RATE_945

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueWeEth945()

  ID: 10
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_WEETH_RATE_86

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueWeEth86()

  ID: 12
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_EZETH_945

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueEzEth945()

  ID: 14
  Type: NodeType.IF
  Expression: protocol == Protocol.MORPHO_BLUE_EZETH_86

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: marketParams = _morphoBlueEzEth86()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: marketId = MarketParamsLib.id(marketParams)

  ID: 24
  Type: NodeType.VARIABLE
  Expression: collBalance = MorphoLib.collateral(morphoBlue,marketId,_user)

  ID: 25
  Type: NodeType.VARIABLE
  Expression: debtBalance = MorphoBalancesLib.expectedBorrowAssets(morphoBlue,marketParams,_user)

  ID: 26
  Type: NodeType.RETURN
  Expression: (collBalance,debtBalance,marketParams.collateralToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 22
  4 -> 5
  4 -> 6
  5 -> 21
  6 -> 7
  6 -> 8
  7 -> 20
  8 -> 9
  8 -> 10
  9 -> 19
  10 -> 11
  10 -> 12
  11 -> 18
  12 -> 13
  12 -> 14
  13 -> 17
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: _morphoBlueWstEthMarketRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0,oracle:0x2a01EB9496094dA03c4E364Def50f5aD1280AD72,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:945000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueWstEthLidoRate945
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0,oracle:0xbD60A6770b27E084E8617335ddE769241B0e71D8,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:945000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueWstEthLidoRate965
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0,oracle:0xbD60A6770b27E084E8617335ddE769241B0e71D8,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:965000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueWeEth945
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee,oracle:0xbDd2F2D473E8D63d1BFb0185B5bDB8046ca48a72,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:945000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueWeEth86
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee,oracle:0x3fa58b74e9a8eA8768eb33c8453e9C2Ed089A40a,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:860000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueEzEth945
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0xbf5495Efe5DB9ce00f80364C8B423567e58d2110,oracle:0x94f93f1eADb8a2f73C415AD4C19cB791e6D0192b,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:945000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: _morphoBlueEzEth86
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketParams = MarketParams({loanToken:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,collateralToken:0xbf5495Efe5DB9ce00f80364C8B423567e58d2110,oracle:0x61025e2B0122ac8bE4e37365A4003d87ad888Cc3,irm:0x870aC11D48B15DB9a138Cf899d20F13F79Ba00BC,lltv:860000000000000000})

  ID: 2
  Type: NodeType.RETURN
  Expression: marketParams

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refillCaller = 0x8973f5e6142ed2e2F50EEE8Bb34a47C2DAa6624a

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT_ADDR = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EETH_ADDR = 0x35fA164735182de50811E8e2E824cFb9B6118ac2

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDR = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216

  ID: 25
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06

  ID: 26
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564

  ID: 27
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6

  ID: 28
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A

  ID: 29
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 30
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf

  ID: 31
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479

  ID: 32
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 33
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 34
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 35
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 36
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

  ID: 37
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REFERRAL_CODE = 64

  ID: 38
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_ADDR = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 39
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_MARKET_STORAGE = 0x56EE33811a6C8c1Fd443E53685ed1605E43b3971

  ID: 40
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 41
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 42
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: morphoMarketStorage = MorphoMarketStorage(MORPHO_MARKET_STORAGE)

  ID: 43
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMET_REWARDS_ADDR = 0x1B0e765F6224C21223AeA2af16c1C46E38885a40

  ID: 44
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COMP_ETH_COMET = 0xA17581A9E3356d9A858b789D68B4d866e593aE94

  ID: 45
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_REWARDS_CONTROLLER_ADDRESS = 0x4370D3b6C9588E02ce9D22e684387859c7Ff5b34

  ID: 46
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE

  ID: 47
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_ORACLE_V3 = 0x8105f69D9C41644c6A0803fDA7D03Aa70996cFD9

  ID: 48
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SDAI_ADDR = 0x83F20F44975D03b1b09e64809B757c47f942BEeA

  ID: 49
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_REFERRAL_CODE = 0

  ID: 50
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_BLUE_ADDRESS = 0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb

  ID: 51
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MORPHO_TOKEN_WRAPPER = 0x9D03bb2092270648d7480049d0E58d2FcF0E5123

  ID: 52
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LEGACY_MORPHO_TOKEN = 0x9994E35Db50125E0DF82e4c2dde62496CE330999

  ID: 53
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PUBLIC_ALLOCATOR = 0xfd32fA2ca22c76dD6E550706Ad913FC6CE91c75D

  ID: 54
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: morphoBlue = IMorphoBlue(MORPHO_BLUE_ADDRESS)

  ID: 55
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKET_PARAMS_BYTES_LENGTH = 5 * 32

  ID: 56
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ORACLE_PRICE_DECIMALS = 36

  ID: 57
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_SHARES = 1e6

  ID: 58
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_ASSETS = 1

  ID: 59
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETH_ADDRESS = 0xae78736Cd615f374D3085123A210448E74Fc6393

  ID: 60
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CBETH_ADDRESS = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704

  ID: 61
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WSTETH_ADDRESS = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0

  ID: 62
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WEETH_ADDRESS = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee

  ID: 63
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EZETH_ADDRESS = 0xbf5495Efe5DB9ce00f80364C8B423567e58d2110

  ID: 64
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RENZO_MANAGER = 0x74a09653A083691711cF8215a6ab074BB4e99ef5

  ID: 65
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROFIT_TRACKER_ADDRESS = 0xa5941F267995553dA9369F04Dc02f9411EEb2F12

  ID: 66
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NUMBER_OF_SUPPORTED_PROTOCOLS = 12

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  53 -> 54
  54 -> 55
  55 -> 56
  56 -> 57
  57 -> 58
  58 -> 59
  59 -> 60
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 64
  64 -> 65
  65 -> 66


