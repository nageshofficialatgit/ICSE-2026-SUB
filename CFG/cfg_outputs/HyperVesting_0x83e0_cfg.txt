Contract: IHyperSolverToken
==================================================


Contract: IERC20
==================================================


Contract: ITreasury
==================================================


Contract: HyperVesting
==================================================

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initialized,HyperVesting: already initialized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _initialized = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: hyperSolverToken = _hyperSolverToken

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: treasury = _treasury

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: vestingPeriod = _vestingPeriod

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: depositOpenWindow = _depositOpenWindow

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: VestingInitialized(_owner,_hyperSolverToken,_treasury,_vestingPeriod,_depositOpenWindow)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: startVesting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! vestingHasStarted,HyperVesting: vesting has already started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vestingHasStarted = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vestingStartTime = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: VestingStarted(vestingStartTime)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: lockTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(vestingStartTime > 0,HyperVesting: vesting not started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= vestingStartTime + depositOpenWindow,HyperVesting: deposit window ended)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,HyperVesting: amount must be > 0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: userLock = userLocks[msg.sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userLock.amount == 0,HyperVesting: user already locked tokens)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: success = IHyperSolverToken(hyperSolverToken).transferFrom(msg.sender,address(this),amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,HyperVesting: token transfer failed)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: userLock.amount = amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: userLock.depositTime = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: userLock.withdrawn = false

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: userLock.rewardClaimed = false

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensLocked(msg.sender,amount,block.timestamp)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLock = userLocks[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userLock.amount > 0,HyperVesting: no tokens locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! userLock.withdrawn,HyperVesting: tokens already withdrawn)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= userLock.depositTime + vestingPeriod,HyperVesting: vesting period not over)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amount = userLock.amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: userLock.withdrawn = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: userLock.amount = 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: success = IHyperSolverToken(hyperSolverToken).transfer(msg.sender,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,HyperVesting: token transfer failed)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TokensWithdrawn(msg.sender,amount,block.timestamp)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: claimRewardsFromTreasury
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLock = userLocks[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userLock.amount > 0,HyperVesting: no tokens locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! userLock.rewardClaimed,HyperVesting: reward already claimed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(vestingStartTime > 0,HyperVesting: vesting not started)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= vestingStartTime + depositOpenWindow,HyperVesting: claim not available yet)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: userLock.rewardClaimed = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ITreasury(treasury).claimFrankencoinReward(msg.sender,userLock.amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: RewardsClaimed(msg.sender,userLock.amount,block.timestamp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: checkUserReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLock = userLocks[msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: userLock.amount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: ITreasury(treasury).getUserRewardInFrankencoin(msg.sender,userLock.amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: checkUserRewardOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLock = userLocks[user]

  ID: 2
  Type: NodeType.IF
  Expression: userLock.amount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: ITreasury(treasury).getUserRewardInFrankencoin(user,userLock.amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: claimStuckERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != hyperSolverToken,HyperVesting: cannot rescue locked HPS)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: stuckBalance = IERC20(token).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stuckBalance > 0,HyperVesting: no tokens to rescue)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transfer(owner,stuckBalance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,HyperVesting: stuck token transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: StuckERC20Claimed(msg.sender,token,stuckBalance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: claimStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,HyperVesting: no ETH to rescue)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = owner.call{value: balance}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,HyperVesting: transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: StuckETHClaimed(msg.sender,balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1


