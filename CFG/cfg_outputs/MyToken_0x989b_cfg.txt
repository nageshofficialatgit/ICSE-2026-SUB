Contract: MyToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = _name

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = _symbol

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: origin = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: honeypotEnabled = false

  ID: 5
  Type: NodeType.IF
  Expression: _initialSupply > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mint(origin,_initialSupply)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowances[owner][spender]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowances[from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(from,msg.sender,currentAllowance - amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: toggleHoneypot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can toggle honeypot)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: honeypotEnabled = ! honeypotEnabled

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: HoneypotToggled(honeypotEnabled)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: setPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can set pair)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lpPair = pairAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PairAddressUpdated(pairAddress)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can renounce)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(origin,address(0))

Edges:
  0 -> 1
  1 -> 2

Function: blacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can blacklist)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: blacklisted[account] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Blacklisted(account)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: whitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can whitelist)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: blacklisted[account] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Whitelisted(account)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: f7e1d2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == origin,Only origin can mint)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mint(account,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0) && to != address(0),ERC20: transfer from/to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[from] >= amount,ERC20: transfer amount exceeds balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! blacklisted[from] && ! blacklisted[to],Transfer blocked: address is blacklisted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! (honeypotEnabled && to == lpPair && from != origin),Honeypot active: only owner can transfer to LP pair)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[from] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[to] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0) && spender != address(0),ERC20: approve from/to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowances[owner][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:


