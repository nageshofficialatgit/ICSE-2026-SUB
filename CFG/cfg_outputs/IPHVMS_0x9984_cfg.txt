Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(to,value),SafeERC20: Transfer failed)

Edges:
  0 -> 1


Contract: IERC721
==================================================


Contract: IERC721Receiver
==================================================


Contract: IERC1155Receiver
==================================================


Contract: IERC1155
==================================================


Contract: IPHVMS
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner1 != address(0) && _owner2 != address(0) && _owner3 != address(0) && _owner4 != address(0),Owners cannot be zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner1 != _owner2 && _owner1 != _owner3 && _owner1 != _owner4 && _owner2 != _owner3 && _owner2 != _owner4 && _owner3 != _owner4,Owners must be unique)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner1 = _owner1

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner2 = _owner2

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner3 = _owner3

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: owner4 = _owner4

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: governList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((1,2,3,4),(owner1,owner2,owner3,owner4))

Edges:
  0 -> 1

Function: tlSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(timeLockApproved,Time-lock proposal required, use another owner to call tlProp)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != timeLockApprover,Operator must be different from proposal)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= unlockTime,Cannot set a new time-lock until the current one expires)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(durationAsSec >= 600,Minimum time-lock is 10 minutes)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(durationAsSec <= 157680000,Invalid duration (max 5 years))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: unlockTime = block.timestamp + durationAsSec

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: timeLockApproved = false

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: timeLockApprover = address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: TimeLockSet(unlockTime)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: tlProp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! timeLockApproved,Time-lock already proposed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: timeLockApproved = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timeLockApprover = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: govReset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lastGovResetTimestamp[msg.sender] + COOLDOWN_TIME,Cooldown period not met)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementProposed,No active governance proposal to reset)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: replacementProposed = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: proposedNewOwner = address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ownerToReplace = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: replacementApproved1 = false

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: replacementApprover1 = address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: lastGovResetTimestamp[msg.sender] = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: wdSignProp1
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! withdrawalApproved,Already proposed once)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalApproved = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lastApprover = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: resetApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: withdrawalApproved = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalApproved2 = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lastApprover = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: secondApprover = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: wdSignProp2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawalApproved,First proposal required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != lastApprover,Second proposal must be from a different owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! withdrawalApproved2,Already proposed twice)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: withdrawalApproved2 = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: secondApprover = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(msg.sender)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: govProp0
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lastGovProp0Timestamp[msg.sender] + GOVPROP0_COOLDOWN,Must wait 12 hours before proposing again)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! replacementProposed,A replacement is already proposed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerNumber >= 1 && ownerNumber <= 4,Invalid owner number (must be 1-4))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner cannot be zero address)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != owner1 && newOwner != owner2 && newOwner != owner3 && newOwner != owner4,New owner must not already be an owner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: proposedNewOwner = newOwner

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ownerToReplace = ownerNumber

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: replacementProposed = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: replacementApproved1 = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: replacementApproved2 = false

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: replacementApprover1 = address(0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: replacementApprover2 = address(0)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: lastGovProp0Timestamp[msg.sender] = block.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: govSignProp1
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementProposed,No replacement proposed yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! replacementApproved1,First proposal already done)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: replacementApproved1 = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: replacementApprover1 = msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: govSignProp2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementProposed,No replacement proposed yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementApproved1,First proposal required)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! replacementApproved2,Second proposal already done)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != replacementApprover1,Second proposal must be from a different owner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: replacementApproved2 = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: replacementApprover2 = msg.sender

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: govPropSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementProposed,No replacement proposed yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(replacementApproved1 && replacementApproved2,Two proposals required)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != replacementApprover1 && msg.sender != replacementApprover2,Operator must be different from proposers)

  ID: 4
  Type: NodeType.IF
  Expression: ownerToReplace == 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner1 = proposedNewOwner

  ID: 6
  Type: NodeType.IF
  Expression: ownerToReplace == 2

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: owner2 = proposedNewOwner

  ID: 8
  Type: NodeType.IF
  Expression: ownerToReplace == 3

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: owner3 = proposedNewOwner

  ID: 10
  Type: NodeType.IF
  Expression: ownerToReplace == 4

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: owner4 = proposedNewOwner

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: replacementProposed = false

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: replacementApproved1 = false

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: replacementApproved2 = false

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: proposedNewOwner = address(0)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ownerToReplace = 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: replacementApprover1 = address(0)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: replacementApprover2 = address(0)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 23
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 15
  6 -> 7
  6 -> 8
  7 -> 14
  8 -> 9
  8 -> 10
  9 -> 13
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  23 -> 1

Function: wdETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawalApproved && withdrawalApproved2,Two proposals required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != lastApprover && msg.sender != secondApprover,Proposers cannot operate withdrawal)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerOption >= 1 && ownerOption <= 4,Invalid owner number (must be 1-4))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Not enough ETH)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,No Ether to Withdraw)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH transfer failed)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: resetApproval()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: EtherWithdrawn(recipient,amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 15
  Type: NodeType.IF
  Expression: ownerOption == 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: recipient = address(owner1)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: ownerOption == 2

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: recipient = address(owner2)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: ownerOption == 3

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: recipient = address(owner3)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: recipient = address(owner4)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 15
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 1
  15 -> 16
  15 -> 19
  16 -> 18
  18 -> 5
  19 -> 20
  19 -> 23
  20 -> 22
  22 -> 18
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 22

Function: wdERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawalApproved && withdrawalApproved2,Two proposals required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != lastApprover && msg.sender != secondApprover,Proposers cannot operate withdrawal)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerOption >= 1 && ownerOption <= 4,Invalid owner number (must be 1-4))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokenContract)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(address(this)) >= amount,Not enough tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,No Tokens to Withdraw)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: resetApproval()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TokensWithdrawn(tokenContract,recipient,amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 14
  Type: NodeType.IF
  Expression: ownerOption == 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: recipient = owner1

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: ownerOption == 2

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: recipient = owner2

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: ownerOption == 3

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: recipient = owner3

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: recipient = owner4

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 14
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 1
  14 -> 15
  14 -> 18
  15 -> 17
  17 -> 5
  18 -> 19
  18 -> 22
  19 -> 21
  21 -> 17
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 21

Function: wdERC1155
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawalApproved && withdrawalApproved2,Two proposals required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != lastApprover && msg.sender != secondApprover,Proposers cannot operate withdrawal)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerOption >= 1 && ownerOption <= 4,Invalid owner number (must be 1-4))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = IERC1155(nftContract)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: contractBalance = token.balanceOf(address(this),tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(contractBalance >= amount,string(abi.encodePacked(Insufficient ERC1155 balance. Available: ,uint2Str(contractBalance), Requested: ,uint2Str(amount))))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: beforeBalance = token.balanceOf(recipient,tokenId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: token.safeTransferFrom(address(this),recipient,tokenId,amount,)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: afterBalance = token.balanceOf(recipient,tokenId)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(afterBalance == beforeBalance + amount,Transfer failed)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: resetApproval()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ERC1155Withdrawn(nftContract,recipient,tokenId,amount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 17
  Type: NodeType.IF
  Expression: ownerOption == 1

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: recipient = owner1

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: ownerOption == 2

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: recipient = owner2

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: ownerOption == 3

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: recipient = owner3

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: recipient = owner4

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 17
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 16
  16 -> 1
  17 -> 18
  17 -> 21
  18 -> 20
  20 -> 5
  21 -> 22
  21 -> 25
  22 -> 24
  24 -> 20
  25 -> 26
  25 -> 27
  26 -> 28
  27 -> 28
  28 -> 24

Function: wdERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawalApproved && withdrawalApproved2,Two proposals required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != lastApprover && msg.sender != secondApprover,Proposers cannot operate withdrawal)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerOption >= 1 && ownerOption <= 4,Invalid owner number (must be 1-4))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC721(nftContract).ownerOf(tokenId) == address(this),No NFT to Withdraw)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC721(nftContract).safeTransferFrom(address(this),recipient,tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC721(nftContract).ownerOf(tokenId) == recipient,Transfer failed)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: resetApproval()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: NFTWithdrawn(nftContract,recipient,tokenId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.IF
  Expression: ownerOption == 1

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: recipient = owner1

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: ownerOption == 2

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: recipient = owner2

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: ownerOption == 3

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: recipient = owner3

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: recipient = owner4

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 13
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 1
  13 -> 14
  13 -> 17
  14 -> 16
  16 -> 5
  17 -> 18
  17 -> 21
  18 -> 20
  20 -> 16
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 20

Function: onERC721Received
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0x150b7a02

Edges:
  0 -> 1

Function: onERC1155Received
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0xf23a6e61

Edges:
  0 -> 1

Function: onERC1155BatchReceived
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0xbc197c81

Edges:
  0 -> 1

Function: uint2Str
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _i == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: j = _i

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: j != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: length ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: j /= 10

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: bstr = new bytes(length)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: k = length

  ID: 13
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 14
  Type: NodeType.IFLOOP
  Expression: _i != 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: k = k - 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: bstr[k] = bytes1(uint8(48 + _i % 10))

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _i /= 10

  ID: 18
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 19
  Type: NodeType.RETURN
  Expression: string(bstr)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 18
  15 -> 16
  16 -> 17
  17 -> 14
  18 -> 19

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: EtherReceived(msg.sender,msg.value)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tipJar = 0x77702b30a0276A4436BB688586147Ff75d64E97B

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: vIPHVMS = v0.0.8 Standlone

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: COOLDOWN_TIME = 7200

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GOVPROP0_COOLDOWN = 43200

Edges:
  0 -> 1
  1 -> 2


