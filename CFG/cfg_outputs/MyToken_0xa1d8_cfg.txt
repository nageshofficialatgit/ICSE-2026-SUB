Contract: MyToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = totalSupply_ * 10 ** 18

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: setLiquidityPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! liquidityLocked,Already locked)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: liquidityPair = pairAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lockEndTime = block.timestamp + 172800

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: liquidityLocked = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: LiquidityLocked(pairAddress,lockEndTime)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: addToBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _blacklist[account] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BlacklistUpdated(account,true)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeFromBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _blacklist[account] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BlacklistUpdated(account,false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklist[msg.sender],Sender blacklisted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklist[to],Recipient blacklisted)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: liquidityLockCheck(msg.sender)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklist[from],Sender blacklisted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklist[to],Recipient blacklisted)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,msg.sender,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: liquidityLockCheck(from)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[_owner][spender]

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),From zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),To zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner != address(0),Approve from zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Approve to zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[_owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(_owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(_owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,Insufficient allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(_owner,spender,currentAllowance - amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5


