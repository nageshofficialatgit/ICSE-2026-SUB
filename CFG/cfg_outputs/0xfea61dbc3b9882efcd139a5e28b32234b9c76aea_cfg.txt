Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: tokenInterface
==================================================


Contract: Ambassador
==================================================

Function: euroRaisedRc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: icoContract.euroRaised(soldTokensWithoutBonus)

  ID: 2
  Type: NodeType.RETURN
  Expression: euro

Edges:
  0 -> 1

Function: Ambassador
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_icoContract != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_ambassadorAddr != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_euroThreshold.length != 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_euroThreshold.length == _bonusThreshold.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: icoContract = CoinCrowdICO(_icoContract)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: contractOwner = _icoContract

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: icoContract.addMeByRC(_ambassadorAddr)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: bonusThreshold = _bonusThreshold

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: euroThreshold = _euroThreshold

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: soldTokensWithoutBonus = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: setTimeRC(_startRC,_endRC)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: setTimeRC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _startRC == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startRC = icoContract.startTime()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: startRC = _startRC

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: _endRC == 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: endRC = icoContract.endTime()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endRC = _endRC

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8

Function: updateTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newStart != 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startRC = _newStart

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _newEnd != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: endRC = _newEnd

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyIcoContract()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > startRC)

  ID: 2
  Type: NodeType.IF
  Expression: now < endRC

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokenAmount = icoContract.buy.value(msg.value)(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balanceUser[msg.sender] = balanceUser[msg.sender].add(tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: soldTokensWithoutBonus = soldTokensWithoutBonus.add(tokenAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balanceUser[msg.sender] > 0)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: bonusApplied = 0

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < euroThreshold.length

  ID: 12
  Type: NodeType.IF
  Expression: icoContract.euroRaised(soldTokensWithoutBonus).div(1000) > euroThreshold[i]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: bonusApplied = bonusThreshold[i]

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool)(bonusApplied > 0)

  ID: 17
  Type: NodeType.VARIABLE
  Expression: addTokenAmount = balanceUser[msg.sender].mul(bonusApplied).div(10 ** 2)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: balanceUser[msg.sender] = 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: icoContract.claimPremium(msg.sender,addTokenAmount)

  ID: 20
  Type: NodeType.IF
  Expression: msg.value > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 23
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 16
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 11
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23


Contract: CoinCrowdICO
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: euroRaised
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _weiTokens.mul(centToken).div(100).div(10 ** decimals)

Edges:
  0 -> 1

Function: euroRaisedICO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: euroRaised(totalSoldTokensWithoutBonus)

  ID: 2
  Type: NodeType.RETURN
  Expression: euro

Edges:
  0 -> 1

Function: CoinCrowdICO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenContract = tokenInterface(_tokenAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenValue = _tokenValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: startICO(_startTime)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSoldTokensWithBonus = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalSoldTokensWithoutBonus = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: remainingTokens = 24500000 * 10 ** decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: updateValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == updater || msg.sender == owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenValue = newValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdateValue(newValue)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: updateUpdater
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: updater = newUpdater

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newStart != 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startTime = _newStart

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _newEnd != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: endTime = _newEnd

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: updateTimeRC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Ambassador(_rcContract).updateTime(_newStart,_newEnd)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: startICO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _startTime == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startTime = now

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: startTime = _startTime

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: endTime = startTime + 12 * weekInSeconds

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: buy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now < endTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(remainingTokens > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenContract.balanceOf(this) > remainingTokens)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oneXCC = 10 ** decimals

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tokenAmount = msg.value.mul(oneXCC).div(tokenValue)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: currentAmbassador = address(0)

  ID: 8
  Type: NodeType.IF
  Expression: ambassadorAddressOf[msg.sender] != address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentAmbassador = msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > startTime)

  ID: 12
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 2000

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1833

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 2

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1667

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 3

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1500

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 4

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1333

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 5

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1167

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 6

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 1000

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 7

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 833

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 8

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 667

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 39
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 9

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 500

  ID: 41
  Type: NodeType.ENDIF
  Expression: 

  ID: 42
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 10

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 333

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 11

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 167

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.IF
  Expression: now > startTime + weekInSeconds * 12

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: bonusRate = 0

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.IF
  Expression: remainingTokens < tokenAmount

  ID: 53
  Type: NodeType.VARIABLE
  Expression: refund = (tokenAmount - remainingTokens).mul(tokenValue).div(oneXCC)

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: tokenAmount = remainingTokens

  ID: 55
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(msg.value - refund)

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: remainingTokens = 0

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: _buyer.transfer(refund)

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: remainingTokens = remainingTokens.sub(tokenAmount)

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(msg.value)

  ID: 60
  Type: NodeType.ENDIF
  Expression: 

  ID: 61
  Type: NodeType.VARIABLE
  Expression: tokenAmountWithBonus = tokenAmount.add(tokenAmount.mul(bonusRate).div(10 ** 4))

  ID: 62
  Type: NodeType.EXPRESSION
  Expression: tokenContract.transfer(_buyer,tokenAmountWithBonus)

  ID: 63
  Type: NodeType.EXPRESSION
  Expression: Buy(_buyer,tokenAmountWithBonus,currentAmbassador)

  ID: 64
  Type: NodeType.EXPRESSION
  Expression: totalSoldTokensWithBonus += tokenAmountWithBonus

  ID: 65
  Type: NodeType.EXPRESSION
  Expression: totalSoldTokensWithoutBonus += tokenAmount

  ID: 66
  Type: NodeType.RETURN
  Expression: tokenAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 51
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 32
  31 -> 32
  32 -> 33
  33 -> 34
  33 -> 35
  34 -> 35
  35 -> 36
  36 -> 37
  36 -> 38
  37 -> 38
  38 -> 39
  39 -> 40
  39 -> 41
  40 -> 41
  41 -> 42
  42 -> 43
  42 -> 44
  43 -> 44
  44 -> 45
  45 -> 46
  45 -> 47
  46 -> 47
  47 -> 48
  48 -> 49
  48 -> 50
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  52 -> 58
  53 -> 54
  54 -> 55
  55 -> 56
  56 -> 57
  57 -> 60
  58 -> 59
  59 -> 60
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 64
  64 -> 65
  65 -> 66

Function: addMeByRC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tx.origin == owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ambassadorAddressOf[msg.sender] = _ambassadorAddr

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: NewAmbassador(_ambassadorAddr,msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: to.transfer(value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenContract = tokenInterface(_tokenContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenContract.transfer(to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: claimPremium
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ambassadorAddressOf[msg.sender] != address(0))

  ID: 2
  Type: NodeType.RETURN
  Expression: tokenContract.transfer(_buyer,_amount)

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buy(msg.sender)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: centToken = 20

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: weekInSeconds = 604800

Edges:
  0 -> 1


