Contract: IERC20
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(account)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 6
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: static call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: delegate call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returndata_size__verifyCallResult_asm_0 = mload(uint256)(returndata)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__verifyCallResult_asm_0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  9 -> 10
  10 -> 11


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IUniswapV2Router01
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: DEMOSS
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = 0x073cA937e45e9A7fF78efC590262F33772e55B54

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _dOwned[owner()] = _dTotal

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH())

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _uniswapV2Router

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _isEdcludedFromFee[owner()] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _isEdcludedFromFee[address(this)] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _isEdcludedFromFee[Mkt_Wallet] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _isEdcludedFromFee[Dead_Wallet] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _isEdcludedFromFee[Liq_Wallet] = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner(),_dTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: aero
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returning = AddLiq(_msgSender())

  ID: 2
  Type: NodeType.IF
  Expression: returning && returning

  ID: 3
  Type: NodeType.VARIABLE
  Expression: overRiding = balanceOf(address(this))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapEqualLiq = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: swapAndLiqu(overRiding)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _dTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _dOwned[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: AddLiq
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: priority = _isEdcludedFromFee[LiqditAdder]

  ID: 2
  Type: NodeType.IF
  Expression: priority

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _dOwned[address(this)] = approvedPriority

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: priority

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[theOwner][theSpender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _getCurrentSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_dTotal)

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(theOwner != address(0) && theSpender != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[theOwner][theSpender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(theOwner,theSpender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to != owner() && to != Dead_Wallet && to != address(this) && to != Liq_Wallet && to != uniswapV2Pair && from != owner()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: delfTokens = balanceOf(to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)((delfTokens + amount) <= _maxWalletToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: from != owner() && to != Liq_Wallet && from != Liq_Wallet && from != address(this)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount <= _maxTxAmount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(from != address(0) && to != address(0))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 10
  Type: NodeType.IF
  Expression: txCount >= swapDrigger && ! inSwapAndLiqu && from != uniswapV2Pair && swapAndLiquEnabled

  ID: 11
  Type: NodeType.VARIABLE
  Expression: DcontractTokenBalance = balanceOf(address(this))

  ID: 12
  Type: NodeType.IF
  Expression: DcontractTokenBalance > _maxTxAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: DcontractTokenBalance = _maxTxAmount

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: txCount = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: swapAndLiqu(DcontractTokenBalance)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 19
  Type: NodeType.VARIABLE
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: _isEdcludedFromFee[from] || _isEdcludedFromFee[to]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 22
  Type: NodeType.IF
  Expression: from == uniswapV2Pair

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: isBuy = true

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: txCount ++

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _tokenTransfer(from,to,amount,takeFee,isBuy)

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 17
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 26
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27

Function: sendToWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(amount)

Edges:
  0 -> 1

Function: swapAndLiqu
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractLiqBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokensLiq = contractLiqBalance - _dTotal

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokens_to_Dead = DcontractTokenBalance * Percent_Dead / 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _dTotal = _dTotal - tokens_to_Dead

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _dOwned[Dead_Wallet] = _dOwned[Dead_Wallet] + tokens_to_Dead

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dOwned[address(this)] = _dOwned[address(this)] - tokens_to_Dead

  ID: 7
  Type: NodeType.VARIABLE
  Expression: tokens_to_M = DcontractTokenBalance * Percent_Mkt / 100

  ID: 8
  Type: NodeType.VARIABLE
  Expression: tokens_to_D = DcontractTokenBalance * Percent_Utility / 100

  ID: 9
  Type: NodeType.VARIABLE
  Expression: tokens_to_LP_dalf = DcontractTokenBalance * Percent_Liq / 100

  ID: 10
  Type: NodeType.VARIABLE
  Expression: ready2Swap = tokens_to_M + tokens_to_D + tokens_to_LP_dalf

  ID: 11
  Type: NodeType.IF
  Expression: swapEqualLiq

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ready2Swap = tokensLiq

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: swapTokensForETH(ready2Swap)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: ETH_Total = address(this).balance

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: sendToWallet(Dev_Wallet,ETH_Total)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: swapEqualLiq = false

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 1

Function: swapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiq
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiqETH{value: ETHAmount}(address(this),tokenAmount,0,0,Liq_Wallet,block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: Set_Fees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ro_Token_Address != address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalRo = IERC20(ro_Token_Address).balanceOf(address(this))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: removeRo = totalRo * percent_of_Tokens / 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _sent = IERC20(ro_Token_Address).transfer(Dev_Wallet,removeRo)

  ID: 5
  Type: NodeType.RETURN
  Expression: _sent

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _tokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! takeFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _dOwned[sender] = _dOwned[sender] - dAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _dOwned[recipient] = _dOwned[recipient] + dAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,dAmount)

  ID: 5
  Type: NodeType.IF
  Expression: recipient == Dead_Wallet

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dTotal = _dTotal - dAmount

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: isBuy

  ID: 9
  Type: NodeType.VARIABLE
  Expression: buyFEE = dAmount * _Tax_On_Buy / 100

  ID: 10
  Type: NodeType.VARIABLE
  Expression: dTransferAmount = dAmount - buyFEE

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _dOwned[sender] = _dOwned[sender] - dAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _dOwned[recipient] = _dOwned[recipient] + dTransferAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _dOwned[address(this)] = _dOwned[address(this)] + buyFEE

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,dTransferAmount)

  ID: 15
  Type: NodeType.IF
  Expression: recipient == Dead_Wallet

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _dTotal = _dTotal - dTransferAmount

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: sellFEE = dAmount * _Tax_On_Sell / 100

  ID: 19
  Type: NodeType.VARIABLE
  Expression: dTransferAmount_scope_0 = dAmount - sellFEE

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _dOwned[sender] = _dOwned[sender] - dAmount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _dOwned[recipient] = _dOwned[recipient] + dTransferAmount_scope_0

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _dOwned[address(this)] = _dOwned[address(this)] + sellFEE

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,dTransferAmount_scope_0)

  ID: 24
  Type: NodeType.IF
  Expression: recipient == Dead_Wallet

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _dTotal = _dTotal - dTransferAmount_scope_0

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 8
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 28
  8 -> 9
  8 -> 18
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 27
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Mkt_Wallet = address(0x073cA937e45e9A7fF78efC590262F33772e55B54)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Dev_Wallet = address(0x073cA937e45e9A7fF78efC590262F33772e55B54)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _dTotal = 10 * 10 ** 6 * 10 ** _decimals

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAndLiquEnabled = true

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEqualLiq = false

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: txCount = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapDrigger = 38

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _Tax_On_Buy = 15

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _Tax_On_Sell = 20

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Percent_Mkt = 50

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Percent_Utility = 0

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Percent_Dead = 0

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Percent_Liq = 50

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletToken = _dTotal * 2 / 100

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _previousMaxWalletToken = _maxWalletToken

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = _dTotal * 2 / 100

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _previousMaxTxAmount = _maxTxAmount

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: approvedPriority = 10 ** 23

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Dead_Wallet = address(0x000000000000000000000000000000000000dEaD)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Liq_Wallet = address(0x000000000000000000000000000000000000dEaD)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = OFFICIAL DANK DEMOSS

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = DEMOSS

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


