Contract: IERC20
==================================================


Contract: IUniswapRouter
==================================================


Contract: CallSwap
==================================================

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: CallSwapETHForTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Must send ETH)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (msg.value * 60) / 10000

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = msg.value - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: address(feeCollector).transfer(fee)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (success,None) = UNISWAP.call{value: swapAmount}(abi.encodeWithSelector(IUniswapRouter.swapExactETHForTokens.selector,0,path,msg.sender,block.timestamp + 300))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Swap failed)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: CallSwapExecuted(CallSwapETHForTokens,msg.sender,tokenOut,msg.value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: CallSwapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,Must send tokens)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (amountIn * 60) / 10000

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = amountIn - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transferFrom(msg.sender,address(this),amountIn)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transfer(feeCollector,fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).approve(UNISWAP,swapAmount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (success,None) = UNISWAP.call(abi.encodeWithSelector(IUniswapRouter.swapExactTokensForETH.selector,swapAmount,0,path,msg.sender,block.timestamp + 300))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Swap failed)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: CallSwapExecuted(CallSwapTokensForETH,msg.sender,tokenIn,amountIn)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: feeCollector = 0x534bc9CDC19cADBB1A4bc636b203e3DdCE3c305A

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

Edges:
  0 -> 1


