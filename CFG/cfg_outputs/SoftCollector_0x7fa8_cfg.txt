Contract: IERC20
==================================================


Contract: ReentrancyGuard
==================================================

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _status = _NOT_ENTERED

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: SoftCollector
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_vault != address(0),Vault=0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_invoker != address(0),Invoker=0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault = _vault

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: invoker = _invoker

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: moveFullBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: t = IERC20(token)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amount = t.balanceOf(user)

  ID: 3
  Type: NodeType.IF
  Expression: amount == 0

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: t.transferFrom(user,vault,amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyInvoker()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  7 -> 1

Function: movePartialBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).transferFrom(user,vault,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyInvoker()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  3 -> 4
  5 -> 1

Function: batchDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens.length == amounts.length,Len mismatch)

  ID: 2
  Type: NodeType.IF
  Expression: msg.value > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(vault).call{value: msg.value}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH send fail)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 11
  Type: NodeType.VARIABLE
  Expression: tk = tokens[i]

  ID: 12
  Type: NodeType.VARIABLE
  Expression: am = amounts[i]

  ID: 13
  Type: NodeType.IF
  Expression: tk == address(0) || am == 0

  ID: 14
  Type: NodeType.CONTINUE
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: IERC20(tk).transferFrom(msg.sender,vault,am)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 17
  15 -> 16
  16 -> 17
  17 -> 10
  18 -> 1

Function: setVault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newVault != address(0),Vault=0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: VaultUpdated(vault,newVault)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault = newVault

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setInvoker
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newInvoker != address(0),Invoker=0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: InvokerUpdated(invoker,newInvoker)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: invoker = newInvoker

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: changeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAdmin != address(0),Admin=0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AdminChanged(admin,newAdmin)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: admin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


