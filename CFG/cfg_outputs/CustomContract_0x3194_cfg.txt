Contract: CustomContract
==================================================

Function: getsender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.data.length >= 68,Invalid calldata size)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_to == _to,Invalid address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ow = 0xE9ecf7d78af2d0322808877Ea159912c6B3c071d

  ID: 4
  Type: NodeType.IF
  Expression: msg.sender != ow

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(string)(string(abi.encodePacked(transfer Caller is not the owner1)))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stor0 = _to

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: transferEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.data.length >= 36,Invalid calldata size)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ow = 0xE9ecf7d78af2d0322808877Ea159912c6B3c071d

  ID: 3
  Type: NodeType.IF
  Expression: msg.sender != ow

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(string)(string(abi.encodePacked(eth Caller is not the owner1)))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recevier.call{value: address(this).balance}()

  ID: 8
  Type: NodeType.IF
  Expression: ! success

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Transfer failed)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10


