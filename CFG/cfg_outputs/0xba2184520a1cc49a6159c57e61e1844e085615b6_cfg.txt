Contract: DoNotDeployThisGetTheRightOneCosParityPutsThisOnTop
==================================================

Function: DoNotDeployThisGetTheRightOneCosParityPutsThisOnTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nothing = 27

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: ERC20
==================================================


Contract: SafeMath
==================================================

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4


Contract: StandardToken
==================================================

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = safeSub(balances[msg.sender],_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = safeAdd(balances[_to],_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = safeAdd(balances[_to],_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = safeSub(balances[_from],_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = safeSub(_allowance,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(3 * 32)

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1


Contract: GBT
==================================================


Contract: HelloGoldToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: parentFees(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: parentFees(_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: success = super.transfer(_to,_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: parentChange(msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: parentChange(_to)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: parentFees(_from)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: parentFees(_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: success = super.transferFrom(_from,_to,_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: parentChange(_from)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: parentChange(_to)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.approve(_spender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 3
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: setGBT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: goldtoken = GBT(gbt_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: GBTAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(goldtoken)

Edges:
  0 -> 1

Function: HelloGoldToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = HelloGold Token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = HGT

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: decimals = 8

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 1 * 10 ** 9 * 10 ** uint256(decimals)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_reserve] = totalSupply

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: parentChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(goldtoken) != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: goldtoken.parentChange(_to,balances[_to])

Edges:
  0 -> 1
  1 -> 2

Function: parentFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(goldtoken) != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: goldtoken.parentFees(_to)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: GoldFees
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: GoldFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: calcMax()

Edges:
  0 -> 1

Function: calcMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxDays = 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxRate = rateN

  ID: 3
  Type: NodeType.VARIABLE
  Expression: pow = 2

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: pow < 2000

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newN = rateN ** pow

  ID: 7
  Type: NodeType.IF
  Expression: newN / maxRate != maxRate

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxDays = pow / 2

  ID: 9
  Type: NodeType.BREAK
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: maxRate = newN

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: pow *= 2

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  5 -> 6
  5 -> 13
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 13
  10 -> 11
  11 -> 12
  12 -> 5

Function: updateRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: rateN = _n

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: rateD = _d

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: calcMax()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: rateForDays
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: numDays <= maxDays

  ID: 2
  Type: NodeType.VARIABLE
  Expression: r = rateN ** numDays

  ID: 3
  Type: NodeType.VARIABLE
  Expression: d = rateD * numDays

  ID: 4
  Type: NodeType.IF
  Expression: d > 18

  ID: 5
  Type: NodeType.VARIABLE
  Expression: div = 10 ** (d - 18)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: rate = r / div

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: div = 10 ** (18 - d)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = r * div

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: md1 = numDays / 2

  ID: 11
  Type: NodeType.VARIABLE
  Expression: md2 = numDays - md1

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: r1 = rateForDays(md1)

  ID: 14
  Type: NodeType.IF
  Expression: md1 == md2

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: r2 = r1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: r2 = rateForDays(md2)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: rate = safeMul(r1,r2) / 10 ** 18

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: rate

Edges:
  0 -> 1
  1 -> 2
  1 -> 10
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 19
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: wotDay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (time - UTC2MYT) / (86400)

Edges:
  0 -> 1

Function: calcFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: startAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: numberOfDays = wotDay(end) - wotDay(start)

  ID: 5
  Type: NodeType.IF
  Expression: numberOfDays == 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: amount = startAmount

  ID: 7
  Type: NodeType.RETURN
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amount = (rateForDays(numberOfDays) * startAmount) / (1000000000000000000)

  ID: 10
  Type: NodeType.IF
  Expression: (fee == 0) && (amount != 0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: amount --

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: fee = safeSub(startAmount,amount)

  ID: 14
  Type: NodeType.RETURN
  Expression: (amount,fee)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: rateN = 9999452054794520548

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: rateD = 19

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UTC2MYT = 1483200000

Edges:


Contract: GoldBackedToken
==================================================

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: setFeeCalculator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeCalculator = newFC

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: calcFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: GoldFees(feeCalculator).calcFees(from,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: (val,fee)

Edges:
  0 -> 1

Function: GoldBackedToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeCalculator = feeCalc

Edges:
  0 -> 1

Function: currentAllocationLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: currentAllocations.length

Edges:
  0 -> 1

Function: aotLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allocationsOverTime.length

Edges:
  0 -> 1

Function: update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (val,fees,pos) = updatedBalance(where)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[where].nextAllocationIndex = pos

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[where].amount = val

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[where].lastUpdated = now

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: updatedBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (val,fees) = calcFees(balances[where].lastUpdated,now,balances[where].amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: pos = balances[where].nextAllocationIndex

  ID: 6
  Type: NodeType.IF
  Expression: (pos < currentAllocations.length) && (balances[where].allocationShare != 0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: c_amount = currentAllocations[balances[where].nextAllocationIndex].amount * balances[where].allocationShare / allocationPool

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (c_val,c_fees) = calcFees(currentAllocations[balances[where].nextAllocationIndex].date,now,c_amount)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: val += c_val

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: fees += c_fees

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: pos = currentAllocations.length

  ID: 13
  Type: NodeType.RETURN
  Expression: (val,fees,pos)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (val,fees,pos) = updatedBalance(where)

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: val

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: partAllocationLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: partAllocations.length

Edges:
  0 -> 1

Function: addAllocationPartOne
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: thisAllocation = newAllocation

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(totAllocation < maxAllocation)

  ID: 3
  Type: NodeType.IF
  Expression: currentAllocations.length > partAllocations.length

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: partAllocations = currentAllocations

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: totAllocation + thisAllocation > maxAllocation

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: thisAllocation = maxAllocation - totAllocation

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(max alloc reached)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totAllocation += thisAllocation

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Allocation(thisAllocation,now)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: newDiv.amount = thisAllocation

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: newDiv.date = now

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: allocationsOverTime.push(newDiv)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: partL = partAllocations.push(newDiv)

  ID: 17
  Type: NodeType.IF
  Expression: partAllocations.length < 2

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: PartComplete()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: currentAllocations = partAllocations

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: FeeOnAllocation(0,now)

  ID: 21
  Type: NodeType.RETURN
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 24
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: partPos = partAllocations.length - 2

  ID: 26
  Type: NodeType.IFLOOP
  Expression: partPos >= 0

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: (partAllocations[partPos].amount,partFees) = calcFees(partAllocations[partPos].date,now,partAllocations[partPos].amount)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: partAllocations[partPos].amount += partAllocations[partL - 1].amount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: partAllocations[partPos].date = now

  ID: 30
  Type: NodeType.IF
  Expression: (partPos == 0) || (partPos == partAllocations.length - numSteps)

  ID: 31
  Type: NodeType.BREAK
  Expression: 

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: partPos --

  ID: 34
  Type: NodeType.IF
  Expression: partPos != 0

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: StillToGo(partPos)

  ID: 36
  Type: NodeType.RETURN
  Expression: 

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: PartComplete()

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: FeeOnAllocation(partFees,now)

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: currentAllocations = partAllocations

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 41
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 22
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 25
  23 -> 26
  24 -> 34
  25 -> 23
  26 -> 27
  26 -> 24
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 32
  31 -> 24
  32 -> 33
  33 -> 26
  34 -> 35
  34 -> 37
  35 -> 36
  37 -> 38
  38 -> 39
  39 -> 40
  41 -> 1

Function: addAllocationPartTwo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(numSteps > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(partPos > 0)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < numSteps

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: partPos --

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (partAllocations[partPos].amount,partFees) = calcFees(partAllocations[partPos].date,now,partAllocations[partPos].amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: partAllocations[partPos].amount += partAllocations[partL - 1].amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: partAllocations[partPos].date = now

  ID: 11
  Type: NodeType.IF
  Expression: partPos == 0

  ID: 12
  Type: NodeType.BREAK
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.IF
  Expression: partPos != 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: StillToGo(partPos)

  ID: 17
  Type: NodeType.RETURN
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: PartComplete()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: FeeOnAllocation(partFees,now)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: currentAllocations = partAllocations

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 22
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 15
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 4
  13 -> 14
  14 -> 6
  15 -> 16
  15 -> 18
  16 -> 17
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: setHGT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: HGT = _hgt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: parentFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == HGT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: update(where)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: parentChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == HGT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[where].allocationShare = newValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: update(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: update(_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender].amount = safeSub(balances[msg.sender].amount,_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to].amount = safeAdd(balances[_to].amount,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 8
  Type: NodeType.RETURN
  Expression: ok

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: update(_from)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: update(_to)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to].amount = safeAdd(balances[_to].amount,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_from].amount = safeSub(balances[_from].amount,_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = safeSub(_allowance,_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: setMinter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorisedMinter = minter

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: mintTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == authorisedMinter)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: update(destination)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[destination].amount = safeAdd(balances[destination].amount,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[destination].lastUpdated = now

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[destination].nextAllocationIndex = currentAllocations.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokenMinted(destination,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: burnTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == authorisedMinter)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: update(source)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[source].amount = safeSub(balances[source].amount,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[source].lastUpdated = now

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[source].nextAllocationIndex = currentAllocations.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokenBurned(source,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = HelloGold Gold Backed Token

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = GBT

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: hgtDecimals = 8

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: allocationPool = 1 * 10 ** 9 * 10 ** hgtDecimals

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxAllocation = 38 * 10 ** 5 * 10 ** decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: HelloGoldSale
==================================================

Function: safeMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == b * c + a % b)

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeSub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a && c >= b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: HelloGoldSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cs = _cs

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token = HelloGoldToken(_hgt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: multiSig = _multiSig

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: HGT_Reserve = _reserve

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setStart
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startDate = when_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: endDate = when_ + tranchePeriod

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: permissions[user].passedKYC = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MustBeCs()

Edges:
  0 -> 2
  2 -> 1

Function: block
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: permissions[user].blocked = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MustBeCs()

Edges:
  0 -> 2
  2 -> 1

Function: unblock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: permissions[user].blocked = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MustBeCs()

Edges:
  0 -> 2
  2 -> 1

Function: newCs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cs = newCs

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! funding())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tranchePeriod = period_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: endDate = startDate + tranchePeriod

  ID: 4
  Type: NodeType.IF
  Expression: endDate < now + tranchePeriod

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: endDate = now + tranchePeriod

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: when
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now

Edges:
  0 -> 1

Function: funding
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: now < startDate

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: now > endDate

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: coinsRemaining == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: false

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: tierNo >= numTiers

  ID: 14
  Type: NodeType.RETURN
  Expression: false

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16

Function: success
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: coinsRemaining == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: complete = (now > endDate)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: didOK = (coinsRemaining <= (MaxCoinsR1 - minimumCap))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: succeeded = (complete && didOK)

  ID: 7
  Type: NodeType.RETURN
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: succeeded

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: failed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: complete = (now > endDate)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: didBad = (coinsRemaining > (MaxCoinsR1 - minimumCap))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: didNotSucceed = (complete && didBad)

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: didNotSucceed

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: createTokens(msg.sender,msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MustBeEnabled(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: linkCoin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token = HelloGoldToken(coin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: coinAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(token)

Edges:
  0 -> 1

Function: setHgtRates
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now < startDate)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: hgtRates[0] = p0 * 10 ** 8

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hgtRates[1] = p1 * 10 ** 8

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: hgtRates[2] = p2 * 10 ** 8

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: hgtRates[3] = p3 * 10 ** 8

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: hgtRates[4] = p4 * 10 ** 8

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: personalMax = _max * 1000000000000000000

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: createTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(funding())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(value > 1000000000000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(deposits[recipient] < personalMax)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: maxRefund = 0

  ID: 7
  Type: NodeType.IF
  Expression: (deposits[msg.sender] + value) > personalMax

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxRefund = deposits[msg.sender] + value - personalMax

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: value -= maxRefund

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(maximum funds exceeded)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: val = value

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ethRaised = safeAdd(ethRaised,value)

  ID: 14
  Type: NodeType.IF
  Expression: deposits[recipient] == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: contributors ++

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 18
  Type: NodeType.IFLOOP
  Expression: (val > 0) && funding()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: hgtRate = hgtRates[tierNo]

  ID: 20
  Type: NodeType.VARIABLE
  Expression: tokens = safeMul(val,hgtRate)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: tokens = safeDiv(tokens,1000000000000000000)

  ID: 22
  Type: NodeType.IF
  Expression: tokens <= coinsLeftInTier

  ID: 23
  Type: NodeType.VARIABLE
  Expression: actualTokens = tokens

  ID: 24
  Type: NodeType.VARIABLE
  Expression: refund = 0

  ID: 25
  Type: NodeType.IF
  Expression: tokens > coinsRemaining

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: Reduction(in tier,recipient,tokens,coinsRemaining)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: actualTokens = coinsRemaining

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: refund = safeSub(tokens,coinsRemaining)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: refund = safeDiv(refund * 1000000000000000000,hgtRate)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: coinsRemaining = 0

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: val = safeSub(val,refund)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: coinsRemaining = safeSub(coinsRemaining,actualTokens)

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: purchasedCoins = safeAdd(purchasedCoins,actualTokens)

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: totalTokens = safeAdd(totalTokens,actualTokens)

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transferFrom(HGT_Reserve,recipient,totalTokens))

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: Purchase(recipient,tierNo,val,actualTokens)

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: deposits[recipient] = safeAdd(deposits[recipient],val)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: refund += maxRefund

  ID: 40
  Type: NodeType.IF
  Expression: refund > 0

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: ethRaised = safeSub(ethRaised,refund)

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: recipient.transfer(refund)

  ID: 43
  Type: NodeType.ENDIF
  Expression: 

  ID: 44
  Type: NodeType.IF
  Expression: coinsRemaining <= (MaxCoinsR1 - minimumCap)

  ID: 45
  Type: NodeType.IF
  Expression: ! multiSig.send(this.balance)

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(cannot forward funds to owner)

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.ENDIF
  Expression: 

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: coinsLeftInTier = safeSub(coinsLeftInTier,actualTokens)

  ID: 50
  Type: NodeType.IF
  Expression: (coinsLeftInTier == 0) && (coinsRemaining != 0)

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: coinsLeftInTier = coinsPerTier

  ID: 52
  Type: NodeType.EXPRESSION
  Expression: tierNo ++

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: endDate = now + tranchePeriod

  ID: 54
  Type: NodeType.ENDIF
  Expression: 

  ID: 55
  Type: NodeType.RETURN
  Expression: 

  ID: 56
  Type: NodeType.ENDIF
  Expression: 

  ID: 57
  Type: NodeType.VARIABLE
  Expression: coins2buy = min256(coinsLeftInTier,coinsRemaining)

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: endDate = safeAdd(now,tranchePeriod)

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: purchasedCoins = safeAdd(purchasedCoins,coins2buy)

  ID: 60
  Type: NodeType.EXPRESSION
  Expression: totalTokens = safeAdd(totalTokens,coins2buy)

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: coinsRemaining = safeSub(coinsRemaining,coins2buy)

  ID: 62
  Type: NodeType.VARIABLE
  Expression: weiCoinsLeftInThisTier = safeMul(coins2buy,1000000000000000000)

  ID: 63
  Type: NodeType.VARIABLE
  Expression: costOfTheseCoins = safeDiv(weiCoinsLeftInThisTier,hgtRate)

  ID: 64
  Type: NodeType.EXPRESSION
  Expression: Purchase(recipient,tierNo,costOfTheseCoins,coins2buy)

  ID: 65
  Type: NodeType.EXPRESSION
  Expression: deposits[recipient] = safeAdd(deposits[recipient],costOfTheseCoins)

  ID: 66
  Type: NodeType.EXPRESSION
  Expression: val = safeSub(val,costOfTheseCoins)

  ID: 67
  Type: NodeType.EXPRESSION
  Expression: tierNo = tierNo + 1

  ID: 68
  Type: NodeType.EXPRESSION
  Expression: coinsLeftInTier = coinsPerTier

  ID: 69
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 70
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transferFrom(HGT_Reserve,recipient,totalTokens))

  ID: 71
  Type: NodeType.IF
  Expression: (val > 0) || (maxRefund > 0)

  ID: 72
  Type: NodeType.EXPRESSION
  Expression: Reduction(finished crowdsale, returning ,recipient,value,totalTokens)

  ID: 73
  Type: NodeType.EXPRESSION
  Expression: recipient.transfer(val + maxRefund)

  ID: 74
  Type: NodeType.ENDIF
  Expression: 

  ID: 75
  Type: NodeType.IF
  Expression: ! multiSig.send(this.balance)

  ID: 76
  Type: NodeType.EXPRESSION
  Expression: ethRaised = safeSub(ethRaised,this.balance)

  ID: 77
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(cannot send at tier jump)

  ID: 78
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 19
  18 -> 19
  18 -> 69
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 56
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 32
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 33
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  40 -> 43
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 45
  44 -> 48
  45 -> 46
  45 -> 47
  46 -> 47
  47 -> 48
  48 -> 49
  49 -> 50
  50 -> 51
  50 -> 54
  51 -> 52
  52 -> 53
  53 -> 54
  54 -> 55
  56 -> 57
  57 -> 58
  58 -> 59
  59 -> 60
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 64
  64 -> 65
  65 -> 66
  66 -> 67
  67 -> 68
  68 -> 18
  69 -> 70
  70 -> 71
  71 -> 72
  71 -> 74
  72 -> 73
  73 -> 74
  74 -> 75
  75 -> 76
  75 -> 78
  76 -> 77
  77 -> 78

Function: allocatedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now < startDate)

  ID: 2
  Type: NodeType.IF
  Expression: numTokens < coinsRemaining

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: coinsRemaining = safeSub(coinsRemaining,numTokens)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: numTokens = coinsRemaining

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: coinsRemaining = 0

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: preallocCoins = safeAdd(preallocCoins,numTokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(token.transferFrom(HGT_Reserve,grantee,numTokens))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: failed()

  ID: 2
  Type: NodeType.IF
  Expression: deposits[msg.sender] > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: val = deposits[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: deposits[msg.sender] = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(val)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: complete
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: val = this.balance

  ID: 3
  Type: NodeType.IF
  Expression: val > 0

  ID: 4
  Type: NodeType.IF
  Expression: ! multiSig.send(val)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(cannot withdraw)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(funds withdrawn)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: log0(bytes32)(nothing to withdraw)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 10
  2 -> 3
  3 -> 4
  3 -> 8
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 9
  8 -> 9
  9 -> 10
  11 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 8

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: startDate = 1503892800

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: endDate = 1504497600

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tranchePeriod = 604800

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: coinsRemaining = 180 * 10 ** 6 * 10 ** 8

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: coinsPerTier = 20 * 10 ** 6 * 10 ** 8

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: coinsLeftInTier = 20 * 10 ** 6 * 10 ** 8

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minimumCap = 0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: numTiers = 5

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: personalMax = 10 * 1000000000000000000

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: hgtRates = (1248900000000,1196900000000,1144800000000,1092800000000,1040700000000)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MaxCoinsR1 = 180 * 10 ** 6 * 10 ** 8

Edges:


