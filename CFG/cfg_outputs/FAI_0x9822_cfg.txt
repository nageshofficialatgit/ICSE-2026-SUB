Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,address(0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,SafeMath: division by zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IUniswapV2Router
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: FAI
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _treasuryWallet = address(0xaF16f4C4dB0cA09F7af8D90F9367dA968002780f)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _devWallet = address(0x176e706FcDF73DE2FcB56eC7091dc3d65a1F6b33)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_treasuryWallet] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_devWallet] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[owner()] = true

  ID: 7
  Type: NodeType.VARIABLE
  Expression: contractMint = _tTotal.mul(95).div(100)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: devMint = _tTotal.sub(contractMint)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = contractMint

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),address(this),contractMint)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[_devWallet] = devMint

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_devWallet,devMint)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,address(0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner_][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner_ != address(0),ERC20: approve from zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner_][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner_,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setTaxes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newBuyTax <= 5,Buy tax cannot exceed 5%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newSellTax <= 15,Sell tax cannot exceed 15%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _buyTax = newBuyTax

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _sellTax = newSellTax

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TaxesUpdated(_buyTax,_sellTax)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0) && to != address(0),ERC20: zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be > zero)

  ID: 3
  Type: NodeType.IF
  Expression: from != owner() && to != owner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen || from == address(this) || to == address(this),Trading not enabled)

  ID: 5
  Type: NodeType.IF
  Expression: from == uniswapV2Pair && ! _isExcludedFromFee[to]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount,Exceeds max transaction amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[to].add(amount) <= _maxWalletSize,Exceeds max wallet size)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = _balances[address(this)]

  ID: 10
  Type: NodeType.IF
  Expression: contractTokenBalance >= _taxSwapThreshold && ! inSwapProcess && to == uniswapV2Pair && swapEnabled

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokens(_min(amount,_min(contractTokenBalance,_maxTaxSwap)))

  ID: 12
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 13
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: sendETHToFee(ethBalance)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: taxAmount = 0

  ID: 19
  Type: NodeType.IF
  Expression: ! _isExcludedFromFee[from] && ! _isExcludedFromFee[to]

  ID: 20
  Type: NodeType.IF
  Expression: from == uniswapV2Pair

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_buyTax).div(100)

  ID: 22
  Type: NodeType.IF
  Expression: to == uniswapV2Pair

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_sellTax).div(100)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from].sub(amount,ERC20: transfer exceeds balance)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to].add(amount.sub(taxAmount))

  ID: 29
  Type: NodeType.IF
  Expression: taxAmount > 0

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(taxAmount)

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(this),taxAmount)

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount.sub(taxAmount))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 17
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 16
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 26
  20 -> 21
  20 -> 22
  21 -> 25
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  29 -> 32
  30 -> 31
  31 -> 32
  32 -> 33

Function: _min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a > b

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: swapTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockSwapProcess()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: sendETHToFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: treasuryShare = amount.mul(50).div(100)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: devShare = amount.sub(treasuryShare)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _treasuryWallet.transfer(treasuryShare)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _devWallet.transfer(devShare)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(uniswapV2Router) == address(0),Liquidity already added)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),_balances[address(this)],0,0,owner(),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingOpen,Trading already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _tTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletSize = _tTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxTxAmountUpdated(_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: rescueETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(owner()).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: rescueTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddress != address(this),Cannot rescue native token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenAddress).transfer(owner(),amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = 300_000 * 10 ** 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletSize = 500_000 * 10 ** 9

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxSwapThreshold = 10_000 * 10 ** 9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTaxSwap = 10_000 * 10 ** 9

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyTax = 3

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _sellTax = 16

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = false

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapProcess = false

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Floss AI

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = FAI

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 10_000_000 * 10 ** 9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


