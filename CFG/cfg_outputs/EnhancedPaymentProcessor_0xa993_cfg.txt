Contract: EnhancedPaymentProcessor
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = address(msg.sender)

Edges:
  0 -> 1

Function: submitPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= MINIMUM_PAYMENT,Minimum payment is 0.005 ETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bytes(productName).length > 0,Product name cannot be empty)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(quantity > 0,Quantity must be greater than zero)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: PaymentReceived(msg.sender,encryptedData,productName,quantity,msg.value,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: submitBulkPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= MINIMUM_PAYMENT,Minimum payment is 0.005 ETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(productNames.length > 0,Must include at least one product)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(productNames.length == quantities.length,Product names and quantities arrays must match)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < productNames.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bytes(productNames[i]).length > 0,Product name cannot be empty)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(quantities[i] > 0,Quantity must be greater than zero)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: productPayment = msg.value / productNames.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: PaymentReceived(msg.sender,encryptedData,productNames[i],quantities[i],productPayment,block.timestamp)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= address(this).balance,Insufficient funds in contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = owner.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Withdrawal failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Withdrawal(owner,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINIMUM_PAYMENT = 5000000000000000

Edges:


