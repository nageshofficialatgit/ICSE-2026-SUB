Contract: IERC20
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: Qrz112Reader
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Qrz112Reader: new owner is zero address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setBtcOracle
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_btcOracle != address(0),Qrz112Reader: invalid btc oracle address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: aggregator = AggregatorV3Interface(_btcOracle)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = aggregator.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(price > 0,Qrz112Reader: BTC price is zero or negative)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: oldBtcOracle = btcOracle

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: btcOracle = _btcOracle

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BtcOracleSet(oldBtcOracle,_btcOracle)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: setEthOracle
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_ethOracle != address(0),Qrz112Reader: invalid eth oracle address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: aggregator = AggregatorV3Interface(_ethOracle)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = aggregator.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(price > 0,Qrz112Reader: ETH price is zero or negative)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: oldEthOracle = ethOracle

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ethOracle = _ethOracle

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: EthOracleSet(oldEthOracle,_ethOracle)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: setMaxDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxDelay <= 172800,Qrz112Reader: maxDelay cannot exceed 48 hours)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldDelay = maxDelay

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: maxDelay = _maxDelay

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: MaxDelaySet(oldDelay,_maxDelay)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcOracle != address(0),Qrz112Reader: btc oracle not set)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethOracle != address(0),Qrz112Reader: eth oracle not set)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (btcRoundId,btcAnswer,None,btcUpdatedAt,btcAnsweredInRound) = AggregatorV3Interface(btcOracle).latestRoundData()

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (ethRoundId,ethAnswer,None,ethUpdatedAt,ethAnsweredInRound) = AggregatorV3Interface(ethOracle).latestRoundData()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcAnswer > 0,Qrz112Reader: BTC price is zero or negative)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcAnsweredInRound >= btcRoundId,Qrz112Reader: invalid BTC round data)

  ID: 15
  Type: NodeType.IF
  Expression: maxDelay > 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcUpdatedAt >= block.timestamp - maxDelay,Qrz112Reader: BTC price is stale)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethAnswer > 0,Qrz112Reader: ETH price is zero or negative)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethAnsweredInRound >= ethRoundId,Qrz112Reader: invalid ETH round data)

  ID: 20
  Type: NodeType.IF
  Expression: maxDelay > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethUpdatedAt >= block.timestamp - maxDelay,Qrz112Reader: ETH price is stale)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: avg = (uint256(btcAnswer) + uint256(ethAnswer)) / 2

  ID: 24
  Type: NodeType.RETURN
  Expression: _sqrt(avg)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24

Function: getPricesAndRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcOracle != address(0),Qrz112Reader: btc oracle not set)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethOracle != address(0),Qrz112Reader: eth oracle not set)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (btcRoundId,btcAnswer,None,btcUpdatedAt,btcAnsweredInRound) = AggregatorV3Interface(btcOracle).latestRoundData()

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (ethRoundId,ethAnswer,None,ethUpdatedAt,ethAnsweredInRound) = AggregatorV3Interface(ethOracle).latestRoundData()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcAnswer > 0,Qrz112Reader: BTC price is zero or negative)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcAnsweredInRound >= btcRoundId,Qrz112Reader: invalid BTC round data)

  ID: 15
  Type: NodeType.IF
  Expression: maxDelay > 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcUpdatedAt >= block.timestamp - maxDelay,Qrz112Reader: BTC price is stale)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethAnswer > 0,Qrz112Reader: ETH price is zero or negative)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethAnsweredInRound >= ethRoundId,Qrz112Reader: invalid ETH round data)

  ID: 20
  Type: NodeType.IF
  Expression: maxDelay > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethUpdatedAt >= block.timestamp - maxDelay,Qrz112Reader: ETH price is stale)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: btcPrice = uint256(btcAnswer)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: ethPrice = uint256(ethAnswer)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: btcEthRatio = btcPrice / ethPrice

  ID: 26
  Type: NodeType.RETURN
  Expression: (btcPrice,ethPrice,btcEthRatio)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: getRatiosFixedPoint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sqrtAvgRatio = this.getRatio()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (None,None,rawBtcEthRatio) = this.getPricesAndRatio()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sqrtAvgRatioFP = sqrtAvgRatio * 1e18

  ID: 5
  Type: NodeType.VARIABLE
  Expression: btcEthRatioFP = rawBtcEthRatio * 1e18

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sqrtAvgRatioFP < 2 ** 128,sqrtAvgRatioFP exceeds 128 bits)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(btcEthRatioFP < 2 ** 128,btcEthRatioFP exceeds 128 bits)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: packedRatios = bytes32((sqrtAvgRatioFP << 128) | btcEthRatioFP)

  ID: 9
  Type: NodeType.RETURN
  Expression: packedRatios

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: rescueERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),Qrz112Reader: invalid token address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(token).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,Qrz112Reader: no tokens to rescue)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transfer(owner,balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Qrz112Reader: ERC20 transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ERC20Rescued(token,balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: rescueETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,Qrz112Reader: no ETH to rescue)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = owner.call{value: balance}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Qrz112Reader: ETH transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ETHRescued(balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: x == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: z = (x + 1) / 2

  ID: 5
  Type: NodeType.VARIABLE
  Expression: y = x

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: z < y

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: y = z

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: z = (x / z + z) / 2

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: y

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 7
  10 -> 11


