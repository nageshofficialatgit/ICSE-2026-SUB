Contract: IUniswapV2Router
==================================================


Contract: IERC20
==================================================


Contract: AsbubaSniperBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,ETH required for purchase)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = _token

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(slippageTolerance <= 100,Invalid slippage tolerance)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amountOutMin = (msg.value * (100 - slippageTolerance)) / 100

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin,path,address(this),block.timestamp + 300)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TokenPurchased(msg.sender,_token,IERC20(_token).balanceOf(address(this)))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: buyTokenWithPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(percentage > 0 && percentage <= 100,Invalid percentage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: contractBalance = address(this).balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(contractBalance > 0,No ETH available in contract)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: ethAmount = (contractBalance * percentage) / 100

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethAmount > 0,ETH amount too low)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[1] = _token

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amountOutMin = (ethAmount * (100 - slippageTolerance)) / 100

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(amountOutMin,path,address(this),block.timestamp + 300)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: TokenPurchased(msg.sender,_token,IERC20(_token).balanceOf(address(this)))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(_token).balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No tokens to withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(_token).transfer(owner,balance),Token transfer failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Withdrawal(owner,balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No ETH to withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Withdrawal(owner,balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setSlippage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_slippage <= 29,Slippage too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: slippageTolerance = _slippage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Invalid new owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: slippageTolerance = 5

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

Edges:
  0 -> 1


