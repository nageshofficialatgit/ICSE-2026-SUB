Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: VULPEPRESALE
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferOwnership(0x8aB654A21D8AC187F94fac01CEbbFCcd575d6C55)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token = IERC20(_token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenMetadata = IERC20Metadata(_token)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellerAddress = _seller

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: paymentAddress = _payment

  ID: 6
  Type: NodeType.IF
  Expression: block.chainid == 56

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: UsdtAddress = 0x55d398326f99059fF775485246999027B3197955

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE)

  ID: 9
  Type: NodeType.IF
  Expression: block.chainid == 1

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: UsdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Unsupported network!)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 14
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 13
  12 -> 13
  13 -> 14
  15 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: getEthToUsdPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: convertEthToUsd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsdPrice = getEthToUsdPrice()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: usdAmount = (ethAmount * uint256(ethToUsdPrice)) / (10 ** priceFeed.decimals())

  ID: 3
  Type: NodeType.RETURN
  Expression: usdAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: calculateWeiRequired
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleActive,Presale is not active!)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _id = getCurrentStageIdActive()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id > 0,No active stage available!)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentStage = stages[_id]

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalPayUsd = tokenAmount * currentStage.price

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethToUsd = convertEthToUsd(1e18)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: totalPayInWei = (totalPayUsd * 1e18) / ethToUsd

  ID: 8
  Type: NodeType.RETURN
  Expression: totalPayInWei

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: buyTokenWithUsdt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleActive,Presale is not active!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount > 0,Please enter minimum token amount!)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _id = getCurrentStageIdActive()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id > 0,Stage info not available!)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentStage = stages[_id]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: totalPayInUsd = _amount * currentStage.price

  ID: 7
  Type: NodeType.VARIABLE
  Expression: usdtDecimals = IERC20Metadata(UsdtAddress).decimals()

  ID: 8
  Type: NodeType.VARIABLE
  Expression: totalPayInUsdt = (totalPayInUsd * (10 ** usdtDecimals)) / 1e18

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(UsdtAddress).allowance(msg.sender,address(this)) >= totalPayInUsdt,Insufficient USDT allowance!)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: paymentSuccess = IERC20(UsdtAddress).transferFrom(msg.sender,paymentAddress,totalPayInUsdt)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentSuccess,USDT payment failed!)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: totalTokenAmount = (_amount * 1e18) / (10 ** (18 - tokenMetadata.decimals()))

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentStage.tokensSold + totalTokenAmount <= currentStage.maxTokens,Stage token limit exceeded!)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: tokenTransferSuccess = token.transferFrom(sellerAddress,msg.sender,totalTokenAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: currentStage.tokensSold += totalTokenAmount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenTransferSuccess,Token transfer failed!)

  ID: 17
  Type: NodeType.IF
  Expression: _referallAddress != address(0)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: referallSalesRecords[_referallAddress].push(SaleRecord({stageId:_id,tokensSold:totalTokenAmount,buyer:msg.sender}))

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: totalSold += totalTokenAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleActive,Presale is not active!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount >= 0,Please enter minimum token!)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _id = getCurrentStageIdActive()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id > 0,Stage info not available!)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentStage = stages[_id]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _totalPayInEther = calculateWeiRequired(_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= _totalPayInEther,Not enough payment!)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _totalAmount = _amount * 1e18

  ID: 9
  Type: NodeType.VARIABLE
  Expression: _tokenDecimals = tokenMetadata.decimals()

  ID: 10
  Type: NodeType.VARIABLE
  Expression: _subDecimals = 18 - _tokenDecimals

  ID: 11
  Type: NodeType.VARIABLE
  Expression: _totalTokenAmount = _totalAmount / (10 ** _subDecimals)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentStage.tokensSold + _totalTokenAmount <= currentStage.maxTokens,Stage token limit exceeded!)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(paymentAddress).send(msg.value),Failed to transfer ETH payment!)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: success = token.transferFrom(sellerAddress,msg.sender,_totalTokenAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: currentStage.tokensSold += _totalTokenAmount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Failed to transfer token!)

  ID: 17
  Type: NodeType.IF
  Expression: _referallAddress != address(0)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: referallSalesRecords[_referallAddress].push(SaleRecord({stageId:_id,tokensSold:_totalTokenAmount,buyer:msg.sender}))

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: totalSold += _totalTokenAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20

Function: setToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_token != address(0),Token is zero address!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token = IERC20(_token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenMetadata = IERC20Metadata(_token)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setPriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_priceFeed != address(0),Token is zero address!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_priceFeed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setSellerAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellerAddress = _seller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPaymentAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paymentAddress = _payment

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: flipPresaleActive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleActive = ! presaleActive

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: remainingTokens = token.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(remainingTokens > 0,No tokens left to withdraw)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = token.transfer(msg.sender,remainingTokens)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Failed to withdraw tokens)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setMaxStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxStage = _maxStage

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: addStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _id = currentStageId + 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id <= maxStage,Maximum stage exceeds!)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: currentStageId += 1

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stages[_id] = Stage({id:_id,price:_price,maxTokens:_maxTokens,tokensSold:0,active:_active})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stages[_id].id == _id,ID doesn't exist!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stages[_id].price = _price

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: stages[_id].maxTokens = _maxTokens

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stages[_id].active = _active

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getCurrentStageIdActive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _id = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i <= currentStageId

  ID: 6
  Type: NodeType.IF
  Expression: stages[i].active

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _id = i

  ID: 8
  Type: NodeType.BREAK
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: _id

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 11
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 5

Function: withdrawFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(msg.sender).send(address(this).balance),Failed withdraw!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: presaleActive = true

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSold = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxStage = 10

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: currentStageId = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


