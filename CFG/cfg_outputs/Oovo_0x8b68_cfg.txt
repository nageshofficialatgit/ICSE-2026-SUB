Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: ERC20
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: senderBalance = _balances[sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = senderBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _createInitialSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IDexRouter
==================================================


Contract: IDexFactory
==================================================


Contract: Oovo
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _uniswapV2Router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(_uniswapV2Router),true)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _uniswapV2Router

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IDexFactory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH())

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(address(uniswapV2Pair),true)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: totalSupply = 500000000 * 1e18

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxBuyAmount = totalSupply * 10 / 1000

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxSellAmount = totalSupply * 5 / 1000

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: maxWalletAmount = totalSupply * 10 / 1000

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = totalSupply * 50 / 100000

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: buyTreasuryFee = 1

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: buyLiquidityFee = 3

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: buyRewardsFee = 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyTreasuryFee + buyLiquidityFee + buyRewardsFee

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: sellTreasuryFee = 1

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: sellLiquidityFee = 3

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: sellRewardsFee = 1

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellTreasuryFee + sellLiquidityFee + sellRewardsFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(newOwner,true)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(this),true)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(0xdead),true)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: TreasuryAddress = address(0x91D5331b527EA1bba1dEbaab953cdcbaC5D48D7D)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: RewardsAddress = address(0x7efC088cF3E4e7b0979eB78A1E5C02d379BCF3ba)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(newOwner,true)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(this),true)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(0xdead),true)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(RewardsAddress,true)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _createInitialSupply(newOwner,totalSupply)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: transferOwnership(newOwner)

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: ERC20(Oovo,OOVO)

Edges:
  0 -> 31
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  31 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,amount must be greater than 0)

  ID: 4
  Type: NodeType.IF
  Expression: limitsInEffect

  ID: 5
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != address(0) && to != address(0xdead)

  ID: 6
  Type: NodeType.IF
  Expression: ! tradingActive

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isExcludedMaxTransactionAmount[from] || _isExcludedMaxTransactionAmount[to],Trading is not active.)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from == owner(),Trading is not enabled)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && ! _isExcludedMaxTransactionAmount[to]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxBuyAmount,Buy transfer amount exceeds the max buy.)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWalletAmount,Cannot Exceed max wallet)

  ID: 13
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && ! _isExcludedMaxTransactionAmount[from]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxSellAmount,Sell transfer amount exceeds the max sell.)

  ID: 15
  Type: NodeType.IF
  Expression: ! _isExcludedMaxTransactionAmount[to] && ! _isExcludedMaxTransactionAmount[from]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWalletAmount,Cannot Exceed max wallet)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 23
  Type: NodeType.VARIABLE
  Expression: canSwap = contractTokenBalance >= swapTokensAtAmount

  ID: 24
  Type: NodeType.IF
  Expression: canSwap && swapEnabled && ! swapping && ! automatedMarketMakerPairs[from] && ! _isExcludedFromFees[from] && ! _isExcludedFromFees[to]

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 30
  Type: NodeType.IF
  Expression: _isExcludedFromFees[from] || _isExcludedFromFees[to]

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.VARIABLE
  Expression: fees = 0

  ID: 34
  Type: NodeType.VARIABLE
  Expression: penaltyAmount = 0

  ID: 35
  Type: NodeType.IF
  Expression: takeFee && tradingActiveBlock > 0 && (block.number > tradingActiveBlock)

  ID: 36
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && sellTotalFees > 0

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: fees = amount * sellTotalFees / 100

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: tokensForTreasury += fees * sellTreasuryFee / sellTotalFees

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: tokensForRewards += fees * sellRewardsFee / sellTotalFees

  ID: 41
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && buyTotalFees > 0

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: fees = amount * buyTotalFees / 100

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: tokensForTreasury += fees * buyTreasuryFee / buyTotalFees

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: tokensForRewards += fees * buyRewardsFee / buyTotalFees

  ID: 46
  Type: NodeType.ENDIF
  Expression: 

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.IF
  Expression: fees > 0

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,address(this),fees)

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: amount -= fees + penaltyAmount

  ID: 52
  Type: NodeType.ENDIF
  Expression: 

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 21
  5 -> 6
  5 -> 20
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 19
  13 -> 14
  13 -> 15
  14 -> 18
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 28
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 32
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  35 -> 52
  36 -> 37
  36 -> 41
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 47
  41 -> 42
  41 -> 46
  42 -> 43
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  48 -> 50
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53

Function: _createInitialSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: updateMaxBuyAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 1 / 1000) / 1e18,Cannot set max buy amount lower than 0.1%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxBuyAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxBuyAmount(maxBuyAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateMaxSellAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 1 / 1000) / 1e18,Cannot set max sell amount lower than 0.1%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxSellAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxSellAmount(maxSellAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: limitsInEffect = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RemovedLimits()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _excludeFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedMaxTransactionAmount[updAds] = isExcluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MaxTransactionExclusion(updAds,isExcluded)

Edges:
  0 -> 1
  1 -> 2

Function: excludeFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! isEx

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(updAds != uniswapV2Pair,Cannot remove uniswap pair from max txn)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedMaxTransactionAmount[updAds] = isEx

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateMaxWalletAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 3 / 1000) / 1e18,Cannot set max wallet amount lower than 0.3%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxWalletAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxWalletAmount(maxWalletAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateSwapThreshold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == TreasuryAddress,only TreasuryAddress can withdraw)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = newAmount * (10 ** 18)

Edges:
  0 -> 1
  1 -> 2

Function: transferForeignToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_token != address(0),_token address cannot be 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == TreasuryAddress,only TreasuryAddress can withdraw)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _contractBalance = IERC20(_token).balanceOf(address(this))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _sent = IERC20(_token).transfer(_to,_contractBalance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TransferForeignToken(_token,_contractBalance)

  ID: 6
  Type: NodeType.RETURN
  Expression: _sent

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdrawStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == TreasuryAddress,only TreasuryAddress can withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(msg.sender).call{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: updateBuyFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTreasuryFee = _treasuryFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyLiquidityFee = _liquidityFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buyRewardsFee = _rewardsFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyTreasuryFee + buyLiquidityFee + buyRewardsFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyTotalFees <= 30,Fees must be 30%  or less)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: updateSellFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellTreasuryFee = _treasuryFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellLiquidityFee = _liquidityFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellRewardsFee = _rewardsFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellTreasuryFee + sellLiquidityFee + sellRewardsFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellTotalFees <= 30,Fees must be 30%  or less)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: excludeFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFees[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludeFromFees(account,excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != uniswapV2Pair,The pair cannot be removed from automatedMarketMakerPairs)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(pair,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[pair] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(pair,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SetAutomatedMarketMakerPair(pair,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(owner()),block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: setTreasuryAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_TreasuryAddress != address(0),_TreasuryAddress address cannot be 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TreasuryAddress = address(_TreasuryAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedTreasuryAddress(_TreasuryAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setRewardsAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_RewardsAddress != address(0),_RewardsAddress address cannot be 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RewardsAddress = address(_RewardsAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedRewardsAddress(_RewardsAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalTokensToSwap = tokensForLiquidity + tokensForTreasury + tokensForRewards

  ID: 3
  Type: NodeType.IF
  Expression: contractBalance == 0 || totalTokensToSwap == 0

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: contractBalance > swapTokensAtAmount * 5

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractBalance = swapTokensAtAmount * 5

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(contractBalance - liquidityTokens)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 13
  Type: NodeType.VARIABLE
  Expression: ethForLiquidity = ethBalance

  ID: 14
  Type: NodeType.VARIABLE
  Expression: ethForTreasury = ethBalance * tokensForTreasury / (totalTokensToSwap - (tokensForLiquidity / 2))

  ID: 15
  Type: NodeType.VARIABLE
  Expression: ethForRewards = ethBalance * tokensForRewards / (totalTokensToSwap - (tokensForLiquidity / 2))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ethForLiquidity -= ethForTreasury + ethForRewards

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity = 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: tokensForTreasury = 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: tokensForRewards = 0

  ID: 20
  Type: NodeType.IF
  Expression: liquidityTokens > 0 && ethForLiquidity > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: addLiquidity(liquidityTokens,ethForLiquidity)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(RewardsAddress).call{value: ethForRewards}()

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(TreasuryAddress).call{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingActive,Cannot re enable trading)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tradingActive = _status

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: EnabledTrading(tradingActive,_deadBlocks)

  ID: 5
  Type: NodeType.IF
  Expression: tradingActive && tradingActiveBlock == 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tradingActiveBlock = block.number

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: deadBlocks = _deadBlocks

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  9 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingActiveBlock = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: deadBlocks = 1

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: limitsInEffect = true

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingActive = false

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


