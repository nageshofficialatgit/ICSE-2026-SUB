Contract: FiftyFlip
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: autoPlayBot = autoPlayBotAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whale = whaleAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: secretSigner = secretSignerAddress

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: jackpotSize = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: devFeeSize = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: lockedInBets = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalAmountToWhale = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setBotAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoPlayBot = autoPlayBotAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setSecretSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: secretSigner = _secretSigner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: wager
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amount = msg.value

  ID: 3
  Type: NodeType.VARIABLE
  Expression: player = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.player == address(0),Ticket is not new one!)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount >= MIN_BET,Your bet is lower than minimum bet amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= MAX_BET,Your bet is higher than maximum bet amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(getCollateralBalance() >= 2 * amount,If we accept this, this contract will be in danger!)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.number <= ticketLastBlock,Ticket has expired.)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: signatureHash = keccak256()(abi.encodePacked(Ethereum Signed Message:
37,uint40(ticketLastBlock),ticketID))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(secretSigner == ecrecover(bytes32,uint8,bytes32,bytes32)(signatureHash,v,r,s),web3 vrs signature is not valid.)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: jackpotSize += amount * JACKPOT_FEE / 1000

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: devFeeSize += amount * DEV_FEE / 1000

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: lockedInBets += amount * WIN_X / 1000

  ID: 14
  Type: NodeType.VARIABLE
  Expression: donate_amount = amount * DONATING_X / 1000

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: whale.call.value(donate_amount)(bytes4(keccak256()(donate())))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalAmountToWhale += donate_amount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: bet.amount = amount

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: bet.blockNumber = block.number

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: bet.betMask = bMask

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: bet.player = player

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: Wager(ticketID,bet.amount,bet.blockNumber,bet.betMask,bet.player)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: checkContractHealth()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: play
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ticketID = uint256(keccak256()(abi.encodePacked(ticketReveal)))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.player != address(0),TicketID is not correct!)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.amount != 0,Ticket is already used one!)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: blockNumber = bet.blockNumber

  ID: 6
  Type: NodeType.IF
  Expression: blockNumber < block.number && blockNumber >= block.number - BET_EXPIRATION_BLOCKS

  ID: 7
  Type: NodeType.VARIABLE
  Expression: random = uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockNumber),ticketReveal)))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: maskRes = (random % 2) != 0

  ID: 9
  Type: NodeType.VARIABLE
  Expression: jackpotRes = random % JACKPOT_MODULO

  ID: 10
  Type: NodeType.VARIABLE
  Expression: tossWinAmount = bet.amount * WIN_X / 1000

  ID: 11
  Type: NodeType.VARIABLE
  Expression: tossWin = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: jackpotWin = 0

  ID: 13
  Type: NodeType.IF
  Expression: bet.betMask == maskRes

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: tossWin = tossWinAmount

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: jackpotRes == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: jackpotWin = jackpotSize

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: jackpotSize = 0

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: jackpotWin > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: JackpotPayment(bet.player,ticketID,jackpotWin)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: tossWin + jackpotWin > 0

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: payout(bet.player,tossWin + jackpotWin,ticketID,maskRes,jackpotRes)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: loseWager(bet.player,bet.amount,ticketID,maskRes,jackpotRes)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: lockedInBets -= tossWinAmount

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: bet.amount = 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: checkContractHealth()

Edges:
  0 -> 31
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 29
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 19
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 30
  29 -> 30
  31 -> 1

Function: donateForContractHealth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: donateAmount[msg.sender] += msg.value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Donate(msg.value,msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: withdrawDonation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(donateAmount[msg.sender] >= amount,You are going to withdraw more than you donated!)

  ID: 2
  Type: NodeType.IF
  Expression: sendFunds(msg.sender,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: donateAmount[msg.sender] -= amount

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: refund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.amount != 0,this ticket has no balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.number > bet.blockNumber + BET_EXPIRATION_BLOCKS,this ticket is expired.)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sendRefund(ticketID)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: checkContractHealth()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: withdrawDevFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(devFeeSize >= withdrawAmount,You are trying to withdraw more amount than developer fee.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawAmount <= address(this).balance,Contract balance is lower than withdrawAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(devFeeSize <= address(this).balance,Not enough funds to withdraw.)

  ID: 4
  Type: NodeType.IF
  Expression: sendFunds(withdrawAddress,withdrawAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: devFeeSize -= withdrawAmount

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkContractHealth()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 8
  8 -> 1

Function: withdrawBotFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(devFeeSize >= withdrawAmount,You are trying to withdraw more amount than developer fee.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(withdrawAmount <= address(this).balance,Contract balance is lower than withdrawAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(devFeeSize <= address(this).balance,Not enough funds to withdraw.)

  ID: 4
  Type: NodeType.IF
  Expression: sendFunds(autoPlayBot,withdrawAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: devFeeSize -= withdrawAmount

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyBot()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkContractHealth()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 8
  8 -> 1

Function: getBetInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 2
  Type: NodeType.RETURN
  Expression: (bet.amount,bet.blockNumber,bet.betMask,bet.player)

Edges:
  0 -> 1
  1 -> 2

Function: getContractBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: getCollateralBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance > lockedInBets + jackpotSize + devFeeSize

  ID: 2
  Type: NodeType.RETURN
  Expression: address(this).balance - lockedInBets - jackpotSize - devFeeSize

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lockedInBets == 0,All bets should be processed (settled or refunded) before self-destruct.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: winner.transfer(ethToTransfer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Win(winner,ethToTransfer,ticketID,maskRes,jackpotRes)

Edges:
  0 -> 1
  1 -> 2

Function: sendRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: requester = bet.player

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ethToTransfer = bet.amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: requester.transfer(ethToTransfer)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tossWinAmount = bet.amount * WIN_X / 1000

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockedInBets -= tossWinAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: bet.amount = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Refund(ticketID,ethToTransfer,requester)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: sendFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: success = paidUser.send(amount)

  ID: 2
  Type: NodeType.IF
  Expression: success

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Payment(paidUser,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FailedPayment(paidUser,amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: loseWager
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Lose(player,amount,ticketID,maskRes,jackpotRes)

Edges:
  0 -> 1

Function: clearStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = toCleanTicketIDs.length

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: clearProcessedBet(toCleanTicketIDs[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: clearProcessedBet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bet = bets[ticketID]

  ID: 2
  Type: NodeType.IF
  Expression: bet.amount != 0 || block.number <= bet.blockNumber + BET_EXPIRATION_BLOCKS

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: bet.blockNumber = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: bet.betMask = false

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: bet.player = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferAnyERC20Token
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC20Interface(tokenAddress).transfer(tokenOwner,tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 3
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DONATING_X = 20

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: JACKPOT_FEE = 10

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: JACKPOT_MODULO = 1000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEV_FEE = 20

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WIN_X = 1900

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_BET = 10000000000000000

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_BET = 1000000000000000000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BET_EXPIRATION_BLOCKS = 250

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7


Contract: ERC20Interface
==================================================


