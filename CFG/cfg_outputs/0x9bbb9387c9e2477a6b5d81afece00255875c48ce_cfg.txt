Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: ERC20Basic
==================================================


Contract: BasicToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1


Contract: InkPublicPresale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: InkPublicPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: globalMax = 1000000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: globalMin = 100000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: maxGasPrice = 40000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: updateMaxGasPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_maxGasPrice > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxGasPrice = _maxGasPrice

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getEtherContributed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: etherContributed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getXNKPurchased
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: xnkPurchased

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateEtherCap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: etherCap = _newEtherCap

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: updateGlobalMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_globalMax > globalMin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: globalMax = _globalMax

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: updateGlobalMin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_globalMin > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_globalMin < globalMax)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: globalMin = _globalMin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: updateTokenAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokenAddress != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenAddress = _tokenAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: finalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: active = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: resume
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: active = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: enableRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! refundable)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: refundable = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: disableRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(refundable)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: refundable = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: addContributor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_account != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_max >= globalMin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! contributors[_account].whitelisted)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].whitelisted = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].max = _max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].rate = _rate

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: updateContributor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_account != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newRate > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newMax >= globalMin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributors[_account].whitelisted)

  ID: 5
  Type: NodeType.IF
  Expression: contributors[_account].balance > 0 && contributors[_account].rate != _newRate

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: xnkPurchased = xnkPurchased.sub(contributors[_account].balance.mul(contributors[_account].rate))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: xnkPurchased = xnkPurchased.add(contributors[_account].balance.mul(_newRate))

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].rate = _newRate

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].max = _newMax

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: removeContributor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_account != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributors[_account].whitelisted)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].whitelisted = false

  ID: 4
  Type: NodeType.IF
  Expression: contributors[_account].balance > 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: balance = contributors[_account].balance

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: contributors[_account].balance = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: xnkPurchased = xnkPurchased.sub(balance.mul(contributors[_account].rate))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: etherContributed = etherContributed.sub(balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ! _account.call.value(balance)()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: delete contributors[_account]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 10
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: withdrawXNK
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: token = BasicToken(tokenAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(token.transfer(_to,token.balanceOf(this)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdrawEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(_to.call.value(this.balance)())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: finalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_account != address(0))

  ID: 2
  Type: NodeType.RETURN
  Expression: contributors[_account].balance

Edges:
  0 -> 1
  1 -> 2

Function: refund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(refundable)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributors[msg.sender].whitelisted)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: balance = contributors[msg.sender].balance

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balance > 0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: contributors[msg.sender].balance = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: etherContributed = etherContributed.sub(balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: xnkPurchased = xnkPurchased.sub(balance.mul(contributors[msg.sender].rate))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(msg.sender.call.value(balance)())

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: airdrop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _processPayout(_account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: finalized()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokenAddress != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenAddress = _tokenAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == owner && msg.value > 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(active)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributors[msg.sender].whitelisted)

  ID: 6
  Type: NodeType.IF
  Expression: tokenAddress == address(0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _processContribution()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _processPayout(msg.sender)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9

Function: _processContribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tx.gasprice <= maxGasPrice)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contributors[msg.sender].balance.add(msg.value) >= globalMin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(etherCap > etherContributed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value <= etherCap.sub(etherContributed))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newBalance = contributors[msg.sender].balance.add(msg.value)

  ID: 7
  Type: NodeType.IF
  Expression: globalMax <= contributors[msg.sender].max

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newBalance <= globalMax)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newBalance <= contributors[msg.sender].max)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: contributors[msg.sender].balance = newBalance

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: etherContributed = etherContributed.add(msg.value)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: xnkPurchased = xnkPurchased.add(msg.value.mul(contributors[msg.sender].rate))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _processPayout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = contributors[_recipient].balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balance > 0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amount = balance.mul(contributors[_recipient].rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: contributors[_recipient].balance = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(BasicToken(tokenAddress).transfer(_recipient,amount))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


