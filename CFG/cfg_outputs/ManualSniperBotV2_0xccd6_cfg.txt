Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router
==================================================


Contract: IERC20
==================================================


Contract: ReentrancyGuard
==================================================


Contract: ManualSniperBotV2
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: uniswapFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: snipeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),Invalid token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,Amount must be greater than 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amountIn,Insufficient ETH balance in contract)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(deadline >= block.timestamp,Deadline has passed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: pair = IUniswapV2Factory(uniswapFactory).getPair(WETH,token)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != address(0),Pair does not exist)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = token

  ID: 10
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router(uniswapRouter).swapExactETHForTokens{value: amountIn}(minTokensOut,path,address(this),deadline)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: SnipeExecuted(token,amountIn,amounts[1],bytes32(0))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= address(this).balance,Insufficient ETH balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ETHWithdrawn(owner,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: withdrawToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).balanceOf(address(this)) >= amount,Insufficient token balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).transfer(owner,amount),Token transfer failed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenWithdrawn(owner,token,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getTokenBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20(token).balanceOf(address(this))

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 1


