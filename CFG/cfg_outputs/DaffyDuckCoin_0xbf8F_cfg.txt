Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: ERC20
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 9

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: senderBalance = _balances[sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = senderBalance - amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(address(0),account,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: burn from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(account,address(0),amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(account,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _beforeTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _afterTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: SafeMath
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: IAntiDrainer
==================================================


Contract: DaffyDuckCoin
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: block.chainid == 1 || block.chainid == 5

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.IF
  Expression: block.chainid == 11155111

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router02(0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008)

  ID: 5
  Type: NodeType.IF
  Expression: block.chainid == 8453

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router02(0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: excludeFromMaxTransaction(address(uniswapV2Router),true)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: excludeFromMaxTransaction(address(uniswapV2Pair),true)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(address(uniswapV2Pair),true)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: _buyMarketingFee = 15

  ID: 15
  Type: NodeType.VARIABLE
  Expression: _buyDevFee = 0

  ID: 16
  Type: NodeType.VARIABLE
  Expression: _sellMarketingFee = 15

  ID: 17
  Type: NodeType.VARIABLE
  Expression: _sellDevFee = 0

  ID: 18
  Type: NodeType.VARIABLE
  Expression: totalSupply = 1000000 * (10 ** decimals())

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _teamFee = 0

  ID: 20
  Type: NodeType.VARIABLE
  Expression: _teamWallet = address(0xF951deB29e60E66e1CA57366F4872ad7617cc4fc)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: maxTransaction = 1000000 * (10 ** decimals())

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: maxWallet = 20000 * (10 ** decimals())

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = 20000 * (10 ** decimals())

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: buyMarketingFee = _buyMarketingFee

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: buyDevFee = _buyDevFee

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyMarketingFee + buyDevFee

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: sellMarketingFee = _sellMarketingFee

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: sellDevFee = _sellDevFee

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellMarketingFee + sellDevFee

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = address(0xEF59B7d2b15696889CCB515404FEe4bAAD55835C)

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: developmentWallet = address(address(0))

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(owner(),true)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(this),true)

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(0xdead),true)

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: excludeFromMaxTransaction(owner(),true)

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: excludeFromMaxTransaction(address(this),true)

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: excludeFromMaxTransaction(address(0xdead),true)

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _mint(msg.sender,totalSupply * (1000 - _teamFee) / 1000)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _mint(_teamWallet,totalSupply * _teamFee / 1000)

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: ERC20(Daffy Duck,DAFFY)

Edges:
  0 -> 40
  1 -> 2
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 5
  4 -> 8
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  40 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 9

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBlackList[from],[from] black list)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBlackList[to],[to] black list)

  ID: 5
  Type: NodeType.IF
  Expression: amount == 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,0)

  ID: 7
  Type: NodeType.RETURN
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: limitsInEffect

  ID: 10
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != address(0) && to != address(0xdead) && ! swapping

  ID: 11
  Type: NodeType.IF
  Expression: ! tradingActive

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isExcludedFromFees[from] || _isExcludedFromFees[to],Trading is not active.)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && ! _isExcludedmaxTransaction[to]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxTransaction,Buy transfer amount exceeds the maxTransaction.)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWallet,Max wallet exceeded)

  ID: 17
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && ! _isExcludedmaxTransaction[from]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxTransaction,Sell transfer amount exceeds the maxTransaction.)

  ID: 19
  Type: NodeType.IF
  Expression: ! _isExcludedmaxTransaction[to]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWallet,Max wallet exceeded)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: antiDrainer != address(0) && IAntiDrainer(antiDrainer).isEnabled(address(this))

  ID: 27
  Type: NodeType.VARIABLE
  Expression: check = IAntiDrainer(antiDrainer).check(from,to,address(uniswapV2Pair),maxWallet,maxTransaction,swapTokensAtAmount)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(check,Anti Drainer Enabled)

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 31
  Type: NodeType.VARIABLE
  Expression: canSwap = contractTokenBalance >= swapTokensAtAmount

  ID: 32
  Type: NodeType.IF
  Expression: canSwap && swapEnabled && ! swapping && automatedMarketMakerPairs[to] && ! _isExcludedFromFees[from] && ! _isExcludedFromFees[to]

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.VARIABLE
  Expression: takeFee = ! swapping

  ID: 38
  Type: NodeType.IF
  Expression: _isExcludedFromFees[from] || _isExcludedFromFees[to]

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 40
  Type: NodeType.ENDIF
  Expression: 

  ID: 41
  Type: NodeType.VARIABLE
  Expression: fees = 0

  ID: 42
  Type: NodeType.IF
  Expression: takeFee

  ID: 43
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && sellTotalFees > 0

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: fees = amount.mul(sellTotalFees).div(100)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: tokensForDev += (fees * sellDevFee) / sellTotalFees

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees

  ID: 47
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && buyTotalFees > 0

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: fees = amount.mul(buyTotalFees).div(100)

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: tokensForDev += (fees * buyDevFee) / buyTotalFees

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.ENDIF
  Expression: 

  ID: 53
  Type: NodeType.IF
  Expression: fees > 0

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,address(this),fees)

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: amount -= fees

  ID: 57
  Type: NodeType.ENDIF
  Expression: 

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  8 -> 9
  9 -> 10
  9 -> 25
  10 -> 11
  10 -> 24
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 17
  15 -> 16
  16 -> 23
  17 -> 18
  17 -> 19
  18 -> 22
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 29
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 36
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  38 -> 40
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  42 -> 57
  43 -> 44
  43 -> 47
  44 -> 45
  45 -> 46
  46 -> 52
  47 -> 48
  47 -> 51
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  53 -> 54
  53 -> 55
  54 -> 55
  55 -> 56
  56 -> 57
  57 -> 58

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(address(0),account,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: burn from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(account,address(0),amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(account,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _beforeTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _afterTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setAntiDrainer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_antiDrainer != address(0x0),Invalid anti drainer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: antiDrainer = _antiDrainer

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingActive = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: enableTradingWithPermit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: domainHash = keccak256(bytes)(abi.encode(keccak256(bytes)(EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)),keccak256(bytes)(bytes(Trading Token)),keccak256(bytes)(bytes(1)),block.chainid,address(this)))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: structHash = keccak256(bytes)(abi.encode(keccak256(bytes)(Permit(string content,uint256 nonce)),keccak256(bytes)(bytes(Enable Trading)),uint256(0)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: digest = keccak256(bytes)(abi.encodePacked(,domainHash,structHash))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sender = ecrecover(bytes32,uint8,bytes32,bytes32)(digest,v,r,s)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender == owner(),Invalid signature)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tradingActive = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setBlackList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < wallets.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isBlackList[wallets[i]] = blocked

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: limitsInEffect = false

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateSwapTokensAtAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAmount >= (totalSupply() * 1) / 100000,Swap amount cannot be lower than 0.001% total supply.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAmount <= (totalSupply() * 5) / 1000,Swap amount cannot be higher than 0.5% total supply.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = newAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateMaxTxnAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= ((totalSupply() * 1) / 1000) / (10 ** decimals()),Cannot set maxTransaction lower than 0.1%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxTransaction = newNum * (10 ** decimals())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateMaxWalletAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= ((totalSupply() * 5) / 1000) / (10 ** decimals()),Cannot set maxWallet lower than 0.5%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxWallet = newNum * (10 ** decimals())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: excludeFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedmaxTransaction[updAds] = isEx

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateSwapEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateBuyFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyMarketingFee = _marketingFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyDevFee = _devFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyMarketingFee + buyDevFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyTotalFees <= 25,Must keep fees at 25% or less)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateSellFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellMarketingFee = _marketingFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellDevFee = _devFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellMarketingFee + sellDevFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellTotalFees <= 25,Must keep fees at 25% or less)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateTaxConfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newMarketingWallet.isChanged

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = _newMarketingWallet.value

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _newBuyMarketingFee.isChanged

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: buyMarketingFee = _newBuyMarketingFee.value

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _newSellMarketingFee.isChanged

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sellMarketingFee = _newSellMarketingFee.value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _newDevelopmentWallet.isChanged

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: developmentWallet = _newDevelopmentWallet.value

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _newBuyDevFee.isChanged

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: buyDevFee = _newBuyDevFee.value

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _newSellDevFee.isChanged

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: sellDevFee = _newSellDevFee.value

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyMarketingFee + buyDevFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellMarketingFee + sellDevFee

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyTotalFees <= 25,Must keep fees at 25% or less)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellTotalFees <= 25,Must keep fees at 25% or less)

  ID: 23
  Type: NodeType.IF
  Expression: marketingWallet == address(0)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyMarketingFee == 0 && sellMarketingFee == 0,buyMarketingFee, sellMarketingFee must be zero)

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: developmentWallet == address(0)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyDevFee == 0 && sellDevFee == 0,buyDevFee, sellDevFee must be zero)

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 29
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 28
  27 -> 28
  29 -> 1

Function: excludeFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFees[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludeFromFees(account,excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != uniswapV2Pair,The pair cannot be removed from automatedMarketMakerPairs)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(pair,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[pair] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SetAutomatedMarketMakerPair(pair,value)

Edges:
  0 -> 1
  1 -> 2

Function: updateMarketingWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketingWalletUpdated(newMarketingWallet,marketingWallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = newMarketingWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updatedevelopmentWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: developmentWalletUpdated(newWallet,developmentWallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: developmentWallet = newWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isExcludedFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcludedFromFees[account]

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalTokensToSwap = tokensForMarketing + tokensForDev

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: contractBalance == 0 || totalTokensToSwap == 0

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: contractBalance > swapTokensAtAmount * 20

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: contractBalance = swapTokensAtAmount * 20

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: initialETHBalance = address(this).balance

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(contractBalance)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance.sub(initialETHBalance)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: tokensForMarketing = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: tokensForDev = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(developmentWallet).call{value: ethForDev}()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(marketingWallet).call{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: limitsInEffect = true

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingActive = false

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

Edges:
  0 -> 1
  1 -> 2


