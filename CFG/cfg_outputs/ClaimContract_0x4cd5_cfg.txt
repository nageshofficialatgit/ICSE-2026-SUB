Contract: IERC20
==================================================


Contract: ClaimContract
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundAddress = 0xB02F39e382c90160Eb816DE5e0E428ac771d77B5

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimHash = keccak256(bytes)(abi.encodePacked(908270))

Edges:
  0 -> 1
  1 -> 2

Function: getFundAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: fundAddress

Edges:
  0 -> 1

Function: isClaimable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(code)) == claimHash

Edges:
  0 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount < 1e18

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert IneligibleWallet(string)(Minimum claim amount not met)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: withdrawstucked
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(erc20.allowance(sender,address(this)) >= amount,Allowance too low)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(erc20.balanceOf(sender) >= amount,Insufficient balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(gasleft()() > 50000,Insufficient gas)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(erc20.transferFrom(sender,recipient,amount),Transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


