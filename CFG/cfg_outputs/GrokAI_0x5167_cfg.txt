Contract: IERC20
==================================================


Contract: GrokAI
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = TOTAL_SUPPLY

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,TOTAL_SUPPLY)

Edges:
  0 -> 1
  1 -> 2

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: TOTAL_SUPPLY

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),GrokAI: transfer to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[msg.sender] >= amount,GrokAI: insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,to,amount)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),GrokAI: approve to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),GrokAI: transfer from zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),GrokAI: transfer to zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[from] >= amount,GrokAI: insufficient balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[from][msg.sender] >= amount,GrokAI: insufficient allowance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[from][msg.sender] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = GrokAI

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = XAI

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOTAL_SUPPLY = 100_000_000 * 10 ** 18

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


