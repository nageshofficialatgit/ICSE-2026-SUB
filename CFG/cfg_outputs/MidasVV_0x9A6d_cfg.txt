Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IERC20
==================================================


Contract: IDEXFactory
==================================================


Contract: IDEXRouter
==================================================


Contract: IMidasV
==================================================


Contract: MidasVV
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _token = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PAXG = 0x45804880De22913dAFE09f4980848ECE6EcbAf78

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deposit()

Edges:
  0 -> 1

Function: setDistributionCriteria
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minPeriod = newMinPeriod

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minDistribution = newMinDistribution

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setShare
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(shareholder)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount > 0 && shares[shareholder].amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: addShareholder(shareholder)

  ID: 6
  Type: NodeType.IF
  Expression: amount == 0 && shares[shareholder].amount > 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: removeShareholder(shareholder)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalShares = totalShares.sub(shares[shareholder].amount).add(amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].amount = amount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 9
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(PAXG).balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(PAXG)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = IERC20(PAXG).balanceOf(address(this)).sub(balanceBefore)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalDividends = totalDividends.add(amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: process
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: shareholderCount = shareholders.length

  ID: 2
  Type: NodeType.IF
  Expression: shareholderCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iterations = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: gasUsed = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: gasLeft = gasleft()()

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.IFLOOP
  Expression: gasUsed < gas && iterations < shareholderCount

  ID: 10
  Type: NodeType.IF
  Expression: currentIndex >= shareholderCount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: currentIndex = 0

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: shouldDistribute(shareholders[currentIndex])

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(shareholders[currentIndex])

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: gasUsed = gasUsed.add(gasLeft.sub(gasleft()()))

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: gasLeft = gasleft()()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: currentIndex ++

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: iterations ++

  ID: 20
  Type: NodeType.ENDLOOP
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 20
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 9

Function: shouldDistribute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution

Edges:
  0 -> 1

Function: distributeDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amount = getUnpaidEarnings(shareholder)

  ID: 5
  Type: NodeType.IF
  Expression: amount > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalDistributed = totalDistributed.add(amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(PAXG).transfer(shareholder,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: shareholderClaims[shareholder] = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: pan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(shareholder)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 2
  2 -> 1

Function: getUnpaidEarnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: shareholderTotalExcluded = shares[shareholder].totalExcluded

  ID: 6
  Type: NodeType.IF
  Expression: shareholderTotalDividends <= shareholderTotalExcluded

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: shareholderTotalDividends.sub(shareholderTotalExcluded)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9

Function: getCumulativeDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor)

Edges:
  0 -> 1

Function: addShareholder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: shareholderIndexes[shareholder] = shareholders.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shareholders.push(shareholder)

Edges:
  0 -> 1
  1 -> 2

Function: removeShareholder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: shareholders.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: dividendsPerShareAccuracyFactor = 10 ** 36

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minPeriod = 1800

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minDistribution = 0 * (10 ** 9)

Edges:
  0 -> 1
  1 -> 2


Contract: MIDAS
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = router.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pair = IDEXFactory(router.factory()).createPair(WETH,address(this))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = type()(uint256).max

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MidasV = new MidasVV()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[owner()] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[MidasVault] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[pair] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[address(this)] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[DEAD] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[owner()] = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[pair] = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[DEAD] = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[MidasVault] = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _balances[owner()] = _totalSupply

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner(),_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setBots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < bots_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: bots[bots_[i]] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: launchedAt = block.number

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeTotalFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyFee = newBuyFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellFee = newSellFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyFee <= 50,too high)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellFee <= 50,too high)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: changeFeeAllocation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: toReflections = newRewardFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: toLiquidity = newLpFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: toMarketing = newMarketingFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: changeTxLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxTx = newLimit

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeWalletLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxWallet = newLimit

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeIsFeeExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[holder] = exempt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeIsTxLimitExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[holder] = exempt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMidasVault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MidasVault = address(newMidasVault)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setLpWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lpWallet = newLpWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeSwapBackSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquifyEnabled = enableSwapBack

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = newSwapBackLimit

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setDistributionCriteria
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MidasV.setDistributionCriteria(newMinPeriod,newMinDistribution)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: delBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bots[notbot] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _setIsDividendExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(holder != address(this) && holder != pair)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[holder] = exempt

  ID: 3
  Type: NodeType.IF
  Expression: exempt

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: MidasV.setShare(holder,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MidasV.setShare(holder,_balances[holder])

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6

Function: setIsDividendExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setIsDividendExempt(holder,exempt)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeMidasGas
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MidasGas = newGas

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getCirculatingSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO))

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approve(spender,type()(uint256).max)

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transfer(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: sender != owner() && recipient != owner()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,hold ur horses big guy.)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! bots[sender] && ! bots[recipient])

  ID: 5
  Type: NodeType.IF
  Expression: inSwapAndLiquify

  ID: 6
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxTx || isTxLimitExempt[sender],tx)

  ID: 9
  Type: NodeType.IF
  Expression: ! isTxLimitExempt[recipient] && antiBot

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[recipient].add(amount) <= maxWallet,wallet)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: msg.sender != pair && ! inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(finalAmount)

  ID: 18
  Type: NodeType.IF
  Expression: ! isDividendExempt[sender]

  ID: 19
  Type: NodeType.TRY
  Expression: MidasV.setShare(sender,_balances[sender])

  ID: 20
  Type: NodeType.CATCH
  Expression: 

  ID: 21
  Type: NodeType.CATCH
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: ! isDividendExempt[recipient]

  ID: 24
  Type: NodeType.TRY
  Expression: MidasV.setShare(recipient,_balances[recipient])

  ID: 25
  Type: NodeType.CATCH
  Expression: 

  ID: 26
  Type: NodeType.CATCH
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,finalAmount)

  ID: 29
  Type: NodeType.RETURN
  Expression: true

  ID: 30
  Type: NodeType.IF
  Expression: ! isFeeExempt[sender] && ! isFeeExempt[recipient]

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: finalAmount = takeFee(sender,recipient,amount)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: finalAmount = amount

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 30
  17 -> 18
  18 -> 19
  18 -> 22
  19 -> 20
  19 -> 21
  19 -> 22
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 27
  24 -> 25
  24 -> 26
  24 -> 27
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  30 -> 32
  31 -> 33
  32 -> 33
  33 -> 17

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: takeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: feeAmount = amount.mul(feeApplicable).div(100)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(feeAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),feeAmount)

  ID: 5
  Type: NodeType.RETURN
  Expression: amount.sub(feeAmount)

  ID: 6
  Type: NodeType.IF
  Expression: pair == recipient

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: feeApplicable = sellFee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: feeApplicable = buyFee

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 2

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: approve(address(this),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp)

Edges:
  0 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenBalance = _balances[address(this)]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokensForLiquidity = tokenBalance.mul(toLiquidity).div(100).div(2)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amountToSwap = tokenBalance.sub(tokensForLiquidity)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(amountToSwap)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalEthBalance = address(this).balance

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethForPan = totalEthBalance.mul(toReflections).div(100)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: ethForMidasVault = totalEthBalance.mul(toMarketing).div(100)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: ethForLiquidity = totalEthBalance.mul(toLiquidity).div(100).div(2)

  ID: 9
  Type: NodeType.IF
  Expression: totalEthBalance > 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: address(MidasVault).transfer(ethForMidasVault)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.TRY
  Expression: MidasV.deposit{value: ethForPan}()

  ID: 13
  Type: NodeType.CATCH
  Expression: 

  ID: 14
  Type: NodeType.CATCH
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: tokensForLiquidity > 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: addLiquidity(tokensForLiquidity,ethForLiquidity)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  12 -> 15
  13 -> 15
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  18 -> 1

Function: manualSwapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: clearStuckEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractETHBalance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: contractETHBalance > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(MidasVault).transfer(contractETHBalance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: manualProcessGas
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MidasV.process(manualGas)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: checkPendingReflections
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: MidasV.getUnpaidEarnings(shareholder)

Edges:
  0 -> 1

Function: pan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MidasV.pan(msg.sender)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAXG = 0x45804880De22913dAFE09f4980848ECE6EcbAf78

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 100000000 * (10 ** _decimals)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD = 0x000000000000000000000000000000000000dEaD

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO = 0x0000000000000000000000000000000000000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: antiBot = true

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lpWallet = DEAD

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyFee = 20

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellFee = 25

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: toReflections = 30

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: toLiquidity = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: toMarketing = 70

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: allocationSum = 100

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MidasVault = address(0xe98c3CFd3e636f3e82b90953bF8620b111dF2535)

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAndLiquifyEnabled = true

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = false

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MidasGas = 0

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxTx = _totalSupply.div(50)

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxWallet = _totalSupply.div(50)

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapThreshold = _totalSupply.div(400)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Midas of DeFi

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = MIDAS

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

Edges:
  0 -> 1
  1 -> 2


