Contract: ITimelockedCall
==================================================


Contract: IAddressWhitelist
==================================================


Contract: IOwnable
==================================================


Contract: BaseReentrancyGuard
==================================================

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: BaseOwnable
==================================================

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: LightweightOwnable
==================================================

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: AddressWhitelist
==================================================

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ownerAddr != address(0),Owner required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = ownerAddr

Edges:
  0 -> 1
  1 -> 2

Function: enableAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _whitelistedAddresses[addr],Already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[addr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnAddressEnabled(addr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: enableAddresses
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(arr.length > 0,Addresses required)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(arr[i] != address(0),Invalid address)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _whitelistedAddresses[arr[i]],Already enabled)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[arr[i]] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: OnAddressEnabled(arr[i])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  12 -> 1

Function: disableAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_whitelistedAddresses[addr],Already disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[addr] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnAddressDisabled(addr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: disableAddresses
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_whitelistedAddresses[arr[i]],Already disabled)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[arr[i]] = false

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: OnAddressDisabled(arr[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 4
  9 -> 10
  10 -> 3

Function: isWhitelistedAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _whitelistedAddresses[addr]

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: TimelockedCall
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: AddressWhitelist(ownerAddr)

Edges:
  0 -> 1

Function: enableAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _whitelistedAddresses[addr],Already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[addr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnAddressEnabled(addr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: enableAddresses
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(arr.length > 0,Addresses required)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(arr[i] != address(0),Invalid address)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _whitelistedAddresses[arr[i]],Already enabled)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[arr[i]] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: OnAddressEnabled(arr[i])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  12 -> 1

Function: disableAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_whitelistedAddresses[addr],Already disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[addr] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnAddressDisabled(addr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: disableAddresses
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_whitelistedAddresses[arr[i]],Already disabled)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _whitelistedAddresses[arr[i]] = false

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: OnAddressDisabled(arr[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 4
  9 -> 10
  10 -> 3

Function: isWhitelistedAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _whitelistedAddresses[addr]

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: initScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(addr != address(0),Address required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newTimeLockDuration > 0,Duration required)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(timeLockDuration[msg.sender] == 0,Already initialized)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whitelistedSchedulers[msg.sender][addr] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: timeLockDuration[msg.sender] = newTimeLockDuration

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SchedulerEnabled(msg.sender,addr)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ifSenderWhitelisted()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: enableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _enableScheduler(addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifTimeLockConfigured()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: disableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _disableScheduler(addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifTimeLockConfigured()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: schedule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(h != bytes32(0),Hash required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(whitelistedSchedulers[consumerAddr][msg.sender],Unauthorized sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(timeLockDuration[consumerAddr] > 0,Not configured)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: h2 = keccak256(bytes)(abi.encode(h,consumerAddr))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(queue[h2].targetEpoch == 0,Already enqueued)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: queue[h2] = TimelockedCallInfo({createdBy:msg.sender,consumerAddress:consumerAddr,targetEpoch:block.timestamp + timeLockDuration[consumerAddr]})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: HashScheduled(h,consumerAddr)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: consume
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: h2 = keccak256(bytes)(abi.encode(h,msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _consume(h2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ifTimeLockConfigured()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: consumeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: h2 = keccak256(bytes)(abi.encode(h,msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _disableScheduler(prevOwnerAddr)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _consume(h2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _enableScheduler(newOwnerAddr)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifTimeLockConfigured()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: _consume
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(queue[h].targetEpoch > 0,Hash not enqueued)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == queue[h].consumerAddress,Unauthorized consumer)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp > queue[h].targetEpoch,Timelock in place)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: delete queue[h]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: HashConsumed(h,msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _enableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(addr != address(0),Address required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! whitelistedSchedulers[msg.sender][addr],Already enabled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whitelistedSchedulers[msg.sender][addr] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: SchedulerEnabled(msg.sender,addr)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _disableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(addr != address(0),Address required)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(whitelistedSchedulers[msg.sender][addr],Already disabled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whitelistedSchedulers[msg.sender][addr] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: SchedulerDisabled(msg.sender,addr)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


