Contract: PoCGame
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: openToPublic = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whale = whaleAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalDonated = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: betLimit = wagerLimit

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyRealPeople()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: OpenToThePublic
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: openToPublic = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: AdjustBetAmounts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: betLimit = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BetLimitChanged(betLimit)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: AdjustDifficulty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: difficulty = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DifficultyChanged(difficulty)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: wager
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == betLimit)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wagers[msg.sender] == 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timestamps[msg.sender] = block.number

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: wagers[msg.sender] = msg.value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Wager(msg.value,msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isOpenToPublic()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRealPeople()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: play
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: blockNumber = timestamps[msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: blockNumber < block.number

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timestamps[msg.sender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: wagers[msg.sender] = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: winningNumber = uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockNumber),msg.sender))) % difficulty + 1

  ID: 6
  Type: NodeType.IF
  Expression: winningNumber == difficulty / 2

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: payout(msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: loseWager(betLimit / 2)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: isOpenToPublic()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyRealPeople()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  2 -> 10
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 11
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 1

Function: donate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: donateToWhale(msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isOpenToPublic()

Edges:
  0 -> 2
  2 -> 1

Function: payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToTransfer = address(this).balance / 2

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: winner.transfer(ethToTransfer)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Win(ethToTransfer,winner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: donateToWhale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whale.call.value(amount)(bytes4(keccak256()(donate())))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalDonated += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Donate(amount,whale,msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: loseWager
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whale.call.value(amount)(bytes4(keccak256()(donate())))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalDonated += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Lose(amount,msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: ethBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: currentDifficulty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: difficulty

Edges:
  0 -> 1

Function: currentBetLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: betLimit

Edges:
  0 -> 1

Function: hasPlayerWagered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: wagers[player] > 0

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: winnersPot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance / 2

Edges:
  0 -> 1

Function: transferAnyERC20Token
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC20Interface(tokenAddress).transfer(tokenOwner,tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 3
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 1


Contract: ERC20Interface
==================================================


