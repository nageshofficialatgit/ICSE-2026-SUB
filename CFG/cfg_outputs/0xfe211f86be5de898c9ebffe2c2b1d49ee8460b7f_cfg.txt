Contract: Token
==================================================


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: inc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: add(a,1)

Edges:
  0 -> 1

Function: onePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: div(a,uint256(100))

Edges:
  0 -> 1

Function: power
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mul(a,10 ** b)

Edges:
  0 -> 1


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[msg.sender] >= _value && _value > 0 && _to != 0x0

  ID: 2
  Type: NodeType.RETURN
  Expression: doTransfer(msg.sender,_to,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: canTransfer()

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  5 -> 1

Function: doTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && _to != 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: doTransfer(_from,_to,_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: canTransfer()

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 8
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  8 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

  ID: 2
  Type: NodeType.RETURN
  Expression: totalSupply

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setMinter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minter[_address] = _canMint

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setEndMintDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: endMintDate = endDate

Edges:
  0 -> 1


Contract: GMCToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[msg.sender] >= _value && _value > 0 && _to != 0x0

  ID: 2
  Type: NodeType.RETURN
  Expression: doTransfer(msg.sender,_to,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: canTransfer()

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  5 -> 1

Function: doTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && _to != 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: doTransfer(_from,_to,_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: canTransfer()

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 8
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  8 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

  ID: 2
  Type: NodeType.RETURN
  Expression: totalSupply

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setMinter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minter[_address] = _canMint

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setEndMintDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: endMintDate = endDate

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1

Function: GMCToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: initialSupply = 2000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: endMintDate = now + 2419200

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: minter[_wallet] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: minter[msg.sender] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mint(_wallet,initialSupply.div(2))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mint(msg.sender,initialSupply.div(2))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: name = Good Mood Coin

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: decimals = 4

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: symbol = GMC

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: sendGift
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: counter = giftsCounter[_to]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: gifts[_to][counter] = (GiftData({from:msg.sender,value:_value,message:_msg}))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: giftsCounter[_to] = giftsCounter[_to].inc()

  ID: 4
  Type: NodeType.RETURN
  Expression: doTransfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getGiftsCounter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: giftsCounter[msg.sender]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: getGift
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = gifts[msg.sender][index]

  ID: 2
  Type: NodeType.RETURN
  Expression: (data.from,data.value,data.message)

  ID: 3
  Type: NodeType.RETURN
  Expression: (from,value,message)

Edges:
  0 -> 1
  1 -> 2

Function: approveAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.IF
  Expression: ! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: version = H1.0

Edges:


