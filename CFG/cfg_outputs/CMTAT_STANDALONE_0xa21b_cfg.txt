Contract: Initializable
==================================================

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00

Edges:


Contract: ContextUpgradeable
==================================================

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: IERC165
==================================================


Contract: ERC165Upgradeable
==================================================

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: IAccessControl
==================================================


Contract: AccessControlUpgradeable
==================================================

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800

Edges:
  0 -> 1


Contract: ERC2771ContextUpgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: calldataLength = msg.data.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: contextSuffixLength = _contextSuffixLength()

  ID: 3
  Type: NodeType.IF
  Expression: isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength

  ID: 4
  Type: NodeType.RETURN
  Expression: address(bytes20(msg.data))

  ID: 5
  Type: NodeType.RETURN
  Expression: super._msgSender()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: calldataLength = msg.data.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: contextSuffixLength = _contextSuffixLength()

  ID: 3
  Type: NodeType.IF
  Expression: isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength

  ID: 4
  Type: NodeType.RETURN
  Expression: msg.data

  ID: 5
  Type: NodeType.RETURN
  Expression: super._msgData()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 20

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _trustedForwarder = trustedForwarder_

Edges:
  0 -> 1

Function: trustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _trustedForwarder

Edges:
  0 -> 1

Function: isTrustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: forwarder == trustedForwarder()

Edges:
  0 -> 1


Contract: IERC20Errors
==================================================


Contract: IERC721Errors
==================================================


Contract: IERC1155Errors
==================================================


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: ERC20Upgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00

Edges:


Contract: PausableUpgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getPausableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PausableStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Pausable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Pausable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._paused

Edges:
  0 -> 1
  1 -> 2

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300

Edges:


Contract: Math
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a > b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: average
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (a & b) + (a ^ b) / 2

Edges:
  0 -> 1

Function: ceilDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: a == 0

  ID: 6
  Type: NodeType.RETURN
  Expression: 0

  ID: 7
  Type: NodeType.RETURN
  Expression: (a - 1) / b + 1

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 5
  5 -> 6
  5 -> 7

Function: mulDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = mulDiv(x,y,denominator)

  ID: 2
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && mulmod(uint256,uint256,uint256)(x,y,denominator) > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: result += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = sqrt(a)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && result * result < a

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log2(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 1 << result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log10
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log10(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 10 ** result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log256(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 1 << (result << 3) < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: unsignedRoundsUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint8(rounding) % 2 == 1

Edges:
  0 -> 1


Contract: StorageSlot
==================================================

Function: getAddressSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = slot

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getBooleanSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = slot

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getBytes32Slot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = slot

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getUint256Slot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = slot

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getStringSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = store

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getBytesSlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: r = store

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Arrays
==================================================

Function: findUpperBound
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: low = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: high = array.length

  ID: 3
  Type: NodeType.IF
  Expression: high == 0

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: low < high

  ID: 8
  Type: NodeType.VARIABLE
  Expression: mid = Math.average(low,high)

  ID: 9
  Type: NodeType.IF
  Expression: unsafeAccess(array,mid).value > element

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: high = mid

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: low = mid + 1

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: low > 0 && unsafeAccess(array,low - 1).value == element

  ID: 15
  Type: NodeType.RETURN
  Expression: low - 1

  ID: 16
  Type: NodeType.RETURN
  Expression: low

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 13
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 7
  13 -> 14
  14 -> 15
  14 -> 16

Function: unsafeAccess
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0,arr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: slot = keccak256(uint256,uint256)(0,0x20) + pos

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: slot.getUint256Slot()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: unsafeMemoryAccess
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: res = mload(uint256)(arr + 0x20 + pos * 0x20)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: res

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IERC1643
==================================================


Contract: IAuthorizationEngine
==================================================


Contract: IDebtGlobal
==================================================


Contract: IDebtEngine
==================================================


Contract: IERC1404
==================================================


Contract: IERC1404EnumCode
==================================================


Contract: IERC1404Wrapper
==================================================


Contract: IRuleEngine
==================================================


Contract: ICMTATConstructor
==================================================


Contract: Errors
==================================================


Contract: AuthorizationModule
==================================================

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: AccessControlUpgradeable.hasRole(DEFAULT_ADMIN_ROLE,account)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: AccessControlUpgradeable.hasRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: result = $._authorizationEngine.operateOnGrantRole(role,account)

  ID: 4
  Type: NodeType.IF
  Expression: ! result

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_InvalidAuthorization()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: AccessControlUpgradeable.grantRole(role,account)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: result = $._authorizationEngine.operateOnRevokeRole(role,account)

  ID: 4
  Type: NodeType.IF
  Expression: ! result

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_InvalidAuthorization()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: AccessControlUpgradeable.revokeRole(role,account)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AuthorizationModuleStorageLocation = 0x59b7f077fa4ad020f9053fd2197fef0113b19f0b11dcfe516e88cbc0e9226d00

Edges:
  0 -> 1


Contract: ValidationModuleInternal
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Validation_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(ruleEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: ruleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine

Edges:
  0 -> 1
  1 -> 2

Function: _validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.validateTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.messageForTransferRestriction(restrictionCode)

Edges:
  0 -> 1
  1 -> 2

Function: _detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.detectTransferRestriction(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _operateOnTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.operateOnTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _getValidationModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ValidationModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ValidationModuleInternalStorageLocation = 0xb3e8f29e401cfa802cad91001b5f9eb50decccdb111d80cb07177ab650b04700

Edges:


Contract: EnforcementModuleInternal
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Enforcement_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: frozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._frozen[account]

Edges:
  0 -> 1
  1 -> 2

Function: _freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Freeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unfreeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getEnforcementModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = EnforcementModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EnforcementModuleInternalStorageLocation = 0x0c7bc8a17be064111d299d7669f49519cb26c58611b72d9f6ccc40a1e1184e00

Edges:


Contract: EnforcementModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __Enforcement_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: frozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._frozen[account]

Edges:
  0 -> 1
  1 -> 2

Function: _freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Freeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unfreeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getEnforcementModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = EnforcementModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __EnforcementModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _freeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _unfreeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENFORCER_ROLE = keccak256(bytes)(ENFORCER_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN = Address FROM is frozen

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN = Address TO is frozen

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: PauseModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _getPausableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PausableStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Pausable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Pausable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._paused

Edges:
  0 -> 1
  1 -> 2

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __PauseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._isDeactivated

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_PauseModule_ContractIsDeactivated()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: deactivateContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._isDeactivated = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Deactivated(_msgSender())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: deactivated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._isDeactivated

Edges:
  0 -> 1
  1 -> 2

Function: _getPauseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PauseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSER_ROLE = keccak256(bytes)(PAUSER_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_PAUSED = All transfers paused

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PauseModuleStorageLocation = 0x9bd8d607565c0370ae5f91651ca67fd26d4438022bf72037316600e29e6a3a00

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ValidationModule
==================================================

Function: __EnforcementModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _freeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _unfreeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __Enforcement_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: frozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._frozen[account]

Edges:
  0 -> 1
  1 -> 2

Function: _freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Freeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unfreeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getEnforcementModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = EnforcementModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __PauseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._isDeactivated

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_PauseModule_ContractIsDeactivated()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: deactivateContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._isDeactivated = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Deactivated(_msgSender())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: deactivated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._isDeactivated

Edges:
  0 -> 1
  1 -> 2

Function: _getPauseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PauseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getPausableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PausableStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Pausable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Pausable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._paused

Edges:
  0 -> 1
  1 -> 2

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __Validation_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(ruleEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: ruleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine

Edges:
  0 -> 1
  1 -> 2

Function: _validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.validateTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.messageForTransferRestriction(restrictionCode)

Edges:
  0 -> 1
  1 -> 2

Function: _detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.detectTransferRestriction(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _operateOnTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _validateTransferByModule(from,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 5
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: ValidationModuleInternal._operateOnTransfer(from,to,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: _getValidationModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ValidationModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ValidationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: setRuleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._ruleEngine == ruleEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ValidationModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 3
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_OK

  ID: 4
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 5
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_PAUSED

  ID: 6
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 7
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN

  ID: 8
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 9
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN

  ID: 10
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 11
  Type: NodeType.RETURN
  Expression: _messageForTransferRestriction(restrictionCode)

  ID: 12
  Type: NodeType.RETURN
  Expression: TEXT_UNKNOWN_CODE

  ID: 18
  Type: NodeType.RETURN
  Expression: message

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  10 -> 12

Function: detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: paused()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 4
  Type: NodeType.IF
  Expression: frozen(from)

  ID: 5
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 6
  Type: NodeType.IF
  Expression: frozen(to)

  ID: 7
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 8
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 9
  Type: NodeType.RETURN
  Expression: _detectTransferRestriction(from,to,amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 15
  Type: NodeType.RETURN
  Expression: code

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10

Function: validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _validateTransferByModule(from,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 5
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: _validateTransfer(from,to,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: _validateTransferByModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused() || frozen(from) || frozen(to)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSER_ROLE = keccak256(bytes)(PAUSER_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_PAUSED = All transfers paused

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENFORCER_ROLE = keccak256(bytes)(ENFORCER_ROLE)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN = Address FROM is frozen

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN = Address TO is frozen

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_OK = No restriction

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_UNKNOWN_CODE = Unknown code

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7


Contract: BaseModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __Base_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: tokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._tokenId

Edges:
  0 -> 1
  1 -> 2

Function: terms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._terms

Edges:
  0 -> 1
  1 -> 2

Function: information
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._information

Edges:
  0 -> 1
  1 -> 2

Function: setTokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenId(tokenId_,tokenId_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setTerms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Term(terms_,terms_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setInformation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Information(information_,information_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _getBaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 2.5.0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BaseModuleStorageLocation = 0xa98e72f7f70574363edb12c42a03ac1feb8cc898a6e0a30f6eefbab7093e0d00

Edges:
  0 -> 1
  1 -> 2


Contract: ERC20BaseModule
==================================================

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20BaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._decimals

Edges:
  0 -> 1
  1 -> 2

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = ERC20Upgradeable.transferFrom(from,to,value)

  ID: 2
  Type: NodeType.IF
  Expression: result

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Spend(from,_msgSender(),value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20BaseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20BaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._decimals = decimals_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tos.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_EmptyTos()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(tos.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_TosValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < tos.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ERC20Upgradeable._transfer(_msgSender(),tos[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 13
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 10

Function: balanceInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances = new uint256[](addresses.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < addresses.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[i] = ERC20Upgradeable.balanceOf(addresses[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalSupply = ERC20Upgradeable.totalSupply()

  ID: 9
  Type: NodeType.RETURN
  Expression: (balances,totalSupply)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 9

Function: _getERC20BaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ERC20BaseModuleStorageLocation = 0x9bd8d607565c0370ae5f91651ca67fd26d4438022bf72037316600e29e6a3a00

Edges:


Contract: ICCIPMintERC20
==================================================


Contract: ICCIPBurnFromERC20
==================================================


Contract: ERC20BurnModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __ERC20BurnModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,reason)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: burnBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _burn(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Burn(accounts[i],values[i],reason)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: burnFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(account,sender)

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(sender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(account,sender,currentAllowance - value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,burnFrom)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: BurnFrom(account,sender,value)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_FROM_ROLE)

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_ROLE = keccak256(bytes)(BURNER_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_FROM_ROLE = keccak256(bytes)(BURNER_FROM_ROLE)

Edges:
  0 -> 1
  1 -> 2


Contract: ERC20MintModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __ERC20MintModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Mint(account,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: mintBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _mint(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Mint(accounts[i],values[i])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINTER_ROLE = keccak256(bytes)(MINTER_ROLE)

Edges:
  0 -> 1


Contract: DebtModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __DebtModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(debtEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: debtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._debtEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDebtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._debtEngine == debtEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DebtModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEBT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: debt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: debtBaseResult = $._debtEngine.debt()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: debtBaseResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: creditEvents
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: creditEventsResult = $._debtEngine.creditEvents()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: creditEventsResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDebtModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DebtModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEBT_ROLE = keccak256(bytes)(DEBT_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DebtModuleStorageLocation = 0xf8a315cc5f2213f6481729acd86e55db7ccc930120ccf9fb78b53dcce75f7c00

Edges:
  0 -> 1
  1 -> 2


Contract: DocumentModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __DocumentModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(documentEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: documentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._documentEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDocumentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._documentEngine == documentEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DocumentModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DOCUMENT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: getDocument
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.RETURN
  Expression: $._documentEngine.getDocument(_name)

  ID: 4
  Type: NodeType.RETURN
  Expression: (,0x0,0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: getAllDocuments
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: documents = $._documentEngine.getAllDocuments()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: documents

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDocumentModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DocumentModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DOCUMENT_ROLE = keccak256(bytes)(DOCUMENT_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DocumentModuleStorageLocation = 0x5edcb2767f407e647b6a4171ef53e8015a3eff0bb2b6e7765b1a26332bc43000

Edges:
  0 -> 1
  1 -> 2


Contract: ICMTATSnapshot
==================================================


Contract: SnapshotModuleBase
==================================================

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __SnapshotModuleBase_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: getAllSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

Edges:
  0 -> 1
  1 -> 2

Function: getNextSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nextScheduledSnapshot = new uint256[](0)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (timeLowerBound,indexLowerBound) = _findScheduledMostRecentPastSnapshot()

  ID: 7
  Type: NodeType.IF
  Expression: (timeLowerBound == 0) && ($._currentSnapshotTime == 0)

  ID: 8
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

  ID: 9
  Type: NodeType.IF
  Expression: indexLowerBound + 1 != $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: arraySize = $._scheduledSnapshots.length - indexLowerBound - 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot = new uint256[](arraySize)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < arraySize

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot[i] = $._scheduledSnapshots[indexLowerBound + 1 + i]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: nextScheduledSnapshot

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 20
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 18
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21

Function: _scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 5
  Type: NodeType.IF
  Expression: time < nextSnapshotTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforeLastSnapshot(time,nextSnapshotTime)

  ID: 7
  Type: NodeType.IF
  Expression: time == nextSnapshotTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 6
  Type: NodeType.IF
  Expression: isFound

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: index == $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push($._scheduledSnapshots[$._scheduledSnapshots.length - 1])

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = $._scheduledSnapshots.length - 2

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i > index

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i - 1]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = time

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20

Function: _rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(oldTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(newTime)

  ID: 4
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(oldTime)

  ID: 8
  Type: NodeType.IF
  Expression: index + 1 < $._scheduledSnapshots.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[index + 1]

  ID: 10
  Type: NodeType.IF
  Expression: newTime > nextSnapshotTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampAfterNextSnapshot(newTime,nextSnapshotTime)

  ID: 12
  Type: NodeType.IF
  Expression: newTime == nextSnapshotTime

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: index > 0

  ID: 18
  Type: NodeType.IF
  Expression: newTime <= $._scheduledSnapshots[index - 1]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforePreviousSnapshot(newTime,$._scheduledSnapshots[index - 1])

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = newTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(oldTime,newTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 15
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 21
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: _unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: time != $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SnapshotUnschedule(time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = index

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i + 1 < $._scheduledSnapshots.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i + 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: _valueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = snapshots.ids.findUpperBound(time)

  ID: 2
  Type: NodeType.IF
  Expression: index == snapshots.ids.length

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,snapshots.values[index])

  ID: 6
  Type: NodeType.RETURN
  Expression: (snapshotExist,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: _updateSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: current = $._currentSnapshotTime

  ID: 3
  Type: NodeType.IF
  Expression: _lastSnapshot(snapshots.ids) < current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: snapshots.ids.push(current)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: snapshots.values.push(currentValue)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: _setCurrentSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (scheduleSnapshotTime,scheduleSnapshotIndex) = _findScheduledMostRecentPastSnapshot()

  ID: 5
  Type: NodeType.IF
  Expression: scheduleSnapshotTime > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotTime = scheduleSnapshotTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotIndex = scheduleSnapshotIndex

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _lastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ids.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.RETURN
  Expression: ids[ids.length - 1]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _findScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: indexFound = $._scheduledSnapshots.findUpperBound(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _scheduledSnapshotsLength = $._scheduledSnapshots.length

  ID: 4
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength && $._scheduledSnapshots[indexFound] == time

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,indexFound)

  ID: 6
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,indexFound)

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,_scheduledSnapshotsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8

Function: _findScheduledMostRecentPastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentArraySize = $._scheduledSnapshots.length

  ID: 3
  Type: NodeType.IF
  Expression: currentArraySize == 0 || (($._currentSnapshotIndex + 1 == currentArraySize) && (time != 0))

  ID: 4
  Type: NodeType.RETURN
  Expression: (0,currentArraySize)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: index = currentArraySize

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = $._currentSnapshotIndex

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < currentArraySize

  ID: 12
  Type: NodeType.IF
  Expression: $._scheduledSnapshots[i] <= block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mostRecent = $._scheduledSnapshots[i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (mostRecent,index)

  ID: 19
  Type: NodeType.RETURN
  Expression: (time,index)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 18
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 16
  15 -> 9
  16 -> 17
  17 -> 11

Function: _findAndRevertScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.IF
  Expression: ! isFound

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _checkTimeInThePast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotScheduledInThePast(time,block.timestamp)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _checkTimeSnapshotAlreadyDone
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyDone()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _getSnapshotModuleBaseStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = SnapshotModuleBaseStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SnapshotModuleBaseStorageLocation = 0x649d9af4a0486294740af60c5e3bf61210e7b49108a80b1f369042ea9fd02000

Edges:


Contract: ERC20SnapshotModuleInternal
==================================================

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __SnapshotModuleBase_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: getAllSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

Edges:
  0 -> 1
  1 -> 2

Function: getNextSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nextScheduledSnapshot = new uint256[](0)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (timeLowerBound,indexLowerBound) = _findScheduledMostRecentPastSnapshot()

  ID: 7
  Type: NodeType.IF
  Expression: (timeLowerBound == 0) && ($._currentSnapshotTime == 0)

  ID: 8
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

  ID: 9
  Type: NodeType.IF
  Expression: indexLowerBound + 1 != $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: arraySize = $._scheduledSnapshots.length - indexLowerBound - 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot = new uint256[](arraySize)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < arraySize

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot[i] = $._scheduledSnapshots[indexLowerBound + 1 + i]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: nextScheduledSnapshot

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 20
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 18
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21

Function: _scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 5
  Type: NodeType.IF
  Expression: time < nextSnapshotTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforeLastSnapshot(time,nextSnapshotTime)

  ID: 7
  Type: NodeType.IF
  Expression: time == nextSnapshotTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 6
  Type: NodeType.IF
  Expression: isFound

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: index == $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push($._scheduledSnapshots[$._scheduledSnapshots.length - 1])

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = $._scheduledSnapshots.length - 2

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i > index

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i - 1]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = time

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20

Function: _rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(oldTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(newTime)

  ID: 4
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(oldTime)

  ID: 8
  Type: NodeType.IF
  Expression: index + 1 < $._scheduledSnapshots.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[index + 1]

  ID: 10
  Type: NodeType.IF
  Expression: newTime > nextSnapshotTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampAfterNextSnapshot(newTime,nextSnapshotTime)

  ID: 12
  Type: NodeType.IF
  Expression: newTime == nextSnapshotTime

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: index > 0

  ID: 18
  Type: NodeType.IF
  Expression: newTime <= $._scheduledSnapshots[index - 1]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforePreviousSnapshot(newTime,$._scheduledSnapshots[index - 1])

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = newTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(oldTime,newTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 15
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 21
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: _unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: time != $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SnapshotUnschedule(time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = index

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i + 1 < $._scheduledSnapshots.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i + 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: _valueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = snapshots.ids.findUpperBound(time)

  ID: 2
  Type: NodeType.IF
  Expression: index == snapshots.ids.length

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,snapshots.values[index])

  ID: 6
  Type: NodeType.RETURN
  Expression: (snapshotExist,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: _updateSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: current = $._currentSnapshotTime

  ID: 3
  Type: NodeType.IF
  Expression: _lastSnapshot(snapshots.ids) < current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: snapshots.ids.push(current)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: snapshots.values.push(currentValue)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: _setCurrentSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (scheduleSnapshotTime,scheduleSnapshotIndex) = _findScheduledMostRecentPastSnapshot()

  ID: 5
  Type: NodeType.IF
  Expression: scheduleSnapshotTime > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotTime = scheduleSnapshotTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotIndex = scheduleSnapshotIndex

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _lastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ids.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.RETURN
  Expression: ids[ids.length - 1]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _findScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: indexFound = $._scheduledSnapshots.findUpperBound(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _scheduledSnapshotsLength = $._scheduledSnapshots.length

  ID: 4
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength && $._scheduledSnapshots[indexFound] == time

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,indexFound)

  ID: 6
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,indexFound)

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,_scheduledSnapshotsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8

Function: _findScheduledMostRecentPastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentArraySize = $._scheduledSnapshots.length

  ID: 3
  Type: NodeType.IF
  Expression: currentArraySize == 0 || (($._currentSnapshotIndex + 1 == currentArraySize) && (time != 0))

  ID: 4
  Type: NodeType.RETURN
  Expression: (0,currentArraySize)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: index = currentArraySize

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = $._currentSnapshotIndex

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < currentArraySize

  ID: 12
  Type: NodeType.IF
  Expression: $._scheduledSnapshots[i] <= block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mostRecent = $._scheduledSnapshots[i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (mostRecent,index)

  ID: 19
  Type: NodeType.RETURN
  Expression: (time,index)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 18
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 16
  15 -> 9
  16 -> 17
  17 -> 11

Function: _findAndRevertScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.IF
  Expression: ! isFound

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _checkTimeInThePast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotScheduledInThePast(time,block.timestamp)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _checkTimeSnapshotAlreadyDone
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyDone()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _getSnapshotModuleBaseStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = SnapshotModuleBaseStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20Snapshot_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: snapshotInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalance = snapshotBalanceOf(time,owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = snapshotTotalSupply(time)

  ID: 3
  Type: NodeType.RETURN
  Expression: (ownerBalance,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: snapshotInfoBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalances = new uint256[][](times.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = new uint256[](times.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iT = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: iT < times.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (ownerBalances[iT],totalSupply[iT]) = snapshotInfoBatch(times[iT],addresses)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ iT

  ID: 9
  Type: NodeType.RETURN
  Expression: (ownerBalances,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: snapshotBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._accountBalanceSnapshots[owner])

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: balanceOf(owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: snapshotTotalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._totalSupplySnapshots)

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: totalSupply()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: _snapshotUpdate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setCurrentSnapshot()

  ID: 2
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(from)

  ID: 4
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10

Function: _updateAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._accountBalanceSnapshots[account],balanceOf(account))

Edges:
  0 -> 1
  1 -> 2

Function: _updateTotalSupplySnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._totalSupplySnapshots,totalSupply())

Edges:
  0 -> 1
  1 -> 2


Contract: ERC20SnapshotModule
==================================================

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __ERC20Snapshot_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: snapshotInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalance = snapshotBalanceOf(time,owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = snapshotTotalSupply(time)

  ID: 3
  Type: NodeType.RETURN
  Expression: (ownerBalance,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: snapshotInfoBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalances = new uint256[][](times.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = new uint256[](times.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iT = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: iT < times.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (ownerBalances[iT],totalSupply[iT]) = snapshotInfoBatch(times[iT],addresses)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ iT

  ID: 9
  Type: NodeType.RETURN
  Expression: (ownerBalances,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: snapshotBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._accountBalanceSnapshots[owner])

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: balanceOf(owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: snapshotTotalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._totalSupplySnapshots)

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: totalSupply()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: _snapshotUpdate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setCurrentSnapshot()

  ID: 2
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(from)

  ID: 4
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10

Function: _updateAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._accountBalanceSnapshots[account],balanceOf(account))

Edges:
  0 -> 1
  1 -> 2

Function: _updateTotalSupplySnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._totalSupplySnapshots,totalSupply())

Edges:
  0 -> 1
  1 -> 2

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __SnapshotModuleBase_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: getAllSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

Edges:
  0 -> 1
  1 -> 2

Function: getNextSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nextScheduledSnapshot = new uint256[](0)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (timeLowerBound,indexLowerBound) = _findScheduledMostRecentPastSnapshot()

  ID: 7
  Type: NodeType.IF
  Expression: (timeLowerBound == 0) && ($._currentSnapshotTime == 0)

  ID: 8
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

  ID: 9
  Type: NodeType.IF
  Expression: indexLowerBound + 1 != $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: arraySize = $._scheduledSnapshots.length - indexLowerBound - 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot = new uint256[](arraySize)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < arraySize

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot[i] = $._scheduledSnapshots[indexLowerBound + 1 + i]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: nextScheduledSnapshot

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 20
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 18
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21

Function: _scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 5
  Type: NodeType.IF
  Expression: time < nextSnapshotTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforeLastSnapshot(time,nextSnapshotTime)

  ID: 7
  Type: NodeType.IF
  Expression: time == nextSnapshotTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 6
  Type: NodeType.IF
  Expression: isFound

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: index == $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push($._scheduledSnapshots[$._scheduledSnapshots.length - 1])

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = $._scheduledSnapshots.length - 2

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i > index

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i - 1]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = time

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20

Function: _rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(oldTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(newTime)

  ID: 4
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(oldTime)

  ID: 8
  Type: NodeType.IF
  Expression: index + 1 < $._scheduledSnapshots.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[index + 1]

  ID: 10
  Type: NodeType.IF
  Expression: newTime > nextSnapshotTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampAfterNextSnapshot(newTime,nextSnapshotTime)

  ID: 12
  Type: NodeType.IF
  Expression: newTime == nextSnapshotTime

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: index > 0

  ID: 18
  Type: NodeType.IF
  Expression: newTime <= $._scheduledSnapshots[index - 1]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforePreviousSnapshot(newTime,$._scheduledSnapshots[index - 1])

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = newTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(oldTime,newTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 15
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 21
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: _unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: time != $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SnapshotUnschedule(time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = index

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i + 1 < $._scheduledSnapshots.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i + 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: _valueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = snapshots.ids.findUpperBound(time)

  ID: 2
  Type: NodeType.IF
  Expression: index == snapshots.ids.length

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,snapshots.values[index])

  ID: 6
  Type: NodeType.RETURN
  Expression: (snapshotExist,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: _updateSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: current = $._currentSnapshotTime

  ID: 3
  Type: NodeType.IF
  Expression: _lastSnapshot(snapshots.ids) < current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: snapshots.ids.push(current)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: snapshots.values.push(currentValue)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: _setCurrentSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (scheduleSnapshotTime,scheduleSnapshotIndex) = _findScheduledMostRecentPastSnapshot()

  ID: 5
  Type: NodeType.IF
  Expression: scheduleSnapshotTime > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotTime = scheduleSnapshotTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotIndex = scheduleSnapshotIndex

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _lastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ids.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.RETURN
  Expression: ids[ids.length - 1]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _findScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: indexFound = $._scheduledSnapshots.findUpperBound(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _scheduledSnapshotsLength = $._scheduledSnapshots.length

  ID: 4
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength && $._scheduledSnapshots[indexFound] == time

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,indexFound)

  ID: 6
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,indexFound)

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,_scheduledSnapshotsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8

Function: _findScheduledMostRecentPastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentArraySize = $._scheduledSnapshots.length

  ID: 3
  Type: NodeType.IF
  Expression: currentArraySize == 0 || (($._currentSnapshotIndex + 1 == currentArraySize) && (time != 0))

  ID: 4
  Type: NodeType.RETURN
  Expression: (0,currentArraySize)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: index = currentArraySize

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = $._currentSnapshotIndex

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < currentArraySize

  ID: 12
  Type: NodeType.IF
  Expression: $._scheduledSnapshots[i] <= block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mostRecent = $._scheduledSnapshots[i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (mostRecent,index)

  ID: 19
  Type: NodeType.RETURN
  Expression: (time,index)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 18
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 16
  15 -> 9
  16 -> 17
  17 -> 11

Function: _findAndRevertScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.IF
  Expression: ! isFound

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _checkTimeInThePast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotScheduledInThePast(time,block.timestamp)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _checkTimeSnapshotAlreadyDone
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyDone()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _getSnapshotModuleBaseStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = SnapshotModuleBaseStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20SnasphotModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rescheduleSnapshot(oldTime,newTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleLastSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SNAPSHOOTER_ROLE = keccak256(bytes)(SNAPSHOOTER_ROLE)

Edges:
  0 -> 1


Contract: MetaTxModule
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ERC2771ContextUpgradeable(trustedForwarder)

Edges:
  0 -> 1

Function: trustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _trustedForwarder

Edges:
  0 -> 1

Function: isTrustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: forwarder == trustedForwarder()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: CMTAT_BASE
==================================================

Function: __DocumentModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(documentEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: documentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._documentEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDocumentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._documentEngine == documentEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DocumentModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DOCUMENT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: getDocument
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.RETURN
  Expression: $._documentEngine.getDocument(_name)

  ID: 4
  Type: NodeType.RETURN
  Expression: (,0x0,0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: getAllDocuments
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: documents = $._documentEngine.getAllDocuments()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: documents

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDocumentModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DocumentModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC2771ContextUpgradeable._msgSender()

  ID: 2
  Type: NodeType.RETURN
  Expression: sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC2771ContextUpgradeable._msgData()

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC2771ContextUpgradeable._contextSuffixLength()

Edges:
  0 -> 1

Function: __DebtModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(debtEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: debtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._debtEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDebtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._debtEngine == debtEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DebtModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEBT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: debt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: debtBaseResult = $._debtEngine.debt()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: debtBaseResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: creditEvents
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: creditEventsResult = $._debtEngine.creditEvents()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: creditEventsResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDebtModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DebtModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20SnasphotModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rescheduleSnapshot(oldTime,newTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleLastSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20Snapshot_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: snapshotInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalance = snapshotBalanceOf(time,owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = snapshotTotalSupply(time)

  ID: 3
  Type: NodeType.RETURN
  Expression: (ownerBalance,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: snapshotInfoBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalances = new uint256[][](times.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = new uint256[](times.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iT = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: iT < times.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (ownerBalances[iT],totalSupply[iT]) = snapshotInfoBatch(times[iT],addresses)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ iT

  ID: 9
  Type: NodeType.RETURN
  Expression: (ownerBalances,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: snapshotBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._accountBalanceSnapshots[owner])

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: balanceOf(owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: snapshotTotalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._totalSupplySnapshots)

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: totalSupply()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: _snapshotUpdate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setCurrentSnapshot()

  ID: 2
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(from)

  ID: 4
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10

Function: _updateAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._accountBalanceSnapshots[account],balanceOf(account))

Edges:
  0 -> 1
  1 -> 2

Function: _updateTotalSupplySnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._totalSupplySnapshots,totalSupply())

Edges:
  0 -> 1
  1 -> 2

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC20BaseModule.decimals()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ERC20BaseModule.transferFrom(sender,recipient,amount)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! ValidationModule._operateOnTransfer(from,to,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_InvalidTransfer(from,to,amount)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ERC20SnapshotModuleInternal._snapshotUpdate(from,to)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ERC20Upgradeable._update(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __SnapshotModuleBase_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: getAllSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

Edges:
  0 -> 1
  1 -> 2

Function: getNextSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nextScheduledSnapshot = new uint256[](0)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (timeLowerBound,indexLowerBound) = _findScheduledMostRecentPastSnapshot()

  ID: 7
  Type: NodeType.IF
  Expression: (timeLowerBound == 0) && ($._currentSnapshotTime == 0)

  ID: 8
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

  ID: 9
  Type: NodeType.IF
  Expression: indexLowerBound + 1 != $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: arraySize = $._scheduledSnapshots.length - indexLowerBound - 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot = new uint256[](arraySize)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < arraySize

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot[i] = $._scheduledSnapshots[indexLowerBound + 1 + i]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: nextScheduledSnapshot

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 20
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 18
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21

Function: _scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 5
  Type: NodeType.IF
  Expression: time < nextSnapshotTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforeLastSnapshot(time,nextSnapshotTime)

  ID: 7
  Type: NodeType.IF
  Expression: time == nextSnapshotTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 6
  Type: NodeType.IF
  Expression: isFound

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: index == $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push($._scheduledSnapshots[$._scheduledSnapshots.length - 1])

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = $._scheduledSnapshots.length - 2

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i > index

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i - 1]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = time

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20

Function: _rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(oldTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(newTime)

  ID: 4
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(oldTime)

  ID: 8
  Type: NodeType.IF
  Expression: index + 1 < $._scheduledSnapshots.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[index + 1]

  ID: 10
  Type: NodeType.IF
  Expression: newTime > nextSnapshotTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampAfterNextSnapshot(newTime,nextSnapshotTime)

  ID: 12
  Type: NodeType.IF
  Expression: newTime == nextSnapshotTime

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: index > 0

  ID: 18
  Type: NodeType.IF
  Expression: newTime <= $._scheduledSnapshots[index - 1]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforePreviousSnapshot(newTime,$._scheduledSnapshots[index - 1])

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = newTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(oldTime,newTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 15
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 21
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: _unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: time != $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SnapshotUnschedule(time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = index

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i + 1 < $._scheduledSnapshots.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i + 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: _valueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = snapshots.ids.findUpperBound(time)

  ID: 2
  Type: NodeType.IF
  Expression: index == snapshots.ids.length

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,snapshots.values[index])

  ID: 6
  Type: NodeType.RETURN
  Expression: (snapshotExist,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: _updateSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: current = $._currentSnapshotTime

  ID: 3
  Type: NodeType.IF
  Expression: _lastSnapshot(snapshots.ids) < current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: snapshots.ids.push(current)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: snapshots.values.push(currentValue)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: _setCurrentSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (scheduleSnapshotTime,scheduleSnapshotIndex) = _findScheduledMostRecentPastSnapshot()

  ID: 5
  Type: NodeType.IF
  Expression: scheduleSnapshotTime > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotTime = scheduleSnapshotTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotIndex = scheduleSnapshotIndex

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _lastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ids.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.RETURN
  Expression: ids[ids.length - 1]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _findScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: indexFound = $._scheduledSnapshots.findUpperBound(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _scheduledSnapshotsLength = $._scheduledSnapshots.length

  ID: 4
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength && $._scheduledSnapshots[indexFound] == time

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,indexFound)

  ID: 6
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,indexFound)

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,_scheduledSnapshotsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8

Function: _findScheduledMostRecentPastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentArraySize = $._scheduledSnapshots.length

  ID: 3
  Type: NodeType.IF
  Expression: currentArraySize == 0 || (($._currentSnapshotIndex + 1 == currentArraySize) && (time != 0))

  ID: 4
  Type: NodeType.RETURN
  Expression: (0,currentArraySize)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: index = currentArraySize

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = $._currentSnapshotIndex

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < currentArraySize

  ID: 12
  Type: NodeType.IF
  Expression: $._scheduledSnapshots[i] <= block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mostRecent = $._scheduledSnapshots[i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (mostRecent,index)

  ID: 19
  Type: NodeType.RETURN
  Expression: (time,index)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 18
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 16
  15 -> 9
  16 -> 17
  17 -> 11

Function: _findAndRevertScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.IF
  Expression: ! isFound

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _checkTimeInThePast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotScheduledInThePast(time,block.timestamp)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _checkTimeSnapshotAlreadyDone
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyDone()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _getSnapshotModuleBaseStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = SnapshotModuleBaseStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _trustedForwarder = trustedForwarder_

Edges:
  0 -> 1

Function: trustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _trustedForwarder

Edges:
  0 -> 1

Function: isTrustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: forwarder == trustedForwarder()

Edges:
  0 -> 1

Function: __ERC20BaseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20BaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._decimals = decimals_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tos.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_EmptyTos()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(tos.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_TosValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < tos.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ERC20Upgradeable._transfer(_msgSender(),tos[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 13
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 10

Function: balanceInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances = new uint256[](addresses.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < addresses.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[i] = ERC20Upgradeable.balanceOf(addresses[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalSupply = ERC20Upgradeable.totalSupply()

  ID: 9
  Type: NodeType.RETURN
  Expression: (balances,totalSupply)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 9

Function: _getERC20BaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ValidationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: setRuleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._ruleEngine == ruleEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ValidationModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 3
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_OK

  ID: 4
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 5
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_PAUSED

  ID: 6
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 7
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN

  ID: 8
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 9
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN

  ID: 10
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 11
  Type: NodeType.RETURN
  Expression: _messageForTransferRestriction(restrictionCode)

  ID: 12
  Type: NodeType.RETURN
  Expression: TEXT_UNKNOWN_CODE

  ID: 18
  Type: NodeType.RETURN
  Expression: message

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  10 -> 12

Function: detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: paused()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 4
  Type: NodeType.IF
  Expression: frozen(from)

  ID: 5
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 6
  Type: NodeType.IF
  Expression: frozen(to)

  ID: 7
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 8
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 9
  Type: NodeType.RETURN
  Expression: _detectTransferRestriction(from,to,amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 15
  Type: NodeType.RETURN
  Expression: code

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10

Function: validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _validateTransferByModule(from,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 5
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: _validateTransfer(from,to,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: _validateTransferByModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused() || frozen(from) || frozen(to)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _operateOnTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.operateOnTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: __EnforcementModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _freeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _unfreeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: __Enforcement_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: frozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._frozen[account]

Edges:
  0 -> 1
  1 -> 2

Function: _freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Freeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unfreeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getEnforcementModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = EnforcementModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __PauseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._isDeactivated

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_PauseModule_ContractIsDeactivated()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: deactivateContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._isDeactivated = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Deactivated(_msgSender())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: deactivated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._isDeactivated

Edges:
  0 -> 1
  1 -> 2

Function: _getPauseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PauseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getPausableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PausableStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Pausable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Pausable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._paused

Edges:
  0 -> 1
  1 -> 2

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __Validation_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(ruleEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: ruleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine

Edges:
  0 -> 1
  1 -> 2

Function: _validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.validateTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.messageForTransferRestriction(restrictionCode)

Edges:
  0 -> 1
  1 -> 2

Function: _detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.detectTransferRestriction(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _getValidationModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ValidationModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20BurnModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,reason)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: burnBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _burn(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Burn(accounts[i],values[i],reason)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: burnFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(account,sender)

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(sender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(account,sender,currentAllowance - value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,burnFrom)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: BurnFrom(account,sender,value)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_FROM_ROLE)

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: __ERC20MintModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Mint(account,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: mintBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _mint(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Mint(accounts[i],values[i])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: __Base_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: tokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._tokenId

Edges:
  0 -> 1
  1 -> 2

Function: terms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._terms

Edges:
  0 -> 1
  1 -> 2

Function: information
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._information

Edges:
  0 -> 1
  1 -> 2

Function: setTokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenId(tokenId_,tokenId_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setTerms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Term(terms_,terms_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setInformation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Information(information_,information_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _getBaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __CMTAT_init(admin,ERC20Attributes_,baseModuleAttributes_,engines_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __CMTAT_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(ERC20Attributes_.nameIrrevocable,ERC20Attributes_.symbolIrrevocable)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: __ERC165_init_unchained()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: __AccessControl_init_unchained()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: __Enforcement_init_unchained()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: __SnapshotModuleBase_init_unchained()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: __ERC20Snapshot_init_unchained()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: __Validation_init_unchained(engines_.ruleEngine)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: __AuthorizationModule_init_unchained(admin,engines_.authorizationEngine)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: __ERC20BurnModule_init_unchained()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: __ERC20MintModule_init_unchained()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: __EnforcementModule_init_unchained()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: __ERC20BaseModule_init_unchained(ERC20Attributes_.decimalsIrrevocable)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: __PauseModule_init_unchained()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: __ValidationModule_init_unchained()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: __ERC20SnasphotModule_init_unchained()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: __DocumentModule_init_unchained(engines_.documentEngine)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: __DebtModule_init_unchained(engines_.debtEngine)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: __Base_init_unchained(baseModuleAttributes_.tokenId,baseModuleAttributes_.terms,baseModuleAttributes_.information)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: __CMTAT_init_unchained()

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: __CMTAT_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: burnAndMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: burn(from,amountToBurn,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mint(to,amountToMint)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 2.5.0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSER_ROLE = keccak256(bytes)(PAUSER_ROLE)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_PAUSED = All transfers paused

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINTER_ROLE = keccak256(bytes)(MINTER_ROLE)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_ROLE = keccak256(bytes)(BURNER_ROLE)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_FROM_ROLE = keccak256(bytes)(BURNER_FROM_ROLE)

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENFORCER_ROLE = keccak256(bytes)(ENFORCER_ROLE)

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN = Address FROM is frozen

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN = Address TO is frozen

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_OK = No restriction

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_UNKNOWN_CODE = Unknown code

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SNAPSHOOTER_ROLE = keccak256(bytes)(SNAPSHOOTER_ROLE)

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEBT_ROLE = keccak256(bytes)(DEBT_ROLE)

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DOCUMENT_ROLE = keccak256(bytes)(DOCUMENT_ROLE)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14


Contract: CMTAT_STANDALONE
==================================================

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __CMTAT_init(admin,ERC20Attributes_,baseModuleAttributes_,engines_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __CMTAT_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(ERC20Attributes_.nameIrrevocable,ERC20Attributes_.symbolIrrevocable)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: __ERC165_init_unchained()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: __AccessControl_init_unchained()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: __Enforcement_init_unchained()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: __SnapshotModuleBase_init_unchained()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: __ERC20Snapshot_init_unchained()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: __Validation_init_unchained(engines_.ruleEngine)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: __AuthorizationModule_init_unchained(admin,engines_.authorizationEngine)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: __ERC20BurnModule_init_unchained()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: __ERC20MintModule_init_unchained()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: __EnforcementModule_init_unchained()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: __ERC20BaseModule_init_unchained(ERC20Attributes_.decimalsIrrevocable)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: __PauseModule_init_unchained()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: __ValidationModule_init_unchained()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: __ERC20SnasphotModule_init_unchained()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: __DocumentModule_init_unchained(engines_.documentEngine)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: __DebtModule_init_unchained(engines_.debtEngine)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: __Base_init_unchained(baseModuleAttributes_.tokenId,baseModuleAttributes_.terms,baseModuleAttributes_.information)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: __CMTAT_init_unchained()

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: __CMTAT_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20BaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._decimals

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = ERC20Upgradeable.transferFrom(from,to,value)

  ID: 2
  Type: NodeType.IF
  Expression: result

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Spend(from,_msgSender(),value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: burnAndMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: burn(from,amountToBurn,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mint(to,amountToMint)

Edges:
  0 -> 1
  1 -> 2

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply += value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromBalance = $._balances[from]

  ID: 5
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._balances[from] = fromBalance - value

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._totalSupply -= value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._balances[to] += value

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: calldataLength = msg.data.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: contextSuffixLength = _contextSuffixLength()

  ID: 3
  Type: NodeType.IF
  Expression: isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength

  ID: 4
  Type: NodeType.RETURN
  Expression: address(bytes20(msg.data))

  ID: 5
  Type: NodeType.RETURN
  Expression: super._msgSender()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 20

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: calldataLength = msg.data.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: contextSuffixLength = _contextSuffixLength()

  ID: 3
  Type: NodeType.IF
  Expression: isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength

  ID: 4
  Type: NodeType.RETURN
  Expression: msg.data

  ID: 5
  Type: NodeType.RETURN
  Expression: super._msgData()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5

Function: __DocumentModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(documentEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: documentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._documentEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDocumentEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._documentEngine == documentEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DocumentModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._documentEngine = documentEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DocumentEngine(documentEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DOCUMENT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: getDocument
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.RETURN
  Expression: $._documentEngine.getDocument(_name)

  ID: 4
  Type: NodeType.RETURN
  Expression: (,0x0,0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: getAllDocuments
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDocumentModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._documentEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: documents = $._documentEngine.getAllDocuments()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: documents

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDocumentModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DocumentModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AuthorizationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AddressZeroNotAllowed()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,admin)

  ID: 5
  Type: NodeType.IF
  Expression: address(authorizationEngine_) != address(0)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: authorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._authorizationEngine

Edges:
  0 -> 1
  1 -> 2

Function: setAuthorizationEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAuthorizationModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._authorizationEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_AuthorizationModule_AuthorizationEngineAlreadySet()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._authorizationEngine = authorizationEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: AuthorizationEngine(authorizationEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].hasRole[account]

Edges:
  0 -> 1
  1 -> 2

Function: _getAuthorizationModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AuthorizationModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getAccessControlStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = AccessControlStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __AccessControl_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __AccessControl_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._roles[role].adminRole

Edges:
  0 -> 1
  1 -> 2

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].adminRole = adminRole

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getAccessControlStorage()

  ID: 2
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._roles[role].hasRole[account] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5

Function: __ERC165_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __ERC165_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _checkInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isInitializing()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotInitializing()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getInitializableStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._initializing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidInitialization()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: $._initialized != type()(uint64).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._initialized = type()(uint64).max

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint64).max)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializableStorage()._initializing

Edges:
  0 -> 1

Function: _getInitializableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = INITIALIZABLE_STORAGE

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __DebtModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(debtEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: debtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._debtEngine

Edges:
  0 -> 1
  1 -> 2

Function: setDebtEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._debtEngine == debtEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_DebtModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._debtEngine = debtEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DebtEngine(debtEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEBT_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: debt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: debtBaseResult = $._debtEngine.debt()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: debtBaseResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: creditEvents
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getDebtModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: address($._debtEngine) != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: creditEventsResult = $._debtEngine.creditEvents()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: creditEventsResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _getDebtModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = DebtModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20SnasphotModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _scheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rescheduleSnapshot(oldTime,newTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleLastSnapshot(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unscheduleSnapshotNotOptimized(time)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(SNAPSHOOTER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20Snapshot_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: snapshotInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalance = snapshotBalanceOf(time,owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = snapshotTotalSupply(time)

  ID: 3
  Type: NodeType.RETURN
  Expression: (ownerBalance,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: snapshotInfoBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerBalances = new uint256[][](times.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = new uint256[](times.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iT = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: iT < times.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (ownerBalances[iT],totalSupply[iT]) = snapshotInfoBatch(times[iT],addresses)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ iT

  ID: 9
  Type: NodeType.RETURN
  Expression: (ownerBalances,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: snapshotBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._accountBalanceSnapshots[owner])

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: balanceOf(owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: snapshotTotalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (snapshotted,value) = _valueAt(time,$._totalSupplySnapshots)

  ID: 6
  Type: NodeType.IF
  Expression: snapshotted

  ID: 7
  Type: NodeType.RETURN
  Expression: value

  ID: 8
  Type: NodeType.RETURN
  Expression: totalSupply()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: _snapshotUpdate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setCurrentSnapshot()

  ID: 2
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(from)

  ID: 4
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _updateAccountSnapshot(to)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _updateTotalSupplySnapshot()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10

Function: _updateAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._accountBalanceSnapshots[account],balanceOf(account))

Edges:
  0 -> 1
  1 -> 2

Function: _updateTotalSupplySnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateSnapshot($._totalSupplySnapshots,totalSupply())

Edges:
  0 -> 1
  1 -> 2

Function: _getERC20Storage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20StorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ERC20_init_unchained(name_,symbol_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __ERC20_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._name = name_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._symbol = symbol_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._name

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._symbol

Edges:
  0 -> 1
  1 -> 2

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._balances[account]

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._allowances[owner][spender]

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(account,address(0),value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20Storage()

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._allowances[owner][spender] = value

  ID: 9
  Type: NodeType.IF
  Expression: emitEvent

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(owner,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: __SnapshotModuleBase_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: getAllSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

Edges:
  0 -> 1
  1 -> 2

Function: getNextSnapshots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nextScheduledSnapshot = new uint256[](0)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (timeLowerBound,indexLowerBound) = _findScheduledMostRecentPastSnapshot()

  ID: 7
  Type: NodeType.IF
  Expression: (timeLowerBound == 0) && ($._currentSnapshotTime == 0)

  ID: 8
  Type: NodeType.RETURN
  Expression: $._scheduledSnapshots

  ID: 9
  Type: NodeType.IF
  Expression: indexLowerBound + 1 != $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.VARIABLE
  Expression: arraySize = $._scheduledSnapshots.length - indexLowerBound - 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot = new uint256[](arraySize)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < arraySize

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nextScheduledSnapshot[i] = $._scheduledSnapshots[indexLowerBound + 1 + i]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.RETURN
  Expression: nextScheduledSnapshot

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 20
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 18
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21

Function: _scheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 5
  Type: NodeType.IF
  Expression: time < nextSnapshotTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforeLastSnapshot(time,nextSnapshotTime)

  ID: 7
  Type: NodeType.IF
  Expression: time == nextSnapshotTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _scheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 6
  Type: NodeType.IF
  Expression: isFound

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: index == $._scheduledSnapshots.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push(time)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.push($._scheduledSnapshots[$._scheduledSnapshots.length - 1])

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = $._scheduledSnapshots.length - 2

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i > index

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i - 1]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = time

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(0,time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 14
  12 -> 15
  13 -> 18
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 15
  18 -> 19
  19 -> 20

Function: _rescheduleSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(oldTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkTimeInThePast(newTime)

  ID: 4
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(oldTime)

  ID: 8
  Type: NodeType.IF
  Expression: index + 1 < $._scheduledSnapshots.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: nextSnapshotTime = $._scheduledSnapshots[index + 1]

  ID: 10
  Type: NodeType.IF
  Expression: newTime > nextSnapshotTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampAfterNextSnapshot(newTime,nextSnapshotTime)

  ID: 12
  Type: NodeType.IF
  Expression: newTime == nextSnapshotTime

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyExists()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: index > 0

  ID: 18
  Type: NodeType.IF
  Expression: newTime <= $._scheduledSnapshots[index - 1]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotTimestampBeforePreviousSnapshot(newTime,$._scheduledSnapshots[index - 1])

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[index] = newTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SnapshotSchedule(oldTime,newTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 15
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 21
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: _unscheduleLastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.IF
  Expression: $._scheduledSnapshots.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_NoSnapshotScheduled()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: time != $._scheduledSnapshots[$._scheduledSnapshots.length - 1]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SnapshotUnschedule(time)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _unscheduleSnapshotNotOptimized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkTimeSnapshotAlreadyDone(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: index = _findAndRevertScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = index

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i + 1 < $._scheduledSnapshots.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots[i] = $._scheduledSnapshots[i + 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: $._scheduledSnapshots.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: _valueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = snapshots.ids.findUpperBound(time)

  ID: 2
  Type: NodeType.IF
  Expression: index == snapshots.ids.length

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,snapshots.values[index])

  ID: 6
  Type: NodeType.RETURN
  Expression: (snapshotExist,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: _updateSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: current = $._currentSnapshotTime

  ID: 3
  Type: NodeType.IF
  Expression: _lastSnapshot(snapshots.ids) < current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: snapshots.ids.push(current)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: snapshots.values.push(currentValue)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: _setCurrentSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (scheduleSnapshotTime,scheduleSnapshotIndex) = _findScheduledMostRecentPastSnapshot()

  ID: 5
  Type: NodeType.IF
  Expression: scheduleSnapshotTime > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotTime = scheduleSnapshotTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: $._currentSnapshotIndex = scheduleSnapshotIndex

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: _lastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ids.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.RETURN
  Expression: ids[ids.length - 1]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _findScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: indexFound = $._scheduledSnapshots.findUpperBound(time)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _scheduledSnapshotsLength = $._scheduledSnapshots.length

  ID: 4
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength && $._scheduledSnapshots[indexFound] == time

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,indexFound)

  ID: 6
  Type: NodeType.IF
  Expression: indexFound != _scheduledSnapshotsLength

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,indexFound)

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,_scheduledSnapshotsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8

Function: _findScheduledMostRecentPastSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getSnapshotModuleBaseStorage()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentArraySize = $._scheduledSnapshots.length

  ID: 3
  Type: NodeType.IF
  Expression: currentArraySize == 0 || (($._currentSnapshotIndex + 1 == currentArraySize) && (time != 0))

  ID: 4
  Type: NodeType.RETURN
  Expression: (0,currentArraySize)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: index = currentArraySize

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = $._currentSnapshotIndex

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < currentArraySize

  ID: 12
  Type: NodeType.IF
  Expression: $._scheduledSnapshots[i] <= block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mostRecent = $._scheduledSnapshots[i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (mostRecent,index)

  ID: 19
  Type: NodeType.RETURN
  Expression: (time,index)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 18
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 16
  15 -> 9
  16 -> 17
  17 -> 11

Function: _findAndRevertScheduledSnapshotIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (isFound,index) = _findScheduledSnapshotIndex(time)

  ID: 4
  Type: NodeType.IF
  Expression: ! isFound

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotNotFound()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: _checkTimeInThePast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotScheduledInThePast(time,block.timestamp)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _checkTimeSnapshotAlreadyDone
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time <= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_SnapshotModule_SnapshotAlreadyDone()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _getSnapshotModuleBaseStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = SnapshotModuleBaseStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initialize(admin,ERC20Attributes_,baseModuleAttributes_,engines_)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MetaTxModule(forwarderIrrevocable)

Edges:
  0 -> 2
  2 -> 1

Function: trustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _trustedForwarder

Edges:
  0 -> 1

Function: isTrustedForwarder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: forwarder == trustedForwarder()

Edges:
  0 -> 1

Function: __ERC20BaseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getERC20BaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._decimals = decimals_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tos.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_EmptyTos()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(tos.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ERC20BaseModule_TosValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < tos.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ERC20Upgradeable._transfer(_msgSender(),tos[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 13
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 10

Function: balanceInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances = new uint256[](addresses.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < addresses.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[i] = ERC20Upgradeable.balanceOf(addresses[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalSupply = ERC20Upgradeable.totalSupply()

  ID: 9
  Type: NodeType.RETURN
  Expression: (balances,totalSupply)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 9

Function: _getERC20BaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ERC20BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ValidationModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: setRuleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._ruleEngine == ruleEngine_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_ValidationModule_SameValue()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 3
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_OK

  ID: 4
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 5
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_PAUSED

  ID: 6
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 7
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN

  ID: 8
  Type: NodeType.IF
  Expression: restrictionCode == uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 9
  Type: NodeType.RETURN
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN

  ID: 10
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 11
  Type: NodeType.RETURN
  Expression: _messageForTransferRestriction(restrictionCode)

  ID: 12
  Type: NodeType.RETURN
  Expression: TEXT_UNKNOWN_CODE

  ID: 18
  Type: NodeType.RETURN
  Expression: message

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  10 -> 12

Function: detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: paused()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_PAUSED)

  ID: 4
  Type: NodeType.IF
  Expression: frozen(from)

  ID: 5
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_FROM_FROZEN)

  ID: 6
  Type: NodeType.IF
  Expression: frozen(to)

  ID: 7
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_REJECTED_TO_FROZEN)

  ID: 8
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 9
  Type: NodeType.RETURN
  Expression: _detectTransferRestriction(from,to,amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: uint8(REJECTED_CODE_BASE.TRANSFER_OK)

  ID: 15
  Type: NodeType.RETURN
  Expression: code

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10

Function: validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _validateTransferByModule(from,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 5
  Type: NodeType.IF
  Expression: address($._ruleEngine) != address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: _validateTransfer(from,to,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: _validateTransferByModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused() || frozen(from) || frozen(to)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _operateOnTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.operateOnTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: __EnforcementModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _freeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _unfreeze(account,reason)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(ENFORCER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: __Enforcement_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: frozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._frozen[account]

Edges:
  0 -> 1
  1 -> 2

Function: _freeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Freeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _unfreeze
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getEnforcementModuleInternalStorage()

  ID: 2
  Type: NodeType.IF
  Expression: ! $._frozen[account]

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: $._frozen[account] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unfreeze(_msgSender(),account,reason,reason)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getEnforcementModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = EnforcementModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __PauseModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.IF
  Expression: $._isDeactivated

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_PauseModule_ContractIsDeactivated()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyRole(PAUSER_ROLE)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: deactivateContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._isDeactivated = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Deactivated(_msgSender())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: deactivated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPauseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._isDeactivated

Edges:
  0 -> 1
  1 -> 2

Function: _getPauseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PauseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getPausableStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = PausableStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __Pausable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Pausable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Pausable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._paused

Edges:
  0 -> 1
  1 -> 2

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getPausableStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __Validation_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(ruleEngine_) != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._ruleEngine = ruleEngine_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RuleEngine(ruleEngine_)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 6
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: ruleEngine
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine

Edges:
  0 -> 1
  1 -> 2

Function: _validateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.validateTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _messageForTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.messageForTransferRestriction(restrictionCode)

Edges:
  0 -> 1
  1 -> 2

Function: _detectTransferRestriction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getValidationModuleInternalStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._ruleEngine.detectTransferRestriction(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _getValidationModuleInternalStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = ValidationModuleInternalStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: __ERC20BurnModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,reason)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: burnBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_BurnModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _burn(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Burn(accounts[i],values[i],reason)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: burnFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(account,sender)

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(sender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(account,sender,currentAllowance - value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _burn(account,value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Burn(account,value,burnFrom)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: BurnFrom(account,sender,value)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyRole(BURNER_FROM_ROLE)

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: __ERC20MintModule_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(account,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Mint(account,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: mintBatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: accounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_EmptyAccounts()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bool(accounts.length != values.length)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.CMTAT_MintModule_AccountsValueslengthMismatch()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _mint(accounts[i],values[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Mint(accounts[i],values[i])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(MINTER_ROLE)

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 1

Function: __Base_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: tokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._tokenId

Edges:
  0 -> 1
  1 -> 2

Function: terms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._terms

Edges:
  0 -> 1
  1 -> 2

Function: information
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.RETURN
  Expression: $._information

Edges:
  0 -> 1
  1 -> 2

Function: setTokenId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._tokenId = tokenId_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenId(tokenId_,tokenId_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setTerms
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._terms = terms_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Term(terms_,terms_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setInformation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: $ = _getBaseModuleStorage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $._information = information_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Information(information_,information_)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _getBaseModuleStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: $ = BaseModuleStorageLocation

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: $

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 2.5.0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSER_ROLE = keccak256(bytes)(PAUSER_ROLE)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_PAUSED = All transfers paused

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINTER_ROLE = keccak256(bytes)(MINTER_ROLE)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_ROLE = keccak256(bytes)(BURNER_ROLE)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURNER_FROM_ROLE = keccak256(bytes)(BURNER_FROM_ROLE)

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENFORCER_ROLE = keccak256(bytes)(ENFORCER_ROLE)

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_FROM_FROZEN = Address FROM is frozen

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_REJECTED_TO_FROZEN = Address TO is frozen

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_TRANSFER_OK = No restriction

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEXT_UNKNOWN_CODE = Unknown code

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SNAPSHOOTER_ROLE = keccak256(bytes)(SNAPSHOOTER_ROLE)

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEBT_ROLE = keccak256(bytes)(DEBT_ROLE)

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DOCUMENT_ROLE = keccak256(bytes)(DOCUMENT_ROLE)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14


