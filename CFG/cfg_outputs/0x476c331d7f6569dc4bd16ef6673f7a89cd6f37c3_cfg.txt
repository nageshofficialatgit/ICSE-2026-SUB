Contract: ERC721
==================================================


Contract: PoliticianToken
==================================================

Function: PoliticianToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyERC721()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: createPromoPolitician
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(promoCreatedCount < PROMO_CREATION_LIMIT)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: politicianOwner = _owner

  ID: 3
  Type: NodeType.IF
  Expression: politicianOwner == address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: politicianOwner = cooAddress

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: _price <= 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _price = startingPrice

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: promoCreatedCount ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _createPolitician(_name,politicianOwner,_price)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: createContractPolitician
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _createPolitician(_name,address(this),startingPrice)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: getPolitician
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: politician = politicians[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: politicianName = politician.name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellingPrice = politicianIndexToPrice[_tokenId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = politicianIndexToOwner[_tokenId]

  ID: 5
  Type: NodeType.RETURN
  Expression: (politicianName,sellingPrice,owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: changePoliticianName
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokenId < politicians.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: politicians[_tokenId].name = _name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: erc721Enabled

  ID: 2
  Type: NodeType.RETURN
  Expression: _implements

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: NAME

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SYMBOL

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = politicianIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _payout(_to)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _withdrawFunds(_to,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 2
  2 -> 1

Function: purchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = politicianIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sellingPrice = politicianIndexToPrice[_tokenId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(oldOwner != newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= sellingPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice,94),100))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: purchaseExcess = SafeMath.sub(msg.value,sellingPrice)

  ID: 9
  Type: NodeType.IF
  Expression: sellingPrice < firstStepLimit

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,200),94)

  ID: 11
  Type: NodeType.IF
  Expression: sellingPrice < secondStepLimit

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,150),94)

  ID: 13
  Type: NodeType.IF
  Expression: sellingPrice < thirdStepLimit

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,125),94)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,115),94)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

  ID: 20
  Type: NodeType.IF
  Expression: oldOwner != address(this)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: oldOwner.transfer(payment)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: TokenSold(_tokenId,sellingPrice,politicianIndexToPrice[_tokenId],oldOwner,newOwner,politicians[_tokenId].name)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(purchaseExcess)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 18
  11 -> 12
  11 -> 13
  12 -> 17
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24

Function: priceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: politicianIndexToPrice[_tokenId]

  ID: 2
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1

Function: enableERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Enabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = politicianIndexToOwner[_tokenId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(newOwner,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalPoliticians = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: politicianId = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: politicianId <= totalPoliticians

  ID: 12
  Type: NodeType.IF
  Expression: politicianIndexToOwner[politicianId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = politicianId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: politicianId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: politicians.length

  ID: 2
  Type: NodeType.RETURN
  Expression: total

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyERC721()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(_to,_tokenId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyERC721()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _addressNotNull
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _to != address(0)

Edges:
  0 -> 1

Function: _approved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: politicianIndexToApproved[_tokenId] == _to

Edges:
  0 -> 1

Function: _createPolitician
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _politician = Politician({name:_name})

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newPoliticianId = politicians.push(_politician) - 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newPoliticianId == uint256(uint32(newPoliticianId)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Birth(newPoliticianId,_name,_owner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToPrice[newPoliticianId] = _price

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),_owner,newPoliticianId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: claimant == politicianIndexToOwner[_tokenId]

Edges:
  0 -> 1

Function: _payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress.transfer(this.balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(this.balance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: _withdrawFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(this.balance >= amount)

  ID: 2
  Type: NodeType.IF
  Expression: _to == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ceoAddress.transfer(amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: politicianIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete politicianIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: erc721Enabled = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: startingPrice = 1000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: firstStepLimit = 50000000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondStepLimit = 500000000000000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: thirdStepLimit = 2000000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NAME = CryptoPoliticians

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SYMBOL = POLITICIAN

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROMO_CREATION_LIMIT = 5000

Edges:
  0 -> 1
  1 -> 2


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


