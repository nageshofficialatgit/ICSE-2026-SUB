Contract: Splitter
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newPuppet()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: newPuppet()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: newPuppet()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: newPuppet()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: extra[0] = puppets[0]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: extra[1] = puppets[1]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: extra[2] = puppets[2]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: extra[3] = puppets[3]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2

Function: getPuppetCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: puppets.length

  ID: 2
  Type: NodeType.RETURN
  Expression: puppetCount

Edges:
  0 -> 1

Function: newPuppet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: p = new Puppet()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: puppets.push(p)

  ID: 4
  Type: NodeType.RETURN
  Expression: p

  ID: 5
  Type: NodeType.RETURN
  Expression: newPuppet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setExtra
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newExtra != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: extra[_id] = _newExtra

Edges:
  0 -> 1
  1 -> 2

Function: fundPuppets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _share = SafeMath.div(msg.value,4)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: extra[0].call.value(_share).gas(800000)()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: extra[1].call.value(_share).gas(800000)()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: extra[2].call.value(_share).gas(800000)()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: extra[3].call.value(_share).gas(800000)()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: Puppet
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: target[0] = 0x509Cb8cB2F8ba04aE81eEC394175707Edd37e109

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: master[0] = 0x5C035Bb4Cb7dacbfeE076A5e61AA39a10da2E956

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != target[0]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: target[0].call.value(msg.value).gas(600000)()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == master[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: master[0].transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

  ID: 7
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


