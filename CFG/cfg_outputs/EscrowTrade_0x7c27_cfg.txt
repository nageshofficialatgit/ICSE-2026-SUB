Contract: IERC20
==================================================


Contract: EscrowTrade
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_initialFeePercentage <= MAX_FEE,Fee too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feeOwner = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: feePercentage = _initialFeePercentage

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: createTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokenAddress != address(0),Invalid token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_seller != address(0) && _buyer != address(0),Invalid addresses)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newTrade = trades[_tradeId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: newTrade.buyer = _buyer

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: newTrade.seller = _seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: newTrade.arbiter = owner

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: newTrade.fee = feePercentage

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: newTrade.feeOwner = feeOwner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: newTrade.amount = _amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: newTrade.tokenAddress = _tokenAddress

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: newTrade.status = Status.AWAITING_DEPOSIT

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: allTradeIds.push(_tradeId)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: TradeCreated(_tradeId,_buyer,_seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == trade.buyer,Only buyer can deposit)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.status == Status.AWAITING_DEPOSIT,Invalid status for deposit)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: token = IERC20(trade.tokenAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.allowance(msg.sender,address(this)) >= trade.amount,Insufficient allowance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: trade.status = Status.APPROVED

  ID: 7
  Type: NodeType.VARIABLE
  Expression: success = token.transferFrom(msg.sender,address(this),trade.amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Transfer failed)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Deposited(tradeId,msg.sender,trade.amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: disputeArises
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.status == Status.APPROVED,Invalid status for dispute)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: trade.status = Status.DISPUTED

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Disputed(tradeId,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyTradeBuyerOrSeller(tradeId)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: calculateFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_amount * _fee) / BASIS_POINTS

Edges:
  0 -> 1

Function: _releaseFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = calculateFee(trade.amount,trade.fee)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: remainingAmount = trade.amount - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: trade.status = Status.COMPLETED

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = IERC20(trade.tokenAddress)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(trade.feeOwner,fee),Fee transfer failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(trade.seller,remainingAmount),Transfer failed)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: FeePaid(tradeId,trade.feeOwner,fee)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: FundsReleased(tradeId,trade.seller,remainingAmount,fee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _refund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = calculateFee(trade.amount,trade.fee)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: remainingAmount = trade.amount - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: trade.status = Status.REFUNDED

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = IERC20(trade.tokenAddress)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(trade.feeOwner,fee),Fee transfer failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(trade.buyer,remainingAmount),Transfer failed)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: FeePaid(tradeId,trade.feeOwner,fee)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: FundsRefunded(tradeId,trade.buyer,remainingAmount,fee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: releaseFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == trade.buyer,Not authorized)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.status == Status.APPROVED,Invalid status for release)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _releaseFunds(tradeId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: disputedTransactionToSeller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Not authorized)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.status == Status.DISPUTED,Invalid status for release)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _releaseFunds(tradeId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: disputedTransactionToBuyer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = trades[tradeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Not authorized)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.status == Status.DISPUTED,Invalid status for release)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _refund(tradeId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newFeePercentage <= MAX_FEE,Fee too high)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldFee = feePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feePercentage = _newFeePercentage

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FeeUpdated(oldFee,_newFeePercentage)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setFeeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeOwner = newfeeOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BASIS_POINTS = 10000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_FEE = 200

Edges:
  0 -> 1


