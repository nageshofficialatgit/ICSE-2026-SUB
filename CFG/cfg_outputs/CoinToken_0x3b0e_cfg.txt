Contract: IERC20
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 5
  Type: NodeType.IF
  Expression: success

  ID: 6
  Type: NodeType.RETURN
  Expression: returndata

  ID: 7
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 8
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 13
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 14
  13 -> 14
  14 -> 15


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: geUnlockTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _lockTime

Edges:
  0 -> 1

Function: lock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _previousOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _lockTime = now + time

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: unlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_previousOwner == msg.sender,You don't have permission to unlock)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(now > _lockTime,Contract is locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,_previousOwner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _owner = _previousOwner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IUniswapV2Router01
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: CoinToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = _NAME

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = _SYMBOL

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _decimals = _DECIMALS

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tTotal = _supply * 10 ** uint256(_decimals)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _rTotal = (MAX - (MAX % _tTotal))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _taxFee = _txFee

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = _lpFee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _previousTaxFee = _taxFee

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _previousLiquidityFee = _liquidityFee

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _MAXAMOUNT * 10 ** uint256(_decimals)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: numTokensSellToAddToLiquidity = SELLMAXAMOUNT * 10 ** uint256(_decimals)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _rOwned[tokenOwner] = _rTotal

  ID: 13
  Type: NodeType.VARIABLE
  Expression: _uniswapV2Router = IUniswapV2Router02(routerAddress)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: _pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH())

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = _pair

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _uniswapV2Router

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[tokenOwner] = true

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _owner = tokenOwner

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),tokenOwner,_tTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: geUnlockTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _lockTime

Edges:
  0 -> 1

Function: lock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _previousOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _lockTime = now + time

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: unlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_previousOwner == msg.sender,You don't have permission to unlock)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(now > _lockTime,Contract is locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,_previousOwner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _owner = _previousOwner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _isExcluded[account]

  ID: 2
  Type: NodeType.RETURN
  Expression: _tOwned[account]

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: tokenFromReflection(_rOwned[account])

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: deliver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isExcluded[sender],Excluded addresses cannot call this function)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (rAmount,None,None,None,None,None) = _getValues(tAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rAmount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _tFeeTotal = _tFeeTotal.add(tAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: reflectionFromToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tAmount <= _tTotal,Amount must be less than supply)

  ID: 2
  Type: NodeType.IF
  Expression: ! deductTransferFee

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (rAmount,None,None,None,None,None) = _getValues(tAmount)

  ID: 5
  Type: NodeType.RETURN
  Expression: rAmount

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (None,rTransferAmount,None,None,None,None) = _getValues(tAmount)

  ID: 8
  Type: NodeType.RETURN
  Expression: rTransferAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8

Function: tokenFromReflection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rAmount <= _rTotal,Amount must be less than total reflections)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 3
  Type: NodeType.RETURN
  Expression: rAmount.div(currentRate)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isExcludedFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcluded[account]

Edges:
  0 -> 1

Function: totalFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tFeeTotal

Edges:
  0 -> 1

Function: excludeFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isExcluded[account],Account is already excluded)

  ID: 2
  Type: NodeType.IF
  Expression: _rOwned[account] > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tOwned[account] = tokenFromReflection(_rOwned[account])

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcluded[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _excluded.push(account)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: includeInReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isExcluded[account],Account is not excluded)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _excluded.length

  ID: 6
  Type: NodeType.IF
  Expression: _excluded[i] == account

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _excluded[i] = _excluded[_excluded.length - 1]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tOwned[account] = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _isExcluded[account] = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _excluded.pop()

  ID: 11
  Type: NodeType.BREAK
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 14
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 12
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 3
  12 -> 13
  13 -> 5
  14 -> 1

Function: excludeFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[account] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: includeInFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[account] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setTaxFeePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxFee = taxFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setLiquidityFeePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = liquidityFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setNumTokensSellToAddToLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: numTokensSellToAddToLiquidity = swapNumber * 10 ** uint256(_decimals)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxTxPercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = maxTxPercent * 10 ** uint256(_decimals)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setSwapAndLiquifyEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquifyEnabled = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SwapAndLiquifyEnabledUpdated(_enabled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _reflectFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tFeeTotal = _tFeeTotal.add(tFee)

Edges:
  0 -> 1
  1 -> 2

Function: _getValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tLiquidity,_getRate())

  ID: 3
  Type: NodeType.RETURN
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tLiquidity)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _getTValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tFee = calculateTaxFee(tAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tLiquidity = calculateLiquidityFee(tAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tTransferAmount = tAmount.sub(tFee).sub(tLiquidity)

  ID: 4
  Type: NodeType.RETURN
  Expression: (tTransferAmount,tFee,tLiquidity)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getRValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: rAmount = tAmount.mul(currentRate)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: rFee = tFee.mul(currentRate)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rLiquidity = tLiquidity.mul(currentRate)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: rTransferAmount = rAmount.sub(rFee).sub(rLiquidity)

  ID: 5
  Type: NodeType.RETURN
  Expression: (rAmount,rTransferAmount,rFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (rSupply,tSupply) = _getCurrentSupply()

  ID: 4
  Type: NodeType.RETURN
  Expression: rSupply.div(tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getCurrentSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rSupply = _rTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tSupply = _tTotal

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _excluded.length

  ID: 7
  Type: NodeType.IF
  Expression: _rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply

  ID: 8
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: rSupply = rSupply.sub(_rOwned[_excluded[i]])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tSupply = tSupply.sub(_tOwned[_excluded[i]])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.IF
  Expression: rSupply < _rTotal.div(_tTotal)

  ID: 14
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.RETURN
  Expression: (rSupply,tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 13
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 6
  13 -> 14
  13 -> 15
  15 -> 16

Function: _takeLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rLiquidity = tLiquidity.mul(currentRate)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity)

  ID: 4
  Type: NodeType.IF
  Expression: _isExcluded[address(this)]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_owner).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: calculateTaxFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_taxFee).div(10 ** 2)

Edges:
  0 -> 1

Function: calculateLiquidityFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_liquidityFee).div(10 ** 2)

Edges:
  0 -> 1

Function: removeAllFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _taxFee == 0 && _liquidityFee == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _previousTaxFee = _taxFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _previousLiquidityFee = _liquidityFee

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _taxFee = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: restoreAllFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxFee = _previousTaxFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = _previousLiquidityFee

Edges:
  0 -> 1
  1 -> 2

Function: isExcludedFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcludedFromFee[account]

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: from != owner() && to != owner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount,Transfer amount exceeds the maxTxAmount.)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 8
  Type: NodeType.IF
  Expression: contractTokenBalance >= _maxTxAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: contractTokenBalance = _maxTxAmount

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity

  ID: 12
  Type: NodeType.IF
  Expression: overMinTokenBalance && ! inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: contractTokenBalance = numTokensSellToAddToLiquidity

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquify(contractTokenBalance)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 17
  Type: NodeType.IF
  Expression: _isExcludedFromFee[from] || _isExcludedFromFee[to]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _tokenTransfer(from,to,amount,takeFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20

Function: swapAndLiquify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: half = contractTokenBalance.div(2)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: otherHalf = contractTokenBalance.sub(half)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: initialBalance = address(this).balance

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(half)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: newBalance = address(this).balance.sub(initialBalance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: addLiquidity(otherHalf,newBalance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: SwapAndLiquify(half,newBalance,otherHalf)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: _tokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! takeFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: removeAllFee()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferFromExcluded(sender,recipient,amount)

  ID: 6
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && _isExcluded[recipient]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transferToExcluded(sender,recipient,amount)

  ID: 8
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transferStandard(sender,recipient,amount)

  ID: 10
  Type: NodeType.IF
  Expression: _isExcluded[sender] && _isExcluded[recipient]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _transferBothExcluded(sender,recipient,amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _transferStandard(sender,recipient,amount)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: ! takeFee

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: restoreAllFee()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 16
  6 -> 7
  6 -> 8
  7 -> 15
  8 -> 9
  8 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19

Function: _transferStandard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tLiquidity) = _getValues(tAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _takeLiquidity(tLiquidity)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: _transferToExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tLiquidity) = _getValues(tAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _takeLiquidity(tLiquidity)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _transferFromExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tLiquidity) = _getValues(tAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _takeLiquidity(tLiquidity)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _transferBothExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tLiquidity) = _getValues(tAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _takeLiquidity(tLiquidity)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAndLiquifyEnabled = true

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

Edges:


