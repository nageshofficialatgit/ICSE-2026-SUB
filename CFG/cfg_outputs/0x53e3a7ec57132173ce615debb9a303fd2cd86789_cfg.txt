Contract: ERC721
==================================================


Contract: CityToken
==================================================

Function: CityToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cityIndexToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: createPromoCity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(promoCreatedCount < PROMO_CREATION_LIMIT)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: cityOwner = _owner

  ID: 3
  Type: NodeType.IF
  Expression: cityOwner == address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: cityOwner = cooAddress

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: _price <= 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _price = startingPrice

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: promoCreatedCount ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _createCity(_name,_country,cityOwner,_price)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: createContractCity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _createCity(_name,_country,address(this),startingPrice)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: getCity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: city = cities[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cityName = city.name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: country = city.country

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellingPrice = cityIndexToPrice[_tokenId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner = cityIndexToOwner[_tokenId]

  ID: 6
  Type: NodeType.RETURN
  Expression: (cityName,country,sellingPrice,owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: NAME

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = cityIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _payout(_to)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 2
  2 -> 1

Function: purchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = cityIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sellingPrice = cityIndexToPrice[_tokenId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(oldOwner != newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= sellingPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice,94),100))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: purchaseExcess = SafeMath.sub(msg.value,sellingPrice)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: cityIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,120),94)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

  ID: 11
  Type: NodeType.IF
  Expression: oldOwner != address(this)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: oldOwner.transfer(payment)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: TokenSold(_tokenId,sellingPrice,cityIndexToPrice[_tokenId],oldOwner,newOwner,cities[_tokenId].name,cities[_tokenId].country)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(purchaseExcess)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15

Function: priceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: cityIndexToPrice[_tokenId]

  ID: 2
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SYMBOL

Edges:
  0 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = cityIndexToOwner[_tokenId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(newOwner,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCities = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cityId = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: cityId <= totalCities

  ID: 12
  Type: NodeType.IF
  Expression: cityIndexToOwner[cityId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = cityId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: cityId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: cities.length

  ID: 2
  Type: NodeType.RETURN
  Expression: total

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(_to,_tokenId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _addressNotNull
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _to != address(0)

Edges:
  0 -> 1

Function: _approved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: cityIndexToApproved[_tokenId] == _to

Edges:
  0 -> 1

Function: _createCity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _city = City({name:_name,country:_country})

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newCityId = cities.push(_city) - 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newCityId == uint256(uint32(newCityId)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: CityCreated(newCityId,_name,_country,_owner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: cityIndexToPrice[newCityId] = _price

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),_owner,newCityId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: claimant == cityIndexToOwner[_tokenId]

Edges:
  0 -> 1

Function: _payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress.transfer(this.balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(this.balance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cityIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete cityIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: startingPrice = 50000000000000000

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NAME = CryptoCities

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SYMBOL = CityToken

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROMO_CREATION_LIMIT = 5000

Edges:
  0 -> 1
  1 -> 2


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


