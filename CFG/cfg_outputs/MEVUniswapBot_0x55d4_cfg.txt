Contract: ISwapRouter
==================================================


Contract: IQuoter
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: MEVUniswapBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _v2Router

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: uniswapV3Router = _v3Router

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV3Quoter = _v3Quoter

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: startBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isRunning,Bot is already running)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isRunning = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BotStarted()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: pauseBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isRunning,Bot is already paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isRunning = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BotPaused()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No ETH balance to withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Withdrawn(owner,balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getUniswapV2Price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: router = IUniswapV2Router02(uniswapV2Router)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amounts = router.getAmountsOut(amountIn,path)

  ID: 6
  Type: NodeType.RETURN
  Expression: amounts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getUniswapV3Price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: quoter = IQuoter(uniswapV3Quoter)

  ID: 2
  Type: NodeType.RETURN
  Expression: quoter.quoteExactInputSingle(tokenIn,tokenOut,3000,amountIn,0)

Edges:
  0 -> 1
  1 -> 2

Function: executeUniswapV2Swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: router = IUniswapV2Router02(uniswapV2Router)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokens{value: amountIn}(minAmountOut,path,address(this),block.timestamp + 15)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(uniswapV2Router,tokenIn,tokenOut,amountIn,minAmountOut)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: executeUniswapV3Swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: params = ISwapRouter.ExactInputSingleParams({tokenIn:tokenIn,tokenOut:tokenOut,fee:3000,recipient:address(this),deadline:block.timestamp + 15,amountIn:amountIn,amountOutMinimum:minAmountOut,sqrtPriceLimitX96:0})

  ID: 2
  Type: NodeType.VARIABLE
  Expression: router = ISwapRouter(uniswapV3Router)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: router.exactInputSingle{value: amountIn}(params)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(uniswapV3Router,tokenIn,tokenOut,amountIn,minAmountOut)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: executeTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isRunning,Bot is paused)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountIn = (address(this).balance * tradePercentage) / 100

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,Trade amount is too small)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOutV2 = getUniswapV2Price(tokenIn,tokenOut,amountIn)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amountOutV3 = getUniswapV3Price(tokenIn,tokenOut,amountIn)

  ID: 9
  Type: NodeType.IF
  Expression: bestDEX == keccak256(bytes)(UniswapV2)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: executeUniswapV2Swap(tokenIn,tokenOut,amountIn,amountOut)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: executeUniswapV3Swap(tokenIn,tokenOut,amountIn,amountOut)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: amountOutV3 >= amountOutV2

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: bestDEX = keccak256(bytes)(UniswapV3)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: bestDEX = keccak256(bytes)(UniswapV2)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: amountOutV3 >= amountOutV2

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: amountOut = amountOutV3

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: amountOut = amountOutV2

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: bestDEX == keccak256(bytes)(UniswapV2)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: TradeAttempt(amountIn,uniswapV2Router)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: TradeAttempt(amountIn,uniswapV3Router)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 13
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 9

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isRunning = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: stopLossPercentage = 10

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradePercentage = 40

Edges:


