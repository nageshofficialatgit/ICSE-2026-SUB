Contract: PastelDeNataToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 13_000_000_000 * 10 ** decimals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = totalSupply

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lastMintTime = block.timestamp

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= amount,Saldo insuficiente)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,recipient,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowances[sender][msg.sender] >= amount,Sem permissao suficiente)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[sender] >= amount,Saldo insuficiente)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[sender] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowances[sender][msg.sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: mintAnnualEmission
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lastMintTime + 31536000,Emissao anual permitida apenas uma vez por ano)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newTokens = (totalSupply * annualEmissionRate) / 100

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalSupply + newTokens <= MAX_SUPPLY,Supply maximo atingido)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply += newTokens

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[owner] += newTokens

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lastMintTime = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner,newTokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= amount,Saldo insuficiente para burn)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowances[ownerAddress][spender]

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Novo dono invalido)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Pastel de Nata

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = NATA$

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_SUPPLY = 20_000_000_000 * 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: annualEmissionRate = 10

Edges:
  0 -> 1


