Contract: ETH_Staking_Contract_23
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = address(msg.sender)

Edges:
  0 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lockupPeriod >= 14 && lockupPeriod <= 90,Invalid lockup period.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklisted[msg.sender],You are not allowed to deposit.)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: currentLockupPeriod = lockupPeriod * 86400

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentInterestRate = getInterestRateForLockupPeriod(currentLockupPeriod)

  ID: 5
  Type: NodeType.IF
  Expression: _referrals[msg.sender] == address(0) && referral != msg.sender && referral != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _referrals[msg.sender] = referral

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: newDeposit = DepositInfo({amount:msg.value,lockupPeriod:currentLockupPeriod,interestRate:currentInterestRate,depositTime:block.timestamp,lastClaimTime:block.timestamp})

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] += msg.value

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _lockupPeriod[msg.sender] = currentLockupPeriod

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _interestRate[msg.sender] = currentInterestRate

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _depositTime[msg.sender] = block.timestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _lastClaimTime[msg.sender] = block.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _initialDeposits[msg.sender] = msg.value

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender].push(newDeposit)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Deposit(msg.sender,msg.value,lockupPeriod)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: transferStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklisted[msg.sender],You are not allowed to transfer.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromLockupPeriod >= 14 && fromLockupPeriod <= 90,Invalid from lockup period.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(toLockupPeriod >= 14 && toLockupPeriod <= 90,Invalid to lockup period.)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromLockupPeriodInSeconds = fromLockupPeriod * 86400

  ID: 5
  Type: NodeType.VARIABLE
  Expression: toLockupPeriodInSeconds = toLockupPeriod * 86400

  ID: 6
  Type: NodeType.VARIABLE
  Expression: totalFromAmount = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: lastDepositTime = 0

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < _deposits[msg.sender].length

  ID: 12
  Type: NodeType.IF
  Expression: _deposits[msg.sender][i].lockupPeriod == fromLockupPeriodInSeconds

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalFromAmount += _deposits[msg.sender][i].amount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender][i].amount = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender][i].lastClaimTime = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: lastDepositTime = _deposits[msg.sender][i].depositTime

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalFromAmount >= amount,Insufficient balance)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: totalAmount = totalFromAmount + msg.value

  ID: 21
  Type: NodeType.VARIABLE
  Expression: newInterestRate = getInterestRateForLockupPeriod(toLockupPeriodInSeconds)

  ID: 22
  Type: NodeType.VARIABLE
  Expression: newDeposit = DepositInfo({amount:totalAmount,lockupPeriod:toLockupPeriodInSeconds,interestRate:newInterestRate,depositTime:block.timestamp,lastClaimTime:block.timestamp})

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] += msg.value

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender].push(newDeposit)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Transferred(msg.sender,fromLockupPeriod,toLockupPeriod,totalAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 19
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 17
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 11
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25

Function: getInterestRateForLockupPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lockupPeriod == 14 * 86400

  ID: 2
  Type: NodeType.RETURN
  Expression: 57142857142857

  ID: 3
  Type: NodeType.IF
  Expression: lockupPeriod == 30 * 86400

  ID: 4
  Type: NodeType.RETURN
  Expression: 66666666666666

  ID: 5
  Type: NodeType.IF
  Expression: lockupPeriod == 60 * 86400

  ID: 6
  Type: NodeType.RETURN
  Expression: 83333333333333

  ID: 7
  Type: NodeType.IF
  Expression: lockupPeriod == 90 * 86400

  ID: 8
  Type: NodeType.RETURN
  Expression: 94444444444444

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklisted[msg.sender],You are not allowed to withdraw.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(depositIndex < _deposits[msg.sender].length,Invalid deposit index.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= _deposits[msg.sender][depositIndex].depositTime + _deposits[msg.sender][depositIndex].lockupPeriod,Lockup period not over.)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountToWithdraw = _deposits[msg.sender][depositIndex].amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountToWithdraw > 0,No funds to withdraw.)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender][depositIndex].amount = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalWithdrawnAmounts[msg.sender] += amountToWithdraw

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(amountToWithdraw)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Withdraw(msg.sender,amountToWithdraw)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: calculateInterest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deposit = _deposits[user][depositIndex]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: timeElapsed = block.timestamp - deposit.lastClaimTime

  ID: 3
  Type: NodeType.VARIABLE
  Expression: interest = (deposit.amount * deposit.interestRate * timeElapsed) / (100000000000000000 * 86400)

  ID: 4
  Type: NodeType.RETURN
  Expression: interest

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: claimInterestForDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklisted[msg.sender],You are not allowed to claim interest.)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalInterestToClaim = 0

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deposits[msg.sender].length

  ID: 7
  Type: NodeType.IF
  Expression: _deposits[msg.sender][i].lockupPeriod == lockupPeriod * 86400

  ID: 8
  Type: NodeType.VARIABLE
  Expression: interestToClaim = calculateInterest(msg.sender,i)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(interestToClaim > 0,No interest to claim.)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _deposits[msg.sender][i].lastClaimTime = block.timestamp

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalInterestToClaim += interestToClaim

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(totalInterestToClaim)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: InterestClaimed(msg.sender,totalInterestToClaim)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6
  14 -> 15

Function: getTotalWithdrawnAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalWithdrawn = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deposits[user].length

  ID: 6
  Type: NodeType.IF
  Expression: _deposits[user][i].lockupPeriod == lockupPeriod * 86400

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalWithdrawn += _totalWithdrawnAmounts[user]

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: totalWithdrawn

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getRemainingAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalDeposits = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalRemaining = 0

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deposits[user].length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalDeposits += _deposits[user][i].amount

  ID: 8
  Type: NodeType.IF
  Expression: _deposits[user][i].amount > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalRemaining += _deposits[user][i].amount

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 12
  Type: NodeType.RETURN
  Expression: totalDeposits - totalRemaining

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 12
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 6

Function: ERC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner.transfer(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: ERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blacklisted[user],User is already blacklisted.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _blacklisted[user] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Blacklisted(user)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: ERC202
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_blacklisted[user],User is not blacklisted.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _blacklisted[user] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unblacklisted(user)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getDepositInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: depositCount = _deposits[user].length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: depositIndices = new uint256[](depositCount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: unlockTimes = new uint256[](depositCount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakedAmounts = new uint256[](depositCount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lockupPeriods = new uint256[](depositCount)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < depositCount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: depositIndices[i] = i

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: unlockTimes[i] = _deposits[user][i].depositTime + _deposits[user][i].lockupPeriod

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: stakedAmounts[i] = _deposits[user][i].amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: lockupPeriods[i] = _deposits[user][i].lockupPeriod

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.RETURN
  Expression: (depositIndices,unlockTimes,stakedAmounts,lockupPeriods)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 15
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 9

Function: getDepositStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: depositCount = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deposits[user].length

  ID: 6
  Type: NodeType.IF
  Expression: _deposits[user][i].lockupPeriod == lockupPeriod * 86400

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: depositCount ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: depositIndices = new uint256[](depositCount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: remainingTimes = new uint256[](depositCount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: interestsCollected = new uint256[](depositCount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: interestsNotCollected = new uint256[](depositCount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: nextInterestClaims = new uint256[](depositCount)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: depositIndex = 0

  ID: 16
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 19
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < _deposits[user].length

  ID: 20
  Type: NodeType.IF
  Expression: _deposits[user][i_scope_0].lockupPeriod == lockupPeriod * 86400

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: depositIndices[depositIndex] = i_scope_0

  ID: 22
  Type: NodeType.IF
  Expression: block.timestamp < _deposits[user][i_scope_0].depositTime + _deposits[user][i_scope_0].lockupPeriod

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: remainingTimes[depositIndex] = _deposits[user][i_scope_0].depositTime + _deposits[user][i_scope_0].lockupPeriod - block.timestamp

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: remainingTimes[depositIndex] = 0

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: interestsCollected[depositIndex] = (_deposits[user][i_scope_0].lastClaimTime - _deposits[user][i_scope_0].depositTime) * _deposits[user][i_scope_0].amount * _deposits[user][i_scope_0].interestRate / 100

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: interestsNotCollected[depositIndex] = calculateInterest(user,i_scope_0)

  ID: 28
  Type: NodeType.VARIABLE
  Expression: nextClaim = int256(_deposits[user][i_scope_0].lastClaimTime + 30 * 60) - int256(block.timestamp)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: nextInterestClaims[depositIndex] = uint256(max(nextClaim,0))

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: depositIndex ++

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 33
  Type: NodeType.RETURN
  Expression: (depositIndices,remainingTimes,interestsCollected,interestsNotCollected,nextInterestClaims)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 18
  16 -> 19
  17 -> 33
  18 -> 16
  19 -> 20
  19 -> 17
  20 -> 21
  20 -> 31
  21 -> 22
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 19

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: getNumberOfDeposits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _deposits[user].length

Edges:
  0 -> 1

Function: getReferral
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _referrals[user]

Edges:
  0 -> 1

Function: getLockupPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _lockupPeriod[user]

Edges:
  0 -> 1

Function: getInterestRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interestRate[user]

Edges:
  0 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[user]

Edges:
  0 -> 1

Function: Erc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _blacklisted[user]

Edges:
  0 -> 1

Function: getLastClaimTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _lastClaimTime[user]

Edges:
  0 -> 1


