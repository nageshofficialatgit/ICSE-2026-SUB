Contract: IERC20
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(b <= a)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(b > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Owned
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: StakeContract
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Ernie = _Ernie

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Ernie_REWARD = _Ernie_reward

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feeOnStake = _feeOnStake

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: feeOnUnstake = _feeOnUnstake

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: minimumStake = _minimumStake

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: calculateRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: activeDays = (block.timestamp.sub(lastClock[_stakeholder])).div(86400)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ErnieRewardBalance = IERC20(Ernie_REWARD).balanceOf(address(this))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rewards = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: stakeAmount = stakes[_stakeholder].div(10 ** 18)

  ID: 5
  Type: NodeType.IF
  Expression: stakeAmount >= 100000

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: rewards = ErnieRewardBalance.mul(5).mul(activeDays).mul(50).div(100000)

  ID: 7
  Type: NodeType.IF
  Expression: stakeAmount >= 30000

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rewards = ErnieRewardBalance.mul(5).mul(activeDays).mul(15).div(100000)

  ID: 9
  Type: NodeType.IF
  Expression: stakeAmount >= 5000

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: rewards = ErnieRewardBalance.mul(5).mul(activeDays).mul(5).div(100000)

  ID: 11
  Type: NodeType.IF
  Expression: stakeAmount >= 500

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: rewards = ErnieRewardBalance.mul(5).mul(activeDays).mul(1).div(100000)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: rewards

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 16
  7 -> 8
  7 -> 9
  8 -> 15
  9 -> 10
  9 -> 11
  10 -> 14
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: addToStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount >= minimumStake,Check minimum stake)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(Ernie).balanceOf(msg.sender) >= _amount,Insufficient Ernie Balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(Ernie).transferFrom(msg.sender,address(this),_amount),Staking Failed)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: stakingTax = (feeOnStake.mul(_amount)).div(1000)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: afterTax = _amount.sub(stakingTax)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalStaked = totalStaked.add(afterTax)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateRewards(msg.sender))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lastClock[msg.sender] = block.timestamp.sub(remainder)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: stakes[msg.sender] = (stakes[msg.sender]).add(afterTax)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: OnStake(msg.sender,afterTax,stakingTax)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: removeFromStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= stakes[msg.sender] && _amount > 0,Not enough Tokens)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: unstakingTax = (feeOnUnstake.mul(_amount)).div(1000)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: afterTax = _amount.sub(unstakingTax)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateRewards(msg.sender))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stakes[msg.sender] = (stakes[msg.sender]).sub(_amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: lastClock[msg.sender] = block.timestamp.sub(remainder)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalStaked = totalStaked.sub(_amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IERC20(Ernie).transfer(msg.sender,afterTax)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: OnUnstake(msg.sender,_amount,unstakingTax)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: claimReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalReward = (referralRewards[msg.sender]).add(stakeRewards[msg.sender]).add(calculateRewards(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((block.timestamp - lastClock[msg.sender]) >= 86400,Minimum claim time not reached)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalReward > 0,No rewards to claim)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(Ernie_REWARD).balanceOf(address(this)) >= totalReward,Not enough Tokens in Pool)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stakeRewards[msg.sender] = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: referralRewards[msg.sender] = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: referralCount[msg.sender] = 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lastClock[msg.sender] = block.timestamp.sub(remainder)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: IERC20(Ernie_REWARD).transfer(msg.sender,totalReward)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: OnWithdrawal(msg.sender,totalReward)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: calculateRewardPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20(Ernie_REWARD).balanceOf(address(this))

Edges:
  0 -> 1

Function: changePoolStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: active

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: active = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: active = true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: updateFeeOnStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeOnStake = _feeOnStake

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateFeeOnUnstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeOnUnstake = _feeOnUnstake

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateMinimumStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minimumStake = _minimumStake

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: retrieveErnie
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((IERC20(Ernie).balanceOf(address(this))).sub(totalStaked) >= _amount,Not enough Ernie)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(Ernie).transfer(msg.sender,_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnWithdrawal(msg.sender,_amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: retrieveErnieReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(Ernie_REWARD).balanceOf(address(this)) >= _amount,Not enough Ernie)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(Ernie_REWARD).transfer(msg.sender,_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OnWithdrawal(msg.sender,_amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: active = true

Edges:


