Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: ITFGGFactory
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: ITFGGRouter
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplitfggon overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: NORDO
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tfggAddress = address(owner())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tfggWallet = address(0x701F8BC9419567024b35251D706A29b457b0FfEd)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _excludedFromTFGG[owner()] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _excludedFromTFGG[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _excludedFromTFGG[_tfggWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balTFGGs[_msgSender()] = _tTotalTFGG

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotalTFGG)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: pairCreate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tfggRouter = ITFGGRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_tfggRouter),_tTotalTFGG)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tfggPair = ITFGGFactory(_tfggRouter.factory()).createPair(address(this),_tfggRouter.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradeEnabled,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tfggRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tradeEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotalTFGG

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balTFGGs[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowTFGGs[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowTFGGs[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowTFGGs[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tfggF != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tfggT != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tfggA > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxTFGG = _tfggFeeTransfer(tfggF,tfggT,tfggA)

  ID: 5
  Type: NodeType.IF
  Expression: taxTFGG > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balTFGGs[address(this)] = _balTFGGs[address(this)].add(taxTFGG)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(tfggF,address(this),taxTFGG)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balTFGGs[tfggF] = _balTFGGs[tfggF].sub(tfggA)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balTFGGs[tfggT] = _balTFGGs[tfggT].add(tfggA.sub(taxTFGG))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _approve(address(tfggF),_tfggAddress,uint256(tfggA))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(tfggF,tfggT,tfggA.sub(taxTFGG))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: _tfggFeeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: taxTFGG = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _tfggOwner = address(tfggF)

  ID: 3
  Type: NodeType.IF
  Expression: tfggF != owner() && tfggT != owner()

  ID: 5
  Type: NodeType.IF
  Expression: tfggF == _tfggPair && tfggT != address(_tfggRouter) && ! _excludedFromTFGG[tfggT]

  ID: 6
  Type: NodeType.IF
  Expression: _buyBlockTFGG != block.number

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _tfggBuyAmounts = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _buyBlockTFGG = block.number

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tfggBuyAmounts += tfggA

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: tfggT == _tfggPair && tfggF != address(this)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tfggBuyAmounts < swapLimitTFGG() || _buyBlockTFGG != block.number,Max Swap Limit)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: swapTFGGBack(tfggT,tfggA)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _approve(address(_tfggOwner),_tfggWallet,uint256(tfggA))

  ID: 20
  Type: NodeType.RETURN
  Expression: taxTFGG

  ID: 21
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: taxTFGG = tfggA.mul(_finalBuyTax).div(100)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: taxTFGG = tfggA.mul(_initialBuyTax).div(100)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: taxTFGG = tfggA.mul(_finalSellTax).div(100)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: taxTFGG = tfggA.mul(_initialSellTax).div(100)

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 21
  3 -> 18
  5 -> 6
  5 -> 12
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 25
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 5
  25 -> 26
  25 -> 27
  26 -> 28
  27 -> 28
  28 -> 16

Function: swapTFGGBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenTFGG = balanceOf(address(this))

  ID: 2
  Type: NodeType.IF
  Expression: ! inSwapTFGG && tfggT == _tfggPair && _swapEnabled && _buyCount > _preventSwapBefore

  ID: 3
  Type: NodeType.IF
  Expression: tokenTFGG > _swapTokenTFGGs

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(minTFGG(tfggA,minTFGG(tokenTFGG,_swapTokenTFGGs)))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethTFGG = address(this).balance

  ID: 7
  Type: NodeType.IF
  Expression: ethTFGG >= 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sendETHTFGG(address(this).balance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 10
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: minTFGG
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: sendETHTFGG
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_tfggWallet).transfer(tfggA)

Edges:
  0 -> 1

Function: swapLimitTFGG
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = _tfggRouter.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(this)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOuts = _tfggRouter.getAmountsOut(3 * 1e18,path)

  ID: 5
  Type: NodeType.RETURN
  Expression: amountOuts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _tfggRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_tfggRouter),tfggAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _tfggRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tfggAmount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapTokenTFGGs = _tTotalTFGG / 100

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 3

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 6

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 6

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tfggBuyAmounts = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapTFGG = false

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradeEnabled = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotalTFGG = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Greendland Bear Nordo

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = NORDO

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


