Contract: CharityPEPE
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 1e12 * (10 ** decimals)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[address(this)] = totalSupply

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: buyWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.timestamp >= STAGE1_START && block.timestamp <= STAGE2_END)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value <= MAX_PURCHASE)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokenAmount = msg.value * rate

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balanceOf[address(this)] >= tokenAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokensSold + tokenAmount <= MAX_TOKENS_FOR_SALE)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[address(this)] -= tokenAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[msg.sender] += tokenAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _tokensSold += tokenAmount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,tokenAmount,ETH)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.IF
  Expression: (block.timestamp <= STAGE1_END)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: rate = STAGE1_RATE

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: rate = STAGE2_RATE

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 11
  1 -> 2
  2 -> 13
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 4

Function: buyWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.timestamp >= STAGE1_START && block.timestamp <= STAGE2_END)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(usdtAmount <= MAX_PURCHASE / USDT_RATE)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokenAmount = usdtAmount * USDT_RATE

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balanceOf[address(this)] >= tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokensSold + tokenAmount <= MAX_TOKENS_FOR_SALE)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(USDT_ADDRESS).balanceOf(_owner)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(IERC20(USDT_ADDRESS).transferFrom(msg.sender,_owner,usdtAmount))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: balanceAfter = IERC20(USDT_ADDRESS).balanceOf(_owner)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balanceAfter >= balanceBefore + usdtAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[address(this)] -= tokenAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[msg.sender] += tokenAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _tokensSold += tokenAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,tokenAmount,USDT)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 1

Function: buyWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.timestamp >= STAGE1_START && block.timestamp <= STAGE2_END)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(usdcAmount <= MAX_PURCHASE / USDC_RATE)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokenAmount = usdcAmount * USDC_RATE

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balanceOf[address(this)] >= tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_tokensSold + tokenAmount <= MAX_TOKENS_FOR_SALE)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(USDC_ADDRESS).balanceOf(_owner)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(IERC20(USDC_ADDRESS).transferFrom(msg.sender,_owner,usdcAmount))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: balanceAfter = IERC20(USDC_ADDRESS).balanceOf(_owner)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balanceAfter >= balanceBefore + usdcAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[address(this)] -= tokenAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[msg.sender] += tokenAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _tokensSold += tokenAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,tokenAmount,USDC)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balance > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (sent,None) = address(_owner).call{value: balance}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(sent)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ETHWithdrawn(_owner,balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: withdrawUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(USDT_ADDRESS).balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balance > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ownerBalanceBefore = IERC20(USDT_ADDRESS).balanceOf(_owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(IERC20(USDT_ADDRESS).transfer(_owner,balance))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ownerBalanceAfter = IERC20(USDT_ADDRESS).balanceOf(_owner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ownerBalanceAfter >= ownerBalanceBefore + balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: USDTWithdrawn(_owner,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: withdrawUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(USDC_ADDRESS).balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balance > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ownerBalanceBefore = IERC20(USDC_ADDRESS).balanceOf(_owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(IERC20(USDC_ADDRESS).transfer(_owner,balance))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ownerBalanceAfter = IERC20(USDC_ADDRESS).balanceOf(_owner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ownerBalanceAfter >= ownerBalanceBefore + balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: USDCWithdrawn(_owner,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: tokensSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokensSold

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balanceOf[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowance[account][spender]

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply += value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[to] += value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Mint(to,value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! _paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Paused(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Unpaused(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(account != address(0))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: stakedAmount = _stakedBalance[account]

  ID: 4
  Type: NodeType.IF
  Expression: stakedAmount > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _stakedBalance[account] = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[account] += stakedAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Unstaked(account,stakedAmount,0)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(period == 3 || period == 12)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount <= _balanceOf[msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[msg.sender] -= amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _stakedBalance[msg.sender] += amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _stakeStartTime[msg.sender] = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _stakePeriod[msg.sender] = period

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Staked(msg.sender,amount,period)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_stakedBalance[msg.sender] > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_lastUnstakeBlock[msg.sender] != block.number)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sender = msg.sender

  ID: 4
  Type: NodeType.VARIABLE
  Expression: stakeTime = block.timestamp - _stakeStartTime[sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakeTime >= MIN_STAKE_PERIOD)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = _stakedBalance[sender]

  ID: 7
  Type: NodeType.VARIABLE
  Expression: periodInSeconds = _stakePeriod[sender] * 2592000

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakeTime >= periodInSeconds)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: reward = (amount * rewardRate * stakeTime) / (100 * 31536000)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: totalAmount = amount + reward

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _stakedBalance[sender] = 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[sender] += totalAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalSupply += reward

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _lastUnstakeBlock[sender] = block.number

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Unstaked(sender,amount,reward)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.IF
  Expression: (_stakePeriod[sender] == 3)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: rewardRate = 6

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: rewardRate = 12

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 19
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 18
  18 -> 1
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 10

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sender = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balanceOf[sender] >= amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(sender == _owner || block.timestamp > TRANSFER_LOCK_TIME)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: burnAmount = (amount * BURN_FEE) / BURN_DENOMINATOR

  ID: 7
  Type: NodeType.VARIABLE
  Expression: transferAmount = amount - burnAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[sender] -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[to] += transferAmount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= burnAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,to,transferAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Burn(sender,burnAmount)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(spender != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(value <= totalSupply)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowance[msg.sender][spender] = value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(from != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(to != address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(value > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balanceOf[from] >= value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_allowance[from][msg.sender] >= value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(from == _owner || block.timestamp > TRANSFER_LOCK_TIME)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: burnAmount = (value * BURN_FEE) / BURN_DENOMINATOR

  ID: 8
  Type: NodeType.VARIABLE
  Expression: transferAmount = value - burnAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[from] -= value

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[to] += transferAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= burnAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _allowance[from][msg.sender] -= value

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,transferAmount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Burn(from,burnAmount)

  ID: 15
  Type: NodeType.RETURN
  Expression: true

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 17
  17 -> 1

Function: airdrop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: len = recipients.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(len == values.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(len > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(len <= 100)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sender = msg.sender

  ID: 6
  Type: NodeType.VARIABLE
  Expression: totalAirdrop = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < len

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalAirdrop += values[i]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool)(totalAirdrop <= _balanceOf[sender])

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: 

  ID: 17
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < len

  ID: 18
  Type: NodeType.VARIABLE
  Expression: recipient = recipients[i_scope_0]

  ID: 19
  Type: NodeType.VARIABLE
  Expression: value = values[i_scope_0]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool)(recipient != address(0))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[sender] -= value

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _balanceOf[recipient] += value

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,value)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_0

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Airdrop(sender,totalAirdrop)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 26
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 13
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 10
  13 -> 16
  14 -> 17
  15 -> 25
  16 -> 14
  17 -> 18
  17 -> 15
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 17
  26 -> 27
  27 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CharityPEPE

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CPEPE

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURN_FEE = 20000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURN_DENOMINATOR = 1000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSFER_LOCK_TIME = 1764950400

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE1_START = 1746643200

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE1_END = 1759180800

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE2_START = 1759181100

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE2_END = 1765036800

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE1_RATE = 50000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAGE2_RATE = 30000

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT_RATE = 1000

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC_RATE = 1000

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_PURCHASE = 100000000000000000000

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_TOKENS_FOR_SALE = 5e11 * (10 ** 18)

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_STAKE_PERIOD = 86400

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15


Contract: IERC20
==================================================


