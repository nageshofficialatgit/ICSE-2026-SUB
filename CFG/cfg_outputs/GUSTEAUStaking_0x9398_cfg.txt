Contract: IERC20
==================================================


Contract: GUSTEAUStaking
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: gusteau = IERC20(_gusteau)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lastUpdateTime = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: rewardsLocked = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: depositRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner can deposit rewards)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! rewardsLocked,Rewards already deposited and locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Cannot deposit 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(gusteau.transferFrom(msg.sender,address(this),amount),Deposit failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: rewardRate = amount / 94608000

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: rewardsLocked = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: RewardsDeposited(amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: rewardPerToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: totalStaked == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: rewardPerTokenStored

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: rewardPerTokenStored + ((block.timestamp - lastUpdateTime) * rewardRate * 1e18 / totalStaked)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: earned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (stakedBalance[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18) + rewards[account]

Edges:
  0 -> 1

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Cannot stake 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalStaked += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: stakedBalance[msg.sender] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(gusteau.transferFrom(msg.sender,address(this),amount),Stake transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Staked(msg.sender,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Cannot withdraw 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stakedBalance[msg.sender] >= amount,Insufficient staked balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalStaked -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakedBalance[msg.sender] -= amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(gusteau.transfer(msg.sender,amount),Withdraw transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Withdrawn(msg.sender,amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: reward = rewards[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(reward > 0,No rewards to claim)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rewards[msg.sender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(gusteau.transfer(msg.sender,reward),Reward transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: RewardClaimed(msg.sender,reward)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1


