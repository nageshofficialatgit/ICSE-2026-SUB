Contract: IERC20
==================================================


Contract: IDyDxSoloMargin
==================================================


Contract: ICallee
==================================================


Contract: DyDxFlashLoan
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: initiateFlashLoan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner can initiate flash loan)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accounts = new IDyDxSoloMargin.AccountInfo[](1)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: accounts[0] = IDyDxSoloMargin.AccountInfo(address(this),0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: actions = new IDyDxSoloMargin.ActionArgs[](3)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: actions[0] = IDyDxSoloMargin.ActionArgs({actionType:1,accountIdx:0,amount:IDyDxSoloMargin.AssetAmount({sign:false,denomination:0,ref:0,value:amount}),primaryMarketId:3,secondaryMarketId:0,otherAddress:address(this),otherAccountIdx:0,data:})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: actions[1] = IDyDxSoloMargin.ActionArgs({actionType:8,accountIdx:0,amount:IDyDxSoloMargin.AssetAmount({sign:false,denomination:0,ref:0,value:0}),primaryMarketId:0,secondaryMarketId:0,otherAddress:address(this),otherAccountIdx:0,data:abi.encode(amount)})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: actions[2] = IDyDxSoloMargin.ActionArgs({actionType:0,accountIdx:0,amount:IDyDxSoloMargin.AssetAmount({sign:true,denomination:0,ref:0,value:amount + 2}),primaryMarketId:3,secondaryMarketId:0,otherAddress:address(this),otherAccountIdx:0,data:})

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IERC20(dai).approve(soloMargin,amount + 2)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IDyDxSoloMargin(soloMargin).operate(accounts,actions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: callFunction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == soloMargin,Only SoloMargin can call this function)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountInfo.owner == address(this),Wrong account owner)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amount = abi.decode(data,(uint256))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(dai).balanceOf(address(this)) >= amount,Flash loan not received)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner can withdraw)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(dai).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(dai).transfer(owner,balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: soloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F

Edges:
  0 -> 1


