Contract: IERC20
==================================================


Contract: IERC165
==================================================


Contract: IERC1363
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transferFrom,(from,to,value)))

Edges:
  0 -> 1

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,oldAllowance + value)

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < requestedDecrease

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedDecreaseAllowance(address,uint256,uint256)(spender,currentAllowance,requestedDecrease)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,currentAllowance - requestedDecrease)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: forceApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeCall(token.approve,(spender,value))

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.approve,(spender,0)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: transferAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: transferFromAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransferFrom(token,from,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferFromAndCall(from,to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: approveAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.approveAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success__callOptionalReturn_asm_0 = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.IF
  Expression: ! success__callOptionalReturn_asm_0

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptr__callOptionalReturn_asm_0 = mload(uint256)(0x40)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(ptr__callOptionalReturn_asm_0,0,returndatasize()())

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr__callOptionalReturn_asm_0,returndatasize()())

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: address(token).code.length == 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: returnValue != 1

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  6 -> 7
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 7
  12 -> 13
  13 -> 14
  14 -> 18
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 16
  21 -> 17

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: success && address(token).code.length > 0

  ID: 12
  Type: NodeType.RETURN
  Expression: success && returnValue == 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  10 -> 11
  10 -> 12


Contract: AggregatorV3Interface
==================================================


Contract: Marketing
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_radwTokenAddress != address(0),Invalid RADW token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_usdcAddress != address(0),Invalid USDC token address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_usdtAddress != address(0),Invalid USDT token address)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_ownerWallet != address(0),Invalid owner wallet address)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_initialPrice > 0,Initial price must be greater than 0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: superAdmin = msg.sender

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: radwToken = IERC20(_radwTokenAddress)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: usdcToken = IERC20(_usdcAddress)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: usdtToken = IERC20(_usdtAddress)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_aggregatorAddress)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = _ownerWallet

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: tokenPrice = _initialPrice

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: isMarketingEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: toggleMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMarketingEnabled = enable

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: setTokenPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newPrice > 0,Price must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenPrice = newPrice

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferSuperAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newSuperAdmin != address(0),Invalid address for super admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: superAdmin = newSuperAdmin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setOwnerWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwnerWallet != address(0),Invalid address for owner wallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = newOwnerWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: buyTokensWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,ETH amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,ethPrice,None,None,None) = priceFeed.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethPrice > 0,Invalid ETH price)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethUSDPrice = uint256(ethPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: radwTokens = (msg.value * ethUSDPrice) / tokenPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(ownerWallet).transfer(msg.value)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(ownerWallet,msg.sender,radwTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: buyTokensWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcAmount > 0,USDC amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: radwTokens = (usdcAmount * (10 ** (18 - 6 + 8))) / tokenPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: usdcToken.safeTransferFrom(msg.sender,ownerWallet,usdcAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(ownerWallet,msg.sender,radwTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: buyTokensWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtAmount > 0,USDT amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: radwTokens = (usdtAmount * (10 ** (18 - 6 + 8))) / tokenPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: usdtToken.safeTransferFrom(msg.sender,ownerWallet,usdtAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(ownerWallet,msg.sender,radwTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: sellTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,ethPrice,None,None,None) = priceFeed.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethPrice > 0,Invalid ETH price)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethUSDPrice = uint256(ethPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: ethAmount = (tokenAmount * tokenPrice) / ethUSDPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= ethAmount,Insufficient ETH liquidity)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(msg.sender,ownerWallet,tokenAmount)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(msg.sender).call{value: ethAmount}()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: sellTokensForUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: usdcAmount = (tokenAmount * tokenPrice) / (10 ** (18 - 6 + 8))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.balanceOf(address(this)) >= usdcAmount,Insufficient USDC liquidity)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(msg.sender,ownerWallet,tokenAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: usdcToken.safeTransfer(msg.sender,usdcAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sellTokensForUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: usdtAmount = (tokenAmount * tokenPrice) / (10 ** (18 - 6 + 8))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.balanceOf(address(this)) >= usdtAmount,Insufficient USDT liquidity)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: radwToken.safeTransferFrom(msg.sender,ownerWallet,tokenAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: usdtToken.safeTransfer(msg.sender,usdtAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: depositUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdcToken.safeTransferFrom(msg.sender,address(this),amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: depositUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdtToken.safeTransferFrom(msg.sender,address(this),amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(ownerWallet).call{value: amount}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH withdrawal failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdrawUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdcToken.safeTransfer(ownerWallet,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdtToken.safeTransfer(ownerWallet,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1


