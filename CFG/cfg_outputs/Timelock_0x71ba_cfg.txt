Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Timelock
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(delay_ >= MINIMUM_DELAY,Timelock::constructor: Delay must exceed minimum delay.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(delay_ <= MAXIMUM_DELAY,Timelock::setDelay: Delay must not exceed maximum delay.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: admin = admin_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: delay = delay_

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(this),Timelock::setDelay: Call must come from Timelock.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(delay_ >= MINIMUM_DELAY,Timelock::setDelay: Delay must exceed minimum delay.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(delay_ <= MAXIMUM_DELAY,Timelock::setDelay: Delay must not exceed maximum delay.)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: delay = delay_

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: NewDelay(delay)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: acceptAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == pendingAdmin,Timelock::acceptAdmin: Call must come from pendingAdmin.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: NewAdmin(admin)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setPendingAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(this),Timelock::setPendingAdmin: Call must come from Timelock.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = pendingAdmin_

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: NewPendingAdmin(pendingAdmin)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: queueTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,Timelock::queueTransaction: Call must come from admin.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: txHash = keccak256(bytes)(abi.encode(target,value,signature,data,eta))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: queuedTransactions[txHash] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: QueueTransaction(txHash,target,value,signature,data,eta)

  ID: 6
  Type: NodeType.RETURN
  Expression: txHash

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: cancelTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,Timelock::cancelTransaction: Call must come from admin.)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: txHash = keccak256(bytes)(abi.encode(target,value,signature,data,eta))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: queuedTransactions[txHash] = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: CancelTransaction(txHash,target,value,signature,data,eta)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: executeTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,Timelock::executeTransaction: Call must come from admin.)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: txHash = keccak256(bytes)(abi.encode(target,value,signature,data,eta))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(queuedTransactions[txHash],Timelock::executeTransaction: Transaction hasn't been queued.)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: queuedTransactions[txHash] = false

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: bytes(signature).length == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: callData = data

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: callData = abi.encodePacked(bytes4(keccak256(bytes)(bytes(signature))),data)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: (success,returnData) = target.call.value(value)(callData)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Timelock::executeTransaction: Transaction execution reverted.)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ExecuteTransaction(txHash,target,value,signature,data,eta)

  ID: 17
  Type: NodeType.RETURN
  Expression: returnData

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: getBlockTimestamp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.timestamp

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GRACE_PERIOD = 1209600

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINIMUM_DELAY = 172800

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAXIMUM_DELAY = 2592000

Edges:
  0 -> 1
  1 -> 2


