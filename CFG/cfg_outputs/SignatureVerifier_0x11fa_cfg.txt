Contract: SignatureVerifier
==================================================

Function: verifySignature
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: messageHash = keccak256(bytes)(abi.encodePacked(message))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ethSignedMessageHash = getEthSignedMessageHash(messageHash)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: recoveredSigner = recoverSigner(ethSignedMessageHash,signature)

  ID: 4
  Type: NodeType.RETURN
  Expression: recoveredSigner == signer

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,messageHash))

Edges:
  0 -> 1

Function: recoverSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (v,r,s) = splitSignature(signature)

  ID: 5
  Type: NodeType.RETURN
  Expression: ecrecover(bytes32,uint8,bytes32,bytes32)(ethSignedMessageHash,v,r,s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: splitSignature
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sig.length == 65,Invalid signature length)

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: r = mload(uint256)(sig + 32)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s = mload(uint256)(sig + 64)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: v = byte(uint256,uint256)(0,mload(uint256)(sig + 96))

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: v < 27

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: v += 27

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: (v,r,s)

  ID: 11
  Type: NodeType.RETURN
  Expression: (v,r,s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10


