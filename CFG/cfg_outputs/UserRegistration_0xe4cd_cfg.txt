Contract: UserRegistration
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: usdtToken = _usdtToken

Edges:
  0 -> 1
  1 -> 2

Function: register
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isRegistered[msg.sender],Already registered)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,data) = usdtToken.call(abi.encodeWithSignature(transferFrom(address,address,uint256),msg.sender,address(this),JOIN_AMOUNT))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),USDT transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isRegistered[msg.sender] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: registeredUsers.push(msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Registered(msg.sender,JOIN_AMOUNT)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: transferToAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(adminWallet != address(0),Invalid admin wallet address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (transferSuccess,transferData) = usdtToken.call(abi.encodeWithSignature(transfer(address,uint256),adminWallet,amount))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferSuccess && (transferData.length == 0 || abi.decode(transferData,(bool))),Transfer to admin failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferredToAdmin(adminWallet,amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: distributeRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(percentage > 0 && percentage <= 100,Invalid percentage)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(registeredUsers.length > 0,No registered users)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,balanceData) = usdtToken.call(abi.encodeWithSignature(balanceOf(address),address(this)))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Failed to get contract balance)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: contractBalance = abi.decode(balanceData,(uint256))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: totalAmount = (contractBalance * percentage) / 100

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalAmount > 0,Nothing to distribute)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: perUserAmount = totalAmount / registeredUsers.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(perUserAmount > 0,Insufficient balance to distribute)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < registeredUsers.length

  ID: 16
  Type: NodeType.VARIABLE
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: (transferSuccess,transferData) = usdtToken.call(abi.encodeWithSignature(transfer(address,uint256),registeredUsers[i],perUserAmount))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferSuccess && (transferData.length == 0 || abi.decode(transferData,(bool))),Reward distribution failed)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: RewardsDistributed(totalAmount,perUserAmount)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 14
  12 -> 15
  13 -> 21
  14 -> 12
  15 -> 16
  15 -> 13
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 15
  22 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: JOIN_AMOUNT = 50 * 10 ** 6

Edges:


