Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENTERED = 2

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: AgentManager
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Ownable(initialOwner)

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: setHawalaFactory
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: hawalaFactory = _factory

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setOperator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: operators[_operator] = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OperatorUpdated(_operator,_status)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: suspendAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(agents[agent].isActive,Agent not active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: agents[agent].isActive = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AgentSuspended(agent)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(agents[agent].isActive,Agent not active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newCommission <= 7500,Commission rate too high)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: agents[agent].commissionRate = newCommission

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AgentUpdated(agent,newCommission)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: approveAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(agent != address(0),Invalid agent address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(commissionRate <= 7500,Commission rate too high)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! agents[agent].isActive,Agent already registered and active)

  ID: 4
  Type: NodeType.IF
  Expression: agents[agent].commissionRate == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allAgents.push(agent)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: agents[agent] = Agent({isActive:true,commissionRate:commissionRate,totalCommission:0,totalBtcVolume:0,totalUsdtVolume:0})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: AgentRegistered(agent,commissionRate)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: agents[agent].isActive = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: AgentApproved(agent)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10
  11 -> 1

Function: deleteAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(agents[agent].commissionRate > 0,Agent not registered)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: delete agents[agent]

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < allAgents.length

  ID: 7
  Type: NodeType.IF
  Expression: allAgents[i] == agent

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allAgents[i] = allAgents[allAgents.length - 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: allAgents.pop()

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: AgentDeleted(agent)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 14
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 13
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 4
  11 -> 12
  12 -> 6
  14 -> 1

Function: assignClientToAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(agents[agent].isActive,Agent not active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: clientToAgent[client] = agent

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ClientAssigned(client,agent)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: recordTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: agent = clientToAgent[trader]

  ID: 2
  Type: NodeType.IF
  Expression: agent != address(0) && agents[agent].isActive

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: agentToTransactions[agent].push(Transaction({wallet:trader,btcAmount:btcAmount,orderType:isBTCToUSDT}))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: agents[agent].totalBtcVolume += btcAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: agents[agent].totalUsdtVolume += usdtAmount

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyFactory()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: getAgentTransactions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: agentToTransactions[agent]

Edges:
  0 -> 1

Function: addCommission
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: agent = clientToAgent[trader]

  ID: 2
  Type: NodeType.IF
  Expression: agent != address(0) && agents[agent].isActive

  ID: 3
  Type: NodeType.VARIABLE
  Expression: commission = (amount * agents[agent].commissionRate) / 10000

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: agents[agent].totalCommission += commission

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: CommissionEarned(agent,trader,commission)

  ID: 6
  Type: NodeType.RETURN
  Expression: (true,commission)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyFactory()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  9 -> 1

Function: getAgentAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: clientToAgent[trader]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyFactory()

Edges:
  0 -> 2
  2 -> 1

Function: isClientAssigned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: clientToAgent[client] != address(0)

Edges:
  0 -> 1

Function: getAllAgentsData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: agentCount = allAgents.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: agentAddresses = new address[](agentCount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isActive = new bool[](agentCount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: commissionRates = new uint256[](agentCount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalCommissions = new uint256[](agentCount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: btcVolumes = new uint256[](agentCount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: usdtVolumes = new uint256[](agentCount)

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < agentCount

  ID: 12
  Type: NodeType.VARIABLE
  Expression: agentAddr = allAgents[i]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: agentAddresses[i] = agentAddr

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: isActive[i] = agents[agentAddr].isActive

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: commissionRates[i] = agents[agentAddr].commissionRate

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalCommissions[i] = agents[agentAddr].totalCommission

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: btcVolumes[i] = agents[agentAddr].totalBtcVolume

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: usdtVolumes[i] = agents[agentAddr].totalUsdtVolume

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 20
  Type: NodeType.RETURN
  Expression: (agentAddresses,isActive,commissionRates,totalCommissions,btcVolumes,usdtVolumes)

  ID: 21
  Type: NodeType.RETURN
  Expression: (agentAddresses,isActive,commissionRates,totalCommissions,btcVolumes,usdtVolumes)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 20
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 11


