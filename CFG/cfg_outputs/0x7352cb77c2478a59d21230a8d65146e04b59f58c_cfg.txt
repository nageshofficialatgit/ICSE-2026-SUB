Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: ERC20Basic
==================================================


Contract: KeysUtils
==================================================

Function: toKey
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: result = 0x0000000000000000000000000000000000000000000000000000000000000000

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: toKeyFromStorage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: _key

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: toMemoryObject
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2

Function: toObject
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: toMemoryObject(_key,_dest)

  ID: 2
  Type: NodeType.RETURN
  Expression: _dest

Edges:
  0 -> 1
  1 -> 2

Function: toStateObject
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2

Function: getTimestamp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: TransferToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _token.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1


Contract: JouleProxyAPI
==================================================


Contract: CheckableContract
==================================================


Contract: JouleAPI
==================================================


Contract: usingConsts
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GWEI = 1000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IDLE_GAS = 22273

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GAS = 4000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 0x0100001300000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: JouleIndex
==================================================

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: timestamp = _key.getTimestamp()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: year = toKey(timestamp,YEAR)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (headLow,headHigh) = fromValue(head)

  ID: 6
  Type: NodeType.IF
  Expression: year < headLow || headLow == 0 || year > headHigh

  ID: 7
  Type: NodeType.IF
  Expression: year < headLow || headLow == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: headLow = year

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: year > headHigh

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: headHigh = year

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: head = toValue(headLow,headHigh)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: week = toKey(timestamp,604800)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[year])

  ID: 19
  Type: NodeType.IF
  Expression: week < low || week > high

  ID: 20
  Type: NodeType.IF
  Expression: week < low || low == 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: low = week

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: week > high

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: high = week

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: index[year] = toValue(low,high)

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[week])

  ID: 29
  Type: NodeType.VARIABLE
  Expression: hour = toKey(timestamp,3600)

  ID: 30
  Type: NodeType.IF
  Expression: hour < low || hour > high

  ID: 31
  Type: NodeType.IF
  Expression: hour < low || low == 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: low = hour

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.IF
  Expression: hour > high

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: high = hour

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: index[week] = toValue(low,high)

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[hour])

  ID: 40
  Type: NodeType.VARIABLE
  Expression: minute = toKey(timestamp,60)

  ID: 41
  Type: NodeType.IF
  Expression: minute < low || minute > high

  ID: 42
  Type: NodeType.IF
  Expression: minute < low || low == 0

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: low = minute

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.IF
  Expression: minute > high

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: high = minute

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: index[hour] = toValue(low,high)

  ID: 49
  Type: NodeType.ENDIF
  Expression: 

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[minute])

  ID: 51
  Type: NodeType.VARIABLE
  Expression: tsKey = toKey(timestamp)

  ID: 52
  Type: NodeType.IF
  Expression: tsKey < low || tsKey > high

  ID: 53
  Type: NodeType.IF
  Expression: tsKey < low || low == 0

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: low = tsKey

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

  ID: 56
  Type: NodeType.IF
  Expression: tsKey > high

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: high = tsKey

  ID: 58
  Type: NodeType.ENDIF
  Expression: 

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: index[minute] = toValue(low,high)

  ID: 60
  Type: NodeType.ENDIF
  Expression: 

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: index[tsKey] = _key

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 14
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 27
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 38
  31 -> 32
  31 -> 33
  32 -> 33
  33 -> 34
  34 -> 35
  34 -> 36
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  41 -> 49
  42 -> 43
  42 -> 44
  43 -> 44
  44 -> 45
  45 -> 46
  45 -> 47
  46 -> 47
  47 -> 48
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  52 -> 60
  53 -> 54
  53 -> 55
  54 -> 55
  55 -> 56
  56 -> 57
  56 -> 58
  57 -> 58
  58 -> 59
  59 -> 60
  60 -> 61

Function: findFloorKeyYear
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: year = toKey(_timestamp,YEAR)

  ID: 2
  Type: NodeType.IF
  Expression: year < _low

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: year > _high

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[_high])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 10
  Type: NodeType.RETURN
  Expression: index[high]

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: year >= _low

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[year])

  ID: 17
  Type: NodeType.IF
  Expression: low != 0

  ID: 18
  Type: NodeType.VARIABLE
  Expression: key = findFloorKeyWeek(_timestamp,low,high)

  ID: 19
  Type: NodeType.IF
  Expression: key != 0

  ID: 20
  Type: NodeType.RETURN
  Expression: key

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 24
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 25
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 26
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 25
  16 -> 17
  17 -> 18
  17 -> 22
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 15
  25 -> 26

Function: findFloorKeyWeek
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: week = toKey(_timestamp,604800)

  ID: 2
  Type: NodeType.IF
  Expression: week < _low

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: week > _high

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[_high])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 11
  Type: NodeType.RETURN
  Expression: index[high]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 14
  Type: NodeType.IFLOOP
  Expression: week >= _low

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[week])

  ID: 16
  Type: NodeType.IF
  Expression: low != 0

  ID: 17
  Type: NodeType.VARIABLE
  Expression: key = findFloorKeyHour(_timestamp,low,high)

  ID: 18
  Type: NodeType.IF
  Expression: key != 0

  ID: 19
  Type: NodeType.RETURN
  Expression: key

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 23
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 24
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 25
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 24
  15 -> 16
  16 -> 17
  16 -> 21
  17 -> 18
  18 -> 19
  18 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 14
  24 -> 25

Function: findFloorKeyHour
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: hour = toKey(_timestamp,3600)

  ID: 2
  Type: NodeType.IF
  Expression: hour < _low

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: hour > _high

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[_high])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[high])

  ID: 10
  Type: NodeType.RETURN
  Expression: index[high]

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: hour >= _low

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[hour])

  ID: 15
  Type: NodeType.IF
  Expression: low != 0

  ID: 16
  Type: NodeType.VARIABLE
  Expression: key = findFloorKeyMinute(_timestamp,low,high)

  ID: 17
  Type: NodeType.IF
  Expression: key != 0

  ID: 18
  Type: NodeType.RETURN
  Expression: key

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 22
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 23
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 24
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 23
  14 -> 15
  15 -> 16
  15 -> 20
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 24

Function: findFloorKeyMinute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: minute = toKey(_timestamp,60)

  ID: 2
  Type: NodeType.IF
  Expression: minute < _low

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: minute > _high

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[_high])

  ID: 9
  Type: NodeType.RETURN
  Expression: index[high]

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 12
  Type: NodeType.IFLOOP
  Expression: minute >= _low

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (low,high) = fromValue(index[minute])

  ID: 14
  Type: NodeType.IF
  Expression: low != 0

  ID: 15
  Type: NodeType.VARIABLE
  Expression: key = findFloorKeyTimestamp(_timestamp,low,high)

  ID: 16
  Type: NodeType.IF
  Expression: key != 0

  ID: 17
  Type: NodeType.RETURN
  Expression: key

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 21
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 22
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 23
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 22
  13 -> 14
  14 -> 15
  14 -> 19
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 12
  22 -> 23

Function: findFloorKeyTimestamp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tsKey = toKey(_timestamp)

  ID: 2
  Type: NodeType.IF
  Expression: tsKey < _low

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: tsKey > _high

  ID: 6
  Type: NodeType.RETURN
  Expression: index[_high]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.IFLOOP
  Expression: tsKey >= _low

  ID: 10
  Type: NodeType.VARIABLE
  Expression: key = index[tsKey]

  ID: 11
  Type: NodeType.IF
  Expression: key != 0

  ID: 12
  Type: NodeType.RETURN
  Expression: key

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 16
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  15 -> 9
  16 -> 17

Function: findFloorKey
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (yearLow,yearHigh) = fromValue(head)

  ID: 4
  Type: NodeType.RETURN
  Expression: findFloorKeyYear(_timestamp,yearLow,yearHigh)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: toKey
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(timestamp)

Edges:
  0 -> 1

Function: toValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: fromValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: (_lowKey,_highKey)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: YEAR = 0x1DFE200

Edges:


Contract: JouleContractHolder
==================================================

Function: JouleContractHolder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: index = new JouleIndex()

Edges:
  0 -> 1

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: length ++

  ID: 2
  Type: NodeType.VARIABLE
  Expression: id = KeysUtils.toKey(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 3
  Type: NodeType.IF
  Expression: head == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: previous = index.findFloorKey(_timestamp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(previous != id)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool)(objects[id] == 0)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: prevTimestamp = previous.getTimestamp()

  ID: 12
  Type: NodeType.VARIABLE
  Expression: headTimestamp = head.getTimestamp()

  ID: 13
  Type: NodeType.IF
  Expression: prevTimestamp < headTimestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: objects[id] = head

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: objects[id] = objects[previous]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: objects[previous] = id

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 19

Function: next
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: head = objects[head]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: length --

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _next = head.toObject()

  ID: 4
  Type: NodeType.RETURN
  Expression: _next

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: length

Edges:
  0 -> 1

Function: getTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: obj = head.toObject()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 6
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _timestamp == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: this.getTop()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prev = KeysUtils.toKey(_contractAddress,_timestamp,_gasLimit,_gasPrice / GWEI)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: current = objects[prev]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: obj = current.toObject()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 11
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GWEI = 1000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IDLE_GAS = 22273

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GAS = 4000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 0x0100001300000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Joule
==================================================

Function: JouleContractHolder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: index = new JouleIndex()

Edges:
  0 -> 1

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: length ++

  ID: 2
  Type: NodeType.VARIABLE
  Expression: id = KeysUtils.toKey(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 3
  Type: NodeType.IF
  Expression: head == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: previous = index.findFloorKey(_timestamp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(previous != id)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool)(objects[id] == 0)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: prevTimestamp = previous.getTimestamp()

  ID: 12
  Type: NodeType.VARIABLE
  Expression: headTimestamp = head.getTimestamp()

  ID: 13
  Type: NodeType.IF
  Expression: prevTimestamp < headTimestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: objects[id] = head

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: objects[id] = objects[previous]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: objects[previous] = id

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 19

Function: next
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: head = objects[head]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: length --

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _next = head.toObject()

  ID: 4
  Type: NodeType.RETURN
  Expression: _next

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: length

Edges:
  0 -> 1

Function: getTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: obj = head.toObject()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 6
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _timestamp == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: this.getTop()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prev = KeysUtils.toKey(_contractAddress,_timestamp,_gasLimit,_gasPrice / GWEI)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: current = objects[prev]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: obj = current.toObject()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 11
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: register
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = this.getPrice(_gasLimit,_gasPrice)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= price)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_timestamp > now)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_timestamp < 0x100000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasLimit < MAX_GAS)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice > GWEI)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice < 0x100000000 * GWEI)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: insert(_address,_timestamp,_gasLimit,_gasPrice / GWEI)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Registered(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 10
  Type: NodeType.IF
  Expression: msg.value > price

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value - price)

  ID: 12
  Type: NodeType.RETURN
  Expression: msg.value - price

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  13 -> 14

Function: getPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasLimit < 4300000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice > GWEI)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice < 0x100000000 * GWEI)

  ID: 4
  Type: NodeType.RETURN
  Expression: getPriceInner(_gasLimit,_gasPrice)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getPriceInner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_gasLimit + IDLE_GAS) * _gasPrice

Edges:
  0 -> 1

Function: invoke
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: innerInvoke(invokeCallback)

Edges:
  0 -> 1

Function: invokeTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: innerInvokeTop(invokeCallback)

Edges:
  0 -> 1

Function: getVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: VERSION

Edges:
  0 -> 1

Function: innerInvoke
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = KeysUtils.toObject(head)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: current.timestamp != 0 && current.timestamp < now && msg.gas >= current.gasLimit

  ID: 5
  Type: NodeType.VARIABLE
  Expression: gas = msg.gas

  ID: 6
  Type: NodeType.VARIABLE
  Expression: status = _callback(current.contractAddress,current.gasLimit)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: gas -= msg.gas

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Invoked(current.contractAddress,status,gas)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amount += getPriceInner(current.gasLimit,current.gasPriceGwei * GWEI)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: current = next()

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: amount > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: amount

  ID: 16
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 4
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: innerInvokeTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = KeysUtils.toObject(head)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: gas = msg.gas

  ID: 3
  Type: NodeType.VARIABLE
  Expression: status = _callback(current.contractAddress,current.gasLimit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gas -= msg.gas

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Invoked(current.contractAddress,status,gas)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = getPriceInner(current.gasLimit,current.gasPriceGwei * GWEI)

  ID: 7
  Type: NodeType.IF
  Expression: amount > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: amount

  ID: 11
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: invokeCallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _contract.call.gas(_gas)(0x919840ad)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GWEI = 1000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IDLE_GAS = 22273

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GAS = 4000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 0x0100001300000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: JouleBehindProxy
==================================================

Function: transferToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _token.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: register
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = this.getPrice(_gasLimit,_gasPrice)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= price)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_timestamp > now)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_timestamp < 0x100000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasLimit < MAX_GAS)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice > GWEI)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice < 0x100000000 * GWEI)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: insert(_address,_timestamp,_gasLimit,_gasPrice / GWEI)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Registered(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 10
  Type: NodeType.IF
  Expression: msg.value > price

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value - price)

  ID: 12
  Type: NodeType.RETURN
  Expression: msg.value - price

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  13 -> 14

Function: getPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasLimit < 4300000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice > GWEI)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gasPrice < 0x100000000 * GWEI)

  ID: 4
  Type: NodeType.RETURN
  Expression: getPriceInner(_gasLimit,_gasPrice)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getPriceInner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_gasLimit + IDLE_GAS) * _gasPrice

Edges:
  0 -> 1

Function: invoke
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.invoke()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyProxy()

Edges:
  0 -> 2
  2 -> 1

Function: invokeTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.invokeTop()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyProxy()

Edges:
  0 -> 2
  2 -> 1

Function: getVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: VERSION

Edges:
  0 -> 1

Function: innerInvoke
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = KeysUtils.toObject(head)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: current.timestamp != 0 && current.timestamp < now && msg.gas >= current.gasLimit

  ID: 5
  Type: NodeType.VARIABLE
  Expression: gas = msg.gas

  ID: 6
  Type: NodeType.VARIABLE
  Expression: status = _callback(current.contractAddress,current.gasLimit)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: gas -= msg.gas

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Invoked(current.contractAddress,status,gas)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amount += getPriceInner(current.gasLimit,current.gasPriceGwei * GWEI)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: current = next()

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: amount > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: amount

  ID: 16
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 4
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: innerInvokeTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = KeysUtils.toObject(head)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: gas = msg.gas

  ID: 3
  Type: NodeType.VARIABLE
  Expression: status = _callback(current.contractAddress,current.gasLimit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gas -= msg.gas

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Invoked(current.contractAddress,status,gas)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = getPriceInner(current.gasLimit,current.gasPriceGwei * GWEI)

  ID: 7
  Type: NodeType.IF
  Expression: amount > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: amount

  ID: 11
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: invokeCallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: proxy.call.gas(_gas)(0x73027f6d,_contract)

Edges:
  0 -> 1

Function: JouleContractHolder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: index = new JouleIndex()

Edges:
  0 -> 1

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: length ++

  ID: 2
  Type: NodeType.VARIABLE
  Expression: id = KeysUtils.toKey(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 3
  Type: NodeType.IF
  Expression: head == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: previous = index.findFloorKey(_timestamp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(previous != id)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool)(objects[id] == 0)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: prevTimestamp = previous.getTimestamp()

  ID: 12
  Type: NodeType.VARIABLE
  Expression: headTimestamp = head.getTimestamp()

  ID: 13
  Type: NodeType.IF
  Expression: prevTimestamp < headTimestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: objects[id] = head

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: head = id

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: objects[id] = objects[previous]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: objects[previous] = id

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: index.insert(id)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 19

Function: next
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: head = objects[head]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: length --

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _next = head.toObject()

  ID: 4
  Type: NodeType.RETURN
  Expression: _next

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: length

Edges:
  0 -> 1

Function: getTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: obj = head.toObject()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 6
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _timestamp == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: this.getTop()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prev = KeysUtils.toKey(_contractAddress,_timestamp,_gasLimit,_gasPrice / GWEI)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: current = objects[prev]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: obj = current.toObject()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractAddress = obj.contractAddress

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: timestamp = obj.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: gasLimit = obj.gasLimit

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: gasPrice = obj.gasPriceGwei * GWEI

  ID: 11
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: setProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: proxy = _proxy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GWEI = 1000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IDLE_GAS = 22273

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GAS = 4000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 0x0100001300000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: JouleProxy
==================================================

Function: transferToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _token.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setJoule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: joule = _joule

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyJoule()

Edges:
  0 -> 1

Function: getCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: joule.getCount()

Edges:
  0 -> 1

Function: register
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: change = joule.register.value(msg.value)(_address,_timestamp,_gasLimit,_gasPrice)

  ID: 2
  Type: NodeType.IF
  Expression: change > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(change)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: change

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: invoke
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = joule.invoke()

  ID: 2
  Type: NodeType.IF
  Expression: amount > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: invokeTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = joule.invokeTop()

  ID: 2
  Type: NodeType.IF
  Expression: amount > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: getPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: joule.getPrice(_gasLimit,_gasPrice)

Edges:
  0 -> 1

Function: getTop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = joule.getCount()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _addresses = new address[](amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _timestamps = new uint256[](amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _gasLimits = new uint256[](amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _gasPrices = new uint256[](amount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (contractAddress,timestamp,gasLimit,gasPrice) = joule.getTop()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _addresses[0] = contractAddress

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _timestamps[0] = timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _gasLimits[0] = gasLimit

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _gasPrices[0] = gasPrice

  ID: 16
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 19
  Type: NodeType.IFLOOP
  Expression: i < amount

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: (contractAddress,timestamp,gasLimit,gasPrice) = joule.getNext(contractAddress,timestamp,gasLimit,gasPrice)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _addresses[i] = contractAddress

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _timestamps[i] = timestamp

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _gasLimits[i] = gasLimit

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _gasPrices[i] = gasPrice

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 26
  Type: NodeType.IF
  Expression: _count <= length

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: amount = _count

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: amount = length

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.RETURN
  Expression: (_addresses,_timestamps,_gasLimits,_gasPrices)

Edges:
  0 -> 1
  1 -> 26
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 18
  16 -> 19
  17 -> 30
  18 -> 16
  19 -> 20
  19 -> 17
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 19
  26 -> 27
  26 -> 28
  27 -> 29
  28 -> 29
  29 -> 3

Function: getNext
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (contractAddress,timestamp,gasLimit,gasPrice) = joule.getNext(_contractAddress,_timestamp,_gasLimit,_gasPrice)

  ID: 2
  Type: NodeType.RETURN
  Expression: (contractAddress,timestamp,gasLimit,gasPrice)

Edges:
  0 -> 1
  1 -> 2

Function: getVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: joule.getVersion()

Edges:
  0 -> 1

Function: callback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: CheckableContract(_contract).check()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyJoule()

Edges:
  0 -> 2
  2 -> 1


