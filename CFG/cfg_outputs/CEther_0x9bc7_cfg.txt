Contract: WhitelistAccess
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isWhitelistAccess = true

Edges:


Contract: ComptrollerInterface
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isComptroller = true

Edges:


Contract: EIP20Interface
==================================================


Contract: EIP20NonStandardInterface
==================================================


Contract: ComptrollerErrorReporter
==================================================

Function: fail
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Failure(uint256(err),uint256(info),0)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(err)

Edges:
  0 -> 1
  1 -> 2

Function: failOpaque
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Failure(uint256(err),uint256(info),opaqueError)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(err)

Edges:
  0 -> 1
  1 -> 2


Contract: TokenErrorReporter
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_ERROR = 0

Edges:


Contract: ExponentialNoError
==================================================

Function: truncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: exp.mantissa / expScale

Edges:
  0 -> 1

Function: mul_ScalarTruncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: truncate(product)

Edges:
  0 -> 1
  1 -> 2

Function: mul_ScalarTruncateAddUInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: add_(truncate(product),addend)

Edges:
  0 -> 1
  1 -> 2

Function: lessThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa < right.mantissa

Edges:
  0 -> 1

Function: lessThanOrEqualExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa <= right.mantissa

Edges:
  0 -> 1

Function: greaterThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa > right.mantissa

Edges:
  0 -> 1

Function: isZeroExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: value.mantissa == 0

Edges:
  0 -> 1

Function: safe224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 224,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint224(n)

Edges:
  0 -> 1
  1 -> 2

Function: safe32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 32,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint32(n)

Edges:
  0 -> 1
  1 -> 2

Function: add_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1

Function: mul_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1

Function: fraction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Double({mantissa:div_(mul_(a,doubleScale),b)})

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: expScale = 1e18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: doubleScale = 1e36

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: halfExpScale = expScale / 2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mantissaOne = expScale

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: InterestRateModel
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isInterestRateModel = true

Edges:


Contract: CTokenStorage
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: borrowRateMaxMantissa = 0.0005e16

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: reserveFactorMaxMantissa = 1e18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: protocolSeizeShareMantissa = 2.8e16

Edges:
  0 -> 1
  1 -> 2


Contract: CTokenInterface
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: borrowRateMaxMantissa = 0.0005e16

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: reserveFactorMaxMantissa = 1e18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: protocolSeizeShareMantissa = 2.8e16

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isCToken = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: CErc20Storage
==================================================


Contract: CErc20Interface
==================================================


Contract: CDelegationStorage
==================================================


Contract: CDelegatorInterface
==================================================


Contract: CDelegateInterface
==================================================


Contract: CToken
==================================================

Function: truncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: exp.mantissa / expScale

Edges:
  0 -> 1

Function: mul_ScalarTruncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: truncate(product)

Edges:
  0 -> 1
  1 -> 2

Function: mul_ScalarTruncateAddUInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: add_(truncate(product),addend)

Edges:
  0 -> 1
  1 -> 2

Function: lessThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa < right.mantissa

Edges:
  0 -> 1

Function: lessThanOrEqualExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa <= right.mantissa

Edges:
  0 -> 1

Function: greaterThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa > right.mantissa

Edges:
  0 -> 1

Function: isZeroExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: value.mantissa == 0

Edges:
  0 -> 1

Function: safe224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 224,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint224(n)

Edges:
  0 -> 1
  1 -> 2

Function: safe32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 32,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint32(n)

Edges:
  0 -> 1
  1 -> 2

Function: add_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1

Function: mul_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1

Function: fraction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Double({mantissa:div_(mul_(a,doubleScale),b)})

Edges:
  0 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,only admin may initialize the market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initialExchangeRateMantissa = initialExchangeRateMantissa_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(initialExchangeRateMantissa > 0,initial exchange rate must be greater than zero.)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: err = _setComptroller(comptroller_)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(err == NO_ERROR,setting comptroller failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: accrualBlockNumber = getBlockNumber()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: borrowIndex = mantissaOne

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: err = _setInterestRateModelFresh(interestRateModel_)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(err == NO_ERROR,setting interest rate model failed)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: name = name_

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: symbol = symbol_

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: decimals = decimals_

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _notEntered = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: transferTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.transferAllowed(address(this),src,dst,tokens)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert TransferComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: src == dst

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert TransferNotAllowed()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: startingAllowance = 0

  ID: 9
  Type: NodeType.IF
  Expression: spender == src

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: startingAllowance = type()(uint256).max

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: startingAllowance = transferAllowances[src][spender]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: allowanceNew = startingAllowance - tokens

  ID: 14
  Type: NodeType.VARIABLE
  Expression: srcTokensNew = accountTokens[src] - tokens

  ID: 15
  Type: NodeType.VARIABLE
  Expression: dstTokensNew = accountTokens[dst] + tokens

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: accountTokens[src] = srcTokensNew

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: accountTokens[dst] = dstTokensNew

  ID: 18
  Type: NodeType.IF
  Expression: startingAllowance != type()(uint256).max

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: transferAllowances[src][spender] = allowanceNew

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: Transfer(src,dst,tokens)

  ID: 22
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferTokens(msg.sender,msg.sender,dst,amount) == NO_ERROR

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferTokens(msg.sender,src,dst,amount) == NO_ERROR

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: src = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: transferAllowances[src][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(src,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferAllowances[owner][spender]

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: accountTokens[owner]

Edges:
  0 -> 1

Function: balanceOfUnderlying
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateCurrent()})

  ID: 2
  Type: NodeType.RETURN
  Expression: mul_ScalarTruncate(exchangeRate,accountTokens[owner])

Edges:
  0 -> 1
  1 -> 2

Function: getAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (NO_ERROR,accountTokens[account],borrowBalanceStoredInternal(account),exchangeRateStoredInternal())

Edges:
  0 -> 1

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: borrowRatePerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interestRateModel.getBorrowRate(getCashPrior(),totalBorrows,totalReserves)

Edges:
  0 -> 1

Function: supplyRatePerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interestRateModel.getSupplyRate(getCashPrior(),totalBorrows,totalReserves,reserveFactorMantissa)

Edges:
  0 -> 1

Function: totalBorrowsCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: totalBorrows

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowBalanceCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: borrowBalanceStored(account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowBalanceStored
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: borrowBalanceStoredInternal(account)

Edges:
  0 -> 1

Function: borrowBalanceStoredInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: borrowSnapshot = accountBorrows[account]

  ID: 2
  Type: NodeType.IF
  Expression: borrowSnapshot.principal == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: principalTimesIndex = borrowSnapshot.principal * borrowIndex

  ID: 6
  Type: NodeType.RETURN
  Expression: principalTimesIndex / borrowSnapshot.interestIndex

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6

Function: exchangeRateCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: exchangeRateStored()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: exchangeRateStored
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: exchangeRateStoredInternal()

Edges:
  0 -> 1

Function: exchangeRateStoredInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _totalSupply = totalSupply

  ID: 2
  Type: NodeType.IF
  Expression: _totalSupply == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: initialExchangeRateMantissa

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalCash = getCashPrior()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves

  ID: 6
  Type: NodeType.VARIABLE
  Expression: exchangeRate = cashPlusBorrowsMinusReserves * expScale / _totalSupply

  ID: 7
  Type: NodeType.RETURN
  Expression: exchangeRate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getCash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getCashPrior()

Edges:
  0 -> 1

Function: accrueInterest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentBlockNumber = getBlockNumber()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accrualBlockNumberPrior = accrualBlockNumber

  ID: 3
  Type: NodeType.IF
  Expression: accrualBlockNumberPrior == currentBlockNumber

  ID: 4
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: cashPrior = getCashPrior()

  ID: 7
  Type: NodeType.VARIABLE
  Expression: borrowsPrior = totalBorrows

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reservesPrior = totalReserves

  ID: 9
  Type: NodeType.VARIABLE
  Expression: borrowIndexPrior = borrowIndex

  ID: 10
  Type: NodeType.VARIABLE
  Expression: borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior,borrowsPrior,reservesPrior)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(borrowRateMantissa <= borrowRateMaxMantissa,borrow rate is absurdly high)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: blockDelta = currentBlockNumber - accrualBlockNumberPrior

  ID: 13
  Type: NodeType.VARIABLE
  Expression: simpleInterestFactor = mul_(Exp({mantissa:borrowRateMantissa}),blockDelta)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: interestAccumulated = mul_ScalarTruncate(simpleInterestFactor,borrowsPrior)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = interestAccumulated + borrowsPrior

  ID: 16
  Type: NodeType.VARIABLE
  Expression: totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa:reserveFactorMantissa}),interestAccumulated,reservesPrior)

  ID: 17
  Type: NodeType.VARIABLE
  Expression: borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor,borrowIndexPrior,borrowIndexPrior)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: accrualBlockNumber = currentBlockNumber

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: borrowIndex = borrowIndexNew

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: AccrueInterest(cashPrior,interestAccumulated,borrowIndexNew,totalBorrowsNew)

  ID: 23
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: mintInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mintFresh(msg.sender,mintAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _checkWhitelist(msg.sender)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: mintFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.mintAllowed(address(this),minter,mintAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert MintComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert MintFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 9
  Type: NodeType.VARIABLE
  Expression: actualMintAmount = doTransferIn(minter,mintAmount)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: mintTokens = div_(actualMintAmount,exchangeRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply + mintTokens

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: accountTokens[minter] = accountTokens[minter] + mintTokens

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Mint(minter,actualMintAmount,mintTokens)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(this),minter,mintTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: redeemInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: redeemFresh(address(msg.sender),redeemTokens,0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: redeemUnderlyingInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: redeemFresh(address(msg.sender),0,redeemAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: redeemFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(redeemTokensIn == 0 || redeemAmountIn == 0,one of redeemTokensIn or redeemAmountIn must be zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: redeemTokensIn > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: redeemTokens = redeemTokensIn

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: redeemAmount = mul_ScalarTruncate(exchangeRate,redeemTokensIn)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: redeemTokens = div_(redeemAmountIn,exchangeRate)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: redeemAmount = redeemAmountIn

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.redeemAllowed(address(this),redeemer,redeemTokens)

  ID: 12
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert RedeemComptrollerRejection(uint256)(allowed)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert RedeemFreshnessCheck()()

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: getCashPrior() < redeemAmount

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: revert RedeemTransferOutNotPossible()()

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply - redeemTokens

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(redeemer,redeemAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Transfer(redeemer,address(this),redeemTokens)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Redeem(redeemer,redeemAmount,redeemTokens)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: comptroller.redeemVerify(address(this),redeemer,redeemAmount,redeemTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: borrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: borrowFresh(address(msg.sender),borrowAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert BorrowComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert BorrowFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: getCashPrior() < borrowAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert BorrowCashNotAvailable()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: accountBorrowsPrev = borrowBalanceStoredInternal(borrower)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: accountBorrowsNew = accountBorrowsPrev + borrowAmount

  ID: 13
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = totalBorrows + borrowAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].principal = accountBorrowsNew

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].interestIndex = borrowIndex

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(borrower,borrowAmount)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Borrow(borrower,borrowAmount,accountBorrowsNew,totalBorrowsNew)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: repayBorrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: repayBorrowFresh(msg.sender,msg.sender,repayAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: repayBorrowBehalfInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: repayBorrowFresh(msg.sender,borrower,repayAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: repayBorrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert RepayBorrowComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert RepayBorrowFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: accountBorrowsPrev = borrowBalanceStoredInternal(borrower)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: actualRepayAmount = doTransferIn(payer,repayAmountFinal)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: accountBorrowsNew = accountBorrowsPrev - actualRepayAmount

  ID: 12
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = totalBorrows - actualRepayAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].principal = accountBorrowsNew

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].interestIndex = borrowIndex

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: RepayBorrow(payer,borrower,actualRepayAmount,accountBorrowsNew,totalBorrowsNew)

  ID: 17
  Type: NodeType.RETURN
  Expression: actualRepayAmount

  ID: 18
  Type: NodeType.IF
  Expression: repayAmount == type()(uint256).max

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: repayAmountFinal = accountBorrowsPrev

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: repayAmountFinal = repayAmount

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 18
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 10

Function: liquidateBorrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: error = cTokenCollateral.accrueInterest()

  ID: 3
  Type: NodeType.IF
  Expression: error != NO_ERROR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateAccrueCollateralInterestFailed(uint256)(error)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  7 -> 1

Function: liquidateBorrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: cTokenCollateral.accrualBlockNumber() != getBlockNumber()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCollateralFreshnessCheck()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: borrower == liquidator

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateLiquidatorIsBorrower()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: repayAmount == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCloseAmountIsZero()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: repayAmount == type()(uint256).max

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCloseAmountIsUintMax()()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: actualRepayAmount = repayBorrowFresh(liquidator,borrower,repayAmount)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: (amountSeizeError,seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this),address(cTokenCollateral),actualRepayAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountSeizeError == NO_ERROR,LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cTokenCollateral.balanceOf(borrower) >= seizeTokens,LIQUIDATE_SEIZE_TOO_MUCH)

  ID: 26
  Type: NodeType.IF
  Expression: address(cTokenCollateral) == address(this)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: seizeInternal(address(this),liquidator,borrower,seizeTokens)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cTokenCollateral.seize(liquidator,borrower,seizeTokens) == NO_ERROR,token seizure failed)

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 28
  27 -> 29
  28 -> 29
  29 -> 30

Function: seize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: seizeInternal(msg.sender,liquidator,borrower,seizeTokens)

  ID: 2
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: seizeInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateSeizeComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: borrower == liquidator

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateSeizeLiquidatorIsBorrower()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: protocolSeizeTokens = mul_(seizeTokens,Exp({mantissa:protocolSeizeShareMantissa}))

  ID: 9
  Type: NodeType.VARIABLE
  Expression: liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens

  ID: 10
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 11
  Type: NodeType.VARIABLE
  Expression: protocolSeizeAmount = mul_ScalarTruncate(exchangeRate,protocolSeizeTokens)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: totalReservesNew = totalReserves + protocolSeizeAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply - protocolSeizeTokens

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: accountTokens[borrower] = accountTokens[borrower] - seizeTokens

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Transfer(borrower,liquidator,liquidatorSeizeTokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Transfer(borrower,address(this),protocolSeizeTokens)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ReservesAdded(address(this),protocolSeizeAmount,totalReservesNew)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19

Function: _setPendingAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetPendingAdminOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldPendingAdmin = pendingAdmin

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = newPendingAdmin

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewPendingAdmin(oldPendingAdmin,newPendingAdmin)

  ID: 7
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _acceptAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != pendingAdmin || msg.sender == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AcceptAdminPendingAdminCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldAdmin = admin

  ID: 5
  Type: NodeType.VARIABLE
  Expression: oldPendingAdmin = pendingAdmin

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: admin = pendingAdmin

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = address(address(0))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: NewAdmin(oldAdmin,admin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: NewPendingAdmin(oldPendingAdmin,pendingAdmin)

  ID: 10
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _setComptroller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetComptrollerOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldComptroller = comptroller

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newComptroller.isComptroller(),marker method returned false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: comptroller = newComptroller

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: NewComptroller(oldComptroller,newComptroller)

  ID: 8
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _setReserveFactor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _setReserveFactorFresh(newReserveFactorMantissa)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setReserveFactorFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorAdminCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorFreshCheck()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: newReserveFactorMantissa > reserveFactorMaxMantissa

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorBoundsCheck()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldReserveFactorMantissa = reserveFactorMantissa

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: reserveFactorMantissa = newReserveFactorMantissa

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: NewReserveFactor(oldReserveFactorMantissa,newReserveFactorMantissa)

  ID: 13
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _addReservesInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addReservesFresh(addAmount)

  ID: 3
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _addReservesFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AddReservesFactorFreshCheck(uint256)(actualAddAmount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: actualAddAmount = doTransferIn(msg.sender,addAmount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalReservesNew = totalReserves + actualAddAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ReservesAdded(msg.sender,actualAddAmount,totalReservesNew)

  ID: 10
  Type: NodeType.RETURN
  Expression: (NO_ERROR,actualAddAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _reduceReserves
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _reduceReservesFresh(reduceAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetWhitelistAdminOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldWhitelist = whitelist

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newWhitelist.isWhitelistAccess(),marker method returned false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whitelist = newWhitelist

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: NewWhitelist(oldWhitelist,newWhitelist)

  ID: 8
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _reduceReservesFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesAdminCheck()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesFreshCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: getCashPrior() < reduceAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesCashNotAvailable()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: reduceAmount > totalReserves

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesCashValidation()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalReservesNew = totalReserves - reduceAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(admin,reduceAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ReservesReduced(admin,reduceAmount,totalReservesNew)

  ID: 18
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: _setInterestRateModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _setInterestRateModelFresh(newInterestRateModel)

Edges:
  0 -> 1
  1 -> 2

Function: _setInterestRateModelFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SetInterestRateModelOwnerCheck()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert SetInterestRateModelFreshCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: oldInterestRateModel = interestRateModel

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newInterestRateModel.isInterestRateModel(),marker method returned false)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: interestRateModel = newInterestRateModel

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: NewMarketInterestRateModel(oldInterestRateModel,newInterestRateModel)

  ID: 12
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: borrowRateMaxMantissa = 0.0005e16

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: reserveFactorMaxMantissa = 1e18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: protocolSeizeShareMantissa = 2.8e16

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isCToken = true

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: expScale = 1e18

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: doubleScale = 1e36

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: halfExpScale = expScale / 2

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mantissaOne = expScale

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_ERROR = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


Contract: CEther
==================================================

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,only admin may initialize the market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initialExchangeRateMantissa = initialExchangeRateMantissa_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(initialExchangeRateMantissa > 0,initial exchange rate must be greater than zero.)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: err = _setComptroller(comptroller_)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(err == NO_ERROR,setting comptroller failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: accrualBlockNumber = getBlockNumber()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: borrowIndex = mantissaOne

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: err = _setInterestRateModelFresh(interestRateModel_)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(err == NO_ERROR,setting interest rate model failed)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: name = name_

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: symbol = symbol_

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: decimals = decimals_

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _notEntered = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: transferTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.transferAllowed(address(this),src,dst,tokens)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert TransferComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: src == dst

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert TransferNotAllowed()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: startingAllowance = 0

  ID: 9
  Type: NodeType.IF
  Expression: spender == src

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: startingAllowance = type()(uint256).max

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: startingAllowance = transferAllowances[src][spender]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: allowanceNew = startingAllowance - tokens

  ID: 14
  Type: NodeType.VARIABLE
  Expression: srcTokensNew = accountTokens[src] - tokens

  ID: 15
  Type: NodeType.VARIABLE
  Expression: dstTokensNew = accountTokens[dst] + tokens

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: accountTokens[src] = srcTokensNew

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: accountTokens[dst] = dstTokensNew

  ID: 18
  Type: NodeType.IF
  Expression: startingAllowance != type()(uint256).max

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: transferAllowances[src][spender] = allowanceNew

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: Transfer(src,dst,tokens)

  ID: 22
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferTokens(msg.sender,msg.sender,dst,amount) == NO_ERROR

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferTokens(msg.sender,src,dst,amount) == NO_ERROR

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: src = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: transferAllowances[src][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(src,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferAllowances[owner][spender]

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: accountTokens[owner]

Edges:
  0 -> 1

Function: balanceOfUnderlying
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateCurrent()})

  ID: 2
  Type: NodeType.RETURN
  Expression: mul_ScalarTruncate(exchangeRate,accountTokens[owner])

Edges:
  0 -> 1
  1 -> 2

Function: getAccountSnapshot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (NO_ERROR,accountTokens[account],borrowBalanceStoredInternal(account),exchangeRateStoredInternal())

Edges:
  0 -> 1

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: borrowRatePerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interestRateModel.getBorrowRate(getCashPrior(),totalBorrows,totalReserves)

Edges:
  0 -> 1

Function: supplyRatePerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interestRateModel.getSupplyRate(getCashPrior(),totalBorrows,totalReserves,reserveFactorMantissa)

Edges:
  0 -> 1

Function: totalBorrowsCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: totalBorrows

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowBalanceCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: borrowBalanceStored(account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowBalanceStored
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: borrowBalanceStoredInternal(account)

Edges:
  0 -> 1

Function: borrowBalanceStoredInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: borrowSnapshot = accountBorrows[account]

  ID: 2
  Type: NodeType.IF
  Expression: borrowSnapshot.principal == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: principalTimesIndex = borrowSnapshot.principal * borrowIndex

  ID: 6
  Type: NodeType.RETURN
  Expression: principalTimesIndex / borrowSnapshot.interestIndex

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6

Function: exchangeRateCurrent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: exchangeRateStored()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: exchangeRateStored
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: exchangeRateStoredInternal()

Edges:
  0 -> 1

Function: exchangeRateStoredInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _totalSupply = totalSupply

  ID: 2
  Type: NodeType.IF
  Expression: _totalSupply == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: initialExchangeRateMantissa

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalCash = getCashPrior()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves

  ID: 6
  Type: NodeType.VARIABLE
  Expression: exchangeRate = cashPlusBorrowsMinusReserves * expScale / _totalSupply

  ID: 7
  Type: NodeType.RETURN
  Expression: exchangeRate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getCash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getCashPrior()

Edges:
  0 -> 1

Function: accrueInterest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentBlockNumber = getBlockNumber()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accrualBlockNumberPrior = accrualBlockNumber

  ID: 3
  Type: NodeType.IF
  Expression: accrualBlockNumberPrior == currentBlockNumber

  ID: 4
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: cashPrior = getCashPrior()

  ID: 7
  Type: NodeType.VARIABLE
  Expression: borrowsPrior = totalBorrows

  ID: 8
  Type: NodeType.VARIABLE
  Expression: reservesPrior = totalReserves

  ID: 9
  Type: NodeType.VARIABLE
  Expression: borrowIndexPrior = borrowIndex

  ID: 10
  Type: NodeType.VARIABLE
  Expression: borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior,borrowsPrior,reservesPrior)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(borrowRateMantissa <= borrowRateMaxMantissa,borrow rate is absurdly high)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: blockDelta = currentBlockNumber - accrualBlockNumberPrior

  ID: 13
  Type: NodeType.VARIABLE
  Expression: simpleInterestFactor = mul_(Exp({mantissa:borrowRateMantissa}),blockDelta)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: interestAccumulated = mul_ScalarTruncate(simpleInterestFactor,borrowsPrior)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = interestAccumulated + borrowsPrior

  ID: 16
  Type: NodeType.VARIABLE
  Expression: totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa:reserveFactorMantissa}),interestAccumulated,reservesPrior)

  ID: 17
  Type: NodeType.VARIABLE
  Expression: borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor,borrowIndexPrior,borrowIndexPrior)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: accrualBlockNumber = currentBlockNumber

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: borrowIndex = borrowIndexNew

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: AccrueInterest(cashPrior,interestAccumulated,borrowIndexNew,totalBorrowsNew)

  ID: 23
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: mintInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mintFresh(msg.sender,mintAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _checkWhitelist(msg.sender)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: mintFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.mintAllowed(address(this),minter,mintAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert MintComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert MintFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 9
  Type: NodeType.VARIABLE
  Expression: actualMintAmount = doTransferIn(minter,mintAmount)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: mintTokens = div_(actualMintAmount,exchangeRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply + mintTokens

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: accountTokens[minter] = accountTokens[minter] + mintTokens

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Mint(minter,actualMintAmount,mintTokens)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(this),minter,mintTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: redeemInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: redeemFresh(address(msg.sender),redeemTokens,0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: redeemUnderlyingInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: redeemFresh(address(msg.sender),0,redeemAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: redeemFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(redeemTokensIn == 0 || redeemAmountIn == 0,one of redeemTokensIn or redeemAmountIn must be zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: redeemTokensIn > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: redeemTokens = redeemTokensIn

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: redeemAmount = mul_ScalarTruncate(exchangeRate,redeemTokensIn)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: redeemTokens = div_(redeemAmountIn,exchangeRate)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: redeemAmount = redeemAmountIn

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.redeemAllowed(address(this),redeemer,redeemTokens)

  ID: 12
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert RedeemComptrollerRejection(uint256)(allowed)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert RedeemFreshnessCheck()()

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: getCashPrior() < redeemAmount

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: revert RedeemTransferOutNotPossible()()

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply - redeemTokens

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(redeemer,redeemAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Transfer(redeemer,address(this),redeemTokens)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Redeem(redeemer,redeemAmount,redeemTokens)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: comptroller.redeemVerify(address(this),redeemer,redeemAmount,redeemTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: borrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: borrowFresh(address(msg.sender),borrowAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: borrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert BorrowComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert BorrowFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: getCashPrior() < borrowAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert BorrowCashNotAvailable()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: accountBorrowsPrev = borrowBalanceStoredInternal(borrower)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: accountBorrowsNew = accountBorrowsPrev + borrowAmount

  ID: 13
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = totalBorrows + borrowAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].principal = accountBorrowsNew

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].interestIndex = borrowIndex

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(borrower,borrowAmount)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Borrow(borrower,borrowAmount,accountBorrowsNew,totalBorrowsNew)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: repayBorrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: repayBorrowFresh(msg.sender,msg.sender,repayAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: repayBorrowBehalfInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: repayBorrowFresh(msg.sender,borrower,repayAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: repayBorrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert RepayBorrowComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert RepayBorrowFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: accountBorrowsPrev = borrowBalanceStoredInternal(borrower)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: actualRepayAmount = doTransferIn(payer,repayAmountFinal)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: accountBorrowsNew = accountBorrowsPrev - actualRepayAmount

  ID: 12
  Type: NodeType.VARIABLE
  Expression: totalBorrowsNew = totalBorrows - actualRepayAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].principal = accountBorrowsNew

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: accountBorrows[borrower].interestIndex = borrowIndex

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalBorrows = totalBorrowsNew

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: RepayBorrow(payer,borrower,actualRepayAmount,accountBorrowsNew,totalBorrowsNew)

  ID: 17
  Type: NodeType.RETURN
  Expression: actualRepayAmount

  ID: 18
  Type: NodeType.IF
  Expression: repayAmount == type()(uint256).max

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: repayAmountFinal = accountBorrowsPrev

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: repayAmountFinal = repayAmount

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 18
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 10

Function: liquidateBorrowInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: error = cTokenCollateral.accrueInterest()

  ID: 3
  Type: NodeType.IF
  Expression: error != NO_ERROR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateAccrueCollateralInterestFailed(uint256)(error)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  7 -> 1

Function: liquidateBorrowFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateFreshnessCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: cTokenCollateral.accrualBlockNumber() != getBlockNumber()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCollateralFreshnessCheck()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: borrower == liquidator

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateLiquidatorIsBorrower()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: repayAmount == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCloseAmountIsZero()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: repayAmount == type()(uint256).max

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateCloseAmountIsUintMax()()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: actualRepayAmount = repayBorrowFresh(liquidator,borrower,repayAmount)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: (amountSeizeError,seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this),address(cTokenCollateral),actualRepayAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountSeizeError == NO_ERROR,LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cTokenCollateral.balanceOf(borrower) >= seizeTokens,LIQUIDATE_SEIZE_TOO_MUCH)

  ID: 26
  Type: NodeType.IF
  Expression: address(cTokenCollateral) == address(this)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: seizeInternal(address(this),liquidator,borrower,seizeTokens)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cTokenCollateral.seize(liquidator,borrower,seizeTokens) == NO_ERROR,token seizure failed)

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 28
  27 -> 29
  28 -> 29
  29 -> 30

Function: seize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: seizeInternal(msg.sender,liquidator,borrower,seizeTokens)

  ID: 2
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: seizeInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens)

  ID: 2
  Type: NodeType.IF
  Expression: allowed != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateSeizeComptrollerRejection(uint256)(allowed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: borrower == liquidator

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert LiquidateSeizeLiquidatorIsBorrower()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: protocolSeizeTokens = mul_(seizeTokens,Exp({mantissa:protocolSeizeShareMantissa}))

  ID: 9
  Type: NodeType.VARIABLE
  Expression: liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens

  ID: 10
  Type: NodeType.VARIABLE
  Expression: exchangeRate = Exp({mantissa:exchangeRateStoredInternal()})

  ID: 11
  Type: NodeType.VARIABLE
  Expression: protocolSeizeAmount = mul_ScalarTruncate(exchangeRate,protocolSeizeTokens)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: totalReservesNew = totalReserves + protocolSeizeAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply - protocolSeizeTokens

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: accountTokens[borrower] = accountTokens[borrower] - seizeTokens

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Transfer(borrower,liquidator,liquidatorSeizeTokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Transfer(borrower,address(this),protocolSeizeTokens)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ReservesAdded(address(this),protocolSeizeAmount,totalReservesNew)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19

Function: _setPendingAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetPendingAdminOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldPendingAdmin = pendingAdmin

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = newPendingAdmin

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewPendingAdmin(oldPendingAdmin,newPendingAdmin)

  ID: 7
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _acceptAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != pendingAdmin || msg.sender == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AcceptAdminPendingAdminCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldAdmin = admin

  ID: 5
  Type: NodeType.VARIABLE
  Expression: oldPendingAdmin = pendingAdmin

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: admin = pendingAdmin

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pendingAdmin = address(address(0))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: NewAdmin(oldAdmin,admin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: NewPendingAdmin(oldPendingAdmin,pendingAdmin)

  ID: 10
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _setComptroller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetComptrollerOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldComptroller = comptroller

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newComptroller.isComptroller(),marker method returned false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: comptroller = newComptroller

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: NewComptroller(oldComptroller,newComptroller)

  ID: 8
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _setReserveFactor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _setReserveFactorFresh(newReserveFactorMantissa)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setReserveFactorFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorAdminCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorFreshCheck()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: newReserveFactorMantissa > reserveFactorMaxMantissa

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SetReserveFactorBoundsCheck()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldReserveFactorMantissa = reserveFactorMantissa

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: reserveFactorMantissa = newReserveFactorMantissa

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: NewReserveFactor(oldReserveFactorMantissa,newReserveFactorMantissa)

  ID: 13
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _addReservesInternal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addReservesFresh(addAmount)

  ID: 3
  Type: NodeType.RETURN
  Expression: NO_ERROR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _addReservesFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AddReservesFactorFreshCheck(uint256)(actualAddAmount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: actualAddAmount = doTransferIn(msg.sender,addAmount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalReservesNew = totalReserves + actualAddAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ReservesAdded(msg.sender,actualAddAmount,totalReservesNew)

  ID: 10
  Type: NodeType.RETURN
  Expression: (NO_ERROR,actualAddAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _reduceReserves
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _reduceReservesFresh(reduceAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SetWhitelistAdminOwnerCheck()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldWhitelist = whitelist

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newWhitelist.isWhitelistAccess(),marker method returned false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whitelist = newWhitelist

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: NewWhitelist(oldWhitelist,newWhitelist)

  ID: 8
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _reduceReservesFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesAdminCheck()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesFreshCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: getCashPrior() < reduceAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesCashNotAvailable()()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: reduceAmount > totalReserves

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert ReduceReservesCashValidation()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalReservesNew = totalReserves - reduceAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalReserves = totalReservesNew

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: doTransferOut(admin,reduceAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ReservesReduced(admin,reduceAmount,totalReservesNew)

  ID: 18
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: _setInterestRateModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: accrueInterest()

  ID: 2
  Type: NodeType.RETURN
  Expression: _setInterestRateModelFresh(newInterestRateModel)

Edges:
  0 -> 1
  1 -> 2

Function: _setInterestRateModelFresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != admin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SetInterestRateModelOwnerCheck()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: accrualBlockNumber != getBlockNumber()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert SetInterestRateModelFreshCheck()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: oldInterestRateModel = interestRateModel

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newInterestRateModel.isInterestRateModel(),marker method returned false)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: interestRateModel = newInterestRateModel

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: NewMarketInterestRateModel(oldInterestRateModel,newInterestRateModel)

  ID: 12
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: truncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: exp.mantissa / expScale

Edges:
  0 -> 1

Function: mul_ScalarTruncate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: truncate(product)

Edges:
  0 -> 1
  1 -> 2

Function: mul_ScalarTruncateAddUInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: product = mul_(a,scalar)

  ID: 2
  Type: NodeType.RETURN
  Expression: add_(truncate(product),addend)

Edges:
  0 -> 1
  1 -> 2

Function: lessThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa < right.mantissa

Edges:
  0 -> 1

Function: lessThanOrEqualExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa <= right.mantissa

Edges:
  0 -> 1

Function: greaterThanExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: left.mantissa > right.mantissa

Edges:
  0 -> 1

Function: isZeroExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: value.mantissa == 0

Edges:
  0 -> 1

Function: safe224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 224,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint224(n)

Edges:
  0 -> 1
  1 -> 2

Function: safe32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(n < 2 ** 32,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint32(n)

Edges:
  0 -> 1
  1 -> 2

Function: add_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1

Function: mul_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div_
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1

Function: fraction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Double({mantissa:div_(mul_(a,doubleScale),b)})

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = address(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initialize(comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: admin = admin_

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintInternal(msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkWhitelist(msg.sender)

Edges:
  0 -> 2
  2 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: redeemInternal(redeemTokens)

  ID: 2
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2

Function: redeemUnderlying
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: redeemUnderlyingInternal(redeemAmount)

  ID: 2
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2

Function: borrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: borrowInternal(borrowAmount)

  ID: 2
  Type: NodeType.RETURN
  Expression: NO_ERROR

Edges:
  0 -> 1
  1 -> 2

Function: repayBorrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: repayBorrowInternal(msg.value)

Edges:
  0 -> 1

Function: repayBorrowBehalf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: repayBorrowBehalfInternal(borrower,msg.value)

Edges:
  0 -> 1

Function: liquidateBorrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: liquidateBorrowInternal(borrower,msg.value,cTokenCollateral)

Edges:
  0 -> 1

Function: _addReserves
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _addReservesInternal(msg.value)

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintInternal(msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _checkWhitelist(msg.sender)

Edges:
  0 -> 2
  2 -> 1

Function: getCashPrior
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance - msg.value

Edges:
  0 -> 1

Function: doTransferIn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == from,sender mismatch)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value == amount,value mismatch)

  ID: 3
  Type: NodeType.RETURN
  Expression: amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: doTransferOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: to.transfer(amount)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: borrowRateMaxMantissa = 0.0005e16

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: reserveFactorMaxMantissa = 1e18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: protocolSeizeShareMantissa = 2.8e16

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isCToken = true

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: expScale = 1e18

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: doubleScale = 1e36

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: halfExpScale = expScale / 2

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mantissaOne = expScale

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_ERROR = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


