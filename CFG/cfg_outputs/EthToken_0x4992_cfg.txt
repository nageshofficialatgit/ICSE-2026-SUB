Contract: ERC20
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = initialSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = initialSupply

Edges:
  0 -> 1
  1 -> 2

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[msg.sender] >= amount,ERC20: transfer amount exceeds balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,recipient,amount)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[sender] >= amount,ERC20: transfer amount exceeds balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][msg.sender] >= amount,ERC20: transfer amount exceeds allowance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Ethereum USDT

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = USDT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 6

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IEthToken
==================================================


Contract: EthToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = USDT

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = USDT

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: decimals = 6

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = 1_000_000_000 * 10 ** decimals

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),EthToken: transfer to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[msg.sender] >= amount,EthToken: transfer amount exceeds balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,recipient,amount)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),EtherToken: approve to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),EtherToken: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),EtherToken: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[sender] >= amount,EtherToken: transfer amount exceeds balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][msg.sender] >= amount,EtherToken: transfer amount exceeds allowance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: transferEthToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethTokenInstance.balanceOf(address(this)) >= amount,EtherToken: Insufficient USDT balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethTokenInstance.transfer(recipient,amount),EtherToken: USDT transfer failed)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: EthTokenBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ethTokenInstance.balanceOf(address(this))

Edges:
  0 -> 1

Function: enableMonetization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user != address(0),User cannot be the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: monetizationBalances[user] = monetizationBalances[user] + amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isMonetized[user] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MonetizationEnabled(user,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenAmount = amount * (10 ** uint256(decimals))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[msg.sender] >= tokenAmount,Not enough tokens available)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _balances[msg.sender] - tokenAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _balances[msg.sender] + tokenAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: BuyToken(msg.sender,tokenAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sellToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[msg.sender] >= amount,Insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _balances[msg.sender] - amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)] + amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SellToken(msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),Target address cannot be zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _balances[msg.sender] - amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Swap(msg.sender,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: changeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAdmin != address(0),EthToken: new admin is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = newAdmin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: mintMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipients.length == amounts.length,EthToken: Recipients and amounts must have the same length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < recipients.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipients[i] != address(0),EthToken: Mint to the zero address)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[recipients[i]] += amounts[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amounts[i]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Mint(recipients[i],amounts[i])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 11
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = USDT

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = USDT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 6

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EXPIRATION_TIME = 31536000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


