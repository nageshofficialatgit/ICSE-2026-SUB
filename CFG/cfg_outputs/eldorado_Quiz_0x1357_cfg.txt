Contract: eldorado_Quiz
==================================================

Function: Try
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == tx.origin)

  ID: 2
  Type: NodeType.IF
  Expression: responseHash == keccak256(bytes)(abi.encode(_response)) && msg.value > 1000000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(address(this).balance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: Start
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: responseHash == 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: responseHash = keccak256(bytes)(abi.encode(_response))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: question = _question

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isAdmin()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: Stop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: responseHash = 0x0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: New
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: question = _question

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: responseHash = _responseHash

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < admins.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: admin[admins[i]] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


