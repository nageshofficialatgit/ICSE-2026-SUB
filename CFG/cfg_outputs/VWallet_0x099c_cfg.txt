Contract: IERC20
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(to,value),SafeERC20: transfer failed)

Edges:
  0 -> 1


Contract: Address
==================================================

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: VWallet
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(beneficiaryAddress != address(0),VWallet: beneficiary is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeAddr != address(0),VWallet: fee address is zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _beneficiary = beneficiaryAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _start = startTimestamp

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _duration = durationSeconds

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _feeAddress = _feeAddr

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _feePercentage = _feePerc

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: beneficiary
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _beneficiary

Edges:
  0 -> 1

Function: start
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _start

Edges:
  0 -> 1

Function: duration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _duration

Edges:
  0 -> 1

Function: getFeeAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _feeAddress

Edges:
  0 -> 1

Function: getFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _feePercentage

Edges:
  0 -> 1

Function: released
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _erc20Released[token]

Edges:
  0 -> 1

Function: releasable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: vestedAmount(token,uint64(block.timestamp)) - _erc20Released[token]

Edges:
  0 -> 1

Function: release
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: releasableAmount = releasable(token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(releasableAmount > 0,VWallet: no tokens to release)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: feeAmount = (releasableAmount * _feePercentage) / 10000

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountAfterFee = releasableAmount - feeAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _erc20Released[token] += amountAfterFee

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).safeTransfer(_beneficiary,amountAfterFee)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).safeTransfer(_feeAddress,feeAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ERC20Released(token,amountAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: vestedAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: timestamp < _start

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.IF
  Expression: timestamp >= _start + _duration

  ID: 4
  Type: NodeType.RETURN
  Expression: IERC20(token).balanceOf(address(this)) + _erc20Released[token]

  ID: 5
  Type: NodeType.VARIABLE
  Expression: elapsedTime = timestamp - _start

  ID: 6
  Type: NodeType.VARIABLE
  Expression: totalBalance = IERC20(token).balanceOf(address(this)) + _erc20Released[token]

  ID: 7
  Type: NodeType.RETURN
  Expression: (totalBalance * elapsedTime) / _duration

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7


