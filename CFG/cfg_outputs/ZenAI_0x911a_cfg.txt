Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ERC20
==================================================


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

Edges:
  0 -> 1

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: ZenAI
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _owner = owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _TokenContractWallet = TokenContractWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[_owner] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[_TokenContractWallet] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[address(this)] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[_owner] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[_TokenContractWallet] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[address(this)] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[_owner] = _totalSupply

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_owner,_totalSupply)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: withdrawTokenContractBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance > 0,Token: no ETH to clear)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(address(this).balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: enableTokenContractTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! TradingOpen,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TradingOpen = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenContractFeeEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getTokenContractAmounts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: (sAmount,rAmount)

  ID: 4
  Type: NodeType.IF
  Expression: takeFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: sAmount = tAmount

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: TokenContractFeeEnabled && takeFee

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: rAmount = takeTokenContractAmountAfterFees(action,takeFee,tAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: rAmount = tAmount

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: TokenContractFeeEnabled

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: sAmount = takeTokenContractAmountAfterFees(action,takeFee,tAmount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: sAmount = tAmount

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 4
  4 -> 5
  4 -> 12
  5 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 11
  10 -> 11
  11 -> 3
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 7

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: internalSwapBackEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToSwap = min(amount,min(tokenBalance,_maxTaxSwap))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[1] = router.WETH()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: ethAmountFor = address(this).balance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(_TokenContractWallet).transfer(ethAmountFor)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: removeTokenContractLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxWalletAmount = _totalSupply

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: takeTokenContractAmountAfterFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: TokenContractFeePrDenominator = 100

  ID: 3
  Type: NodeType.IF
  Expression: TokenContractTakefee

  ID: 4
  Type: NodeType.IF
  Expression: TokenContractActions > 1

  ID: 6
  Type: NodeType.IF
  Expression: TokenContractActions > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = 0

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = 1

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: feeAmounts = amounts.mul(TokenContractPercents).div(TokenContractFeePrDenominator)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(feeAmounts)

  ID: 16
  Type: NodeType.RETURN
  Expression: amounts.sub(feeAmounts)

  ID: 17
  Type: NodeType.IF
  Expression: _buyCounts > _reduceSellTaxAt

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = _finalSellTax

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = _initSellTax

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: _buyCounts > _reduceBuyTaxAt

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = _finalBuyTax

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: TokenContractPercents = _initBuyTax

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: TokenContractTakefee

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: feeAmounts = feeAmounts

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: feeAmounts = amounts.div(TokenContractPercents)

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 17
  4 -> 6
  6 -> 21
  6 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 25
  17 -> 18
  17 -> 19
  18 -> 20
  19 -> 20
  20 -> 10
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 9
  25 -> 26
  25 -> 27
  26 -> 28
  27 -> 28
  28 -> 16

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _transferTaxTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (senderAmount,recipientAmount) = getTokenContractAmounts(action,takeFee,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(senderAmount,Insufficient Balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(recipientAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: createTokenContractTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pair = IUniswapV2Factory(router.factory()).createPair(address(this),router.WETH())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[pair] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = type()(uint256).max

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner,block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: inSwapTokenContractTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: minTokenContractTokens = pLimit

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenTokenContractWeight = pAmount

  ID: 3
  Type: NodeType.VARIABLE
  Expression: contractTokenContractOverWeight = balanceOf(address(this))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: isSwappable = contractTokenContractOverWeight > minTokenContractTokens && tokenTokenContractWeight > minTokenContractTokens

  ID: 5
  Type: NodeType.RETURN
  Expression: ! inSwap && isIncludeFees && isSwapActions > 1 && isSwappable && swapEnabled

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: reduceFinalBuyTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _finalBuyTax = _newFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: reduceFinalSellTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _finalSellTax = _newFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: isTokenContractUserBuy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: recipient != pair && recipient != DEAD && ! isFeeExempt[sender] && ! isFeeExempt[recipient]

Edges:
  0 -> 1

Function: isTakeTokenContractActions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _actions = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _isTakeFee = isTakeFees(from)

  ID: 3
  Type: NodeType.IF
  Expression: to == pair

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _actions = 2

  ID: 5
  Type: NodeType.IF
  Expression: from == pair

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _actions = 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _actions = 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: (_isTakeFee,_actions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 9
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: addTokenContracts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < TokenContracts_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokenContracts[TokenContracts_[i]] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: delTokenContracts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < notTokenContract.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokenContracts[notTokenContract[i]] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: isTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: TokenContracts[a]

Edges:
  0 -> 1

Function: _transferStandardTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! TokenContracts[sender] && ! TokenContracts[recipient])

  ID: 7
  Type: NodeType.IF
  Expression: inSwap

  ID: 8
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: ! isFeeExempt[sender] && ! isFeeExempt[recipient]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TradingOpen,Trading not open yet)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: ! swapEnabled

  ID: 14
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: isTokenContractUserBuy(sender,recipient)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletAmount,Transfer amount exceeds the bag size.)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: increaseBuyCount(sender)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: (takefee,actions) = isTakeTokenContractActions(sender,recipient)

  ID: 21
  Type: NodeType.IF
  Expression: inSwapTokenContractTokens(takefee,actions,amount,_swapTokenContractThreshHold)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: internalSwapBackEth(amount)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _transferTaxTokens(sender,recipient,amount,actions,takefee)

  ID: 25
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 19
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  22 -> 23
  23 -> 24
  24 -> 25

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transferStandardTokens(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transferStandardTokens(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: increaseBuyCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: sender == pair

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _buyCounts ++

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: isTakeFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ! isFeeExempt[sender]

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD = 0x000000000000000000000000000000000000dEaD

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 1_000_000_000 * (10 ** _decimals)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletAmount = (_totalSupply * 100) / 100

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapTokenContractThreshHold = (_totalSupply * 1) / 10000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTaxSwap = (_totalSupply * 10) / 10000

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TokenContractFeeEnabled = false

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TradingOpen = false

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initBuyTax = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initSellTax = 0

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 0

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 0

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCounts = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

Edges:


