Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: ERC20Basic
==================================================


Contract: ERC20
==================================================


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Crowdsale
==================================================

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock >= _startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = block.number

  ID: 2
  Type: NodeType.VARIABLE
  Expression: withinPeriod = current >= startBlock && current <= endBlock

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nonZeroPurchase = msg.value != 0

  ID: 4
  Type: NodeType.RETURN
  Expression: withinPeriod && nonZeroPurchase

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number > endBlock

Edges:
  0 -> 1


Contract: WhitelistedCrowdsale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock >= _startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.validPurchase() || (! hasEnded() && isWhitelisted(msg.sender))

Edges:
  0 -> 1

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number > endBlock

Edges:
  0 -> 1

Function: addToWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyer != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whitelist[buyer] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isWhitelisted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: whitelist[buyer]

Edges:
  0 -> 1


Contract: BasicToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1


Contract: ContinuousSale
==================================================

Function: ContinuousSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = _token

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: prepareContinuousPurchase()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = processPurchase(beneficiary)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: checkContinuousPurchase(tokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: prepareContinuousPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: timestamp = block.timestamp

  ID: 2
  Type: NodeType.VARIABLE
  Expression: bucket = timestamp - (timestamp % BUCKET_SIZE)

  ID: 3
  Type: NodeType.IF
  Expression: bucket > lastBucket

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lastBucket = bucket

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: bucketAmount = 0

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: checkContinuousPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: updatedBucketAmount = bucketAmount.add(tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(updatedBucketAmount <= issuance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bucketAmount = updatedBucketAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: processPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

  ID: 7
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastBucket = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: bucketAmount = 0

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BUCKET_SIZE = 43200

Edges:


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1


Contract: BurnableToken
==================================================

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: burner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[burner] = balances[burner].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Burn(msg.sender,_value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: PausableToken
==================================================

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: MANAContinuousSale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: ContinuousSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = _token

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: super.buyTokens(beneficiary)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenStarted()

Edges:
  0 -> 2
  2 -> 1

Function: prepareContinuousPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: timestamp = block.timestamp

  ID: 2
  Type: NodeType.VARIABLE
  Expression: bucket = timestamp - (timestamp % BUCKET_SIZE)

  ID: 3
  Type: NodeType.IF
  Expression: bucket > lastBucket

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lastBucket = bucket

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: bucketAmount = 0

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6

Function: checkContinuousPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: updatedBucketAmount = bucketAmount.add(tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(updatedBucketAmount <= issuance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bucketAmount = updatedBucketAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: processPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

  ID: 7
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: MANAContinuousSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ContinuousSale(_rate,_wallet,_token)

Edges:
  0 -> 1

Function: start
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! started)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: finalSupply = token.totalSupply()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: annualIssuance = finalSupply.mul(INFLATION).div(100)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: issuance = annualIssuance.mul(BUCKET_SIZE).div(220752000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: started = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: WalletChange(_wallet)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RateChange(_rate)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: unpauseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MANAToken(token).unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pauseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MANAToken(token).pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastBucket = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: bucketAmount = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: started = false

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BUCKET_SIZE = 43200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INFLATION = 8

Edges:
  0 -> 1


Contract: FinalizableCrowdsale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock >= _startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = block.number

  ID: 2
  Type: NodeType.VARIABLE
  Expression: withinPeriod = current >= startBlock && current <= endBlock

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nonZeroPurchase = msg.value != 0

  ID: 4
  Type: NodeType.RETURN
  Expression: withinPeriod && nonZeroPurchase

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number > endBlock

Edges:
  0 -> 1

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(hasEnded())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: finalization()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isFinalized = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: finalization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.finishMinting()

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFinalized = false

Edges:


Contract: MintableToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

Edges:


Contract: MANAToken
==================================================

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: super.burn(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = MANA

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Decentraland MANA

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2


Contract: CappedCrowdsale
==================================================

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock >= _startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(weiAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: withinCap = weiRaised.add(msg.value) <= cap

  ID: 2
  Type: NodeType.RETURN
  Expression: super.validPurchase() && withinCap

Edges:
  0 -> 1
  1 -> 2

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: capReached = weiRaised >= cap

  ID: 2
  Type: NodeType.RETURN
  Expression: super.hasEnded() || capReached

Edges:
  0 -> 1
  1 -> 2

Function: CappedCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cap > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cap = _cap

Edges:
  0 -> 1
  1 -> 2


Contract: MANACrowdsale
==================================================

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(hasEnded())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: finalization()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isFinalized = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: finalization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalSupply = token.totalSupply()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: finalSupply = TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token.mint(wallet,FOUNDATION_SHARE.mul(finalSupply).div(TOTAL_SHARE))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock >= _startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rate > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = _rate

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MANAToken()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: weiAmount = msg.value

  ID: 4
  Type: NodeType.VARIABLE
  Expression: updatedWeiRaised = weiRaised.add(weiAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: rate = getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokens = weiAmount.mul(rate)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: weiRaised = updatedWeiRaised

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: forwardFunds()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(msg.value)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.validPurchase() || (! hasEnded() && isWhitelisted(msg.sender))

Edges:
  0 -> 1

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: capReached = weiRaised >= cap

  ID: 2
  Type: NodeType.RETURN
  Expression: super.hasEnded() || capReached

Edges:
  0 -> 1
  1 -> 2

Function: CappedCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cap > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cap = _cap

Edges:
  0 -> 1
  1 -> 2

Function: addToWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyer != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whitelist[buyer] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isWhitelisted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: whitelist[buyer]

Edges:
  0 -> 1

Function: MANACrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initialRate = 12083

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: endRate = 7250

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: preferentialRate = 12083

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: continuousSale = createContinuousSaleContract()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MANAToken(token).pause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: CappedCrowdsale(86206000000000000000000)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: WhitelistedCrowdsale()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: FinalizableCrowdsale()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Crowdsale(4170650,4170680,12083,0x000fb8369677b3065de5821a86bc9551d5e5eab9)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 1

Function: createContinuousSaleContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MANAContinuousSale(rate,wallet,token)

Edges:
  0 -> 1

Function: setBuyerRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(rate != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isWhitelisted(buyer))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.number < startBlock)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: buyerRate[buyer] = rate

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: PreferentialRateChange(buyer,rate)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setInitialRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(rate != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.number < startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initialRate = rate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: InitialRateChange(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setEndRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(rate != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.number < startBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: endRate = rate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: EndRateChange(rate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: buyerRate[msg.sender] != 0

  ID: 2
  Type: NodeType.RETURN
  Expression: buyerRate[msg.sender]

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isWhitelisted(msg.sender)

  ID: 5
  Type: NodeType.RETURN
  Expression: preferentialRate

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: elapsed = block.number - startBlock

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rateRange = initialRate - endRate

  ID: 9
  Type: NodeType.VARIABLE
  Expression: blockRange = endBlock - startBlock

  ID: 10
  Type: NodeType.RETURN
  Expression: initialRate.sub(rateRange.mul(elapsed).div(blockRange))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: setWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: continuousSale.setWallet(_wallet)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: WalletChange(_wallet)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: unpauseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MANAToken(token).unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pauseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MANAToken(token).pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: beginContinuousSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.transferOwnership(continuousSale)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: continuousSale.start()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: continuousSale.transferOwnership(owner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFinalized = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOTAL_SHARE = 100

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CROWDSALE_SHARE = 40

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FOUNDATION_SHARE = 60

Edges:
  0 -> 1
  1 -> 2


