Contract: SafeMath
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: Address
==================================================

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressInsufficientBalance(address)(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 6
  Type: NodeType.IF
  Expression: ! success

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FailedInnerCall()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressInsufficientBalance(address)(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 7
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! success

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata)

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length == 0 && target.code.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AddressEmptyCode(address)(target)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: returndata

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! success

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata)

  ID: 3
  Type: NodeType.RETURN
  Expression: returndata

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FailedInnerCall()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transferFrom,(from,to,value)))

Edges:
  0 -> 1

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,oldAllowance + value)

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < requestedDecrease

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedDecreaseAllowance(address,uint256,uint256)(spender,currentAllowance,requestedDecrease)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,currentAllowance - requestedDecrease)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: forceApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeCall(token.approve,(spender,value))

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.approve,(spender,0)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length != 0 && ! abi.decode(returndata,(bool))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENTERED = 2

Edges:
  0 -> 1


Contract: AggregatorV3Interface
==================================================


Contract: Presale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: currentStage = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startTimeSale = _startTime

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleEnded = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stages.push(Stage(604800,0.001 * 10 ** 18,0,10000 * 10 ** 18))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stages.push(Stage(604800,0.0025 * 10 ** 18,0,25000 * 10 ** 18))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: stages.push(Stage(604800,0.005 * 10 ** 18,0,50000 * 10 ** 18))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stages.push(Stage(604800,0.0075 * 10 ** 18,0,75000 * 10 ** 18))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: minBuy = 200e18

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: buyTokensWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= startTimeSale,Presale has not started yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= startTimeSale + current.duration,Presale has ended)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Amount must be greater than zero)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ethAmount = msg.value

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = getTokenAmountETH(ethAmount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount >= minBuy,Minimum Token)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: current.tokenSold = current.tokenSold.add(amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].totalPurchased = users[msg.sender].totalPurchased.add(amount)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (ethTransferSuccess,None) = address(owner()).call{value: ethAmount}()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethTransferSuccess,ETH transfer failed)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,amount,ethAmount,ETH)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 1

Function: buyTokensWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= startTimeSale,Presale has not started yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= startTimeSale + current.duration,Presale has ended)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtAmount > 0,Amount must be greater than zero)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amount = getTokenAmountUSDT(usdtAmount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokenAmount = amount.mul(1e18).div(1e6)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Amount must be greater than zero)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount >= minBuy,Minimum Token)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: current.tokenSold = current.tokenSold.add(tokenAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].totalPurchased = users[msg.sender].totalPurchased.add(tokenAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: usdtToken.safeTransferFrom(msg.sender,owner(),usdtAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,tokenAmount,usdtAmount,USDT)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: buyTokensWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= startTimeSale,Presale has not started yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= startTimeSale + current.duration,Presale has ended)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcAmount > 0,Amount must be greater than zero)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amount = getTokenAmountUSDC(usdcAmount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokenAmount = amount.mul(1e18).div(1e6)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Amount must be greater than zero)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount >= minBuy,Minimum Token)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: current.tokenSold = current.tokenSold.add(tokenAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].totalPurchased = users[msg.sender].totalPurchased.add(tokenAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: usdcToken.safeTransferFrom(msg.sender,owner(),usdcAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,tokenAmount,usdcAmount,USDC)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(saleEnded,Sale has not ended yet)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: user = users[msg.sender]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: claimableAmount = user.totalPurchased

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(claimableAmount > 0,No tokens to claim)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: user.totalClaimed = user.totalClaimed.add(claimableAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: user.totalPurchased = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(msg.sender,claimableAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TokensClaimed(msg.sender,claimableAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: getTokenAmountETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lastETHPriceByUSD = getLatestPriceETHPerUSD()

  ID: 2
  Type: NodeType.RETURN
  Expression: amountETH.mul(lastETHPriceByUSD).div(getPriceInUSD())

Edges:
  0 -> 1
  1 -> 2

Function: getTokenAmountUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lastUSDTPriceByUSD = getLatestPriceUSDTPerUSD()

  ID: 2
  Type: NodeType.RETURN
  Expression: amountUSDT.mul(lastUSDTPriceByUSD).div(getPriceInUSD())

Edges:
  0 -> 1
  1 -> 2

Function: getTokenAmountUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lastUSDCPriceByUSD = getLatestPriceUSDCPerUSD()

  ID: 2
  Type: NodeType.RETURN
  Expression: amountUSDC.mul(lastUSDCPriceByUSD).div(getPriceInUSD())

Edges:
  0 -> 1
  1 -> 2

Function: getLatestPriceETHPerUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeedETH.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: price = (price * (10 ** 10))

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getLatestPriceUSDTPerUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeedUSDT.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: price = (price * (10 ** 10))

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getLatestPriceUSDCPerUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeedUSDC.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: price = (price * (10 ** 10))

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getPriceInUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.RETURN
  Expression: current.tokenPrice

Edges:
  0 -> 1
  1 -> 2

Function: endSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! saleEnded,Sale already ended)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: saleEnded = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setTokenPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newPrice > 0,Token price must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current.tokenPrice = _newPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = getCurrentStage()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_duration > 0,Duration rate must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current.duration = _duration

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getCurrentStageRaisedUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = stages[currentStage]

  ID: 2
  Type: NodeType.RETURN
  Expression: current.tokenSold.mul(current.tokenPrice).div(10 ** 18)

Edges:
  0 -> 1
  1 -> 2

Function: getCurrentStageTokenSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: current = stages[currentStage]

  ID: 2
  Type: NodeType.RETURN
  Expression: current.tokenSold

Edges:
  0 -> 1
  1 -> 2

Function: getTotalUSDRaised
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalUSDRaised = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < stages.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: stageUSD = stages[i].tokenPrice

  ID: 7
  Type: NodeType.VARIABLE
  Expression: stageTokensSold = stages[i].tokenSold

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalUSDRaised = totalUSDRaised.add(stageUSD.mul(stageTokensSold).div(1e18))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: totalUSDRaised

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5

Function: getTotalSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalSold = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < stages.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: stageTokensSold = stages[i].tokenSold

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalSold = totalSold.add(stageTokensSold)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: totalSold

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 9
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 5

Function: getCurrentStageEndTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: startTimeSale + stages[currentStage].duration

Edges:
  0 -> 1

Function: setStartTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startTimeSale = _startTime

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMinBuy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_minBuy > 0,Minimum Token buy amount must be greater than zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minBuy = _minBuy

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setNextStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentStage < stages.length,No more stage available)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: currentStage = _newstage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: startTimeSale = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: UpdatedStage(msg.sender,currentStage)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getCurrentStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentStage < stages.length,No more stage available)

  ID: 2
  Type: NodeType.RETURN
  Expression: stages[currentStage]

Edges:
  0 -> 1
  1 -> 2

Function: withdrawUnsoldTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No tokens to recover)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner(),balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token = IERC20(0x343f0145b4682bb4F8ba52A9Ddd2aB6BE9E105EC)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: usdtToken = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: usdcToken = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: priceFeedETH = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: priceFeedUSDT = AggregatorV3Interface(0x3E7d1eAB13ad0104d2750B8863b489D65364e32D)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: priceFeedUSDC = AggregatorV3Interface(0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


