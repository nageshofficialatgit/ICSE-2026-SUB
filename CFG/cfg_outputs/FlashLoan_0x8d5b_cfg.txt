Contract: IERC20
==================================================


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: startOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferStarted(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: notOwner(newOwner)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: completeOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == pendingOwner,Ownable: only the pending owner can complete the transfer)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,owner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: hasPendingOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: cancelOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hasPendingOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(admin != address(0),Ownable: invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isAdmin[admin],Ownable: address is already an admin)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAdmin[admin] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AdminAdded(admin)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: removeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAdmin[admin],Ownable: address is not an admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isAdmin[admin] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AdminRemoved(admin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: addAuditor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(auditor != address(0),Ownable: invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isAuditor[auditor],Ownable: address is already an auditor)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAuditor[auditor] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AuditorAdded(auditor)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: removeAuditor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAuditor[auditor],Ownable: address is not an auditor)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isAuditor[auditor] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuditorRemoved(auditor)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pendingOwner == address(0),Ownable: cannot renounce ownership while transfer is pending)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousOwner = owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(previousOwner,address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: IUniswapV2Router02
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: FlashLoan
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: liquidityPool = _liquidityPool

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV2Router02(_uniswapRouter)

Edges:
  0 -> 1
  1 -> 2

Function: startOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferStarted(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: notOwner(newOwner)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: completeOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == pendingOwner,Ownable: only the pending owner can complete the transfer)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,owner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: hasPendingOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: cancelOwnershipTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hasPendingOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(admin != address(0),Ownable: invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isAdmin[admin],Ownable: address is already an admin)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAdmin[admin] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AdminAdded(admin)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: removeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAdmin[admin],Ownable: address is not an admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isAdmin[admin] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AdminRemoved(admin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: addAuditor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(auditor != address(0),Ownable: invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isAuditor[auditor],Ownable: address is already an auditor)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isAuditor[auditor] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AuditorAdded(auditor)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: removeAuditor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAuditor[auditor],Ownable: address is not an auditor)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isAuditor[auditor] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuditorRemoved(auditor)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pendingOwner == address(0),Ownable: cannot renounce ownership while transfer is pending)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousOwner = owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(previousOwner,address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setLiquidityPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: liquidityPool = _liquidityPool

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setLoanFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: loanFeePercentage = _fee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LoanFeeChanged(_fee)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: approvedTokens[token] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TokenApproved(token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: approvedTokens[token] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TokenRemoved(token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: multiTokenFlashLoan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens.length == amounts.length,Tokens and amounts length mismatch)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(approvedTokens[tokens[i]],Token not approved)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amounts[i] <= maxLoanAmount,Loan exceeds max limit)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amounts[i] > 0,Invalid loan amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokens[i]).transfer(msg.sender,amounts[i])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalFee += (amounts[i] * loanFeePercentage) / 100

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: loanBalances[msg.sender] += amounts[i]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: LoanTaken(msg.sender,amounts[i],tokens[i])

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: borrowFromUniswapIfNeeded(tokens,amounts)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: repayLoan(tokens,amounts,totalFee)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 17
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 15
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 6
  15 -> 16
  17 -> 1

Function: borrowFromUniswapIfNeeded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 5
  Type: NodeType.IF
  Expression: IERC20(tokens[i]).balanceOf(address(this)) < amounts[i]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokens[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapRouter.WETH()

  ID: 8
  Type: NodeType.VARIABLE
  Expression: amountIn = amounts[i] - IERC20(tokens[i]).balanceOf(address(this))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(path.length == 2,Path should have two elements)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokens[i]).approve(address(uniswapRouter),amountIn)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForETH(amountIn,0,path,address(this),block.timestamp)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 12
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 4

Function: repayLoan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: repaymentAmount = amounts[i] + ((amounts[i] * loanFeePercentage) / 100)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: feePaid += (amounts[i] * loanFeePercentage) / 100

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokens[i]).transferFrom(msg.sender,address(this),repaymentAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: LoanRepaid(msg.sender,repaymentAmount,tokens[i],feePaid)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 5

Function: checkLoanRepayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalAmount = amount + ((amount * loanFeePercentage) / 100)

  ID: 2
  Type: NodeType.RETURN
  Expression: IERC20(token).balanceOf(borrower) >= totalAmount

Edges:
  0 -> 1
  1 -> 2

Function: withdrawFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).transfer(owner,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: loanFeePercentage = 3

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxLoanAmount = 51000000 * 10 ** 10

Edges:
  0 -> 1


