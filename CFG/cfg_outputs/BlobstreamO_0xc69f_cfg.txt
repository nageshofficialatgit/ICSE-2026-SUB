Contract: ECDSA
==================================================

Function: tryRecover
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0

  ID: 2
  Type: NodeType.RETURN
  Expression: (address(0),RecoverError.InvalidSignatureS,s)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

  ID: 5
  Type: NodeType.IF
  Expression: signer == address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: (address(0),RecoverError.InvalidSignature,bytes32(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (signer,RecoverError.NoError,bytes32(0))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: recover
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (recovered,error,errorArg) = tryRecover(hash,v,r,s)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _throwError(error,errorArg)

  ID: 6
  Type: NodeType.RETURN
  Expression: recovered

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _throwError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: error == RecoverError.NoError

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignature

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignature()()

  ID: 5
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignatureLength

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignatureLength(uint256)(uint256(errorArg))

  ID: 7
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignatureS

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignatureS(bytes32)(errorArg)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: toEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x00,Ethereum Signed Message:
32)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x1c,messageHash)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: digest = keccak256(uint256,uint256)(0x00,0x3c)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: digest

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: BlobstreamO
==================================================

Function: tryRecover
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0

  ID: 2
  Type: NodeType.RETURN
  Expression: (address(0),RecoverError.InvalidSignatureS,s)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

  ID: 5
  Type: NodeType.IF
  Expression: signer == address(0)

  ID: 6
  Type: NodeType.RETURN
  Expression: (address(0),RecoverError.InvalidSignature,bytes32(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (signer,RecoverError.NoError,bytes32(0))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: recover
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (recovered,error,errorArg) = tryRecover(hash,v,r,s)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _throwError(error,errorArg)

  ID: 6
  Type: NodeType.RETURN
  Expression: recovered

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _throwError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: error == RecoverError.NoError

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignature

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignature()()

  ID: 5
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignatureLength

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignatureLength(uint256)(uint256(errorArg))

  ID: 7
  Type: NodeType.IF
  Expression: error == RecoverError.InvalidSignatureS

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ECDSAInvalidSignatureS(bytes32)(errorArg)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: toEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x00,Ethereum Signed Message:
32)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x1c,messageHash)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: digest = keccak256(uint256,uint256)(0x00,0x3c)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: digest

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: guardian = _guardian

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: deployer = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != deployer

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotDeployer()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: initialized

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AlreadyInitialized()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: initialized = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: powerThreshold = _powerThreshold

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: validatorTimestamp = _validatorTimestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: unbondingPeriod = _unbondingPeriod

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: lastValidatorSetCheckpoint = _validatorSetCheckpoint

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: guardianResetValidatorSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != guardian

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NotGuardian()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: block.timestamp - (validatorTimestamp / MS_PER_SECOND) < unbondingPeriod

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ValidatorSetNotStale()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _validatorTimestamp <= validatorTimestamp

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ValidatorTimestampMustIncrease()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: powerThreshold = _powerThreshold

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: validatorTimestamp = _validatorTimestamp

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: lastValidatorSetCheckpoint = _validatorSetCheckpoint

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: GuardianResetValidatorSet(_powerThreshold,_validatorTimestamp,_validatorSetCheckpoint)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: updateValidatorSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _currentValidatorSet.length != _sigs.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert MalformedCurrentValidatorSet()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _newValidatorTimestamp < validatorTimestamp

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ValidatorTimestampMustIncrease()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _newPowerThreshold == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPowerThreshold()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: _currentValidatorSetHash = keccak256(bytes)(abi.encode(_currentValidatorSet))

  ID: 11
  Type: NodeType.IF
  Expression: _domainSeparateValidatorSetHash(powerThreshold,validatorTimestamp,_currentValidatorSetHash) != lastValidatorSetCheckpoint

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert SuppliedValidatorSetInvalid()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: _newCheckpoint = _domainSeparateValidatorSetHash(_newPowerThreshold,_newValidatorTimestamp,_newValidatorSetHash)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _checkValidatorSignatures(_currentValidatorSet,_sigs,_newCheckpoint,powerThreshold)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: lastValidatorSetCheckpoint = _newCheckpoint

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: powerThreshold = _newPowerThreshold

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: validatorTimestamp = _newValidatorTimestamp

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ValidatorSetUpdated(_newPowerThreshold,_newValidatorTimestamp,_newValidatorSetHash)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19

Function: verifyOracleData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _currentValidatorSet.length != _sigs.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert MalformedCurrentValidatorSet()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _domainSeparateValidatorSetHash(powerThreshold,validatorTimestamp,keccak256(bytes)(abi.encode(_currentValidatorSet))) != lastValidatorSetCheckpoint

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SuppliedValidatorSetInvalid()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _dataDigest = keccak256(bytes)(abi.encode(NEW_REPORT_ATTESTATION_DOMAIN_SEPARATOR,_attestData.queryId,_attestData.report.value,_attestData.report.timestamp,_attestData.report.aggregatePower,_attestData.report.previousTimestamp,_attestData.report.nextTimestamp,lastValidatorSetCheckpoint,_attestData.attestationTimestamp,_attestData.report.lastConsensusTimestamp))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _checkValidatorSignatures(_currentValidatorSet,_sigs,_dataDigest,powerThreshold)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: _checkValidatorSignatures
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: block.timestamp - (validatorTimestamp / MS_PER_SECOND) > unbondingPeriod

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert StaleValidatorSet()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _cumulativePower = 0

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: _i < _currentValidators.length

  ID: 9
  Type: NodeType.IF
  Expression: _sigs[_i].r == 0 && _sigs[_i].s == 0 && _sigs[_i].v == 0

  ID: 10
  Type: NodeType.CONTINUE
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: ! _verifySig(_currentValidators[_i].addr,_digest,_sigs[_i])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert InvalidSignature()()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _cumulativePower += _currentValidators[_i].power

  ID: 16
  Type: NodeType.IF
  Expression: _cumulativePower >= _powerThreshold

  ID: 17
  Type: NodeType.BREAK
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _i ++

  ID: 20
  Type: NodeType.IF
  Expression: _cumulativePower < _powerThreshold

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientVotingPower()()

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 20
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 19
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 6
  18 -> 19
  19 -> 8
  20 -> 21
  20 -> 22
  21 -> 22

Function: _domainSeparateValidatorSetHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(VALIDATOR_SET_HASH_DOMAIN_SEPARATOR,_powerThreshold,_validatorTimestamp,_validatorSetHash))

Edges:
  0 -> 1

Function: _verifySig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _digest = sha256(bytes)(abi.encodePacked(_digest))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (_recovered,error,None) = tryRecover(_digest,_sig.v,_sig.r,_sig.s)

  ID: 5
  Type: NodeType.IF
  Expression: error != RecoverError.NoError

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidSignature()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: _signer == _recovered

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MS_PER_SECOND = 1000

Edges:


