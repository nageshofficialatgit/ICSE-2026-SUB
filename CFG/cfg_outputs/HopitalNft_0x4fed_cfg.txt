Contract: IERC165
==================================================


Contract: IERC721
==================================================


Contract: IERC721Metadata
==================================================


Contract: IERC721Receiver
==================================================


Contract: IERC20Errors
==================================================


Contract: IERC721Errors
==================================================


Contract: IERC1155Errors
==================================================


Contract: ERC721Utils
==================================================

Function: checkOnERC721Received
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length > 0

  ID: 2
  Type: NodeType.TRY
  Expression: retval = IERC721Receiver(to).onERC721Received(operator,from,tokenId,data)

  ID: 3
  Type: NodeType.CATCH
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: retval != IERC721Receiver.onERC721Received.selector

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC721Errors.ERC721InvalidReceiver(to)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.CATCH
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: reason.length == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IERC721Errors.ERC721InvalidReceiver(to)

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + reason,mload(uint256)(reason))

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 14
  2 -> 3
  2 -> 7
  2 -> 14
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 14
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 13
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Panic
==================================================

Function: panic
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x00,0x4e487b71)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x20,code)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0x1c,0x24)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GENERIC = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ASSERT = 0x01

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNDER_OVERFLOW = 0x11

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DIVISION_BY_ZERO = 0x12

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENUM_CONVERSION_ERROR = 0x21

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STORAGE_ENCODING_ERROR = 0x22

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EMPTY_ARRAY_POP = 0x31

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ARRAY_OUT_OF_BOUNDS = 0x32

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RESOURCE_ERROR = 0x41

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INVALID_INTERNAL_FUNCTION = 0x51

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


Contract: SafeCast
==================================================

Function: toUint248
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint248).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(248,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint248(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint240
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint240).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(240,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint240(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint232
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint232).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(232,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint232(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint224).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(224,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint224(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint216
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint216).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(216,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint216(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint208
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint208).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(208,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint208(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint200
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint200).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(200,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint200(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint192
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint192).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(192,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint192(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint184
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint184).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(184,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint184(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint176
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint176).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(176,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint176(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint168
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint168).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(168,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint168(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint160
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint160).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(160,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint160(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint152
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint152).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(152,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint152(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint144
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint144).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(144,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint144(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint136
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint136).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(136,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint136(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint128
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint128).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(128,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint128(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint120
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint120).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(120,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint120(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint112
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint112).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(112,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint112(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint104
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint104).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(104,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint104(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint96
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint96).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(96,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint96(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint88
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint88).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(88,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint88(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint80
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint80).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(80,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint80(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint72
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint72).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(72,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint72(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint64).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(64,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint64(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint56
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint56).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(56,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint56(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint48
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint48).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(48,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint40
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint40).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(40,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint40(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint32).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(32,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint32(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint24
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint24).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(24,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint24(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint16
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint16).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(16,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint16(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint8
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint8).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(8,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint8(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value < 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntToUint(int256)(value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toInt248
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int248(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(248,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt240
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int240(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(240,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt232
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int232(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(232,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int224(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(224,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt216
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int216(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(216,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt208
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int208(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(208,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt200
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int200(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(200,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt192
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int192(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(192,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt184
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int184(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(184,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt176
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int176(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(176,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt168
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int168(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(168,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt160
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int160(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(160,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt152
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int152(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(152,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt144
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int144(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(144,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt136
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int136(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(136,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt128
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int128(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(128,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt120
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int120(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(120,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt112
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int112(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(112,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt104
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int104(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(104,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt96
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int96(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(96,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt88
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int88(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(88,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt80
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int80(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(80,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt72
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int72(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(72,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int64(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(64,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt56
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int56(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(56,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt48
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int48(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(48,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt40
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int40(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(40,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int32(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(32,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt24
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int24(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(24,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt16
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int16(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(16,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt8
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int8(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(8,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > uint256(type()(int256).max)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintToInt(uint256)(value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: int256(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: u = ! ! b

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: u

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Math
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

  ID: 6
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

  ID: 9
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: ternary
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: b ^ ((a ^ b) * SafeCast.toUint(condition))

Edges:
  0 -> 1

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ternary(a > b,a,b)

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ternary(a < b,a,b)

Edges:
  0 -> 1

Function: average
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (a & b) + (a ^ b) / 2

Edges:
  0 -> 1

Function: ceilDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Panic.panic(Panic.DIVISION_BY_ZERO)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: SafeCast.toUint(a > 0) * ((a - 1) / b + 1)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: mulDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mulDiv(x,y,denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(uint256,uint256,uint256)(x,y,denominator) > 0)

Edges:
  0 -> 1

Function: invMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: n == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: remainder = a % n

  ID: 5
  Type: NodeType.VARIABLE
  Expression: gcd = n

  ID: 6
  Type: NodeType.VARIABLE
  Expression: x = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: y = 1

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.IFLOOP
  Expression: remainder != 0

  ID: 10
  Type: NodeType.VARIABLE
  Expression: quotient = gcd / remainder

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (gcd,remainder) = (remainder,gcd - remainder * quotient)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (x,y) = (y,x - y * int256(quotient))

  ID: 13
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: gcd != 1

  ID: 15
  Type: NodeType.RETURN
  Expression: 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: ternary(x < 0,n - uint256(- x),uint256(x))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 13
  10 -> 11
  11 -> 12
  12 -> 9
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17

Function: invModPrime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Math.modExp(a,p - 2,p)

Edges:
  0 -> 1

Function: modExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,result) = tryModExp(b,e,m)

  ID: 4
  Type: NodeType.IF
  Expression: ! success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Panic.panic(Panic.DIVISION_BY_ZERO)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: tryModExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _zeroBytes(m)

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,new bytes(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: mLen = m.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: result = abi.encodePacked(b.length,e.length,mLen,b,e,m)

  ID: 6
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: dataPtr_tryModExp_asm_0 = result + 0x20

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: success = staticcall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),0x05,dataPtr_tryModExp_asm_0,mload(uint256)(result),dataPtr_tryModExp_asm_0,mLen)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(result,mLen)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x40,dataPtr_tryModExp_asm_0 + mLen)

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: (success,result)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _zeroBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < byteArray.length

  ID: 5
  Type: NodeType.IF
  Expression: byteArray[i] != 0

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 9
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 3
  1 -> 4
  2 -> 9
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 4

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = sqrt(a)

  ID: 2
  Type: NodeType.RETURN
  Expression: result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a)

Edges:
  0 -> 1
  1 -> 2

Function: log2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log2(value)

  ID: 2
  Type: NodeType.RETURN
  Expression: result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value)

Edges:
  0 -> 1
  1 -> 2

Function: log10
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log10(value)

  ID: 2
  Type: NodeType.RETURN
  Expression: result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value)

Edges:
  0 -> 1
  1 -> 2

Function: log256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log256(value)

  ID: 2
  Type: NodeType.RETURN
  Expression: result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value)

Edges:
  0 -> 1
  1 -> 2

Function: unsignedRoundsUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint8(rounding) % 2 == 1

Edges:
  0 -> 1


Contract: SignedMath
==================================================

Function: ternary
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: b ^ ((a ^ b) * int256(SafeCast.toUint(condition)))

Edges:
  0 -> 1

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ternary(a > b,a,b)

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ternary(a < b,a,b)

Edges:
  0 -> 1

Function: average
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: x = (a & b) + ((a ^ b) >> 1)

  ID: 2
  Type: NodeType.RETURN
  Expression: x + (int256(uint256(x) >> 255) & (a ^ b))

Edges:
  0 -> 1
  1 -> 2

Function: abs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mask = n >> 255

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256((n + mask) ^ mask)

Edges:
  0 -> 1
  1 -> 2


Contract: Strings
==================================================

Function: toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = Math.log10(value) + 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: buffer = new string(length)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ptr = buffer + 32 + length

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.IFLOOP
  Expression: true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptr --

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: mstore8(uint256,uint256)(ptr,byte(uint256,uint256)(value % 10,HEX_DIGITS))

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: value /= 10

  ID: 14
  Type: NodeType.IF
  Expression: value == 0

  ID: 15
  Type: NodeType.BREAK
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: buffer

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 17
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 8
  17 -> 18

Function: toStringSigned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: value < 0

  ID: 3
  Type: NodeType.RETURN
  Expression: string.concat(-,toString(SignedMath.abs(value)))

  ID: 4
  Type: NodeType.RETURN
  Expression: string.concat(,toString(SignedMath.abs(value)))

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: toHexString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: toHexString(uint256(uint160(addr)),ADDRESS_LENGTH)

Edges:
  0 -> 1

Function: toChecksumHexString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = bytes(toHexString(addr))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: hashValue = keccak256(uint256,uint256)(buffer + 0x22,40) >> 96

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 41

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i > 1

  ID: 10
  Type: NodeType.IF
  Expression: hashValue & 0xf > 7 && uint8(buffer[i]) > 96

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: buffer[i] ^= 0x20

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: hashValue >>= 4

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 15
  Type: NodeType.RETURN
  Expression: string(buffer)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 15
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 9

Function: equal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes(a).length == bytes(b).length && keccak256(bytes)(bytes(a)) == keccak256(bytes)(bytes(b))

Edges:
  0 -> 1

Function: parseUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,value) = tryParseUint(input,begin,end)

  ID: 4
  Type: NodeType.IF
  Expression: ! success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert StringsInvalidChar()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: tryParseUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: end > bytes(input).length || begin > end

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _tryParseUintUncheckedBounds(input,begin,end)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _tryParseUintUncheckedBounds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = bytes(input)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: result = 0

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = begin

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < end

  ID: 7
  Type: NodeType.VARIABLE
  Expression: chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer,i)))

  ID: 8
  Type: NodeType.IF
  Expression: chr > 9

  ID: 9
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: result *= 10

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: result += chr

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 14
  Type: NodeType.RETURN
  Expression: (true,result)

  ID: 15
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: parseInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,value) = tryParseInt(input,begin,end)

  ID: 4
  Type: NodeType.IF
  Expression: ! success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert StringsInvalidChar()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: tryParseInt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: end > bytes(input).length || begin > end

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _tryParseIntUncheckedBounds(input,begin,end)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _tryParseIntUncheckedBounds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = bytes(input)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: positiveSign = sign == bytes1(+)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: negativeSign = sign == bytes1(-)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: offset = (positiveSign || negativeSign).toUint()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (absSuccess,absValue) = tryParseUint(input,begin + offset,end)

  ID: 9
  Type: NodeType.IF
  Expression: absSuccess && absValue < ABS_MIN_INT256

  ID: 11
  Type: NodeType.IF
  Expression: absSuccess && negativeSign && absValue == ABS_MIN_INT256

  ID: 12
  Type: NodeType.RETURN
  Expression: (true,type()(int256).min)

  ID: 13
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 16
  Type: NodeType.IF
  Expression: begin == end

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: sign = bytes1(0)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: sign = bytes1(_unsafeReadBytesOffset(buffer,begin))

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: negativeSign

  ID: 21
  Type: NodeType.RETURN
  Expression: (true,- int256(absValue))

  ID: 22
  Type: NodeType.RETURN
  Expression: (true,int256(absValue))

  ID: 24
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 16
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 20
  9 -> 11
  11 -> 12
  11 -> 13
  16 -> 17
  16 -> 18
  17 -> 19
  18 -> 19
  19 -> 3
  20 -> 21
  20 -> 22

Function: parseHexUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,value) = tryParseHexUint(input,begin,end)

  ID: 4
  Type: NodeType.IF
  Expression: ! success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert StringsInvalidChar()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: tryParseHexUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: end > bytes(input).length || begin > end

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _tryParseHexUintUncheckedBounds(input,begin,end)

  ID: 5
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _tryParseHexUintUncheckedBounds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = bytes(input)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer,begin)) == bytes2(0x)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: offset = hasPrefix.toUint() * 2

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = 0

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = begin + offset

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < end

  ID: 9
  Type: NodeType.VARIABLE
  Expression: chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer,i)))

  ID: 10
  Type: NodeType.IF
  Expression: chr > 15

  ID: 11
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result *= 16

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: result += chr

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 16
  Type: NodeType.RETURN
  Expression: (true,result)

  ID: 17
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 16
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 8

Function: parseAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,value) = tryParseAddress(input,begin,end)

  ID: 4
  Type: NodeType.IF
  Expression: ! success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert StringsInvalidAddressFormat()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: tryParseAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: end > bytes(input).length || begin > end

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input),begin)) == bytes2(0x)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: expectedLength = 40 + hasPrefix.toUint() * 2

  ID: 6
  Type: NodeType.IF
  Expression: end - begin == expectedLength

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (s,v) = _tryParseHexUintUncheckedBounds(input,begin,end)

  ID: 10
  Type: NodeType.RETURN
  Expression: (s,address(uint160(v)))

  ID: 11
  Type: NodeType.RETURN
  Expression: (false,address(0))

  ID: 13
  Type: NodeType.RETURN
  Expression: (success,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 11
  7 -> 8
  8 -> 9
  9 -> 10

Function: _tryParseChr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: value = uint8(chr)

  ID: 2
  Type: NodeType.IF
  Expression: value > 47 && value < 58

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: value -= 48

  ID: 4
  Type: NodeType.IF
  Expression: value > 96 && value < 103

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: value -= 87

  ID: 6
  Type: NodeType.IF
  Expression: value > 64 && value < 71

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: value -= 55

  ID: 8
  Type: NodeType.RETURN
  Expression: type()(uint8).max

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  5 -> 10
  6 -> 7
  6 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: _unsafeReadBytesOffset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: value = mload(uint256)(buffer + 0x20 + offset)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: HEX_DIGITS = 0123456789abcdef

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADDRESS_LENGTH = 20

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ABS_MIN_INT256 = 2 ** 255

Edges:
  0 -> 1
  1 -> 2


Contract: ERC165
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: ERC721
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC721).interfaceId || interfaceId == type()(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _balances[owner]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _requireOwned(tokenId)

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: tokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: baseURI = _baseURI()

  ID: 4
  Type: NodeType.IF
  Expression: bytes(baseURI).length > 0

  ID: 5
  Type: NodeType.RETURN
  Expression: string.concat(baseURI,tokenId.toString())

  ID: 6
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  4 -> 5
  4 -> 6

Function: _baseURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(to,tokenId,_msgSender())

Edges:
  0 -> 1

Function: getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.RETURN
  Expression: _getApproved(tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setApprovalForAll(_msgSender(),operator,approved)

Edges:
  0 -> 1

Function: isApprovedForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _operatorApprovals[owner][operator]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,_msgSender())

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferFrom(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owners[tokenId]

Edges:
  0 -> 1

Function: _getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenApprovals[tokenId]

Edges:
  0 -> 1

Function: _isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: spender != address(0) && (owner == spender || isApprovedForAll(owner,spender) || _getApproved(tokenId) == spender)

Edges:
  0 -> 1

Function: _checkAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isAuthorized(owner,spender,tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InsufficientApproval(address,uint256)(spender,tokenId)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _increaseBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += value

Edges:
  0 -> 1

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: from = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: auth != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkAuthorized(from,auth,tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(address(0),tokenId,address(0),false)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += 1

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _owners[tokenId] = to

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,tokenId)

  ID: 14
  Type: NodeType.RETURN
  Expression: from

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidSender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _safeMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),address(0),to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(address(0),tokenId,address(0))

  ID: 2
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: _safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: emitEvent || auth != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: owner = _requireOwned(tokenId)

  ID: 3
  Type: NodeType.IF
  Expression: auth != address(0) && owner != auth && ! isApprovedForAll(owner,auth)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidApprover(address)(auth)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: emitEvent

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,to,tokenId)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tokenApprovals[tokenId] = to

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: operator == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOperator(address)(operator)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _operatorApprovals[owner][operator] = approved

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ApprovalForAll(owner,operator,approved)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _requireOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5


Contract: IERC4906
==================================================


Contract: ERC721URIStorage
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _balances[owner]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _requireOwned(tokenId)

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: tokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _tokenURI = _tokenURIs[tokenId]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: base = _baseURI()

  ID: 4
  Type: NodeType.IF
  Expression: bytes(base).length == 0

  ID: 5
  Type: NodeType.RETURN
  Expression: _tokenURI

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: bytes(_tokenURI).length > 0

  ID: 8
  Type: NodeType.RETURN
  Expression: string.concat(base,_tokenURI)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: super.tokenURI(tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10

Function: _baseURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(to,tokenId,_msgSender())

Edges:
  0 -> 1

Function: getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.RETURN
  Expression: _getApproved(tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setApprovalForAll(_msgSender(),operator,approved)

Edges:
  0 -> 1

Function: isApprovedForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _operatorApprovals[owner][operator]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,_msgSender())

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferFrom(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owners[tokenId]

Edges:
  0 -> 1

Function: _getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenApprovals[tokenId]

Edges:
  0 -> 1

Function: _isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: spender != address(0) && (owner == spender || isApprovedForAll(owner,spender) || _getApproved(tokenId) == spender)

Edges:
  0 -> 1

Function: _checkAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isAuthorized(owner,spender,tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InsufficientApproval(address,uint256)(spender,tokenId)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _increaseBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += value

Edges:
  0 -> 1

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: from = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: auth != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkAuthorized(from,auth,tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(address(0),tokenId,address(0),false)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += 1

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _owners[tokenId] = to

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,tokenId)

  ID: 14
  Type: NodeType.RETURN
  Expression: from

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidSender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _safeMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),address(0),to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(address(0),tokenId,address(0))

  ID: 2
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: _safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: emitEvent || auth != address(0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: owner = _requireOwned(tokenId)

  ID: 3
  Type: NodeType.IF
  Expression: auth != address(0) && owner != auth && ! isApprovedForAll(owner,auth)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidApprover(address)(auth)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: emitEvent

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,to,tokenId)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tokenApprovals[tokenId] = to

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10

Function: _setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: operator == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOperator(address)(operator)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _operatorApprovals[owner][operator] = approved

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ApprovalForAll(owner,operator,approved)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _requireOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _setTokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokenURIs[tokenId] = _tokenURI

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MetadataUpdate(tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ERC4906_INTERFACE_ID = bytes4(0x49064906)

Edges:


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: IERC1363
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transferFrom,(from,to,value)))

Edges:
  0 -> 1

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,oldAllowance + value)

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < requestedDecrease

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedDecreaseAllowance(address,uint256,uint256)(spender,currentAllowance,requestedDecrease)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,currentAllowance - requestedDecrease)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: forceApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeCall(token.approve,(spender,value))

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.approve,(spender,0)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: transferAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: transferFromAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransferFrom(token,from,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferFromAndCall(from,to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: approveAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.approveAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success__callOptionalReturn_asm_0 = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.IF
  Expression: ! success__callOptionalReturn_asm_0

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptr__callOptionalReturn_asm_0 = mload(uint256)(0x40)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(ptr__callOptionalReturn_asm_0,0,returndatasize()())

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr__callOptionalReturn_asm_0,returndatasize()())

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: address(token).code.length == 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: returnValue != 1

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  6 -> 7
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 7
  12 -> 13
  13 -> 14
  14 -> 18
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 16
  21 -> 17

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: success && address(token).code.length > 0

  ID: 12
  Type: NodeType.RETURN
  Expression: success && returnValue == 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  10 -> 11
  10 -> 12


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: HopitalNft
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MTT = IERC20(0x960692640AC4986fFCe41620b7E3aA03cf1A0e8F)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x827957054fb53B1FAFE6265Da3c5DC1a56AA9A7c] = 1

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x870A239EEC6D48453CC5E1838bA0a17922D97b4b] = 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xfcfA14caD4CCd775Ca8Bb7B240F9cf58E3278b70] = 1

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x85eC2535Dd8E499614F972366b6869063cBB2465] = 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xB967B745acB72a7f1641dE6b9e21E726b6097094] = 1

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xea3e78F13ddEFE682bb311b6fBB6a730d81f59b1] = 2

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xc0B6665f1576e488c53B796bbC777B925E14ce5e] = 1

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x671A0671bC46Fa42076623d68056A88dA14634dB] = 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x4F5997Ea8A4dE051B238cce39e987F6285142A06] = 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xE0D9A3878ec53378e2F73749470e076E53DEAe6d] = 1

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xD3db33d26A6877FB1CF5d6b9059801dcBE511115] = 1

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x8A2F6D67c82e037C5d16c325710E59b145c9a3E7] = 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xe24964685147D4917002C39EEB5559e66dD0EC74] = 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xd539c69620e022c9aa14D847d1Bf0c0cd7DD57be] = 1

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x1d2030bc685674848f3F87c28a9e61426FbF7Ccf] = 1

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xd61D27Cea9542Da5bbcA804418D1A02C9a37bb11] = 1

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x150a4EfFF4dFD17ff08B4F3429C721dDb8824D19] = 1

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xc73557b655fe9920Ed804F00C38326352aa25681] = 1

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xF93a871d04b580E2bDf281330A3A6CF2e1Dfd18C] = 1

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x38F7b6005C91A18630EbA0159C1cd385d2b4c0BD] = 1

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x58A52aCdd3d64A0A7F74734D89b9D8353bA6ee16] = 1

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x1cfb4d74FcB9D21a6cF7304F91003B695BF2CC08] = 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x22a732124C583C1512B0F38C03999D8805a70fbf] = 1

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x7d722aA6E431bad84594EeD6643690fAd10612E5] = 1

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xcdcFc0C744161Ab1254f8B242BFa70Fa5ee6Af6c] = 1

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xbfB88dd442a9394f56Ca7824275BC54C35c08658] = 1

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x5182251583364794eFD9Fd1922a70d3b87869EB0] = 1

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xc09d3f5f9B76bda16324abD131047B1f485bD7d3] = 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xfB13bD46432de234f12832CAFb9b5639a8d6501A] = 1

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x115153c20E8cb050363B9e81554ebd14EA1D8B51] = 1

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xFAe70C4169D8F5f6B87d938602704bA2fA94ddCe] = 1

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x830745671ce69daFb438E746a10c33ABec871dB2] = 2

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x795a8Af674fC2F5d91905Fb7B6363707eC257627] = 2

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xF5d98924D062541b79495D1FD5D294dFf514BDB4] = 2

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x85F45E57874e079A4c766AE97cA2C89De55B4ab8] = 4

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x7E4726588E25279dd415043edC9a91F406370DA5] = 1

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0xCF2703ACC0937EEc169C805FaF61d7A41cAaF22c] = 1

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x2899B9BAE02b37d373E11C18D9415859F7e9042D] = 1

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x2Cc699Af88cb11b28160bB6FBC39Eb9D4A6f3c46] = 1

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x7Aa7B4E10CFb2340734c57c00C0080ee7Bc9162f] = 1

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[0x7BCE2cC4712Cab5782Ce3C27cd7e937A83F1a773] = 1

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: ERC721(Hospital Support NFT,HSNFT)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: Ownable(0x0Ed3D9563Cd4BcB1666113748Ce6Ffd70b888ae8)

Edges:
  0 -> 44
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  44 -> 45
  45 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: tokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: baseURI = _baseURI()

  ID: 4
  Type: NodeType.IF
  Expression: bytes(baseURI).length > 0

  ID: 5
  Type: NodeType.RETURN
  Expression: string.concat(baseURI,tokenId.toString())

  ID: 6
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  4 -> 5
  4 -> 6

Function: _setTokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokenURIs[tokenId] = _tokenURI

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MetadataUpdate(tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _balances[owner]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _requireOwned(tokenId)

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: _baseURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(to,tokenId,_msgSender())

Edges:
  0 -> 1

Function: getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _requireOwned(tokenId)

  ID: 2
  Type: NodeType.RETURN
  Expression: _getApproved(tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setApprovalForAll(_msgSender(),operator,approved)

Edges:
  0 -> 1

Function: isApprovedForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _operatorApprovals[owner][operator]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,_msgSender())

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferFrom(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owners[tokenId]

Edges:
  0 -> 1

Function: _getApproved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenApprovals[tokenId]

Edges:
  0 -> 1

Function: _isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: spender != address(0) && (owner == spender || isApprovedForAll(owner,spender) || _getApproved(tokenId) == spender)

Edges:
  0 -> 1

Function: _checkAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _isAuthorized(owner,spender,tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InsufficientApproval(address,uint256)(spender,tokenId)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _increaseBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += value

Edges:
  0 -> 1

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: from = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: auth != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _checkAuthorized(from,auth,tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: from != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(address(0),tokenId,address(0),false)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += 1

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _owners[tokenId] = to

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,tokenId)

  ID: 14
  Type: NodeType.RETURN
  Expression: from

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner != address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidSender(address)(address(0))

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _safeMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mint(to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),address(0),to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(address(0),tokenId,address(0))

  ID: 2
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: previousOwner = _update(to,tokenId,address(0))

  ID: 5
  Type: NodeType.IF
  Expression: previousOwner == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: previousOwner != from

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ERC721IncorrectOwner(address,uint256,address)(from,tokenId,previousOwner)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: _safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ERC721Utils.checkOnERC721Received(_msgSender(),from,to,tokenId,data)

Edges:
  0 -> 1
  1 -> 2

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(false,Transfers are disabled)

Edges:
  0 -> 1

Function: _setApprovalForAll
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: operator == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC721InvalidOperator(address)(operator)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _operatorApprovals[owner][operator] = approved

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ApprovalForAll(owner,operator,approved)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _requireOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: owner = _ownerOf(tokenId)

  ID: 2
  Type: NodeType.IF
  Expression: owner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ERC721NonexistentToken(uint256)(tokenId)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: mintWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mintWithToken(USDT,USDT_MINT_FEE,tokenURI)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyWhitelisted()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyMintable(whitelistedCanMinted[msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: mintWithMTT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mintWithToken(MTT,MTT_MINT_FEE,tokenURI)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyWhitelisted()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyMintable(whitelistedCanMinted[msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: _mintWithToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = whitelistedCanMinted[msg.sender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalFee = mintFee * amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.allowance(msg.sender,address(this)) >= totalFee,Insufficient allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(msg.sender) >= totalFee,Insufficient balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token.safeTransferFrom(msg.sender,owner(),totalFee)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _mintNFT(msg.sender,tokenURI)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 9

Function: _mintNFT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalMinted ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[msg.sender] --

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _mint(to,totalMinted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _setTokenURI(totalMinted,tokenURI)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Minted(to,totalMinted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addToWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(number >= 1,Number must be at least 1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whitelistedCanMinted[user] = number

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: WhitelistUpdated(user,number)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: removeFromWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete whitelistedCanMinted[user]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WhitelistUpdated(user,0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setMTT_MINT_FEE
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MTT_MINT_FEE = mintFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUSDT_MINT_FEE
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDT_MINT_FEE = mintFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: MAX_SUPPLY

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT_MINT_FEE = 1100 * 10 ** 6

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MTT_MINT_FEE = 17180 * 10 ** 18

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_SUPPLY = 48

Edges:


