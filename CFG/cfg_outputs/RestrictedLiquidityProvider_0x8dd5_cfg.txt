Contract: IRestrictedLiquidityProvider
==================================================


Contract: IPausablePair
==================================================


Contract: IRestrictedPair
==================================================


Contract: IPausableFactory
==================================================


Contract: IRestrictedFactory
==================================================


Contract: IGovernance
==================================================


Contract: TransferHelper
==================================================

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: APPROVE_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: TRANSFER_FROM_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransferETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = to.call{value: value}(new bytes(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TransferHelper: ETH_TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: IWETH
==================================================


Contract: IConfigStore
==================================================


Contract: RestrictedLiquidityProvider
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: factory = _factory

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = _WETH

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: govToken = IGovernance(IRestrictedFactory(_factory).governance()).govToken()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: configStore = IRestrictedFactory(_factory).configStore()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == WETH,Transfer failed)

Edges:
  0 -> 1

Function: _getPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pairLen = IRestrictedFactory(factory).pairLength(tokenA,tokenB)

  ID: 2
  Type: NodeType.IF
  Expression: pairIndex == 0 && pairLen == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pair = IRestrictedFactory(factory).createPair(tokenA,tokenB)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pairIndex <= pairLen,Invalid pair index)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: pair = pairFor(tokenA,tokenB,pairIndex)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: pair

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _checkOrder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (None,None,_allowAll,None,None,_restrictedPrice,_startDate,_expire) = IRestrictedPair(pair).offers(direction,offerIndex)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowAll == _allowAll && restrictedPrice == _restrictedPrice && startDate == _startDate && expire == _expire,Order params not match)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pair = _getPair(tokenA,tokenB,pairIndex)

  ID: 3
  Type: NodeType.IF
  Expression: offerIndex == 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: feeIn = uint256(IConfigStore(configStore).customParam(FEE_PER_ORDER))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(govToken,msg.sender,pair,feeIn)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: offerIndex = IRestrictedPair(pair).createOrder(msg.sender,direction,allowAll,restrictedPrice,startDate,expire)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _checkOrder(pair,direction,offerIndex,allowAll,restrictedPrice,startDate,expire)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: amountIn > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).addLiquidity(direction,offerIndex)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _offerIndex = offerIndex

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 15
  Type: NodeType.IF
  Expression: (tokenA < tokenB)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: direction = ! addingTokenA

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: direction = addingTokenA

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: addingTokenA

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(tokenA,msg.sender,pair,amountIn)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(tokenB,msg.sender,pair,amountIn)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.RETURN
  Expression: (pair,_offerIndex)

Edges:
  0 -> 14
  1 -> 15
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 19
  9 -> 12
  11 -> 12
  12 -> 13
  13 -> 23
  14 -> 1
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 3
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 11

Function: addLiquidityETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pair = _getPair(tokenA,WETH,pairIndex)

  ID: 3
  Type: NodeType.IF
  Expression: offerIndex == 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: feeIn = uint256(IConfigStore(configStore).customParam(FEE_PER_ORDER))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(govToken,msg.sender,pair,feeIn)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: offerIndex = IRestrictedPair(pair).createOrder(msg.sender,direction,allowAll,restrictedPrice,startDate,expire)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _checkOrder(pair,direction,offerIndex,allowAll,restrictedPrice,startDate,expire)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: addingTokenA

  ID: 10
  Type: NodeType.IF
  Expression: amountAIn > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(tokenA,msg.sender,pair,amountAIn)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: ETHIn = msg.value

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH).deposit{value: ETHIn}()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IWETH(WETH).transfer(pair,ETHIn),Transfer failed)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: amountAIn > 0 || msg.value > 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).addLiquidity(direction,offerIndex)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _offerIndex = offerIndex

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 22
  Type: NodeType.IF
  Expression: (tokenA < WETH)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: direction = ! addingTokenA

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: direction = addingTokenA

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.RETURN
  Expression: (pair,_offerIndex)

Edges:
  0 -> 21
  1 -> 22
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 13
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 16
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 26
  21 -> 1
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 3

Function: _addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (pair,offerIndex) = addLiquidity(tokenA,tokenB,addingTokenA,param[3],param[4],param[5],param[6] == 1,param[7],param[8],param[9],param[10])

  ID: 2
  Type: NodeType.RETURN
  Expression: (pair,offerIndex)

Edges:
  0 -> 1
  1 -> 2

Function: addLiquidityAndTrader
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(param.length == 11,Invalid param length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenA = address(bytes20(bytes32(param[0] << 96)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokenB = address(bytes20(bytes32(param[1] << 96)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: b = param[2] == 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (pair,offerIndex) = _addLiquidity(tokenA,tokenB,b,param)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: feePerTrader = uint256(IConfigStore(configStore).customParam(FEE_PER_TRADER))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(govToken,msg.sender,pair,feePerTrader.mul(trader.length))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).setMultipleApprovedTraders(b,offerIndex,trader,allocation)

  ID: 10
  Type: NodeType.IF
  Expression: (tokenA < tokenB)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: b = ! b

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: b = b

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.RETURN
  Expression: (pair,offerIndex)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 10
  7 -> 8
  8 -> 9
  9 -> 14
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 7

Function: _addLiquidityETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (pair,offerIndex) = addLiquidityETH(tokenA,addingTokenA,param[2],param[3],param[4],param[5] == 1,param[6],param[7],param[8],param[9])

  ID: 2
  Type: NodeType.RETURN
  Expression: (pair,offerIndex)

Edges:
  0 -> 1
  1 -> 2

Function: addLiquidityETHAndTrader
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(param.length == 10,Invalid param length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenA = address(bytes20(bytes32(param[0] << 96)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: b = param[1] == 1

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (pair,offerIndex) = _addLiquidityETH(tokenA,b,param)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: feePerTrader = uint256(IConfigStore(configStore).customParam(FEE_PER_TRADER))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(govToken,msg.sender,pair,feePerTrader.mul(trader.length))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).setMultipleApprovedTraders(b,offerIndex,trader,allocation)

  ID: 9
  Type: NodeType.IF
  Expression: (tokenA < WETH)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: b = ! b

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: b = b

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: (pair,offerIndex)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 9
  6 -> 7
  7 -> 8
  8 -> 13
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 6

Function: removeLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = pairFor(tokenA,tokenB,pairIndex)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).removeLiquidity(msg.sender,direction,offerIndex,amountOut,receivingOut)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: tokenAOut > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenA,to,tokenAOut)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: tokenBOut > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenB,to,tokenBOut)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 14
  Type: NodeType.IF
  Expression: (tokenA < tokenB)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: direction = ! removingTokenA

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: direction = removingTokenA

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: removingTokenA

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: (tokenAOut,tokenBOut) = (amountOut,receivingOut)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: (tokenAOut,tokenBOut) = (receivingOut,amountOut)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 13
  1 -> 14
  3 -> 4
  4 -> 5
  5 -> 18
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  13 -> 1
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 3
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 7

Function: removeLiquidityETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = pairFor(tokenA,WETH,pairIndex)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IRestrictedPair(pair).removeLiquidity(msg.sender,direction,offerIndex,amountOut,receivingOut)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: tokenOut > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenA,to,tokenOut)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: ethOut > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH).withdraw(ethOut)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(to,ethOut)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 15
  Type: NodeType.IF
  Expression: (tokenA < WETH)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: direction = ! removingTokenA

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: direction = removingTokenA

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: removingTokenA

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: (tokenOut,ethOut) = (amountOut,receivingOut)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: (tokenOut,ethOut) = (receivingOut,amountOut)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 14
  1 -> 15
  3 -> 4
  4 -> 5
  5 -> 19
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 13
  14 -> 1
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 3
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 7

Function: removeAllLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = pairFor(tokenA,tokenB,pairIndex)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (amount0,amount1) = IRestrictedPair(pair).removeAllLiquidity(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenA,to,amountA)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenB,to,amountB)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 9
  Type: NodeType.IF
  Expression: (tokenA < tokenB)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (amountA,amountB) = (amount0,amount1)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (amountA,amountB) = (amount1,amount0)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: (amountA,amountB)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 9
  6 -> 7
  7 -> 13
  8 -> 1
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 6

Function: removeAllLiquidityETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = pairFor(tokenA,WETH,pairIndex)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (amount0,amount1) = IRestrictedPair(pair).removeAllLiquidity(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(tokenA,to,amountToken)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH).withdraw(amountETH)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(to,amountETH)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ensure(deadline)

  ID: 10
  Type: NodeType.IF
  Expression: (tokenA < WETH)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (amountToken,amountETH) = (amount0,amount1)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (amountToken,amountETH) = (amount1,amount0)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.RETURN
  Expression: (amountToken,amountETH)

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 10
  6 -> 7
  7 -> 8
  8 -> 14
  9 -> 1
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 6

Function: sortTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenA != tokenB,IDENTICAL_ADDRESSES)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token0 != address(0),ZERO_ADDRESS)

  ID: 4
  Type: NodeType.IF
  Expression: tokenA < tokenB

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (token0,token1) = (tokenA,tokenB)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (token0,token1) = (tokenB,tokenA)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (token0,token1)

Edges:
  0 -> 1
  1 -> 4
  3 -> 8
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 3

Function: pairFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (token0,token1) = sortTokens(tokenA,tokenB)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pair = address(uint256(keccak256(bytes)(abi.encodePacked(0xff,factory,keccak256(bytes)(abi.encodePacked(token0,token1,index)),0x457a0d32b8cab73d90b67ce8fbafa6b03e8f39316ea50f5b71cc51acf5c050b9))))

  ID: 5
  Type: NodeType.RETURN
  Expression: pair

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_PER_ORDER = RestrictedPair.feePerOrder

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_PER_TRADER = RestrictedPair.feePerTrader

Edges:
  0 -> 1


