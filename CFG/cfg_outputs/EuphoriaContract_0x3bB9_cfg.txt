Contract: SafeMath
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: ERC20
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: senderBalance = _balances[sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = senderBalance - amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(address(0),account,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: burn from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(account,address(0),amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(account,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _beforeTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _afterTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IDexFactory
==================================================


Contract: IDexRouter
==================================================


Contract: EuphoriaContract
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(address(_dexRouter),true)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: dexRouter = _dexRouter

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: dexPair = IDexFactory(_dexRouter.factory()).createPair(address(this),_dexRouter.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(address(dexPair),true)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _setPairLPool(address(dexPair),true)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: total_supply = 10_000_000 * 10 ** decimals()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: lastContractSell = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxTx = (total_supply * 20) / 1000

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: maxWallet = (total_supply * 20) / 1000

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapBackValueMin = (total_supply * 1) / 1000

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: swapBackValueMax = (total_supply * 2) / 100

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: buyTaxTotal = 20

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: sellTaxTotal = 30

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: transferTaxTotal = 30

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = address(0x9451F0C8d4ED6C897d22c57A92d3F9DbFBEA49dE)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: exempt_from_fees(msg.sender,true)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: exempt_from_fees(address(this),true)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: exempt_from_fees(address(0xdead),true)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: exempt_from_fees(marketingWallet,true)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(msg.sender,true)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(address(this),true)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(address(0xdead),true)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: exempt_to_all_limits(marketingWallet,true)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: transferOwnership(msg.sender)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: _mint(msg.sender,total_supply)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: ERC20(Euphoria,EUPH)

Edges:
  0 -> 27
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  27 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.IF
  Expression: amount == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,0)

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: limitsEnabled

  ID: 8
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != address(0) && to != address(0xdead) && ! swapping

  ID: 9
  Type: NodeType.IF
  Expression: ! tradingEnabled

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferTaxExempt[from] || transferTaxExempt[to],_transfer:: Trading is not active.)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && ! transferLimitExempt[to]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxTx,Buy transfer amount exceeds the maxTx.)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWallet,Max wallet exceeded)

  ID: 15
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && ! transferLimitExempt[from]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxTx,Sell transfer amount exceeds the maxTx.)

  ID: 17
  Type: NodeType.IF
  Expression: ! transferLimitExempt[to]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWallet,Max wallet exceeded)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 25
  Type: NodeType.VARIABLE
  Expression: canSwap = contractTokenBalance >= swapBackValueMin

  ID: 26
  Type: NodeType.IF
  Expression: canSwap && swapbackEnabled && ! swapping && ! automatedMarketMakerPairs[from] && ! transferTaxExempt[from] && ! transferTaxExempt[to] && lastContractSell != block.timestamp

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: swapBack(amount)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: lastContractSell = block.timestamp

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.VARIABLE
  Expression: takeFee = ! swapping

  ID: 33
  Type: NodeType.IF
  Expression: transferTaxExempt[from] || transferTaxExempt[to]

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.VARIABLE
  Expression: fees = 0

  ID: 37
  Type: NodeType.IF
  Expression: takeFee

  ID: 38
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && sellTaxTotal > 0

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: fees = amount.mul(sellTaxTotal).div(100)

  ID: 40
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && buyTaxTotal > 0

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: fees = amount.mul(buyTaxTotal).div(100)

  ID: 42
  Type: NodeType.IF
  Expression: transferTaxTotal > 0 && ! automatedMarketMakerPairs[from] && ! automatedMarketMakerPairs[to]

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: fees = amount.mul(transferTaxTotal).div(100)

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.ENDIF
  Expression: 

  ID: 46
  Type: NodeType.ENDIF
  Expression: 

  ID: 47
  Type: NodeType.IF
  Expression: fees > 0

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,address(this),fees)

  ID: 49
  Type: NodeType.ENDIF
  Expression: 

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: amount -= fees

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  6 -> 7
  7 -> 8
  7 -> 23
  8 -> 9
  8 -> 22
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 21
  15 -> 16
  15 -> 17
  16 -> 20
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 31
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  33 -> 35
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  37 -> 51
  38 -> 39
  38 -> 40
  39 -> 46
  40 -> 41
  40 -> 42
  41 -> 45
  42 -> 43
  42 -> 44
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  47 -> 49
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(address(0),account,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: burn from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(account,address(0),amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _afterTokenTransfer(account,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _beforeTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _afterTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingEnabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapbackEnabled = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TradingEnabled(block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: remove_all_limits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: limitsEnabled = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: transferTaxTotal = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: LimitsRemoved(block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: change_swapback_parameters
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_caSBcTrigger >= 1,Swap amount cannot be lower than 0.01% total supply.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_caSBcLimit >= _caSBcTrigger,maximum amount cant be higher than minimum)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapbackEnabled = _caSBcEnabled

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapBackValueMin = (totalSupply() * _caSBcTrigger) / 10000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: swapBackValueMax = (totalSupply() * _caSBcLimit) / 10000

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SwapbackSettingsUpdated(_caSBcEnabled,_caSBcTrigger,_caSBcLimit)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: set_new_transaction_limit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxTx >= 2,Cannot set maxTx lower than 0.2%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxTx = (_maxTx * totalSupply()) / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxTxUpdated(maxTx)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: set_new_wallet_limit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxWallet >= 5,Cannot set maxWallet lower than 0.5%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxWallet = (_maxWallet * totalSupply()) / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxWalletUpdated(maxWallet)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: exempt_to_all_limits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferLimitExempt[_add] = _excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludeFromLimits(_add,_excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: set_new_fee_buy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTaxTotal = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyTaxTotal <= 100,Total buy fee cannot be higher than 100%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BuyFeeUpdated(buyTaxTotal,buyTaxTotal,buyTaxTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: set_new_fee_sell
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellTaxTotal = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellTaxTotal <= 100,Total sell fee cannot be higher than 100%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SellFeeUpdated(sellTaxTotal,sellTaxTotal,sellTaxTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: set_new_fee_transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferTaxTotal = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferTaxTotal <= 100,Total transfer fee cannot be higher than 100%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: exempt_from_fees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferTaxExempt[_add] = _excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludeFromFees(_add,_excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _setPairLPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[pair] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SetPairLPool(pair,value)

Edges:
  0 -> 1
  1 -> 2

Function: set_new_fee_receiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MarketingWalletUpdated(_marketing,marketingWallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = _marketing

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: view_swapback_values
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _swapbackEnabled = swapbackEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _caSBcackValueMin = swapBackValueMin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _caSBcackValueMax = swapBackValueMax

  ID: 4
  Type: NodeType.RETURN
  Expression: (_swapbackEnabled,_caSBcackValueMin,_caSBcackValueMax)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: view_limits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _limitsEnabled = limitsEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWallet = maxWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _maxTx = maxTx

  ID: 4
  Type: NodeType.RETURN
  Expression: (_limitsEnabled,_maxWallet,_maxTx)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: view_fees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _buyTaxTotal = buyTaxTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _sellTaxTotal = sellTaxTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferTaxTotal = transferTaxTotal

  ID: 4
  Type: NodeType.RETURN
  Expression: (_buyTaxTotal,_sellTaxTotal,_transferTaxTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: view_address_permissions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferTaxExempt = transferTaxExempt[_target]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferLimitExempt = transferLimitExempt[_target]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _automatedMarketMakerPairs = automatedMarketMakerPairs[_target]

  ID: 4
  Type: NodeType.RETURN
  Expression: (_transferTaxExempt,_transferLimitExempt,_automatedMarketMakerPairs)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = dexRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(dexRouter),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: contractBalance == 0

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: contractBalance > swapBackValueMax

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractBalance = swapBackValueMax

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: anti && contractBalance > amount * 10

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: contractBalance = amount * 10

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: amountToSwapForETH = contractBalance

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(amountToSwapForETH)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(marketingWallet).call{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapbackEnabled = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: limitsEnabled = true

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingEnabled = false

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: anti = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


