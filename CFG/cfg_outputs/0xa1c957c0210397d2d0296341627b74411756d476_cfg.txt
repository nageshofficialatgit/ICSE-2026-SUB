Contract: Owned
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3


Contract: ERC20Token
==================================================


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4


Contract: DynamicCeiling
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: DynamicCeiling
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contribution = _contribution

Edges:
  0 -> 1
  1 -> 2

Function: setHiddenCurves
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(curves.length == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: curves.length = _curveHashes.length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _curveHashes.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: curves[i].hash = _curveHashes[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i = i.add(1)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  9 -> 1

Function: revealCurve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! allRevealed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(curves[revealedCurves].hash == calculateHash(_limit,_slopeFactor,_collectMinimum,_last,_salt))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_limit != 0 && _slopeFactor != 0 && _collectMinimum != 0)

  ID: 4
  Type: NodeType.IF
  Expression: revealedCurves > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_limit >= curves[revealedCurves.sub(1)].limit)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: curves[revealedCurves].limit = _limit

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: curves[revealedCurves].slopeFactor = _slopeFactor

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: curves[revealedCurves].collectMinimum = _collectMinimum

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revealedCurves = revealedCurves.add(1)

  ID: 11
  Type: NodeType.IF
  Expression: _last

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: allRevealed = true

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13

Function: revealMulti
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_limits.length != 0 && _limits.length == _slopeFactors.length && _limits.length == _collectMinimums.length && _limits.length == _lasts.length && _limits.length == _salts.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _limits.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revealCurve(_limits[i],_slopeFactors[i],_collectMinimums[i],_lasts[i],_salts[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i = i.add(1)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: moveTo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < revealedCurves && _index == currentIndex.add(1))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: currentIndex = _index

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: toCollect
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: revealedCurves == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: collected >= curves[currentIndex].limit

  ID: 5
  Type: NodeType.VARIABLE
  Expression: nextIndex = currentIndex.add(1)

  ID: 6
  Type: NodeType.IF
  Expression: nextIndex >= revealedCurves

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentIndex = nextIndex

  ID: 10
  Type: NodeType.IF
  Expression: collected >= curves[currentIndex].limit

  ID: 11
  Type: NodeType.RETURN
  Expression: 0

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: difference = curves[currentIndex].limit.sub(collected)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: collect = difference.div(curves[currentIndex].slopeFactor)

  ID: 16
  Type: NodeType.IF
  Expression: collect <= curves[currentIndex].collectMinimum

  ID: 17
  Type: NodeType.IF
  Expression: difference > curves[currentIndex].collectMinimum

  ID: 18
  Type: NodeType.RETURN
  Expression: curves[currentIndex].collectMinimum

  ID: 19
  Type: NodeType.RETURN
  Expression: difference

  ID: 21
  Type: NodeType.RETURN
  Expression: collect

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: onlyContribution()

Edges:
  0 -> 23
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 13
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 21
  17 -> 18
  17 -> 19
  23 -> 1

Function: calculateHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256()(_limit,_slopeFactor,_collectMinimum,_last,_salt)

Edges:
  0 -> 1

Function: nCurves
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: curves.length

Edges:
  0 -> 1


Contract: TokenController
==================================================


Contract: Controlled
==================================================

Function: Controlled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = msg.sender

Edges:
  0 -> 1

Function: changeController
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = _newController

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 2
  2 -> 1


Contract: ApproveAndCallFallBack
==================================================


Contract: MiniMeToken
==================================================

Function: Controlled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = msg.sender

Edges:
  0 -> 1

Function: changeController
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = _newController

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 2
  2 -> 1

Function: MiniMeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenFactory = MiniMeTokenFactory(_tokenFactory)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: name = _tokenName

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: decimals = _decimalUnits

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: symbol = _tokenSymbol

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: parentToken = MiniMeToken(_parentToken)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: parentSnapShotBlock = _parentSnapShotBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: transfersEnabled = _transfersEnabled

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: creationBlock = getBlockNumber()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: doTransfer(msg.sender,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != controller

  ID: 2
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: allowed[_from][msg.sender] < _amount

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _amount

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: doTransfer(_from,_to,_amount)

  ID: 11
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: doTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: parentSnapShotBlock >= getBlockNumber()

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: (_to == 0) || (_to == address(this))

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: previousBalanceFrom = balanceOfAt(_from,getBlockNumber())

  ID: 11
  Type: NodeType.IF
  Expression: previousBalanceFrom < _amount

  ID: 12
  Type: NodeType.RETURN
  Expression: false

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 15
  Type: NodeType.IF
  Expression: ! TokenController(controller).onTransfer(_from,_to,_amount)

  ID: 16
  Type: NodeType.THROW
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_from],previousBalanceFrom - _amount)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: previousBalanceTo = balanceOfAt(_to,getBlockNumber())

  ID: 21
  Type: NodeType.IF
  Expression: previousBalanceTo + _amount < previousBalanceTo

  ID: 22
  Type: NodeType.THROW
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_to],previousBalanceTo + _amount)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_amount)

  ID: 26
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 18
  15 -> 16
  15 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balanceOfAt(_owner,getBlockNumber())

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: (_amount != 0) && (allowed[msg.sender][_spender] != 0)

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 8
  Type: NodeType.IF
  Expression: ! TokenController(controller).onApprove(msg.sender,_spender,_amount)

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_amount)

  ID: 14
  Type: NodeType.RETURN
  Expression: true

  ID: 15
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: approveAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! approve(_spender,_amount)

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ApproveAndCallFallBack(_spender).receiveApproval(msg.sender,_amount,this,_extraData)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalSupplyAt(getBlockNumber())

Edges:
  0 -> 1

Function: balanceOfAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)

  ID: 2
  Type: NodeType.IF
  Expression: address(parentToken) != 0

  ID: 3
  Type: NodeType.RETURN
  Expression: parentToken.balanceOfAt(_owner,min(_blockNumber,parentSnapShotBlock))

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

  ID: 6
  Type: NodeType.RETURN
  Expression: getValueAt(balances[_owner],_blockNumber)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4

Function: totalSupplyAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)

  ID: 2
  Type: NodeType.IF
  Expression: address(parentToken) != 0

  ID: 3
  Type: NodeType.RETURN
  Expression: parentToken.totalSupplyAt(min(_blockNumber,parentSnapShotBlock))

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

  ID: 6
  Type: NodeType.RETURN
  Expression: getValueAt(totalSupplyHistory,_blockNumber)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4

Function: createCloneToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _snapshotBlock == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _snapshotBlock = getBlockNumber()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cloneToken = tokenFactory.createCloneToken(this,_snapshotBlock,_cloneTokenName,_cloneDecimalUnits,_cloneTokenSymbol,_transfersEnabled)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: cloneToken.changeController(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewCloneToken(address(cloneToken),_snapshotBlock)

  ID: 7
  Type: NodeType.RETURN
  Expression: address(cloneToken)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: generateTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: curTotalSupply = getValueAt(totalSupplyHistory,getBlockNumber())

  ID: 2
  Type: NodeType.IF
  Expression: curTotalSupply + _amount < curTotalSupply

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(totalSupplyHistory,curTotalSupply + _amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: previousBalanceTo = balanceOf(_owner)

  ID: 7
  Type: NodeType.IF
  Expression: previousBalanceTo + _amount < previousBalanceTo

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_owner],previousBalanceTo + _amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(0,_owner,_amount)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: destroyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: curTotalSupply = getValueAt(totalSupplyHistory,getBlockNumber())

  ID: 2
  Type: NodeType.IF
  Expression: curTotalSupply < _amount

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(totalSupplyHistory,curTotalSupply - _amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: previousBalanceFrom = balanceOf(_owner)

  ID: 7
  Type: NodeType.IF
  Expression: previousBalanceFrom < _amount

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_owner],previousBalanceFrom - _amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(_owner,0,_amount)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: enableTransfers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transfersEnabled = _transfersEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 2
  2 -> 1

Function: getValueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: checkpoints.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _block >= checkpoints[checkpoints.length - 1].fromBlock

  ID: 5
  Type: NodeType.RETURN
  Expression: checkpoints[checkpoints.length - 1].value

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _block < checkpoints[0].fromBlock

  ID: 8
  Type: NodeType.RETURN
  Expression: 0

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: min = 0

  ID: 11
  Type: NodeType.VARIABLE
  Expression: max = checkpoints.length - 1

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: max > min

  ID: 14
  Type: NodeType.VARIABLE
  Expression: mid = (max + min + 1) / 2

  ID: 15
  Type: NodeType.IF
  Expression: checkpoints[mid].fromBlock <= _block

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: min = mid

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: max = mid - 1

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: checkpoints[min].value

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 19
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 13
  19 -> 20

Function: updateValueAtNow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < getBlockNumber())

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newCheckPoint = checkpoints[checkpoints.length ++]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: newCheckPoint.fromBlock = uint128(getBlockNumber())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: newCheckPoint.value = uint128(_value)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: oldCheckPoint = checkpoints[checkpoints.length - 1]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: oldCheckPoint.value = uint128(_value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 6
  6 -> 7

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: _addr == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 2
  Type: NodeType.IF
  Expression: ! TokenController(controller).proxyPayment.value(msg.value)(msg.sender)

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  2 -> 4
  4 -> 6

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: controller.transfer(this.balance)

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: token.transfer(controller,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,controller,balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 9
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: version = MMT_0.1

Edges:


Contract: MiniMeTokenFactory
==================================================

Function: createCloneToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newToken = new MiniMeToken(this,_parentToken,_snapshotBlock,_tokenName,_decimalUnits,_tokenSymbol,_transfersEnabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newToken.changeController(msg.sender)

  ID: 3
  Type: NodeType.RETURN
  Expression: newToken

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SNT
==================================================

Function: MiniMeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenFactory = MiniMeTokenFactory(_tokenFactory)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: name = _tokenName

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: decimals = _decimalUnits

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: symbol = _tokenSymbol

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: parentToken = MiniMeToken(_parentToken)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: parentSnapShotBlock = _parentSnapShotBlock

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: transfersEnabled = _transfersEnabled

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: creationBlock = getBlockNumber()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: doTransfer(msg.sender,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != controller

  ID: 2
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: allowed[_from][msg.sender] < _amount

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _amount

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: doTransfer(_from,_to,_amount)

  ID: 11
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: doTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: parentSnapShotBlock >= getBlockNumber()

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: (_to == 0) || (_to == address(this))

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: previousBalanceFrom = balanceOfAt(_from,getBlockNumber())

  ID: 11
  Type: NodeType.IF
  Expression: previousBalanceFrom < _amount

  ID: 12
  Type: NodeType.RETURN
  Expression: false

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 15
  Type: NodeType.IF
  Expression: ! TokenController(controller).onTransfer(_from,_to,_amount)

  ID: 16
  Type: NodeType.THROW
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_from],previousBalanceFrom - _amount)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: previousBalanceTo = balanceOfAt(_to,getBlockNumber())

  ID: 21
  Type: NodeType.IF
  Expression: previousBalanceTo + _amount < previousBalanceTo

  ID: 22
  Type: NodeType.THROW
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_to],previousBalanceTo + _amount)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_amount)

  ID: 26
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 18
  15 -> 16
  15 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balanceOfAt(_owner,getBlockNumber())

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! transfersEnabled

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: (_amount != 0) && (allowed[msg.sender][_spender] != 0)

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 8
  Type: NodeType.IF
  Expression: ! TokenController(controller).onApprove(msg.sender,_spender,_amount)

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_amount)

  ID: 14
  Type: NodeType.RETURN
  Expression: true

  ID: 15
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: approveAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! approve(_spender,_amount)

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ApproveAndCallFallBack(_spender).receiveApproval(msg.sender,_amount,this,_extraData)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalSupplyAt(getBlockNumber())

Edges:
  0 -> 1

Function: balanceOfAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)

  ID: 2
  Type: NodeType.IF
  Expression: address(parentToken) != 0

  ID: 3
  Type: NodeType.RETURN
  Expression: parentToken.balanceOfAt(_owner,min(_blockNumber,parentSnapShotBlock))

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

  ID: 6
  Type: NodeType.RETURN
  Expression: getValueAt(balances[_owner],_blockNumber)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4

Function: totalSupplyAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)

  ID: 2
  Type: NodeType.IF
  Expression: address(parentToken) != 0

  ID: 3
  Type: NodeType.RETURN
  Expression: parentToken.totalSupplyAt(min(_blockNumber,parentSnapShotBlock))

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

  ID: 6
  Type: NodeType.RETURN
  Expression: getValueAt(totalSupplyHistory,_blockNumber)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4

Function: createCloneToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _snapshotBlock == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _snapshotBlock = getBlockNumber()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cloneToken = tokenFactory.createCloneToken(this,_snapshotBlock,_cloneTokenName,_cloneDecimalUnits,_cloneTokenSymbol,_transfersEnabled)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: cloneToken.changeController(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewCloneToken(address(cloneToken),_snapshotBlock)

  ID: 7
  Type: NodeType.RETURN
  Expression: address(cloneToken)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: generateTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: curTotalSupply = getValueAt(totalSupplyHistory,getBlockNumber())

  ID: 2
  Type: NodeType.IF
  Expression: curTotalSupply + _amount < curTotalSupply

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(totalSupplyHistory,curTotalSupply + _amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: previousBalanceTo = balanceOf(_owner)

  ID: 7
  Type: NodeType.IF
  Expression: previousBalanceTo + _amount < previousBalanceTo

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_owner],previousBalanceTo + _amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(0,_owner,_amount)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: destroyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: curTotalSupply = getValueAt(totalSupplyHistory,getBlockNumber())

  ID: 2
  Type: NodeType.IF
  Expression: curTotalSupply < _amount

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(totalSupplyHistory,curTotalSupply - _amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: previousBalanceFrom = balanceOf(_owner)

  ID: 7
  Type: NodeType.IF
  Expression: previousBalanceFrom < _amount

  ID: 8
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: updateValueAtNow(balances[_owner],previousBalanceFrom - _amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(_owner,0,_amount)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: enableTransfers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transfersEnabled = _transfersEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 2
  2 -> 1

Function: getValueAt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: checkpoints.length == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _block >= checkpoints[checkpoints.length - 1].fromBlock

  ID: 5
  Type: NodeType.RETURN
  Expression: checkpoints[checkpoints.length - 1].value

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _block < checkpoints[0].fromBlock

  ID: 8
  Type: NodeType.RETURN
  Expression: 0

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: min = 0

  ID: 11
  Type: NodeType.VARIABLE
  Expression: max = checkpoints.length - 1

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: max > min

  ID: 14
  Type: NodeType.VARIABLE
  Expression: mid = (max + min + 1) / 2

  ID: 15
  Type: NodeType.IF
  Expression: checkpoints[mid].fromBlock <= _block

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: min = mid

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: max = mid - 1

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: checkpoints[min].value

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 19
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 13
  19 -> 20

Function: updateValueAtNow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < getBlockNumber())

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newCheckPoint = checkpoints[checkpoints.length ++]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: newCheckPoint.fromBlock = uint128(getBlockNumber())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: newCheckPoint.value = uint128(_value)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: oldCheckPoint = checkpoints[checkpoints.length - 1]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: oldCheckPoint.value = uint128(_value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 6
  6 -> 7

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: _addr == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isContract(controller)

  ID: 2
  Type: NodeType.IF
  Expression: ! TokenController(controller).proxyPayment.value(msg.value)(msg.sender)

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  2 -> 4
  4 -> 6

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: controller.transfer(this.balance)

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: token.transfer(controller,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,controller,balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 9
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: Controlled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = msg.sender

Edges:
  0 -> 1

Function: changeController
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: controller = _newController

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 2
  2 -> 1

Function: SNT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MiniMeToken(_tokenFactory,0x0,0,Status Network Token,18,SNT,true)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: version = MMT_0.1

Edges:


Contract: StatusContribution
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: StatusContribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

Edges:
  0 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(SNT) == 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SNT = MiniMeToken(_snt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(SNT.totalSupply() == 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(SNT.controller() == address(this))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(SNT.decimals() == 18)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sntController != 0x0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: sntController = _sntController

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock >= getBlockNumber())

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startBlock < _endBlock)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: startBlock = _startBlock

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_dynamicCeiling != 0x0)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: dynamicCeiling = DynamicCeiling(_dynamicCeiling)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_destEthDevs != 0x0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: destEthDevs = _destEthDevs

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_destTokensReserve != 0x0)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: destTokensReserve = _destTokensReserve

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_destTokensSgt != 0x0)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: destTokensSgt = _destTokensSgt

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_destTokensDevs != 0x0)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: destTokensDevs = _destTokensDevs

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sgt != 0x0)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SGT = MiniMeToken(_sgt)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_maxSGTSupply >= MiniMeToken(SGT).totalSupply())

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: maxSGTSupply = _maxSGTSupply

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 26
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  26 -> 1

Function: setGuaranteedAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(getBlockNumber() < startBlock)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_limit > 0 && _limit <= maxGuaranteedLimit)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: guaranteedBuyersLimit[_th] = _limit

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: GuaranteedAddress(_th,_limit)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: initialized()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: proxyPayment(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: notPaused()

Edges:
  0 -> 2
  2 -> 1

Function: proxyPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_th != 0x0)

  ID: 2
  Type: NodeType.IF
  Expression: guaranteedBuyersLimit[_th] > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buyGuaranteed(_th)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: buyNormal(_th)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: notPaused()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: initialized()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: contributionOpen()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 1

Function: onTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1

Function: onApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1

Function: buyNormal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tx.gasprice <= maxGasPrice)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: msg.sender == address(SNT)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: caller = _th

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: caller = msg.sender

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isContract(caller))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(getBlockNumber().sub(lastCallBlock[caller]) >= maxCallFrequency)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lastCallBlock[caller] = getBlockNumber()

  ID: 10
  Type: NodeType.VARIABLE
  Expression: toCollect = dynamicCeiling.toCollect(totalNormalCollected)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: msg.value <= toCollect

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: toFund = msg.value

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: toFund = toCollect

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalNormalCollected = totalNormalCollected.add(toFund)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: doBuy(_th,toFund,false)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17

Function: buyGuaranteed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: toCollect = guaranteedBuyersLimit[_th]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: guaranteedBuyersBought[_th].add(msg.value) > toCollect

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: toFund = toCollect.sub(guaranteedBuyersBought[_th])

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: toFund = msg.value

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: guaranteedBuyersBought[_th] = guaranteedBuyersBought[_th].add(toFund)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalGuaranteedCollected = totalGuaranteedCollected.add(toFund)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: doBuy(_th,toFund,true)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: doBuy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(msg.value >= _toFund)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(totalCollected() <= failSafeLimit)

  ID: 3
  Type: NodeType.IF
  Expression: _toFund > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokensGenerated = _toFund.mul(exchangeRate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(SNT.generateTokens(_th,tokensGenerated))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: destEthDevs.transfer(_toFund)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: NewSale(_th,_toFund,tokensGenerated,_guaranteed)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: toReturn = msg.value.sub(_toFund)

  ID: 10
  Type: NodeType.IF
  Expression: toReturn > 0

  ID: 11
  Type: NodeType.IF
  Expression: msg.sender == address(SNT)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _th.transfer(toReturn)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(toReturn)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 8
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 15
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(getBlockNumber() >= startBlock)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || getBlockNumber() > endBlock)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(finalizedBlock == 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(dynamicCeiling.allRevealed())

  ID: 5
  Type: NodeType.IF
  Expression: getBlockNumber() <= endBlock

  ID: 6
  Type: NodeType.VARIABLE
  Expression: lastLimit = dynamicCeiling.curves(dynamicCeiling.revealedCurves().sub(1))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(totalNormalCollected >= lastLimit)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: finalizedBlock = getBlockNumber()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: finalizedTime = now

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: SGT.totalSupply() >= maxSGTSupply

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: percentageToSgt = percent(10)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: percentageToSgt = percent(10).mul(SGT.totalSupply()).div(maxSGTSupply)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: percentageToDevs = percent(20)

  ID: 17
  Type: NodeType.VARIABLE
  Expression: percentageToContributors = percent(41).add(percent(10).sub(percentageToSgt))

  ID: 18
  Type: NodeType.VARIABLE
  Expression: percentageToReserve = percent(29)

  ID: 19
  Type: NodeType.VARIABLE
  Expression: totalTokens = SNT.totalSupply().mul(percent(100)).div(percentageToContributors)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(SNT.generateTokens(destTokensReserve,totalTokens.mul(percentageToReserve).div(percent(100))))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(SNT.generateTokens(destTokensSgt,totalTokens.mul(percentageToSgt).div(percent(100))))

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(SNT.generateTokens(destTokensDevs,totalTokens.mul(percentageToDevs).div(percent(100))))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: SNT.changeController(sntController)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: initialized()

Edges:
  0 -> 25
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  25 -> 1

Function: percent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: p.mul(10 ** 16)

Edges:
  0 -> 1

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _addr == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (size > 0)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokensIssued
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SNT.totalSupply()

Edges:
  0 -> 1

Function: totalCollected
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalNormalCollected.add(totalGuaranteedCollected)

Edges:
  0 -> 1

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: SNT.controller() == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SNT.claimTokens(_token)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(this.balance)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: token.transfer(owner,balance)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,owner,balance)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: pauseContribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: resumeContribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: failSafeLimit = 300000000000000000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxGuaranteedLimit = 30000000000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: exchangeRate = 10000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxGasPrice = 50000000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxCallFrequency = 100

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: ContributionWallet
==================================================

Function: ContributionWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_multisig != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_contribution != 0x0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endBlock != 0 && _endBlock <= 4000000)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: multisig = _multisig

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: endBlock = _endBlock

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: contribution = StatusContribution(_contribution)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == multisig)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.number > endBlock || contribution.finalizedBlock() != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: multisig.transfer(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: DevTokensHolder
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: DevTokensHolder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contribution = StatusContribution(_contribution)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: snt = MiniMeToken(_snt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: collectTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = snt.balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: total = collectedTokens.add(balance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: finalizedTime = contribution.finalizedTime()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: canExtract = canExtract.sub(collectedTokens)

  ID: 7
  Type: NodeType.IF
  Expression: canExtract > balance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: canExtract = balance

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: collectedTokens = collectedTokens.add(canExtract)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(snt.transfer(owner,canExtract))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensWithdrawn(owner,canExtract)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: months
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: m.mul(2592000)

Edges:
  0 -> 1

Function: getTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_token != address(snt))

  ID: 2
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(this.balance)

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: token.transfer(owner,balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,owner,balance)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1


Contract: SGTExchanger
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: SGTExchanger
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sgt = MiniMeToken(_sgt)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: snt = MiniMeToken(_snt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: statusContribution = StatusContribution(_statusContribution)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: collect
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: finalizedBlock = statusContribution.finalizedBlock()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(finalizedBlock != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(getBlockNumber() > finalizedBlock)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: total = totalCollected.add(snt.balanceOf(address(this)))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: balance = sgt.balanceOfAt(msg.sender,finalizedBlock)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = total.mul(balance).div(sgt.totalSupplyAt(finalizedBlock))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: amount = amount.sub(collected[msg.sender])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalCollected = totalCollected.add(amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: collected[msg.sender] = collected[msg.sender].add(amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(snt.transfer(msg.sender,amount))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensCollected(msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: proxyPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.THROW
  Expression: 

Edges:
  0 -> 1

Function: onTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1

Function: onApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1

Function: getBlockNumber
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.number

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_token != address(snt))

  ID: 2
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(this.balance)

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: token.transfer(owner,balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,owner,balance)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1


Contract: SNTPlaceHolder
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newOwner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: SNTPlaceHolder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: snt = MiniMeToken(_snt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: contribution = StatusContribution(_contribution)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sgtExchanger = _sgtExchanger

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: changeController
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: snt.changeController(_newController)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ControllerChanged(_newController)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: proxyPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1

Function: onTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferable(_from)

Edges:
  0 -> 1

Function: onApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: transferable(_from)

Edges:
  0 -> 1

Function: transferable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: activationTime == 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: f = contribution.finalizedTime()

  ID: 3
  Type: NodeType.IF
  Expression: f > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: activationTime = f.add(604800)

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (getTime() > activationTime) || (_from == sgtExchanger)

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  6 -> 7
  7 -> 8

Function: getTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now

Edges:
  0 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: snt.controller() == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: snt.claimTokens(_token)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _token == 0x0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(this.balance)

  ID: 6
  Type: NodeType.RETURN
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: token = ERC20Token(_token)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: token.transfer(owner,balance)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ClaimedTokens(_token,owner,balance)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1


