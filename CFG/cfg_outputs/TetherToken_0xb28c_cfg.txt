Contract: IERC20
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: TetherToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = _admin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenExpiry = block.timestamp + duration

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_priceFeed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _Balances[account]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyWhileActive()

Edges:
  0 -> 2
  2 -> 1

Function: getUSDTPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(price > 0,Invalid price from oracle)

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: USDTValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = getUSDTPrice()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = balanceOf(account)

  ID: 3
  Type: NodeType.RETURN
  Expression: (balance * price) / (10 ** decimals)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_Balances[msg.sender] >= amount,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _Balances[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _Balances[recipient] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,recipient,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyWhileActive()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyWhileActive()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[tokenOwner][spender]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_Balances[sender] >= amount,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][msg.sender] >= amount,Transfer amount exceeds allowance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _Balances[sender] -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _Balances[recipient] += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyWhileActive()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: Airdrop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _Balances[user] += amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),user,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyWhileActive()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: isExpired
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.timestamp >= tokenExpiry

Edges:
  0 -> 1

Function: extendExpiry
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenExpiry += additionalTime

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setExpiry
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newExpiry > block.timestamp,New expiry must be in the future)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenExpiry = newExpiry

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Tether USD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = USDT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 6

Edges:
  0 -> 1
  1 -> 2


