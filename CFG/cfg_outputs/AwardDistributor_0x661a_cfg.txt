Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: AwardDistributor
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: distributeEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nativeCurrency = msg.value

  ID: 2
  Type: NodeType.IF
  Expression: nativeCurrency > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: thirtyPercent = (nativeCurrency * 30) / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: remaining = nativeCurrency - (thirtyPercent * 3)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: address(ur369gifthAddress_30).transfer(thirtyPercent)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: address(ur369impactAddress_30).transfer(thirtyPercent)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: address(ur369Address_30).transfer(thirtyPercent)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(ur369devsncomAddress_10).transfer(remaining)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: distributeERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddresses.length == amounts.length,RewardDistributor: Amount for each token in not entered)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < tokenAddresses.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amountToDistribute = amounts[i]

  ID: 8
  Type: NodeType.VARIABLE
  Expression: tokenAddress = tokenAddresses[i]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountToDistribute > 0,RewardDistributor: Invalid amount)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: thirtyPercent = (amountToDistribute * 30) / 100

  ID: 11
  Type: NodeType.VARIABLE
  Expression: remaining = amountToDistribute - (thirtyPercent * 3)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369gifthAddress_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369impactAddress_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369Address_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369devsncomAddress_10,remaining),RewardDistributor: TransferFrom Failed.)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 17
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 6
  17 -> 1

Function: donateAndDistribute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nativeCurrency = msg.value

  ID: 2
  Type: NodeType.IF
  Expression: nativeCurrency > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: thirtyPercent = (nativeCurrency * 30) / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: remaining = nativeCurrency - (thirtyPercent * 3)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: address(ur369gifthAddress_30).transfer(thirtyPercent)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: address(ur369impactAddress_30).transfer(thirtyPercent)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: address(ur369Address_30).transfer(thirtyPercent)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(ur369devsncomAddress_10).transfer(remaining)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: donateAndDistributeERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount != 0,RewardDistributor: Invalid Amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sender = msg.sender

  ID: 3
  Type: NodeType.VARIABLE
  Expression: thirtyPercent = (_amount * 30) / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: remaining = _amount - (thirtyPercent * 3)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369gifthAddress_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369impactAddress_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369Address_30,thirtyPercent),RewardDistributor: TransferFrom Failed.)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(tokenAddress).transferFrom(sender,ur369devsncomAddress_10,remaining),RewardDistributor: TransferFrom Failed.)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ur369gifthAddress_30 = 0x70C819445c6Bb5a144954818DE138b4A713408dC

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ur369impactAddress_30 = 0x22357B3034DF4a65a00E5887aFB09e94Df17B7B9

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ur369Address_30 = 0x4eb401801b42139737faC676C5da5e43F6A1A828

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ur369devsncomAddress_10 = 0xDB0ccF145A929c48277a4431004D633E9D84258a

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


