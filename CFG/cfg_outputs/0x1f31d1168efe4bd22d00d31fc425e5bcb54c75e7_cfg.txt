Contract: owned
==================================================

Function: owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: super_owner = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (msg.sender == owner) || (msg.sender == super_owner)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: false

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlySuperOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: super_owner = 0x630CC4c83fCc1121feD041126227d25Bbeb51959

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: foundersAddresses = (0x2f072F00328B6176257C21E64925760990561001,0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE)

Edges:
  0 -> 1


Contract: STeX_WL
==================================================

Function: owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: super_owner = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (msg.sender == owner) || (msg.sender == super_owner)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: false

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlySuperOwner()

Edges:
  0 -> 2
  2 -> 1

Function: STeX_WL
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[this] = totalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: soldSupply = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: decimals = 8

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: name = STeX White List

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: symbol = STE(WL)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: minBuyPrice = 20500000

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxBuyPrice = 24900000

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: curPrice = minBuyPrice

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: wlStartBlock = 5071809

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: wlStopBlock = wlStartBlock + 287000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.value < 100000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: (block.number >= wlStopBlock) || (block.number < wlStartBlock)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: add_by_blocks = (((block.number - wlStartBlock) * 1000000) / (wlStopBlock - wlStartBlock) * (maxBuyPrice - minBuyPrice)) / 1000000

  ID: 8
  Type: NodeType.VARIABLE
  Expression: add_by_solded = ((soldSupply * 1000000) / totalSupply * (maxBuyPrice - minBuyPrice)) / 1000000

  ID: 9
  Type: NodeType.IF
  Expression: add_by_blocks > add_by_solded

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: curPrice = minBuyPrice + add_by_blocks

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: curPrice = minBuyPrice + add_by_solded

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: curPrice > maxBuyPrice

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: curPrice = maxBuyPrice

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: amount = msg.value / curPrice

  ID: 17
  Type: NodeType.IF
  Expression: balanceOf[this] < amount

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: balanceOf[this] -= amount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] += amount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: soldSupply += amount

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ethRaised += msg.value

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 2
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 2
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2

Function: transferFromAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _to == 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: balanceOf[_from] < _value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: (balanceOf[_to] + _value) < balanceOf[_to]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_from] -= _value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 15
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 14
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: setPrices
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minBuyPrice = _minBuyPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxBuyPrice = _maxBuyPrice

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setStartStopBlocks
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wlStartBlock = _wlStartBlock

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: wlStopBlock = _wlStopBlock

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawToFounders
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount_to_withdraw = amount * 1000000000000000

  ID: 2
  Type: NodeType.IF
  Expression: this.balance < amount_to_withdraw

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: amount_to_withdraw = amount_to_withdraw / foundersAddresses.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: errors = 0

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < foundersAddresses.length

  ID: 12
  Type: NodeType.IF
  Expression: ! foundersAddresses[i].send(amount_to_withdraw)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: errors ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 11
  16 -> 1

Function: afterSTEDistributed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount_to_withdraw = this.balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: amount_to_withdraw = amount_to_withdraw / foundersAddresses.length

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: errors = 0

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < foundersAddresses.length

  ID: 9
  Type: NodeType.IF
  Expression: ! foundersAddresses[i].send(amount_to_withdraw)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: errors ++

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: suicide(address)(foundersAddresses[0])

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlySuperOwner()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 8
  14 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: super_owner = 0x630CC4c83fCc1121feD041126227d25Bbeb51959

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: foundersAddresses = (0x2f072F00328B6176257C21E64925760990561001,0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: standard = Token 0.1

Edges:
  0 -> 1
  1 -> 2


