Contract: Math
==================================================

Function: max64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a >= b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ERC20Basic
==================================================


Contract: LegalLazyScheduler
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: LegalLazyScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = uint64(now)

Edges:
  0 -> 1

Function: enableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedulerEnabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: registerIntervalCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = uint64(now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: intervalDuration = _intervalDuration

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: callback = _callback

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: LogRegisteredInterval(lastUpdate,intervalDuration)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: schedulerEnabled = false

Edges:


Contract: ERC20
==================================================


Contract: LimitedTransferToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: canTransfer(msg.sender,_value)

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: canTransfer(_from,_value)

Edges:
  0 -> 2
  2 -> 1

Function: transferableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balanceOf(holder)

Edges:
  0 -> 1


Contract: BasicToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7


Contract: MintableToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

Edges:


Contract: VestedToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: grantIndex = tokenGrantsCount(holder)

  ID: 2
  Type: NodeType.IF
  Expression: grantIndex == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: super.transferableTokens(holder,time)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: nonVested = 0

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < grantIndex

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonVested = SafeMath.add(nonVested,nonVestedTokens(grants[holder][i],time))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 12
  Type: NodeType.VARIABLE
  Expression: vestedTransferable = SafeMath.sub(balanceOf(holder),nonVested)

  ID: 13
  Type: NodeType.RETURN
  Expression: Math.min256(vestedTransferable,super.transferableTokens(holder,time))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 12
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 9
  12 -> 13

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: grantVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cliff >= _start && _vesting >= _cliff)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: transfer(_to,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: NewTokenGrant(msg.sender,_to,_value,count - 1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.IF
  Expression: _revokable

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: count = grants[_to].push(TokenGrant(msg.sender,_value,_cliff,_vesting,_start,_revokable,_burnsOnRevoke))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: count = grants[_to].push(TokenGrant(0,_value,_cliff,_vesting,_start,_revokable,_burnsOnRevoke))

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 6
  1 -> 2
  2 -> 7
  4 -> 5
  6 -> 1
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 4

Function: revokeTokenGrant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: grant = grants[_holder][_grantId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(grant.revokable)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(grant.granter == msg.sender)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: nonVested = nonVestedTokens(grant,uint64(now))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete grants[_holder][_grantId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: grants[_holder].length -= 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[receiver] = balances[receiver].add(nonVested)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: balances[_holder] = balances[_holder].sub(nonVested)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(_holder,receiver,nonVested)

  ID: 12
  Type: NodeType.IF
  Expression: grant.burnsOnRevoke

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: receiver = 0xdead

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: receiver = msg.sender

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 12
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 5

Function: tokenGrantsCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: grants[_holder].length

  ID: 2
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1

Function: calculateVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time < cliff

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: time >= vesting

  ID: 5
  Type: NodeType.RETURN
  Expression: tokens

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: vestedTokens = SafeMath.div(SafeMath.mul(tokens,SafeMath.sub(time,start)),SafeMath.sub(vesting,start))

  ID: 8
  Type: NodeType.RETURN
  Expression: vestedTokens

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8

Function: tokenGrant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: grant = grants[_holder][_grantId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: granter = grant.granter

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: value = grant.value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: start = grant.start

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: cliff = grant.cliff

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: vesting = grant.vesting

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revokable = grant.revokable

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: burnsOnRevoke = grant.burnsOnRevoke

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: vested = vestedTokens(grant,uint64(now))

  ID: 10
  Type: NodeType.RETURN
  Expression: (granter,value,vested,start,cliff,vesting,revokable,burnsOnRevoke)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: vestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calculateVestedTokens(grant.value,uint256(time),uint256(grant.start),uint256(grant.cliff),uint256(grant.vesting))

Edges:
  0 -> 1

Function: nonVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: grant.value.sub(vestedTokens(grant,time))

Edges:
  0 -> 1

Function: lastTokenIsTransferableDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: date = uint64(now)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: grantIndex = grants[holder].length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < grantIndex

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: date = Math.max64(grants[holder][i].vesting,date)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: date

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GRANTS_PER_ADDRESS = 20

Edges:


Contract: LegalToken
==================================================

Function: grantVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cliff >= _start && _vesting >= _cliff)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: transfer(_to,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: NewTokenGrant(msg.sender,_to,_value,count - 1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.IF
  Expression: _revokable

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: count = grants[_to].push(TokenGrant(msg.sender,_value,_cliff,_vesting,_start,_revokable,_burnsOnRevoke))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: count = grants[_to].push(TokenGrant(0,_value,_cliff,_vesting,_start,_revokable,_burnsOnRevoke))

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 6
  1 -> 2
  2 -> 7
  4 -> 5
  6 -> 1
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 4

Function: revokeTokenGrant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: grant = grants[_holder][_grantId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(grant.revokable)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(grant.granter == msg.sender)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: nonVested = nonVestedTokens(grant,uint64(now))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete grants[_holder][_grantId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: grants[_holder].length -= 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[receiver] = balances[receiver].add(nonVested)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: balances[_holder] = balances[_holder].sub(nonVested)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(_holder,receiver,nonVested)

  ID: 12
  Type: NodeType.IF
  Expression: grant.burnsOnRevoke

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: receiver = 0xdead

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: receiver = msg.sender

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 12
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 5

Function: transferableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balanceOf(holder)

Edges:
  0 -> 1

Function: tokenGrantsCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: grants[_holder].length

  ID: 2
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1

Function: calculateVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: time < cliff

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: time >= vesting

  ID: 5
  Type: NodeType.RETURN
  Expression: tokens

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: vestedTokens = SafeMath.div(SafeMath.mul(tokens,SafeMath.sub(time,start)),SafeMath.sub(vesting,start))

  ID: 8
  Type: NodeType.RETURN
  Expression: vestedTokens

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8

Function: tokenGrant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: grant = grants[_holder][_grantId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: granter = grant.granter

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: value = grant.value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: start = grant.start

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: cliff = grant.cliff

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: vesting = grant.vesting

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revokable = grant.revokable

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: burnsOnRevoke = grant.burnsOnRevoke

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: vested = vestedTokens(grant,uint64(now))

  ID: 10
  Type: NodeType.RETURN
  Expression: (granter,value,vested,start,cliff,vesting,revokable,burnsOnRevoke)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: vestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calculateVestedTokens(grant.value,uint256(time),uint256(grant.start),uint256(grant.cliff),uint256(grant.vesting))

Edges:
  0 -> 1

Function: nonVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: grant.value.sub(vestedTokens(grant,time))

Edges:
  0 -> 1

Function: lastTokenIsTransferableDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: date = uint64(now)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: grantIndex = grants[holder].length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < grantIndex

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: date = Math.max64(grants[holder][i].vesting,date)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: date

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenReleased(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: intervalTrigger()

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenReleased(_from)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: intervalTrigger()

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.approve(_spender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenReleased(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: intervalTrigger()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.allowance(_owner,_spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.increaseApproval(_spender,_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenReleased(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: intervalTrigger()

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: super.decreaseApproval(_spender,_subtractedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenReleased(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: intervalTrigger()

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: LegalLazyScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = uint64(now)

Edges:
  0 -> 1

Function: enableScheduler
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedulerEnabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: registerIntervalCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = uint64(now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: intervalDuration = _intervalDuration

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: callback = _callback

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: LogRegisteredInterval(lastUpdate,intervalDuration)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: LegalToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: setTokenInformation(Legal Token,LGL)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rewardWallet = _rewardWallet

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: inflationCompBPS = _inflationCompBPS

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: registerIntervalCall(_inflationCompInterval,mintInflationPeriod)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setTokenInformation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = _name

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = _symbol

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedTokenInformation(name,symbol)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: mintInflationPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokensToMint = totalSupply.mul(inflationCompBPS).div(10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(tokensToMint)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[rewardWallet] = balances[rewardWallet].add(tokensToMint)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Mint(rewardWallet,tokensToMint)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,rewardWallet,tokensToMint)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: setRewardWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: rewardWallet = _rewardWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: releaseTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: released = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: schedulerEnabled = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_GRANTS_PER_ADDRESS = 20

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: released = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


