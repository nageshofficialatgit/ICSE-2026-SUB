Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IBEP20
==================================================


Contract: IDEXFactory
==================================================


Contract: IDEXRouter
==================================================


Contract: IDividendDistributor
==================================================


Contract: DividendDistributor
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _token = msg.sender

  ID: 3
  Type: NodeType.IF
  Expression: _router != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(_router)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(routerAddress)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 2

Function: setDistributionCriteria
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minPeriod = newMinPeriod

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minDistribution = newMinDistribution

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setShare
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(shareholder)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount > 0 && shares[shareholder].amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: addShareholder(shareholder)

  ID: 6
  Type: NodeType.IF
  Expression: amount == 0 && shares[shareholder].amount > 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: removeShareholder(shareholder)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalShares = totalShares.sub(shares[shareholder].amount).add(amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].amount = amount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 9
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balanceBefore = USDCToken.balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(USDCToken)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amount = USDCToken.balanceOf(address(this)).sub(balanceBefore)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalDividends = totalDividends.add(amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: process
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: shareholderCount = shareholders.length

  ID: 2
  Type: NodeType.IF
  Expression: shareholderCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: iterations = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: gasUsed = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: gasLeft = gasleft()()

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.IFLOOP
  Expression: gasUsed < gas && iterations < shareholderCount

  ID: 10
  Type: NodeType.IF
  Expression: currentIndex >= shareholderCount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: currentIndex = 0

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: shouldDistribute(shareholders[currentIndex])

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(shareholders[currentIndex])

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: gasUsed = gasUsed.add(gasLeft.sub(gasleft()()))

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: gasLeft = gasleft()()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: currentIndex ++

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: iterations ++

  ID: 20
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 21
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 20
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 9
  21 -> 1

Function: shouldDistribute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution

Edges:
  0 -> 1

Function: distributeDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amount = getUnpaidEarnings(shareholder)

  ID: 5
  Type: NodeType.IF
  Expression: amount > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalDistributed = totalDistributed.add(amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: USDCToken.transfer(shareholder,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: shareholderClaims[shareholder] = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: claimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(shouldDistribute(msg.sender),Too soon. Need to wait!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: distributeDividend(msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: getUnpaidEarnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shares[shareholder].amount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: shareholderTotalExcluded = shares[shareholder].totalExcluded

  ID: 6
  Type: NodeType.IF
  Expression: shareholderTotalDividends <= shareholderTotalExcluded

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: shareholderTotalDividends.sub(shareholderTotalExcluded)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9

Function: getCumulativeDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor)

Edges:
  0 -> 1

Function: addShareholder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: shareholderIndexes[shareholder] = shareholders.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shareholders.push(shareholder)

Edges:
  0 -> 1
  1 -> 2

Function: removeShareholder
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: shareholders.pop()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDCToken = IBEP20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: dividendsPerShareAccuracyFactor = 10 ** 36

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minPeriod = 300

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minDistribution = 1 * (10 ** 18)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Auth
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[_owner] = true

Edges:
  0 -> 1
  1 -> 2

Function: authorize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: unauthorize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: authorizations[adr]

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = adr

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(adr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: ATM
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(routerAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pair = IDEXFactory(router.factory()).createPair(router.WETH(),address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = uint256(- 1)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: dividendDistributor = new DividendDistributor(address(router))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[msg.sender] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[address(this)] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[msg.sender] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[pair] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[pair] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[msg.sender] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[address(this)] = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[DEAD] = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[ZERO] = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalFee = liquidityFee.add(rewardsFee)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalFeeIfSelling = totalFee.add(extraFeeOnSell)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Auth(msg.sender)

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 1

Function: authorize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: unauthorize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: authorizations[adr]

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = adr

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(adr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: getCirculatingSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO))

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approve(spender,uint256(- 1))

Edges:
  0 -> 1

Function: launched
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: launchedAt != 0

Edges:
  0 -> 1

Function: launch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: launchedAt = block.number

Edges:
  0 -> 1

Function: changeTxLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = newLimit

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeWalletLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _walletMax = newLimit

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeRestrictWhales
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: restrictWhales = newValue

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeIsFeeExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[holder] = exempt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeIsTxLimitExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[holder] = exempt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeIsDividendExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(holder != address(this) && holder != pair)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isDividendExempt[holder] = exempt

  ID: 3
  Type: NodeType.IF
  Expression: exempt

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: dividendDistributor.setShare(holder,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: dividendDistributor.setShare(holder,_balances[holder])

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: changeFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: liquidityFee = newLiqFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: rewardsFee = newRewardFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: extraFeeOnSell = newExtraSellFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalFee = liquidityFee.add(rewardsFee)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalFeeIfSelling = totalFee.add(extraFeeOnSell)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: changeFeeReceivers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoLiquidityReceiver = newLiquidityReceiver

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeSwapBackSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquifyEnabled = enableSwapBack

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = newSwapBackLimit

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquifyByLimitOnly = swapByLimitOnly

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: changeDistributionCriteria
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: dividendDistributor.setDistributionCriteria(newinPeriod,newMinDistribution)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 2
  2 -> 1

Function: changeDistributorSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gas < 750000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: distributorGas = gas

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transferFrom(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != uint256(- 1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transferFrom(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: inSwapAndLiquify

  ID: 2
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! authorizations[sender] && ! authorizations[recipient]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,Trading not open yet)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount || isTxLimitExempt[sender],TX Limit Exceeded)

  ID: 8
  Type: NodeType.IF
  Expression: msg.sender != pair && ! inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: ! launched() && recipient == pair

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balances[sender] > 0)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: launch()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 16
  Type: NodeType.IF
  Expression: ! isTxLimitExempt[recipient] && restrictWhales

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_balances[recipient].add(amount) <= _walletMax)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(finalAmount)

  ID: 21
  Type: NodeType.IF
  Expression: ! isDividendExempt[sender]

  ID: 22
  Type: NodeType.TRY
  Expression: dividendDistributor.setShare(sender,_balances[sender])

  ID: 23
  Type: NodeType.CATCH
  Expression: 

  ID: 24
  Type: NodeType.CATCH
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: ! isDividendExempt[recipient]

  ID: 27
  Type: NodeType.TRY
  Expression: dividendDistributor.setShare(recipient,_balances[recipient])

  ID: 28
  Type: NodeType.CATCH
  Expression: 

  ID: 29
  Type: NodeType.CATCH
  Expression: 

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.TRY
  Expression: dividendDistributor.process(distributorGas)

  ID: 32
  Type: NodeType.CATCH
  Expression: 

  ID: 33
  Type: NodeType.CATCH
  Expression: 

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,finalAmount)

  ID: 35
  Type: NodeType.RETURN
  Expression: true

  ID: 36
  Type: NodeType.IF
  Expression: ! isFeeExempt[sender] && ! isFeeExempt[recipient]

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: finalAmount = takeFee(sender,recipient,amount)

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: finalAmount = amount

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 36
  20 -> 21
  21 -> 22
  21 -> 25
  22 -> 23
  22 -> 24
  22 -> 25
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  26 -> 30
  27 -> 28
  27 -> 29
  27 -> 30
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 33
  31 -> 34
  32 -> 34
  33 -> 34
  34 -> 35
  36 -> 37
  36 -> 38
  37 -> 39
  38 -> 39
  39 -> 20

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: takeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: feeAmount = amount.mul(feeApplicable).div(100)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(feeAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),feeAmount)

  ID: 5
  Type: NodeType.RETURN
  Expression: amount.sub(feeAmount)

  ID: 6
  Type: NodeType.IF
  Expression: pair == recipient

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: feeApplicable = totalFeeIfSelling

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: feeApplicable = totalFee

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 2

Function: tradingStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = newStatus

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokensToLiquify = _balances[address(this)]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToLiquify = tokensToLiquify.mul(liquidityFee).div(totalFee).div(2)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amountToSwap = tokensToLiquify.sub(amountToLiquify)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = router.WETH()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: amountBNB = address(this).balance

  ID: 9
  Type: NodeType.VARIABLE
  Expression: totalBNBFee = totalFee.sub(liquidityFee.div(2))

  ID: 10
  Type: NodeType.VARIABLE
  Expression: amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalBNBFee).div(2)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: amountBNBReflection = amountBNB.mul(rewardsFee).div(totalBNBFee)

  ID: 12
  Type: NodeType.TRY
  Expression: dividendDistributor.deposit{value: amountBNBReflection}()

  ID: 13
  Type: NodeType.CATCH
  Expression: 

  ID: 14
  Type: NodeType.CATCH
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: amountToLiquify > 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: AutoLiquify(amountBNBLiquidity,amountToLiquify)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 19
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  12 -> 15
  13 -> 15
  14 -> 15
  15 -> 16
  15 -> 18
  16 -> 17
  17 -> 18
  19 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD = 0x000000000000000000000000000000000000dEaD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO = 0x0000000000000000000000000000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDCToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 100000 * 10 ** 12 * (10 ** _decimals)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = _totalSupply * 2 / 200

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _walletMax = _totalSupply * 3 / 100

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: restrictWhales = true

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: liquidityFee = 1

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: rewardsFee = 4

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: extraFeeOnSell = 7

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalFee = 5

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalFeeIfSelling = 12

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = false

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: distributorGas = 500000

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAndLiquifyEnabled = true

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAndLiquifyByLimitOnly = false

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapThreshold = _totalSupply * 5 / 4000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Automatic Treasury Machine

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = ATM

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

Edges:
  0 -> 1
  1 -> 2


