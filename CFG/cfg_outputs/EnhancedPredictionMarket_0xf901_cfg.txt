Contract: IERC20
==================================================


Contract: EnhancedPredictionMarket
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: x10funToken = IERC20(_x10funToken)

Edges:
  0 -> 1
  1 -> 2

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Invalid owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createPrediction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: predictions[nextPredictionId] = Prediction({id:nextPredictionId,title:_title,createdAt:block.timestamp,endTime:block.timestamp + _duration,yesPool:0,noPool:0,resolved:false,outcome:false,totalParticipants:0})

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: PredictionCreated(nextPredictionId,_title,block.timestamp,block.timestamp + _duration)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nextPredictionId ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: placeBet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_predictionId < nextPredictionId,Invalid prediction)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: p = predictions[_predictionId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! p.resolved,Prediction resolved)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp < p.endTime,Prediction ended)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount >= minBetAmount,Total amount below minimum)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: fee = (_amount * platformFee) / 1000

  ID: 7
  Type: NodeType.VARIABLE
  Expression: betAmount = _amount - fee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(x10funToken.transferFrom(msg.sender,address(this),_amount),Transfer failed)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalFees += fee

  ID: 10
  Type: NodeType.VARIABLE
  Expression: bet = userBets[_predictionId][msg.sender]

  ID: 11
  Type: NodeType.IF
  Expression: _choice

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: p.yesPool += betAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: bet.yesAmount += betAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: p.noPool += betAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: bet.noAmount += betAmount

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: bet.yesAmount + bet.noAmount == betAmount

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: p.totalParticipants ++

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: BetPlaced(_predictionId,msg.sender,_choice,betAmount)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 21
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 16
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  21 -> 1

Function: resolvePrediction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: p = predictions[_predictionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! p.resolved,Already resolved)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= p.endTime,Not ended)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: p.resolved = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: p.outcome = _outcome

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: PredictionResolved(_predictionId,_outcome)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: claimWinnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: p = predictions[_predictionId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: bet = userBets[_predictionId][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(p.resolved,Not resolved)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! bet.claimed,Already claimed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: p.outcome

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.yesAmount > 0,No winning bet)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: winningAmount = (bet.yesAmount * (p.yesPool + p.noPool)) / p.yesPool

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bet.noAmount > 0,No winning bet)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: winningAmount = (bet.noAmount * (p.yesPool + p.noPool)) / p.noPool

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: bet.claimed = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(x10funToken.transfer(msg.sender,winningAmount),Transfer failed)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: WinningsClaimed(_predictionId,msg.sender,winningAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 1

Function: withdrawFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = totalFees

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalFees = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(x10funToken.transfer(owner,amount),Transfer failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setPlatformFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newFee <= MAX_FEE,Fee too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: platformFee = _newFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setMinBetAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minBetAmount = _newMin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MinBetChanged(_newMin)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getPredictionsPaginated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalPredictions = nextPredictionId - 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: start = page * pageSize

  ID: 3
  Type: NodeType.IF
  Expression: start >= totalPredictions

  ID: 4
  Type: NodeType.RETURN
  Expression: new EnhancedPredictionMarket.Prediction[](0)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: end = start + pageSize

  ID: 7
  Type: NodeType.IF
  Expression: end > totalPredictions

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: end = totalPredictions

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: result = new EnhancedPredictionMarket.Prediction[](end - start)

  ID: 11
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 12
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 14
  Type: NodeType.IFLOOP
  Expression: i < end - start

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: result[i] = predictions[start + i + 1]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 13
  11 -> 14
  12 -> 17
  13 -> 11
  14 -> 15
  14 -> 12
  15 -> 16
  16 -> 14

Function: getAllPredictions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: all = new EnhancedPredictionMarket.Prediction[](nextPredictionId - 1)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < nextPredictionId

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: all[i - 1] = predictions[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.RETURN
  Expression: all

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getUserBet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: userBets[_predictionId][_user]

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: nextPredictionId = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: platformFee = 20

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minBetAmount = 1000 * 1e18

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_FEE = 50

Edges:


