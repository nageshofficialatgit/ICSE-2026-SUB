Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(account)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 6
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: static call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: delegate call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returndata_size__verifyCallResult_asm_0 = mload(uint256)(returndata)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__verifyCallResult_asm_0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  9 -> 10
  10 -> 11


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

Edges:
  0 -> 1
  1 -> 2

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newAllowance = token.allowance(address(this),spender).add(value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newAllowance = token.allowance(address(this),spender).sub(value,SafeERC20: decreased allowance below zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: IBEP20
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: AggregatorV3Interface
==================================================


Contract: WMPresale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token = _token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDC = _USDC

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: USDT = _USDT

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: priceFeedETH = AggregatorV3Interface(_priceFeedETH)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: paymentReceiver = _paymentReceiver

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: maxTokeninPresale = 30000000000000 * 1e18

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenPricePerUSD = 0.01 * 1e18

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: referralPercentage = 7 * 1e16

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: getLatestPriceETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeedETH.latestRoundData()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint256(price) * 1e10

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: BuyWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus == true,Presale: Presale is not started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Presale: Unsuitable Amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isBlacklist[msg.sender] == false,Presale: You are blacklisted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tx.origin == msg.sender,Presale: Caller is a contract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_referrer != msg.sender,Presale: Cannot refer yourself)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethToUsd = (msg.value * getLatestPriceETH()) / 1e18

  ID: 7
  Type: NodeType.VARIABLE
  Expression: tokensToBuy = ETHToToken(msg.value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy <= maxTokeninPresale,Presale: Hardcap Reached!)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalUSDRaised += ethToUsd

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: address(paymentReceiver).transfer(msg.value)

  ID: 11
  Type: NodeType.IF
  Expression: referrers[msg.sender] == address(0) && _referrer != address(0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: referrers[msg.sender] = _referrer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[_referrer].totalReferrals = referralEarnings[_referrer].totalReferrals.add(1)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: referrers[msg.sender] != address(0)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: referralReward = tokensToBuy.mul(referralPercentage).div(1e18)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy + referralReward <= maxTokeninPresale,Presale: Hardcap Reached with referral)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(referrers[msg.sender],referralReward),Presale: Referral transfer failed)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: TokenSold += referralReward

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[referrers[msg.sender]].totalTokensEarned = referralEarnings[referrers[msg.sender]].totalTokensEarned.add(referralReward)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ReferralReward(referrers[msg.sender],msg.sender,referralReward)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(msg.sender,tokensToBuy),Presale: Token transfer failed)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: TokenSold += tokensToBuy

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24

Function: BuyWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus == true,Presale: Presale is not started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_USDCamount > 0,Presale: Unsuitable Amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isBlacklist[msg.sender] == false,Presale: You are blacklisted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tx.origin == msg.sender,Presale: Caller is a contract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_referrer != msg.sender,Presale: Cannot refer yourself)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: usdAmount = _USDCamount * 1e12

  ID: 7
  Type: NodeType.VARIABLE
  Expression: tokensToBuy = getValuePerUSD(usdAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy <= maxTokeninPresale,Presale: Hardcap Reached!)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalUSDRaised += usdAmount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: USDC.safeTransferFrom(msg.sender,paymentReceiver,_USDCamount)

  ID: 11
  Type: NodeType.IF
  Expression: referrers[msg.sender] == address(0) && _referrer != address(0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: referrers[msg.sender] = _referrer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[_referrer].totalReferrals = referralEarnings[_referrer].totalReferrals.add(1)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: referrers[msg.sender] != address(0)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: referralReward = tokensToBuy.mul(referralPercentage).div(1e18)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy + referralReward <= maxTokeninPresale,Presale: Hardcap Reached with referral)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(referrers[msg.sender],referralReward),Presale: Referral transfer failed)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: TokenSold += referralReward

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[referrers[msg.sender]].totalTokensEarned = referralEarnings[referrers[msg.sender]].totalTokensEarned.add(referralReward)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ReferralReward(referrers[msg.sender],msg.sender,referralReward)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(msg.sender,tokensToBuy),Presale: Token transfer failed)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: TokenSold += tokensToBuy

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24

Function: BuyWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus == true,Presale: Presale is not started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_USDTamount > 0,Presale: Unsuitable Amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isBlacklist[msg.sender] == false,Presale: You are blacklisted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tx.origin == msg.sender,Presale: Caller is a contract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_referrer != msg.sender,Presale: Cannot refer yourself)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: usdAmount = _USDTamount * 1e12

  ID: 7
  Type: NodeType.VARIABLE
  Expression: tokensToBuy = getValuePerUSD(usdAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy <= maxTokeninPresale,Presale: Hardcap Reached!)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalUSDRaised += usdAmount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: USDT.safeTransferFrom(msg.sender,paymentReceiver,_USDTamount)

  ID: 11
  Type: NodeType.IF
  Expression: referrers[msg.sender] == address(0) && _referrer != address(0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: referrers[msg.sender] = _referrer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[_referrer].totalReferrals = referralEarnings[_referrer].totalReferrals.add(1)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: referrers[msg.sender] != address(0)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: referralReward = tokensToBuy.mul(referralPercentage).div(1e18)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TokenSold + tokensToBuy + referralReward <= maxTokeninPresale,Presale: Hardcap Reached with referral)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(referrers[msg.sender],referralReward),Presale: Referral transfer failed)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: TokenSold += referralReward

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: referralEarnings[referrers[msg.sender]].totalTokensEarned = referralEarnings[referrers[msg.sender]].totalTokensEarned.add(referralReward)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ReferralReward(referrers[msg.sender],msg.sender,referralReward)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(msg.sender,tokensToBuy),Presale: Token transfer failed)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: TokenSold += tokensToBuy

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IsClaim == true,Claim is not open yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(Claimable[msg.sender] > 0,No Claimable Found!)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isBlacklist[msg.sender] == false,Presale: You are blacklisted)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tx.origin == msg.sender,Presale: Caller is a contract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,Claimable[msg.sender])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Claimable[msg.sender] = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getValuePerUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amt.div(TokenPricePerUSD).mul(1e18)

Edges:
  0 -> 1

Function: ETHToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsd = (_amount.mul(getLatestPriceETH())).div(1e18)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: numberOfTokens = ethToUsd.div(TokenPricePerUSD).mul(1e18)

  ID: 3
  Type: NodeType.RETURN
  Expression: numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: contractBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: getReferralEarnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: info = referralEarnings[_user]

  ID: 2
  Type: NodeType.RETURN
  Expression: (info.totalReferrals,info.totalTokensEarned)

  ID: 3
  Type: NodeType.RETURN
  Expression: (totalReferrals,totalTokensEarned)

Edges:
  0 -> 1
  1 -> 2

Function: setAggregatorV3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: priceFeedETH = AggregatorV3Interface(_priceFeedETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: releaseFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: releaseBEP20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IBEP20(_tokenAddress).safeTransfer(msg.sender,_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateTokenSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newTokenSold <= maxTokeninPresale,Presale: New TokenSold exceeds maxTokeninPresale)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TokenSold = _newTokenSold

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token = _token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDC = _USDC

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDT = _USDT

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeFundReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paymentReceiver = _paymentReceiver

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlacklist[_addr] = _state

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxTokenInPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxTokeninPresale = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: resumePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleStatus = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: stopPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleStatus = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: startTokenClaim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IsClaim = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: stopTokenClaim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IsClaim = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: TokenPricePerUSD = _newPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxTokeninPresale = _newMaxTokens

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setReferralPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newPercentage <= 100 * 1e16,Presale: Percentage cannot exceed 100%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: referralPercentage = _newPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getReferrer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: referrers[_user]

Edges:
  0 -> 1


