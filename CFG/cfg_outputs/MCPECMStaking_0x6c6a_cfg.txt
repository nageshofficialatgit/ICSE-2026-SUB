Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: Pausable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused(),Pausable: paused)

Edges:
  0 -> 1

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paused(),Pausable: not paused)

Edges:
  0 -> 1

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: MCPECMStaking
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_ecmCoin != address(0),Zero address not allowed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_minimumStake > 0,Minimum stake must be greater than 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maximumStake > _minimumStake,Maximum must be greater than minimum)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ecmCoin = IERC20(_ecmCoin)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: minimumStake = _minimumStake

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: maximumStake = _maximumStake

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addPlan(7,500,10000 * 10 ** 18)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _addPlan(30,800,50000 * 10 ** 18)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _addPlan(90,1100,200000 * 10 ** 18)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _addPlan(180,1500,1000000 * 10 ** 18)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _addPlan(365,2000,3000000 * 10 ** 18)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused(),Pausable: paused)

Edges:
  0 -> 1

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paused(),Pausable: not paused)

Edges:
  0 -> 1

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_planIndex < stakingPlans.length,Invalid plan index)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: plan = stakingPlans[_planIndex]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(plan.isActive,Plan is not active)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount >= minimumStake,Amount below minimum stake)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= maximumStake,Amount above maximum stake)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_referrer != msg.sender && _referrer != address(this),Invalid referrer)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(plan.currentPoolSize + _amount <= plan.maxPoolSize,Plan pool size limit reached)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.balanceOf(msg.sender) >= _amount,Insufficient ECM balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.allowance(msg.sender,address(this)) >= _amount,Insufficient allowance)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: currentStakeId = nextStakeId ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transferFrom(msg.sender,address(this),_amount),Transfer failed)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: plan.currentPoolSize += _amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: stakes[msg.sender].push(StakeInfo({stakeId:currentStakeId,amount:_amount,planIndex:_planIndex,startTime:block.timestamp,endTime:block.timestamp + (plan.duration * 86400),claimedAt:0,referrer:_referrer}))

  ID: 14
  Type: NodeType.VARIABLE
  Expression: newIndex = stakes[msg.sender].length - 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: stakeIdToIndex[msg.sender][currentStakeId] = newIndex

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: stakeOwners[currentStakeId] = msg.sender

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Staked(msg.sender,currentStakeId,_amount,_planIndex,block.timestamp + (plan.duration * 86400))

  ID: 18
  Type: NodeType.RETURN
  Expression: currentStakeId

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 19
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  19 -> 20
  20 -> 1

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stakeOwners[_stakeId] == msg.sender,Not stake owner)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: stakeIndex = findStakeIndex(msg.sender,_stakeId)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender][stakeIndex]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userStake.claimedAt == 0,Stake already claimed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= userStake.endTime,Stake still locked)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (rewardAmount,finalAmount) = calculateCurrentReward(msg.sender,stakeIndex)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: userStake.claimedAt = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: stakingPlans[userStake.planIndex].currentPoolSize -= userStake.amount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _processReferralCommission(userStake.referrer,msg.sender,_stakeId,rewardAmount,true)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transfer(msg.sender,finalAmount),Transfer failed)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Unstaked(msg.sender,_stakeId,userStake.amount,rewardAmount,normal)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 1

Function: forceUnstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: staker = stakeOwners[_stakeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(staker != address(0),Stake does not exist)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: isAdmin = (msg.sender == owner())

  ID: 4
  Type: NodeType.IF
  Expression: ! isAdmin

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == staker,Only stake owner or admin can force unstake)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: stakeIndex = findStakeIndex(staker,_stakeId)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[staker][stakeIndex]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userStake.claimedAt == 0,Stake already claimed)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: rewardAmount = 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: userStake.claimedAt = block.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: stakingPlans[userStake.planIndex].currentPoolSize -= userStake.amount

  ID: 15
  Type: NodeType.IF
  Expression: isAdmin && enableAdminForceUnstakeRewards

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (rewardAmount,transferAmount) = calculateCurrentReward(staker,stakeIndex)

  ID: 17
  Type: NodeType.IF
  Expression: rewardAmount > 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _processReferralCommission(userStake.referrer,staker,_stakeId,rewardAmount,true)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: ! isAdmin

  ID: 21
  Type: NodeType.VARIABLE
  Expression: penalty = (userStake.amount * penaltyRate) / 10000

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: transferAmount = userStake.amount - penalty

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: totalPenaltyCollected += penalty

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: PenaltyCollected(staker,penalty)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: transferAmount = userStake.amount

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transfer(staker,transferAmount),Transfer failed)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: Unstaked(staker,_stakeId,userStake.amount,rewardAmount,unstakeType)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 32
  Type: NodeType.IF
  Expression: isAdmin

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: unstakeType = admin

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: unstakeType = user

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 32
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 20
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 27
  20 -> 21
  20 -> 25
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  31 -> 1
  32 -> 33
  32 -> 34
  33 -> 35
  34 -> 35
  35 -> 13

Function: calculateAmounts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rewardAmount = (_amount * _rewardPercent * _duration) / (YEAR_IN_DAYS * 10000)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: finalAmount = _amount + rewardAmount

  ID: 3
  Type: NodeType.RETURN
  Expression: (rewardAmount,finalAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _processReferralCommission
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _enabled && _referrer != address(0) && _rewardAmount > 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: commission = (_rewardAmount * referralCommissionRate) / 10000

  ID: 3
  Type: NodeType.IF
  Expression: commission > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transfer(_referrer,commission),Referral transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ReferralCommissionPaid(_referrer,_staker,_stakeId,commission)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: calculateCurrentReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[_staker][_stakeIndex]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: plan = stakingPlans[userStake.planIndex]

  ID: 3
  Type: NodeType.RETURN
  Expression: calculateAmounts(userStake.amount,plan.rewardPercent,plan.duration)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: findStakeIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: index = stakeIdToIndex[_staker][_stakeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < stakes[_staker].length,Invalid index)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stakes[_staker][index].stakeId == _stakeId,Stake ID mismatch)

  ID: 4
  Type: NodeType.RETURN
  Expression: index

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: addPlan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_duration > 0,Duration must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_rewardPercent > 0,Reward percent must be greater than 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxPoolSize > 0,Max pool size must be greater than 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _addPlan(_duration,_rewardPercent,_maxPoolSize)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _addPlan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: stakingPlans.push(StakingPlan({duration:_duration,rewardPercent:_rewardPercent,isActive:true,maxPoolSize:_maxPoolSize,currentPoolSize:0}))

Edges:
  0 -> 1

Function: updatePlan
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_planIndex < stakingPlans.length,Invalid plan index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_duration > 0,Duration must be greater than 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_rewardPercent > 0,Reward percent must be greater than 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxPoolSize >= stakingPlans[_planIndex].currentPoolSize,Max pool size cannot be less than current pool size)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: plan = stakingPlans[_planIndex]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: plan.duration = _duration

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: plan.rewardPercent = _rewardPercent

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: plan.isActive = _isActive

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: plan.maxPoolSize = _maxPoolSize

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: updateReferralCommissionRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newRate <= 10000,Rate cannot exceed 100%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: referralCommissionRate = _newRate

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAdminForceUnstakeRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: enableAdminForceUnstakeRewards = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateMinimumStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newMinimumStake <= maximumStake,Min must be less than maximum stake)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minimumStake = _newMinimumStake

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateMaximumStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newMaxAmount >= minimumStake,Max must be greater than minimum stake)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maximumStake = _newMaxAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updatePenaltyRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newRate <= 10000,Rate cannot exceed 100%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: penaltyRate = _newRate

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawECM
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount > 0,Amount must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= ecmCoin.balanceOf(address(this)),Insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transfer(msg.sender,_amount),Transfer failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ECMWithdrawn(msg.sender,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = ecmCoin.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ecmCoin.transfer(owner(),balance),Transfer failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ECMWithdrawn(owner(),balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getUserStakes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStakes = stakes[_user]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: length = userStakes.length

  ID: 3
  Type: NodeType.IF
  Expression: _offset >= length

  ID: 4
  Type: NodeType.RETURN
  Expression: new MCPECMStaking.StakeInfo[](0)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: remaining = length - _offset

  ID: 8
  Type: NodeType.VARIABLE
  Expression: result = new MCPECMStaking.StakeInfo[](count)

  ID: 9
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 12
  Type: NodeType.IFLOOP
  Expression: i < count

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[i] = userStakes[_offset + i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.RETURN
  Expression: result

  ID: 16
  Type: NodeType.IF
  Expression: remaining < _limit

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: count = remaining

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: count = _limit

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 16
  8 -> 11
  9 -> 12
  10 -> 15
  11 -> 9
  12 -> 13
  12 -> 10
  13 -> 14
  14 -> 12
  16 -> 17
  16 -> 18
  17 -> 19
  18 -> 19
  19 -> 8

Function: getUserStakeCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: stakes[_user].length

Edges:
  0 -> 1

Function: getStakeInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = stakeOwners[_stakeId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),Stake does not exist)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: stakeIndex = findStakeIndex(owner,_stakeId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[owner][stakeIndex]

  ID: 5
  Type: NodeType.VARIABLE
  Expression: plan = stakingPlans[userStake.planIndex]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: planIndex = userStake.planIndex

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: rewardPercent = plan.rewardPercent

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (rewardAmount,finalAmount) = calculateAmounts(userStake.amount,plan.rewardPercent,plan.duration)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: claimed = userStake.claimedAt > 0

  ID: 10
  Type: NodeType.RETURN
  Expression: (owner,userStake.amount,planIndex,rewardAmount,finalAmount,userStake.startTime,userStake.endTime,rewardPercent,claimed,userStake.claimedAt,userStake.referrer)

  ID: 11
  Type: NodeType.RETURN
  Expression: (owner,amount,planIndex,rewardAmount,finalAmount,startTime,endTime,rewardPercent,claimed,claimedAt,referrer)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Contract does not accept ETH)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: penaltyRate = 1000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: referralCommissionRate = 500

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: enableAdminForceUnstakeRewards = true

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: nextStakeId = 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: YEAR_IN_DAYS = 365

Edges:


