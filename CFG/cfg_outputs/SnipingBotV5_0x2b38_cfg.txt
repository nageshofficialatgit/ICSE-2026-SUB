Contract: IERC20
==================================================


Contract: IERC165
==================================================


Contract: IERC1363
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transferFrom,(from,to,value)))

Edges:
  0 -> 1

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,oldAllowance + value)

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < requestedDecrease

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedDecreaseAllowance(address,uint256,uint256)(spender,currentAllowance,requestedDecrease)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,currentAllowance - requestedDecrease)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: forceApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeCall(token.approve,(spender,value))

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.approve,(spender,0)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: transferAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: transferFromAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safeTransferFrom(token,from,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.transferFromAndCall(from,to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: approveAndCallRelaxed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to.code.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,to,value)

  ID: 3
  Type: NodeType.IF
  Expression: ! token.approveAndCall(to,value,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success__callOptionalReturn_asm_0 = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.IF
  Expression: ! success__callOptionalReturn_asm_0

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptr__callOptionalReturn_asm_0 = mload(uint256)(0x40)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(ptr__callOptionalReturn_asm_0,0,returndatasize()())

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr__callOptionalReturn_asm_0,returndatasize()())

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: address(token).code.length == 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: returnValue != 1

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  6 -> 7
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 7
  12 -> 13
  13 -> 14
  14 -> 18
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 16
  21 -> 17

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,data + 0x20,mload(uint256)(data),0,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returnSize = returndatasize()()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: returnValue = mload(uint256)(0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: returnSize == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: success && address(token).code.length > 0

  ID: 12
  Type: NodeType.RETURN
  Expression: success && returnValue == 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  10 -> 11
  10 -> 12


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: IUniswapV2Router02
==================================================


Contract: SnipingBotV5
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_router != address(0),Invalid router address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV2Router02(_router)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Must send ETH to buy)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: WETH = uniswapRouter.WETH()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[1] = token

  ID: 6
  Type: NodeType.VARIABLE
  Expression: initialBalance = IERC20(token).balanceOf(address(this))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin,path,address(this),block.timestamp + 300)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: newBalance = IERC20(token).balanceOf(address(this))

  ID: 9
  Type: NodeType.VARIABLE
  Expression: boughtAmount = newBalance - initialBalance

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(boughtAmount > 0,Token purchase failed)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tradeRecords[token] = TradeInfo({buyPrice:msg.value / boughtAmount,tokenAmount:boughtAmount})

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokenPurchased(token,boughtAmount,tradeRecords[token].buyPrice)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  14 -> 1

Function: sellToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = tradeRecords[token]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.tokenAmount > 0,No tokens to sell)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sellAmount = (trade.tokenAmount * percentage) / 100

  ID: 4
  Type: NodeType.VARIABLE
  Expression: WETH = uniswapRouter.WETH()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = token

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 8
  Type: NodeType.VARIABLE
  Expression: initialETHBalance = address(this).balance

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).safeIncreaseAllowance(address(uniswapRouter),sellAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(sellAmount,minETHOut,path,address(this),block.timestamp + 300)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: ethReceived = address(this).balance - initialETHBalance

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethReceived > 0,No ETH received)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: trade.tokenAmount -= sellAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: TokenSold(token,sellAmount,ethReceived)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 16
  16 -> 1

Function: checkSellConditions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: trade = tradeRecords[token]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trade.tokenAmount > 0,No trade data)

  ID: 3
  Type: NodeType.IF
  Expression: currentPrice >= trade.buyPrice * 150 / 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellToken(token,10,0)

  ID: 5
  Type: NodeType.IF
  Expression: currentPrice >= trade.buyPrice * 135 / 100

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sellToken(token,30,0)

  ID: 7
  Type: NodeType.IF
  Expression: currentPrice >= trade.buyPrice * 120 / 100

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sellToken(token,60,0)

  ID: 9
  Type: NodeType.IF
  Expression: currentPrice <= trade.buyPrice * 60 / 100

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: sellToken(token,20,0)

  ID: 11
  Type: NodeType.IF
  Expression: currentPrice <= trade.buyPrice * 80 / 100

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: sellToken(token,80,0)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 17
  5 -> 6
  5 -> 7
  6 -> 16
  7 -> 8
  7 -> 9
  8 -> 15
  9 -> 10
  9 -> 11
  10 -> 14
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No ETH to withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ETHWithdrawn(balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoWithdrawThreshold = 500000000000000000

Edges:


