Contract: Token
==================================================


Contract: LocalEthereumEscrows
==================================================

Function: getRelayedSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _hash = keccak256()(_tradeID,_actionByte,_maximumGasPrice)

  ID: 2
  Type: NodeType.IF
  Expression: tx.gasprice > _maximumGasPrice

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: ecrecover(bytes32,uint8,bytes32,bytes32)(_hash,_v,_r,_s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: LocalEthereumEscrows
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: arbitrator = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: relayer = msg.sender

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: requestCancellationMinimumTime = 7200

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getEscrowAndHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _tradeHash = keccak256()(_tradeID,_seller,_buyer,_value,_fee)

  ID: 2
  Type: NodeType.RETURN
  Expression: (escrows[_tradeHash],_tradeHash)

Edges:
  0 -> 1
  1 -> 2

Function: createEscrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _tradeHash = keccak256()(_tradeID,_seller,_buyer,_value,_fee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! escrows[_tradeHash].exists)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256()(_tradeHash,_paymentWindowInSeconds,_expiry),_v,_r,_s) == relayer)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.timestamp < _expiry)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == _value && msg.value > 0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: escrows[_tradeHash] = Escrow(true,_sellerCanCancelAfter,0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Created(_tradeHash)

  ID: 9
  Type: NodeType.IF
  Expression: _paymentWindowInSeconds == 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _sellerCanCancelAfter = 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _sellerCanCancelAfter = uint32(block.timestamp) + _paymentWindowInSeconds

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 9
  7 -> 8
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 7

Function: doRelease
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 4
  Type: NodeType.IF
  Expression: ! _escrow.exists

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete escrows[_tradeHash]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Released(_tradeHash)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: transferMinusFees(_buyer,_value,_gasFees,_fee)

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + (GAS_doRelease + _additionalGas) * uint128(tx.gasprice)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + 0

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 8

Function: doDisableSellerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 4
  Type: NodeType.IF
  Expression: ! _escrow.exists

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _escrow.sellerCanCancelAfter == 0

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: escrows[_tradeHash].sellerCanCancelAfter = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: SellerCancelDisabled(_tradeHash)

  ID: 12
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: increaseGasSpent(_tradeHash,GAS_doDisableSellerCancel + _additionalGas)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: doBuyerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 4
  Type: NodeType.IF
  Expression: ! _escrow.exists

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete escrows[_tradeHash]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: CancelledByBuyer(_tradeHash)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: transferMinusFees(_seller,_value,_gasFees,0)

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + (GAS_doBuyerCancel + _additionalGas) * uint128(tx.gasprice)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + 0

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 8

Function: doSellerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 4
  Type: NodeType.IF
  Expression: ! _escrow.exists

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _escrow.sellerCanCancelAfter <= 1 || _escrow.sellerCanCancelAfter > block.timestamp

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: delete escrows[_tradeHash]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: CancelledBySeller(_tradeHash)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: transferMinusFees(_seller,_value,_gasFees,0)

  ID: 14
  Type: NodeType.RETURN
  Expression: true

  ID: 15
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + (GAS_doSellerCancel + _additionalGas) * uint128(tx.gasprice)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _gasFees = _escrow.totalGasFeesSpentByRelayer + 0

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 15
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 11

Function: doSellerRequestCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 4
  Type: NodeType.IF
  Expression: ! _escrow.exists

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _escrow.sellerCanCancelAfter != 1

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: escrows[_tradeHash].sellerCanCancelAfter = uint32(block.timestamp) + requestCancellationMinimumTime

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: SellerRequestedCancel(_tradeHash)

  ID: 12
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: increaseGasSpent(_tradeHash,GAS_doSellerRequestCancel + _additionalGas)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: resolveDispute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _signature = ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256()(_tradeID,ACTION_DISPUTE),_v,_r,_s)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_signature == _buyer || _signature == _seller)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (_escrow,_tradeHash) = getEscrowAndHash(_tradeID,_seller,_buyer,_value,_fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_escrow.exists)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_buyerPercent <= 100)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _totalFees = _escrow.totalGasFeesSpentByRelayer + GAS_doResolveDispute

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value - _totalFees <= _value)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: feesAvailableForWithdraw += _totalFees

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: delete escrows[_tradeHash]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: DisputeResolved(_tradeHash)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _buyer.transfer((_value - _totalFees) * _buyerPercent / 100)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyArbitrator()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 1

Function: release
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == _seller)

  ID: 2
  Type: NodeType.RETURN
  Expression: doRelease(_tradeID,_seller,_buyer,_value,_fee,0)

Edges:
  0 -> 1
  1 -> 2

Function: disableSellerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == _buyer)

  ID: 2
  Type: NodeType.RETURN
  Expression: doDisableSellerCancel(_tradeID,_seller,_buyer,_value,_fee,0)

Edges:
  0 -> 1
  1 -> 2

Function: buyerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == _buyer)

  ID: 2
  Type: NodeType.RETURN
  Expression: doBuyerCancel(_tradeID,_seller,_buyer,_value,_fee,0)

Edges:
  0 -> 1
  1 -> 2

Function: sellerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == _seller)

  ID: 2
  Type: NodeType.RETURN
  Expression: doSellerCancel(_tradeID,_seller,_buyer,_value,_fee,0)

Edges:
  0 -> 1
  1 -> 2

Function: sellerRequestCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == _seller)

  ID: 2
  Type: NodeType.RETURN
  Expression: doSellerRequestCancel(_tradeID,_seller,_buyer,_value,_fee,0)

Edges:
  0 -> 1
  1 -> 2

Function: relaySellerCannotCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: relay(_tradeID,_seller,_buyer,_value,_fee,_maximumGasPrice,_v,_r,_s,ACTION_SELLER_CANNOT_CANCEL,0)

Edges:
  0 -> 1

Function: relayBuyerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: relay(_tradeID,_seller,_buyer,_value,_fee,_maximumGasPrice,_v,_r,_s,ACTION_BUYER_CANCEL,0)

Edges:
  0 -> 1

Function: relayRelease
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: relay(_tradeID,_seller,_buyer,_value,_fee,_maximumGasPrice,_v,_r,_s,ACTION_RELEASE,0)

Edges:
  0 -> 1

Function: relaySellerCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: relay(_tradeID,_seller,_buyer,_value,_fee,_maximumGasPrice,_v,_r,_s,ACTION_SELLER_CANCEL,0)

Edges:
  0 -> 1

Function: relaySellerRequestCancel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: relay(_tradeID,_seller,_buyer,_value,_fee,_maximumGasPrice,_v,_r,_s,ACTION_SELLER_REQUEST_CANCEL,0)

Edges:
  0 -> 1

Function: relay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _relayedSender = getRelayedSender(_tradeID,_actionByte,_maximumGasPrice,_v,_r,_s)

  ID: 2
  Type: NodeType.IF
  Expression: _relayedSender == _buyer

  ID: 3
  Type: NodeType.IF
  Expression: _actionByte == ACTION_SELLER_CANNOT_CANCEL

  ID: 4
  Type: NodeType.RETURN
  Expression: doDisableSellerCancel(_tradeID,_seller,_buyer,_value,_fee,_additionalGas)

  ID: 5
  Type: NodeType.IF
  Expression: _actionByte == ACTION_BUYER_CANCEL

  ID: 6
  Type: NodeType.RETURN
  Expression: doBuyerCancel(_tradeID,_seller,_buyer,_value,_fee,_additionalGas)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: _relayedSender == _seller

  ID: 10
  Type: NodeType.IF
  Expression: _actionByte == ACTION_RELEASE

  ID: 11
  Type: NodeType.RETURN
  Expression: doRelease(_tradeID,_seller,_buyer,_value,_fee,_additionalGas)

  ID: 12
  Type: NodeType.IF
  Expression: _actionByte == ACTION_SELLER_CANCEL

  ID: 13
  Type: NodeType.RETURN
  Expression: doSellerCancel(_tradeID,_seller,_buyer,_value,_fee,_additionalGas)

  ID: 14
  Type: NodeType.IF
  Expression: _actionByte == ACTION_SELLER_REQUEST_CANCEL

  ID: 15
  Type: NodeType.RETURN
  Expression: doSellerRequestCancel(_tradeID,_seller,_buyer,_value,_fee,_additionalGas)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.RETURN
  Expression: false

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 21
  9 -> 10
  9 -> 19
  10 -> 11
  10 -> 12
  12 -> 13
  12 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  18 -> 20
  20 -> 21

Function: batchRelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _results = new bool[](_tradeID.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _tradeID.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _results[i] = relay(_tradeID[i],_seller[i],_buyer[i],_value[i],_fee[i],_maximumGasPrice[i],_v[i],_r[i],_s[i],_actionByte[i],_additionalGas)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: _results

  ID: 10
  Type: NodeType.IF
  Expression: msg.sender == relayer

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _additionalGas = uint128(GAS_batchRelayBaseCost / _tradeID.length)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _additionalGas = uint128(0)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 10
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 5

Function: increaseGasSpent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: escrows[_tradeHash].totalGasFeesSpentByRelayer += _gas * uint128(tx.gasprice)

Edges:
  0 -> 1

Function: transferMinusFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _totalFees = (_value * _fee / 10000) + _totalGasFeesSpentByRelayer

  ID: 2
  Type: NodeType.IF
  Expression: _value - _totalFees > _value

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: feesAvailableForWithdraw += _totalFees

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(_value - _totalFees)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6

Function: withdrawFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_amount <= feesAvailableForWithdraw)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: feesAvailableForWithdraw -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setArbitrator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: arbitrator = _newArbitrator

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setRelayer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: relayer = _newRelayer

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setRequestCancellationMinimumTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: requestCancellationMinimumTime = _newRequestCancellationMinimumTime

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokenContract.transfer(_transferTo,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferTokenFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokenContract.transferFrom(_transferTo,_transferFrom,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokenContract.approve(_spender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_SELLER_CANNOT_CANCEL = 0x01

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_BUYER_CANCEL = 0x02

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_SELLER_CANCEL = 0x03

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_SELLER_REQUEST_CANCEL = 0x04

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_RELEASE = 0x05

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTION_DISPUTE = 0x06

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doRelease = 36100

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doDisableSellerCancel = 12100

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doBuyerCancel = 36100

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doSellerCancel = 36100

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doSellerRequestCancel = 12100

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_doResolveDispute = 36100

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GAS_batchRelayBaseCost = 28500

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12


