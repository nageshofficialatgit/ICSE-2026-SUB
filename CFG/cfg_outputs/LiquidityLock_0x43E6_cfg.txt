Contract: IERC20
==================================================


Contract: LiquidityLock
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: deploymentTime = block.timestamp

Edges:
  0 -> 1
  1 -> 2

Function: lock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lockDuration >= 172800,Lock duration must be at least 48 hours)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(lpToken).transferFrom(msg.sender,address(this),amount),Token transfer failed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: unlockTime = block.timestamp + lockDuration

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: locks[lpToken] = LockInfo(amount,unlockTime)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Locked(lpToken,amount,unlockTime)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.RETURN
  Expression: unlockTime

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  6 -> 1

Function: claimLockedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lockInfo = locks[lpToken]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lockInfo.amount > 0,No tokens locked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lockInfo.unlockTime,Lock period not yet expired)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amount = lockInfo.amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lockInfo.amount = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(lpToken).transfer(msg.sender,amount),Token transfer failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Claimed(lpToken,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: claimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= deploymentTime + 172800,Tokens can be claimed only after 48 hours from deployment)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenBalance = IERC20(token).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenBalance > 0,No tokens to claim)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).transfer(msg.sender,tokenBalance),Token transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Claimed(token,tokenBalance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: claimETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= deploymentTime + 172800,ETH can be claimed only after 48 hours from deployment)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No ETH to claim)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


