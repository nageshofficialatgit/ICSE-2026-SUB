Contract: IOGGPToken
==================================================


Contract: GameDataContract
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: setOggpTokenAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: oggpTokenAddress = _oggpTokenAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getPlayerData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: playerData[player]

Edges:
  0 -> 1

Function: updateGameData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! playerExists[player]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: players.push(player)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: playerExists[player] = true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: data = playerData[player]

  ID: 6
  Type: NodeType.IF
  Expression: score > data.highScore

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: data.highScore = score

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: data.totalScore += score

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: data.gamesPlayed += 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: data.totalLinesCleared += linesCleared

  ID: 12
  Type: NodeType.VARIABLE
  Expression: newPoints = linesCleared * 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: data.oggPoints += newPoints

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: data.lastUpdated = block.timestamp

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: GameDataUpdated(player,data.highScore,data.totalScore,data.gamesPlayed,data.totalLinesCleared,data.oggPoints)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: OggPointsAwarded(player,newPoints,Game session completed)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 17
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: mintGameResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(linesCleared > 0,No lines cleared)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oggPoints = linesCleared * 10

  ID: 3
  Type: NodeType.IF
  Expression: oggpTokenAddress != address(0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oggpToken = IOGGPToken(oggpTokenAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: oggpToken.mint(msg.sender,oggPoints)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: ! playerExists[msg.sender]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: players.push(msg.sender)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: playerExists[msg.sender] = true

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: data = playerData[msg.sender]

  ID: 12
  Type: NodeType.IF
  Expression: score > data.highScore

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: data.highScore = score

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: data.totalScore += score

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: data.gamesPlayed += 1

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: data.totalLinesCleared += linesCleared

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: data.oggPoints += oggPoints

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: data.lastUpdated = block.timestamp

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: GameResultMinted(msg.sender,score,linesCleared,oggPoints)

  ID: 21
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21

Function: awardOggPoints
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! playerExists[player]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: players.push(player)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: playerExists[player] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: playerData[player].lastUpdated = block.timestamp

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: playerData[player].oggPoints += amount

  ID: 7
  Type: NodeType.IF
  Expression: oggpTokenAddress != address(0)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: oggpToken = IOGGPToken(oggpTokenAddress)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: oggpToken.mint(player,amount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: OggPointsAwarded(player,amount,reason)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: spendOggPoints
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(playerExists[player],Player does not exist)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(playerData[player].oggPoints >= amount,Insufficient OGG points)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: playerData[player].oggPoints -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OggPointsAwarded(player,amount,reason)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getTopPlayers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = n

  ID: 2
  Type: NodeType.IF
  Expression: players.length < n

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: length = players.length

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tempAddresses = new address[](players.length)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tempScores = new uint256[](players.length)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < players.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tempAddresses[i] = players[i]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: tempScores[i] = playerData[players[i]].highScore

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 17
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < players.length

  ID: 18
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 19
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: j = i_scope_0 + 1

  ID: 21
  Type: NodeType.IFLOOP
  Expression: j < players.length

  ID: 22
  Type: NodeType.IF
  Expression: tempScores[j] > tempScores[i_scope_0]

  ID: 23
  Type: NodeType.VARIABLE
  Expression: tempScore = tempScores[i_scope_0]

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: tempScores[i_scope_0] = tempScores[j]

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: tempScores[j] = tempScore

  ID: 26
  Type: NodeType.VARIABLE
  Expression: tempAddress = tempAddresses[i_scope_0]

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: tempAddresses[i_scope_0] = tempAddresses[j]

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: tempAddresses[j] = tempAddress

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: addresses = new address[](length)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: scores = new uint256[](length)

  ID: 34
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 35
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 36
  Type: NodeType.VARIABLE
  Expression: i_scope_1 = 0

  ID: 37
  Type: NodeType.IFLOOP
  Expression: i_scope_1 < length

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: addresses[i_scope_1] = tempAddresses[i_scope_1]

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: scores[i_scope_1] = tempScores[i_scope_1]

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: i_scope_1 ++

  ID: 41
  Type: NodeType.RETURN
  Expression: (addresses,scores)

  ID: 42
  Type: NodeType.RETURN
  Expression: (addresses,scores)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 16
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10
  14 -> 17
  15 -> 32
  16 -> 14
  17 -> 20
  17 -> 15
  18 -> 21
  19 -> 31
  20 -> 18
  21 -> 22
  21 -> 19
  22 -> 23
  22 -> 29
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 21
  31 -> 17
  32 -> 33
  33 -> 36
  34 -> 37
  35 -> 41
  36 -> 34
  37 -> 38
  37 -> 35
  38 -> 39
  39 -> 40
  40 -> 37

Function: getPlayerCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: players.length

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner cannot be zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


