Contract: TylixUSDT
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 1000000 * 10 ** decimals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = totalSupply

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! blacklist[msg.sender],Error: Sender is blacklisted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= amount,Error: Insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),Error: Invalid recipient address)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,recipient,amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: logAction(Transfer,msg.sender,amount)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Error: Invalid spender address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowances[msg.sender][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! blacklist[sender],Error: Sender is blacklisted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[sender] >= amount,Error: Insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowances[sender][msg.sender] >= amount,Error: Allowance exceeded)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),Error: Invalid recipient address)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowances[sender][msg.sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[sender] -= amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: logAction(TransferFrom,sender,amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: setBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),Error: Invalid account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(blacklist[account] != value,Error: Account already in this state)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: blacklist[account] = value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Blacklisted(account,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.IF
  Expression: value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: logAction(Blacklist,account,1)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: logAction(Blacklist,account,0)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  6 -> 1
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),Error: Invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalSupply + amount <= maxSupply,Error: Max supply exceeded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lastMintTime + mintCooldown,Error: Minting cooldown active)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalSupply += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lastMintTime = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Mint(msg.sender,recipient,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),recipient,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: logAction(Mint,recipient,amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= amount,Error: Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Burn(msg.sender,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,address(0),amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: logAction(Burn,msg.sender,amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: getLogs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: logs

Edges:
  0 -> 1

Function: logAction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: logs.push(Log(action,account,amount,block.timestamp))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogAction(action,account,block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Tylix USDT

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = USDT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxSupply = 2000000 * 10 ** 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintCooldown = 86400

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


