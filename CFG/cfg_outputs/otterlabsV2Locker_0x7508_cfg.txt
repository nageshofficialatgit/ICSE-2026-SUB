Contract: IERC20
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: otterlabsV2Locker
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: lockLP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lockDuration >= MIN_LOCK_TIME && lockDuration <= MAX_LOCK_TIME,Invalid lock duration)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: pair = IUniswapV2Pair(lpToken)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair.token0() != address(0) && pair.token1() != address(0),Invalid LP token)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: fee = (amount * lockFee) / FEE_DENOMINATOR

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amountAfterFee = amount - fee

  ID: 7
  Type: NodeType.VARIABLE
  Expression: success = IERC20(lpToken).transferFrom(msg.sender,address(this),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,LP token transfer failed)

  ID: 9
  Type: NodeType.IF
  Expression: fee > 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: success = IERC20(lpToken).transfer(owner(),fee)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Fee transfer failed)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: lockId = totalLocks[lpToken]

  ID: 14
  Type: NodeType.VARIABLE
  Expression: unlockTime = block.timestamp + lockDuration

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: locks[lpToken][lockId] = LockInfo({owner:msg.sender,lpToken:lpToken,amount:amountAfterFee,lockTime:block.timestamp,unlockTime:unlockTime,isLocked:true})

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalLocks[lpToken] ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: totalLocked[lpToken] += amountAfterFee

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: userLocks[msg.sender][lpToken].push(lockId)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: LPLocked(lpToken,msg.sender,amountAfterFee,lockId,unlockTime)

  ID: 20
  Type: NodeType.RETURN
  Expression: lockId

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 21
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  21 -> 1

Function: unlockLP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lock = locks[lpToken][lockId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lock.isLocked,Lock not found or already unlocked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lock.owner == msg.sender,Not lock owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= lock.unlockTime,Lock not expired)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lock.isLocked = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalLocked[lpToken] -= lock.amount

  ID: 7
  Type: NodeType.VARIABLE
  Expression: success = IERC20(lpToken).transfer(msg.sender,lock.amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,LP token transfer failed)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: LPUnlocked(lpToken,msg.sender,lock.amount,lockId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: extendLock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newDuration >= MIN_LOCK_TIME && newDuration <= MAX_LOCK_TIME,Invalid lock duration)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: lock = locks[lpToken][lockId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lock.isLocked,Lock not found or already unlocked)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lock.owner == msg.sender,Not lock owner)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: newUnlockTime = block.timestamp + newDuration

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newUnlockTime > lock.unlockTime,Can only extend lock)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: lock.unlockTime = newUnlockTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: LockExtended(lpToken,lockId,newUnlockTime)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: getLockInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: locks[lpToken][lockId]

Edges:
  0 -> 1

Function: getUserLockCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: userLocks[user][lpToken].length

Edges:
  0 -> 1

Function: getUserLocks
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: userLocks[user][lpToken]

Edges:
  0 -> 1

Function: getLPTokenData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pair = IUniswapV2Pair(lpToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token0 = pair.token0()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token1 = pair.token1()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalLiquidity = IERC20(lpToken).totalSupply()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lockedLiquidity = totalLocked[lpToken]

  ID: 6
  Type: NodeType.RETURN
  Expression: (token0,token1,totalLiquidity,lockedLiquidity)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: setLockFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newFee <= 50,Fee too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lockFee = newFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transfer(msg.sender,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Token transfer failed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lockFee = 1

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_DENOMINATOR = 1000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_LOCK_TIME = 86400

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_LOCK_TIME = 67132800

Edges:
  0 -> 1
  1 -> 2


