Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: Stake_de_RenQ
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: distributor = address(_distributor)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stakeToken = IERC20(_token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: unstakePercent = 2000

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: percentDivider = 100_00

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(planIndex >= 0 && planIndex <= 2,Invalid Time Period)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount >= 0,stake more than 0)

  ID: 3
  Type: NodeType.IF
  Expression: ! Stakers[msg.sender].alreadyExists

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].alreadyExists = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: StakersID[totalStakers] = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalStakers ++

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: stakeToken.transferFrom(msg.sender,address(this),amount)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: index = Stakers[msg.sender].stakeCount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].totalStaked = Stakers[msg.sender].totalStaked.add(amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalStaked = totalStaked.add(amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].withdrawtime = block.timestamp.add(Duration[planIndex])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].staketime = block.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].amount = amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].reward = amount.mul(Bonus[planIndex]).div(percentDivider)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].persecondreward = stakersRecord[msg.sender][index].reward.div(Duration[planIndex])

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].plan = planIndex

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].stakeCount ++

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: userStakedPerPlan[msg.sender][planIndex] = userStakedPerPlan[msg.sender][planIndex].add(amount)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: totalStakedPerPlan[planIndex] = totalStakedPerPlan[planIndex].add(amount)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: totalStakersPerPlan[planIndex] ++

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: STAKE(msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! stakersRecord[msg.sender][index].withdrawan,already withdrawan)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! stakersRecord[msg.sender][index].unstaked,already unstaked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < Stakers[msg.sender].stakeCount,Invalid index)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].unstaked = true

  ID: 5
  Type: NodeType.VARIABLE
  Expression: penalty = stakersRecord[msg.sender][index].amount.mul(unstakePercent).div(percentDivider)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: stakeToken.transfer(distributor,penalty)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stakeToken.transfer(msg.sender,(stakersRecord[msg.sender][index].amount).sub(penalty))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalUnStaked = totalUnStaked.add(stakersRecord[msg.sender][index].amount.sub(penalty))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].totalUnStaked = Stakers[msg.sender].totalUnStaked.add(stakersRecord[msg.sender][index].amount.sub(penalty))

  ID: 10
  Type: NodeType.VARIABLE
  Expression: planIndex = stakersRecord[msg.sender][index].plan

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: userStakedPerPlan[msg.sender][planIndex] = userStakedPerPlan[msg.sender][planIndex].sub(stakersRecord[msg.sender][index].amount,user stake)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalStakedPerPlan[planIndex] = totalStakedPerPlan[planIndex].sub(stakersRecord[msg.sender][index].amount,total stake)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalStakersPerPlan[planIndex] --

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: UNSTAKE(msg.sender,stakersRecord[msg.sender][index].amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! stakersRecord[msg.sender][index].withdrawan,already withdrawan)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! stakersRecord[msg.sender][index].unstaked,already unstaked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stakersRecord[msg.sender][index].withdrawtime < block.timestamp,cannot withdraw before stake duration)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < Stakers[msg.sender].stakeCount,Invalid index)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stakersRecord[msg.sender][index].withdrawan = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: stakeToken.transfer(msg.sender,stakersRecord[msg.sender][index].amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stakeToken.transferFrom(distributor,msg.sender,stakersRecord[msg.sender][index].reward)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalUnStaked = totalUnStaked.add(stakersRecord[msg.sender][index].amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalClaimedReward = totalClaimedReward.add(stakersRecord[msg.sender][index].reward)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].totalUnStaked = Stakers[msg.sender].totalUnStaked.add(stakersRecord[msg.sender][index].amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Stakers[msg.sender].totalClaimedReward = Stakers[msg.sender].totalClaimedReward.add(stakersRecord[msg.sender][index].reward)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: planIndex = stakersRecord[msg.sender][index].plan

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: userStakedPerPlan[msg.sender][planIndex] = userStakedPerPlan[msg.sender][planIndex].sub(stakersRecord[msg.sender][index].amount,user stake)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalStakedPerPlan[planIndex] = totalStakedPerPlan[planIndex].sub(stakersRecord[msg.sender][index].amount,total stake)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalStakersPerPlan[planIndex] --

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: WITHDRAW(msg.sender,stakersRecord[msg.sender][index].reward.add(stakersRecord[msg.sender][index].amount))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: SetStakeDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Duration[0] = first

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Duration[1] = second

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Duration[2] = third

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: SetStakeBonus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Bonus[0] = first

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Bonus[1] = second

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Bonus[2] = third

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: SetDivider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: percentDivider = percent

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: SetPenalty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unstakePercent = percent

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: SetDistributor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: distributor = _wallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: realtimeReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < Stakers[user].stakeCount

  ID: 6
  Type: NodeType.IF
  Expression: ! stakersRecord[user][i].withdrawan && ! stakersRecord[user][i].unstaked

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: val = block.timestamp - stakersRecord[user][i].staketime

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: val = val.mul(stakersRecord[user][i].persecondreward)

  ID: 10
  Type: NodeType.IF
  Expression: val < stakersRecord[user][i].reward

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ret += val

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ret += stakersRecord[user][i].reward

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 16
  Type: NodeType.RETURN
  Expression: ret

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 16
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 14
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 5

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Duration = (7776000,15552000,31536000)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Bonus = (7_50,12_50,25_00)

Edges:
  0 -> 1


