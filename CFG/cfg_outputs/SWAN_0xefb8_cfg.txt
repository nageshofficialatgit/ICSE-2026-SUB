Contract: ERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: authorizations[_owner] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IDEXFactory
==================================================


Contract: IDEXRouter
==================================================


Contract: InterfaceLP
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SWAN
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = router.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pair = IDEXFactory(router.factory()).createPair(WETH,address(this))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pairContract = InterfaceLP(pair)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = type()(uint256).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isexemptfromfees[msg.sender] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isexemptfrommaxTX[msg.sender] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isexemptfrommaxTX[pair] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isexemptfrommaxTX[marketingFeeReceiver] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isexemptfrommaxTX[address(this)] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: autoLiquidityReceiver = msg.sender

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: marketingFeeReceiver = msg.sender

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: devFeeReceiver = msg.sender

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: buybackFeeReceiver = msg.sender

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: burnFeeReceiver = DEAD

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner()

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approve(spender,type()(uint256).max)

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transferFrom(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transferFrom(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: maxWalletRule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(maxWallPercent >= 1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletToken = (_totalSupply * maxWallPercent) / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: set_MaxWallet(_maxWalletToken)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _totalSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletToken = _totalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: inSwap

  ID: 2
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! authorizations[sender] && ! authorizations[recipient]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(TradingOpen,Trading not open yet)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: ! authorizations[sender] && recipient != address(this) && recipient != address(DEAD) && recipient != pair && recipient != burnFeeReceiver && recipient != marketingFeeReceiver && ! isexemptfrommaxTX[recipient]

  ID: 8
  Type: NodeType.VARIABLE
  Expression: heldTokens = balanceOf(recipient)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((heldTokens + amount) <= _maxWalletToken,Total Holding is currently limited, you can not buy that much.)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: checkTxLimit(sender,amount)

  ID: 12
  Type: NodeType.IF
  Expression: shouldSwapBack()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amountReceived)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amountReceived)

  ID: 19
  Type: NodeType.RETURN
  Expression: true

  ID: 20
  Type: NodeType.IF
  Expression: (isexemptfromfees[sender] || isexemptfromfees[recipient])

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: amountReceived = amount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: amountReceived = takeFee(sender,amount,recipient)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 20
  17 -> 18
  18 -> 19
  20 -> 21
  20 -> 22
  21 -> 23
  22 -> 23
  23 -> 17

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: checkTxLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount || isexemptfrommaxTX[sender],TX Limit Exceeded)

Edges:
  0 -> 1

Function: shouldTakeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ! isexemptfromfees[sender]

Edges:
  0 -> 1

Function: takeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: percent = transferpercent

  ID: 2
  Type: NodeType.IF
  Expression: recipient == pair

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: percent = sellpercent

  ID: 4
  Type: NodeType.IF
  Expression: sender == pair

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: percent = buypercent

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: feeAmount = amount.mul(totalFee).mul(percent).div(feeDenominator * 100)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: burnTokens = feeAmount.mul(burnFee).div(totalFee)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: contractTokens = feeAmount.sub(burnTokens)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(contractTokens)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _balances[burnFeeReceiver] = _balances[burnFeeReceiver].add(burnTokens)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),contractTokens)

  ID: 14
  Type: NodeType.IF
  Expression: burnTokens > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply.sub(burnTokens)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,ZERO,burnTokens)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: amount.sub(feeAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 7
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 17
  15 -> 16
  16 -> 17
  17 -> 18

Function: shouldSwapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender != pair && ! inSwap && swapEnabled && _balances[address(this)] >= swapThreshold

Edges:
  0 -> 1

Function: manualSend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(autoLiquidityReceiver).transfer(address(this).balance)

Edges:
  0 -> 1

Function: clearStuckToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tokens == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokens = ERC20(tokenAddress).balanceOf(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ClearToken(tokenAddress,tokens)

  ID: 5
  Type: NodeType.RETURN
  Expression: ERC20(tokenAddress).transfer(autoLiquidityReceiver,tokens)

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: setStructure
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellpercent = _percentonsell

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buypercent = _percentonbuy

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferpercent = _wallettransfer

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: startTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: TradingOpen = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buypercent = 200

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellpercent = 200

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: transferpercent = 1000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: reduceFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buypercent = 100

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellpercent = 100

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferpercent = 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amountToSwap = swapThreshold.sub(amountToLiquify)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 7
  Type: NodeType.VARIABLE
  Expression: balanceBefore = address(this).balance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amountETH = address(this).balance.sub(balanceBefore)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: amountETHbuyback = amountETH.mul(buybackFee).div(totalETHFee)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: amountETHdev = amountETH.mul(devFee).div(totalETHFee)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (tmpSuccess,None) = address(marketingFeeReceiver).call{value: amountETHMarketing}()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: (tmpSuccess,None) = address(devFeeReceiver).call{value: amountETHdev}()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: (tmpSuccess,None) = address(buybackFeeReceiver).call{value: amountETHbuyback}()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: tmpSuccess = false

  ID: 20
  Type: NodeType.IF
  Expression: amountToLiquify > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: AutoLiquify(amountETHLiquidity,amountToLiquify)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: swapping()

  ID: 25
  Type: NodeType.IF
  Expression: checkRatio(setRatio,setRatioDenominator)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: dynamicLiquidityFee = 0

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: dynamicLiquidityFee = liquidityFee

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 24
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 28
  27 -> 28
  28 -> 2

Function: set_fees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: EditTax(uint8(totalFee.mul(buypercent).div(100)),uint8(totalFee.mul(sellpercent).div(100)),uint8(totalFee.mul(transferpercent).div(100)))

Edges:
  0 -> 1

Function: setParameters
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: liquidityFee = _liquidityFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buybackFee = _buybackFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: marketingFee = _marketingFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: devFee = _devFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: burnFee = _burnFee

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalFee = _liquidityFee.add(_buybackFee).add(_marketingFee).add(_devFee).add(_burnFee)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: feeDenominator = _feeDenominator

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: set_fees()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: setWallets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoLiquidityReceiver = _autoLiquidityReceiver

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingFeeReceiver = _marketingFeeReceiver

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: devFeeReceiver = _devFeeReceiver

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: burnFeeReceiver = _burnFeeReceiver

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: buybackFeeReceiver = _buybackFeeReceiver

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: set_Receivers(marketingFeeReceiver,buybackFeeReceiver,burnFeeReceiver,devFeeReceiver)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: setSwapBackSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: set_SwapBack(swapThreshold,swapEnabled)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: checkRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: showBacking(accuracy) > ratio

Edges:
  0 -> 1

Function: showBacking
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: accuracy.mul(balanceOf(pair).mul(2)).div(showSupply())

Edges:
  0 -> 1

Function: showSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO))

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 1000000000000 * 10 ** _decimals

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = _totalSupply.mul(25).div(1000)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletToken = _totalSupply.mul(25).div(1000)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: liquidityFee = 1

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: marketingFee = 1

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: devFee = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buybackFee = 0

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: burnFee = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalFee = buybackFee + marketingFee + liquidityFee + devFee + burnFee

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: feeDenominator = 100

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellpercent = 100

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buypercent = 100

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: transferpercent = 100

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: setRatio = 30

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: setRatioDenominator = 100

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TradingOpen = false

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = true

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapThreshold = _totalSupply * 7 / 1000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD = 0x000000000000000000000000000000000000dEaD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO = 0x0000000000000000000000000000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Green Swan Event

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = TARIFF

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


