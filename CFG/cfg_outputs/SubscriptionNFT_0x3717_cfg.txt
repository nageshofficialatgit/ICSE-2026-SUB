Contract: IERC721
==================================================


Contract: SubscriptionNFT
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nftContract = IERC721(_nftContract)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: subscriptionFee = _subscriptionFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: subscriptionDuration = _subscriptionDuration

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: paySubscription
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= subscriptionFee,Insufficient fee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastPaymentTime[msg.sender] = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hasActiveSubscription[msg.sender] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: SubscriptionPaid(msg.sender,block.timestamp)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyNFTHolder(tokenId)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: isSubscriptionActive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: hasActiveSubscription[user]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: timeSinceLastPayment = block.timestamp - lastPaymentTime[user]

  ID: 3
  Type: NodeType.RETURN
  Expression: timeSinceLastPayment <= subscriptionDuration

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner can withdraw)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2

Function: getRemainingSubscriptionTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isSubscriptionActive(user)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: timeLeft = subscriptionDuration - (block.timestamp - lastPaymentTime[user])

  ID: 3
  Type: NodeType.RETURN
  Expression: timeLeft

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5


