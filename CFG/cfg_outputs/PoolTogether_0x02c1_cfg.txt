Contract: ERC20
==================================================


Contract: PoolTogether
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: startTime = block.timestamp

Edges:
  0 -> 1
  1 -> 2

Function: onBuySlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: slotAmountList.push(msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: slotMemberList.push(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: BuySlotEvent(startTime,msg.sender,msg.value,slotMemberList.length - 1)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: onPayOutstandingCommissions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: outstandingCommissionSending

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: outstandingCommissionTotal <= 0

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amount = outstandingCommissionTotal

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: outstandingCommissionSending = true

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (commissionSent,None) = address(organiser).call{gas: 3200,value: amount}()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: outstandingCommissionSending = false

  ID: 13
  Type: NodeType.IF
  Expression: commissionSent

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: outstandingCommissionTotal = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: CommissionSentSuccessEvent(organiser,amount)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: CommissionSentFailedEvent(organiser,amount)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: (CFG_ORGANISER == address(0))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: organiser = owner

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: organiser = CFG_ORGANISER

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  8 -> 18
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 17
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 10

Function: onPayOutstandingWinnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: outstandingWinnerList.length <= 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: failedList = new address[](outstandingWinnerList.length)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 13
  Type: NodeType.IFLOOP
  Expression: i < outstandingWinnerList.length

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: winMember = address(outstandingWinnerList[i])

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: winAmount = outstandingTotalByMember[winMember]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: drawTime = outstandingDrawTimeByMember[winMember]

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: tried = outstandingTriedByMember[winMember]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: delete outstandingTotalByMember[winMember]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: delete outstandingTriedByMember[winMember]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: WinningsSendEvent(drawTime,winMember,winAmount)

  ID: 21
  Type: NodeType.IF
  Expression: winAmount > 0

  ID: 22
  Type: NodeType.VARIABLE
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: (payoutSent,None) = winMember.call{gas: 3200,value: winAmount}()

  ID: 24
  Type: NodeType.IF
  Expression: payoutSent

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: outstandingWinningsTotal -= winAmount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: WinningsSentSuccessEvent(drawTime,winMember,winAmount)

  ID: 27
  Type: NodeType.IF
  Expression: tried < 3

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: outstandingTotalByMember[winMember] = winAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: outstandingTriedByMember[winMember] = tried

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: failedList[failedListLen] = winMember

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: failedListLen ++

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: outstandingWinningsTotal -= winAmount

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: WinningCanceledEvent(drawTime,winMember,winAmount)

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: WinningSentFailedEvent(drawTime,winMember,winAmount)

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: delete outstandingWinnerList

  ID: 40
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 41
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 42
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 43
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < failedListLen

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: outstandingWinnerList.push(failedList[i_scope_0])

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 12
  10 -> 13
  11 -> 39
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 37
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 27
  25 -> 26
  26 -> 36
  27 -> 28
  27 -> 32
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 34
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 13
  39 -> 42
  40 -> 43
  42 -> 40
  43 -> 44
  43 -> 41
  44 -> 45
  45 -> 43

Function: addCommitForReveal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: drawTimeByCommit[commit] = block.timestamp

Edges:
  0 -> 1

Function: addToBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyMoreThenMinAmount()

Edges:
  0 -> 1

Function: buySlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onBuySlot()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyMoreThenMinAmount()

Edges:
  0 -> 2
  2 -> 1

Function: getFinishDay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dayStart = startTime - (startTime % 86400)

  ID: 2
  Type: NodeType.RETURN
  Expression: dayStart + (86400) - 1

Edges:
  0 -> 1
  1 -> 2

Function: getFinishDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: timestamp = getFinishTime()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = useTimestampToDate(timestamp)

  ID: 6
  Type: NodeType.RETURN
  Expression: (year * 10000) + (month * 100) + day

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getFinishMonth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (year,month,None) = useTimestampToDate(startTime)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: daysInMonth = useDaysInMonth(year,month)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: monthStart = useTimestampFromDate(year,month,1,0,0,0)

  ID: 6
  Type: NodeType.RETURN
  Expression: monthStart + (daysInMonth * 86400) - 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getFinishTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: CFG_DRAW_KIND == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: getFinishDay()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: CFG_DRAW_KIND == 7

  ID: 5
  Type: NodeType.RETURN
  Expression: getFinishWeek()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: CFG_DRAW_KIND == 31

  ID: 8
  Type: NodeType.RETURN
  Expression: getFinishMonth()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: CFG_DRAW_KIND == 365

  ID: 11
  Type: NodeType.RETURN
  Expression: getFinishYear()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: getFinishDay()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13

Function: getFinishWeek
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dayStart = startTime - (startTime % 86400)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: dayOfWeek = ((dayStart / 86400) + 4) % 7

  ID: 4
  Type: NodeType.RETURN
  Expression: dayStart + (daysToAdd + 1) * 86400 - 1

  ID: 5
  Type: NodeType.IF
  Expression: (dayOfWeek == 0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: daysToAdd = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: daysToAdd = (7 - dayOfWeek)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 4

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance - outstandingCommissionTotal - outstandingWinningsTotal

Edges:
  0 -> 1

Function: getFinishYear
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (year,None,None) = useTimestampToDate(startTime)

  ID: 3
  Type: NodeType.RETURN
  Expression: useTimestampFromDate(year,12,31,23,59,59)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getStartDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: timestamp = startTime

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = useTimestampToDate(timestamp)

  ID: 6
  Type: NodeType.RETURN
  Expression: (year * 10000) + (month * 100) + day

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getSlotsCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: slotMemberList.length

Edges:
  0 -> 1

Function: getStartTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: startTime

Edges:
  0 -> 1

Function: tryFinish
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance - outstandingCommissionTotal - outstandingWinningsTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: commit = uint256(keccak256(bytes)(abi.encodePacked(reveal)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: commitTime = drawTimeByCommit[commit]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: canFinish = ((balance > 0) && (slotMemberList.length > 0) && (getFinishTime() < block.timestamp) && ((owner == msg.sender) || (CFG_ORGANISER == msg.sender) || (getFinishTime() + 3600 < block.timestamp)) && ((getFinishTime() + 43200 < block.timestamp) || ((block.timestamp - 86400 < commitTime) && (commitTime + 3600 < block.timestamp))))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(canFinish,Wait until the lottery draw has finished.)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: drawTime = startTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: startTime = block.timestamp

  ID: 8
  Type: NodeType.VARIABLE
  Expression: commission = uint256(balance * 15 / 100)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balance -= commission

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: outstandingCommissionTotal += commission

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onPayOutstandingCommissions()

  ID: 12
  Type: NodeType.VARIABLE
  Expression: winIndexList = new uint256[](7)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 19
  Type: NodeType.IFLOOP
  Expression: i < winIndexList.length

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: winHash = uint256(keccak256(bytes)(abi.encodePacked(drawTime,winHash,reveal)))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: winIndex = winHash % slotMemberList.length

  ID: 22
  Type: NodeType.IF
  Expression: winFlagByIndex[winIndex]

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: winIndexList[i] = type()(uint256).max

  ID: 24
  Type: NodeType.CONTINUE
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: winFlagByIndex[winIndex] = true

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: winIndexList[i] = winIndex

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: winTotal += slotAmountList[winIndex]

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 30
  Type: NodeType.IF
  Expression: winTotal > 0

  ID: 31
  Type: NodeType.VARIABLE
  Expression: 

  ID: 32
  Type: NodeType.VARIABLE
  Expression: 

  ID: 33
  Type: NodeType.VARIABLE
  Expression: 

  ID: 34
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 35
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 36
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 37
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < winIndexList.length

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: winIndex = winIndexList[i_scope_0]

  ID: 39
  Type: NodeType.IF
  Expression: winIndex == type()(uint256).max

  ID: 40
  Type: NodeType.CONTINUE
  Expression: 

  ID: 41
  Type: NodeType.ENDIF
  Expression: 

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: winAmount = slotAmountList[winIndex]

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: winMember = address(slotMemberList[winIndex])

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: amount = uint256(winAmount * balance / winTotal)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: WinningsSendEvent(drawTime,winMember,winAmount)

  ID: 46
  Type: NodeType.VARIABLE
  Expression: 

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: (payoutSent,None) = winMember.call{gas: 3200,value: amount}()

  ID: 48
  Type: NodeType.IF
  Expression: payoutSent

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: WinningsSentSuccessEvent(drawTime,winMember,amount)

  ID: 50
  Type: NodeType.IF
  Expression: outstandingTotalByMember[winMember] <= 0

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: outstandingWinnerList.push(winMember)

  ID: 52
  Type: NodeType.ENDIF
  Expression: 

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: outstandingDrawTimeByMember[winMember] = drawTime

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: outstandingTotalByMember[winMember] += amount

  ID: 55
  Type: NodeType.EXPRESSION
  Expression: outstandingTriedByMember[winMember] ++

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: outstandingWinningsTotal += amount

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: WinningSentFailedEvent(drawTime,winMember,amount)

  ID: 58
  Type: NodeType.ENDIF
  Expression: 

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 60
  Type: NodeType.ENDIF
  Expression: 

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: delete drawTimeByCommit[commit]

  ID: 62
  Type: NodeType.EXPRESSION
  Expression: delete slotAmountList

  ID: 63
  Type: NodeType.EXPRESSION
  Expression: delete slotMemberList

  ID: 64
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 65
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 66
  Type: NodeType.VARIABLE
  Expression: i_scope_1 = 0

  ID: 67
  Type: NodeType.IFLOOP
  Expression: i_scope_1 < winIndexList.length

  ID: 68
  Type: NodeType.EXPRESSION
  Expression: winIndex = winIndexList[i_scope_1]

  ID: 69
  Type: NodeType.IF
  Expression: winIndex == type()(uint256).max

  ID: 70
  Type: NodeType.CONTINUE
  Expression: 

  ID: 71
  Type: NodeType.ENDIF
  Expression: 

  ID: 72
  Type: NodeType.EXPRESSION
  Expression: delete winFlagByIndex[winIndex]

  ID: 73
  Type: NodeType.EXPRESSION
  Expression: i_scope_1 ++

  ID: 74
  Type: NodeType.EXPRESSION
  Expression: onPayOutstandingWinnings()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 18
  16 -> 19
  17 -> 30
  18 -> 16
  19 -> 20
  19 -> 17
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 25
  23 -> 24
  24 -> 29
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 19
  30 -> 31
  30 -> 60
  31 -> 32
  32 -> 33
  33 -> 36
  34 -> 37
  35 -> 60
  36 -> 34
  37 -> 38
  37 -> 35
  38 -> 39
  39 -> 40
  39 -> 41
  40 -> 59
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  48 -> 50
  49 -> 58
  50 -> 51
  50 -> 52
  51 -> 52
  52 -> 53
  53 -> 54
  54 -> 55
  55 -> 56
  56 -> 57
  57 -> 58
  58 -> 59
  59 -> 37
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 66
  64 -> 67
  65 -> 74
  66 -> 64
  67 -> 68
  67 -> 65
  68 -> 69
  69 -> 70
  69 -> 71
  70 -> 73
  71 -> 72
  72 -> 73
  73 -> 67

Function: payOutstandingCommissions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onPayOutstandingCommissions()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyHasOutstandingCommissions()

Edges:
  0 -> 2
  2 -> 1

Function: payOutstandingWinnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onPayOutstandingWinnings()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyHasOutstandingWinnings()

Edges:
  0 -> 2
  2 -> 1

Function: useDaysFromDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: y = int256(year)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: m = int256(month)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: d = int256(day)

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(d - 32075 + (1461 * (y + 4800 + (m - 14) / 12)) / 4 + (367 * (m - 2 - ((m - 14) / 12) * 12)) / 12 - (3 * ((y + 4900 + (m - 14) / 12) / 100)) / 4 - 2440588)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: useDaysInMonth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: month == 2

  ID: 3
  Type: NodeType.IF
  Expression: month == 4 || month == 6 || month == 9 || month == 11

  ID: 4
  Type: NodeType.RETURN
  Expression: 30

  ID: 5
  Type: NodeType.RETURN
  Expression: 31

  ID: 8
  Type: NodeType.IF
  Expression: useIsLeapYear(year)

  ID: 9
  Type: NodeType.RETURN
  Expression: 29

  ID: 10
  Type: NodeType.RETURN
  Expression: 28

Edges:
  0 -> 1
  1 -> 8
  1 -> 3
  3 -> 4
  3 -> 5
  8 -> 9
  8 -> 10

Function: useIsLeapYear
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: year % 4 != 0

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: year % 100 != 0

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: year % 400 != 0

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10

Function: useTimestampFromDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: daysOfDate = useDaysFromDate(year,month,day)

  ID: 2
  Type: NodeType.RETURN
  Expression: daysOfDate * 86400 + hour * 3600 + minute * 60 + second

Edges:
  0 -> 1
  1 -> 2

Function: useTimestampToDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = timestamp / 86400 + 719468

  ID: 2
  Type: NodeType.VARIABLE
  Expression: era = z / 146097

  ID: 3
  Type: NodeType.VARIABLE
  Expression: daysOfEra = z - era * 146097

  ID: 4
  Type: NodeType.VARIABLE
  Expression: yearsOfEra = (daysOfEra - daysOfEra / 1460 + daysOfEra / 36524 - daysOfEra / 146096) / 365

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = yearsOfEra + era * 400 + 1

  ID: 6
  Type: NodeType.VARIABLE
  Expression: daysOfYear = daysOfEra - (365 * yearsOfEra + yearsOfEra / 4 - yearsOfEra / 100)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: monthPredictor = (5 * daysOfYear + 2) / 153

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: day = daysOfYear - (153 * monthPredictor + 2) / 5 + 1

  ID: 10
  Type: NodeType.IF
  Expression: month <= 2

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: year -= 1

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: (monthPredictor < 10)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: month = (monthPredictor + 3)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: month = (monthPredictor - 9)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: (year,month,day)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 13
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 17
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 9

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onBuySlot()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyMoreThenMinAmount()

Edges:
  0 -> 2
  2 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onBuySlot()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyMoreThenMinAmount()

Edges:
  0 -> 2
  2 -> 1

Function: usdtWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdt = ERC20(CFG_USDT)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = usdt.balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,Not enough balance.)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: usdt.transfer(CFG_ORGANISER,balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CFG_DRAW_KIND = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CFG_MIN_AMOUNT = 1e15

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CFG_ORGANISER = 0x52CcB1e361B79Cd5a464CDbA7F8A51B0D7BdDa18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CFG_USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


