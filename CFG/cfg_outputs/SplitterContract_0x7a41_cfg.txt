Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IERC20
==================================================


Contract: IDexRouter
==================================================


Contract: SplitterContract
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: block.chainid == 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 4
  Type: NodeType.IF
  Expression: block.chainid == 5

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 6
  Type: NodeType.IF
  Expression: block.chainid == 97

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1

  ID: 8
  Type: NodeType.IF
  Expression: block.chainid == 42161

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506

  ID: 10
  Type: NodeType.IF
  Expression: block.chainid == 8453

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24

  ID: 12
  Type: NodeType.IF
  Expression: block.chainid == 11155111

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _v2Router = 0xa3D89E5B9C7a863BF4535F349Bc5619ABe72fb09

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Chain not configured)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: dexRouter = IDexRouter(_v2Router)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: incubatorAddress = msg.sender

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: projectOwnerAddress = msg.sender

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: marketingAddress = msg.sender

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: distributionPercs.incubatorPerc = 2333

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: distributionPercs.projectOwnerPerc = 2333

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: distributionPercs.marketingPerc = 667

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: distributionPercs.buybackPerc = 4667

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(distributionPercs.incubatorPerc + distributionPercs.projectOwnerPerc + distributionPercs.marketingPerc + distributionPercs.buybackPerc == FEE_DIVISOR,Must equal 100%)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 20
  4 -> 5
  4 -> 6
  5 -> 19
  6 -> 7
  6 -> 8
  7 -> 18
  8 -> 9
  8 -> 10
  9 -> 17
  10 -> 11
  10 -> 12
  11 -> 16
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: distributeETH()

Edges:
  0 -> 1

Function: updateIncubatorAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address != address(0),cannot set to 0 address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: incubatorAddress = _address

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateProjectOwnerAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address != address(0),cannot set to 0 address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: projectOwnerAddress = _address

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateMarketingAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address != address(0),cannot set to 0 address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingAddress = _address

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateTokenAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenAddress = _address

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateMinEthToConvert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: minEthToConvert = _minEthToConvertInwei

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateDistribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: distributionPercsMem.incubatorPerc = _incubator

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: distributionPercsMem.projectOwnerPerc = _projectOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: distributionPercsMem.marketingPerc = _marketing

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: distributionPercsMem.buybackPerc = _buyback

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(distributionPercsMem.incubatorPerc + distributionPercsMem.projectOwnerPerc + distributionPercsMem.marketingPerc + distributionPercsMem.buybackPerc == FEE_DIVISOR,Must equal 100%)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: distributionPercs = distributionPercsMem

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: distributeETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: distributionPercsMem = distributionPercs

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 3
  Type: NodeType.VARIABLE
  Expression: incubatorAmount = balance * distributionPercsMem.incubatorPerc / FEE_DIVISOR

  ID: 4
  Type: NodeType.VARIABLE
  Expression: projectOwnerAmount = balance * distributionPercsMem.projectOwnerPerc / FEE_DIVISOR

  ID: 5
  Type: NodeType.VARIABLE
  Expression: marketingAmount = balance * distributionPercsMem.marketingPerc / FEE_DIVISOR

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: incubatorAmount > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(incubatorAddress).call{value: incubatorAmount}()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: projectOwnerAmount > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(projectOwnerAddress).call{value: projectOwnerAmount}()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: marketingAmount > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(marketingAddress).call{value: marketingAmount}()

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: ethAmount = address(this).balance

  ID: 17
  Type: NodeType.IF
  Expression: tokenAddress != address(0) && ethAmount >= minEthToConvert

  ID: 18
  Type: NodeType.VARIABLE
  Expression: initialBalance = IERC20(tokenAddress).balanceOf(address(0xdead))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: swapEthForCFUN(ethAmount,1)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: totalBurned = IERC20(tokenAddress).balanceOf(address(0xdead))

  ID: 21
  Type: NodeType.VARIABLE
  Expression: deltaBalance = totalBurned - initialBalance

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: BuyBackAndBurn(ethAmount,deltaBalance,totalBurned)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 23
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23

Function: buyBackAndBurnManually
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddress != address(0),Token not active yet)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: initialBalance = IERC20(tokenAddress).balanceOf(address(0xdead))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapEthForCFUN(msg.value,amountOutMin)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalBurned = IERC20(tokenAddress).balanceOf(address(0xdead))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: deltaBalance = totalBurned - initialBalance

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: BuyBackAndBurn(msg.value,deltaBalance,totalBurned)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdrawStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(msg.sender).call{value: address(this).balance}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapEthForCFUN
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = dexRouter.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(tokenAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(amountOutMin,path,address(0xdead),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minEthToConvert = 400000000000000000

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_DIVISOR = 10000

Edges:


