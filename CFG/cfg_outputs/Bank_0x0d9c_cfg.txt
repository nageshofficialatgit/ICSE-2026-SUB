Contract: Secret
==================================================


Contract: Bank
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: secret = Secret(_secret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= 10000000000000000,At least 0.01 ether is required to deploy the bank!)

Edges:
  0 -> 1
  1 -> 2

Function: registerWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! externalAccounts[msg.sender],Already registered)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: externalAccounts[msg.sender] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Registration(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyEOA(msg.sender)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: unregisterWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: externalAccounts[msg.sender] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Deregistration(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRegWallets(msg.sender)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value == amount,Insufficient funds)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRegWallets(msg.sender)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: depositFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value == amount,Insufficient funds)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[wallet] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRegWallets(wallet)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = balances[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,Nothing to withdraw)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (sent,None) = msg.sender.call{value: balance}()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sent,Failed to send Ether)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyRegWallets(msg.sender)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: secretKey
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(this).balance == 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: secret.key()

Edges:
  0 -> 1
  1 -> 2

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


