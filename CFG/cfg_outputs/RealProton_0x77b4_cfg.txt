Contract: IERC734
==================================================


Contract: IERC735
==================================================


Contract: IIdentity
==================================================


Contract: IClaimIssuer
==================================================


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENTERED = 2

Edges:
  0 -> 1


Contract: ITrustedIssuersRegistry
==================================================


Contract: IClaimTopicsRegistry
==================================================


Contract: IIdentityRegistryStorage
==================================================


Contract: IIdentityRegistry
==================================================


Contract: ICompliance
==================================================


Contract: IERC20
==================================================


Contract: IToken
==================================================


Contract: TokenStorage
==================================================

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokenPaused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_VERSION = 3.4.0

Edges:


Contract: AddressUpgradeable
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(account)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 6
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: static call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: _verifyCallResult(success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returndata_size__verifyCallResult_asm_0 = mload(uint256)(returndata)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__verifyCallResult_asm_0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  9 -> 10
  10 -> 11


Contract: Initializable
==================================================


Contract: ContextUpgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: OwnableUpgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: __Ownable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init_unchained()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: __Ownable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: Roles
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! has(role,account),Roles: account already has role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: role.bearer[account] = true

Edges:
  0 -> 1
  1 -> 2

Function: remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(has(role,account),Roles: account does not have role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: role.bearer[account] = false

Edges:
  0 -> 1
  1 -> 2

Function: has
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),Roles: account is the zero address)

  ID: 2
  Type: NodeType.RETURN
  Expression: role.bearer[account]

Edges:
  0 -> 1
  1 -> 2


Contract: AgentRoleUpgradeable
==================================================

Function: __Ownable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init_unchained()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: __Ownable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: isAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _agents.has(_agent)

Edges:
  0 -> 1

Function: addAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _agents.add(_agent)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AgentAdded(_agent)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _agents.remove(_agent)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AgentRemoved(_agent)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: Timelockable
==================================================

Function: _lock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(releaseTime > block.timestamp,Release time in the future)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address != address(0),Address must be valid)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lockups[_address].push(LockupItem(amount,releaseTime))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AccountLock(_address,amount,releaseTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getLockedAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalLocked = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: userLockups = lockups[_address]

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < userLockups.length

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < userLockups[i].releaseTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalLocked = totalLocked + userLockups[i].amount

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: totalLocked

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 11
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 6

Function: checkLockup
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLockups = lockups[_address]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](userLockups.length)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: releaseTimes = new uint256[](userLockups.length)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < userLockups.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: amounts[i] = userLockups[i].amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: releaseTimes[i] = userLockups[i].releaseTime

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: (amounts,releaseTimes)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7


Contract: RealProton
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: _lock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(releaseTime > block.timestamp,Release time in the future)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address != address(0),Address must be valid)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lockups[_address].push(LockupItem(amount,releaseTime))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: AccountLock(_address,amount,releaseTime)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getLockedAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalLocked = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: userLockups = lockups[_address]

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < userLockups.length

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < userLockups[i].releaseTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: totalLocked = totalLocked + userLockups[i].amount

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: totalLocked

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 11
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 6

Function: checkLockup
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userLockups = lockups[_address]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](userLockups.length)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: releaseTimes = new uint256[](userLockups.length)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < userLockups.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: amounts[i] = userLockups[i].amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: releaseTimes[i] = userLockups[i].releaseTime

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: (amounts,releaseTimes)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7

Function: isAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _agents.has(_agent)

Edges:
  0 -> 1

Function: addAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _agents.add(_agent)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AgentAdded(_agent)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeAgent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _agents.remove(_agent)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AgentRemoved(_agent)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: __Ownable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init_unchained()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: __Ownable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Context_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 2
  2 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_identityRegistry != address(0),Null identity registry address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_compliance != address(0),Null compliance address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenName = _name

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenSymbol = _symbol

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: tokenDecimals = _decimals

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tokenOnchainID = _onchainID

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokenIdentityRegistry = IIdentityRegistry(_identityRegistry)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IdentityRegistryAdded(_identityRegistry)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance = ICompliance(_compliance)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ComplianceAdded(_compliance)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: UpdatedTokenInformation(address(this),tokenName,tokenSymbol,tokenDecimals,TOKEN_VERSION,tokenOnchainID)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _mint(msg.sender,amount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: addCurrency
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_currency != address(0),Zero Address)

  ID: 2
  Type: NodeType.IF
  Expression: _currencies[_currency]

  ID: 3
  Type: NodeType.IF
  Expression: status == true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currencies[_currency] = true

  ID: 5
  Type: NodeType.VARIABLE
  Expression: alreadyApproved = false

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < _approvedCurrencies.length

  ID: 10
  Type: NodeType.IF
  Expression: _approvedCurrencies[i] == _currency

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: alreadyApproved = true

  ID: 12
  Type: NodeType.BREAK
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.IF
  Expression: ! alreadyApproved

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _approvedCurrencies.push(_currency)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _currencies[_currency] = false

  ID: 19
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 20
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 21
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 22
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < _approvedCurrencies.length

  ID: 23
  Type: NodeType.IF
  Expression: _approvedCurrencies[i_scope_0] == _currency

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _approvedCurrencies[i_scope_0] = _approvedCurrencies[_approvedCurrencies.length - 1]

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _approvedCurrencies.pop()

  ID: 26
  Type: NodeType.BREAK
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _currencies[_currency] = status

  ID: 31
  Type: NodeType.IF
  Expression: status == true

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _approvedCurrencies.push(_currency)

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 35
  1 -> 2
  2 -> 3
  2 -> 30
  3 -> 4
  3 -> 18
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 15
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 7
  13 -> 14
  14 -> 9
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 29
  18 -> 21
  19 -> 22
  20 -> 29
  21 -> 19
  22 -> 23
  22 -> 20
  23 -> 24
  23 -> 27
  24 -> 25
  25 -> 26
  26 -> 20
  27 -> 28
  28 -> 22
  29 -> 34
  30 -> 31
  31 -> 32
  31 -> 33
  32 -> 33
  33 -> 34
  35 -> 1

Function: checkTokenBatches
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: batches = userHoldings[_user]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](batches.length)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: timestamps = new uint256[](batches.length)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lastClaimTimestamps = new uint256[](batches.length)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < batches.length

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amounts[i] = batches[i].amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: timestamps[i] = batches[i].timestamp

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: lastClaimTimestamps[i] = batches[i].lastClaimTimestamp

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: (amounts,timestamps,lastClaimTimestamps)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 8

Function: getApprovedCurrencies
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _approvedCurrencies

Edges:
  0 -> 1

Function: getUsdReceived
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: usdReceived[currencyaddress]

Edges:
  0 -> 1

Function: AddapprovedMintable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_wallet != address(0),Wallet Address Zero Provided)

  ID: 2
  Type: NodeType.IF
  Expression: status

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approvedMinting[_wallet] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: approvedMinting[_wallet] = false

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: SetDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokenAddress != address(0),Null Address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DividendToken[_tokenAddress] = _status

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(DividendToken[_dividendsToken] == true,Not a Valid Dividends Token)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenBatches = userHoldings[msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenBatches.length > 0,No eligible holdings)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: apyFactor = (apy * factor) / 365

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDividends = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentTime = block.timestamp

  ID: 7
  Type: NodeType.VARIABLE
  Expression: maxIterations = 100

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < tokenBatches.length

  ID: 12
  Type: NodeType.VARIABLE
  Expression: batch = tokenBatches[i]

  ID: 13
  Type: NodeType.IF
  Expression: currentTime >= batch.timestamp + minHoldingPeriod

  ID: 14
  Type: NodeType.VARIABLE
  Expression: batchLastClaim = batch.lastClaimTimestamp

  ID: 15
  Type: NodeType.IF
  Expression: batchLastClaim == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: batchLastClaim = batch.timestamp

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: iterations = 0

  ID: 19
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 20
  Type: NodeType.IFLOOP
  Expression: currentTime > batchLastClaim + ClaimPeriod + ClaimExpiry && iterations < maxIterations

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: batchLastClaim += ClaimPeriod

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: iterations ++

  ID: 23
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(iterations < maxIterations,Too many missed claim periods for this batch, manual intervention needed)

  ID: 25
  Type: NodeType.IF
  Expression: currentTime >= batchLastClaim + ClaimPeriod && currentTime <= batchLastClaim + ClaimPeriod + ClaimExpiry

  ID: 26
  Type: NodeType.VARIABLE
  Expression: batchDividends = (batch.amount * apyFactor) / 100

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: totalDividends += batchDividends

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: batch.lastClaimTimestamp = currentTime

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalDividends > 0,No dividends to claim)

  ID: 33
  Type: NodeType.IF
  Expression: _dividendsToken == address(this)

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(owner()) >= totalDividends,Insufficient balance for dividends)

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: _transfer(owner(),msg.sender,totalDividends)

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(_dividendsToken).allowance(owner(),address(this)) >= totalDividends,Insufficient allowance for dividends)

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(_dividendsToken).transferFrom(owner(),msg.sender,totalDividends),Dividends transfer failed)

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: DividendsClaimed(msg.sender,totalDividends)

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: isDividendsActive()

Edges:
  0 -> 40
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 32
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  13 -> 14
  13 -> 30
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 20
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 29
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 11
  32 -> 33
  33 -> 34
  33 -> 36
  34 -> 35
  35 -> 38
  36 -> 37
  37 -> 38
  38 -> 39
  40 -> 41
  41 -> 1

Function: checkNextDividendTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: batches = userHoldings[_user]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(batches.length > 0,No eligible holdings)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nextClaimTimestamps = new uint256[](batches.length)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentTime = block.timestamp

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < batches.length

  ID: 9
  Type: NodeType.VARIABLE
  Expression: batch = batches[i]

  ID: 10
  Type: NodeType.IF
  Expression: currentTime < batch.timestamp + minHoldingPeriod

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nextClaimTimestamps[i] = batch.timestamp + minHoldingPeriod

  ID: 12
  Type: NodeType.CONTINUE
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: batchLastClaim = batch.lastClaimTimestamp

  ID: 15
  Type: NodeType.IF
  Expression: batchLastClaim == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: batchLastClaim = batches[i].timestamp

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: iterations = 0

  ID: 19
  Type: NodeType.VARIABLE
  Expression: adjustedClaimTime = batchLastClaim

  ID: 20
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 21
  Type: NodeType.IFLOOP
  Expression: currentTime > adjustedClaimTime + ClaimPeriod + ClaimExpiry && iterations < 100

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: adjustedClaimTime += ClaimPeriod

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: iterations ++

  ID: 24
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: nextClaimTimestamps[i] = adjustedClaimTime + ClaimPeriod

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 27
  Type: NodeType.RETURN
  Expression: nextClaimTimestamps

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 27
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 26
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 24
  22 -> 23
  23 -> 21
  24 -> 25
  25 -> 26
  26 -> 8

Function: getCirculationSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ownerBalance = balanceOf(owner())

  ID: 2
  Type: NodeType.RETURN
  Expression: _totalSupply - ownerBalance

Edges:
  0 -> 1
  1 -> 2

Function: updateSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _minHolding != type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minHoldingPeriod = _minHolding

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _claimExpiry != type()(uint256).max

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ClaimExpiry = _claimExpiry

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _claimPeriod != type()(uint256).max

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ClaimPeriod = _claimPeriod

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _apy != type()(uint256).max

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: apy = _apy

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _factor != type()(uint256).max

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: factor = _factor

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _tokenPrice != type()(uint256).max

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokenPrice != 0,Token price cannot be zero)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: tokenPrice = _tokenPrice

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: TokenPriceUpdated(address(this),_tokenPrice)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: _lockingTime != type()(uint256).max

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: lockingTime = _lockingTime

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: LockingTimeUpdated(_lockingTime)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: UpdatedSettings(address(this),minHoldingPeriod,ClaimExpiry,ClaimPeriod,apy,factor,tokenPrice,lockingTime)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 26
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 20
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 24
  22 -> 23
  23 -> 24
  24 -> 25
  26 -> 1

Function: getTokensForUSD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenPrice > 0,Token price must be set)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokens = (USDAmount * 1000000000000000000) / tokenPrice

  ID: 3
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[_userAddress]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[_owner][_spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_spender,_amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_spender,_allowances[msg.sender][_spender] + (_addedValue))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_spender,_allowances[msg.sender][_spender] - _subtractedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(_from,_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[_from] = _balances[_from] - _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[_to] = _balances[_to] + _amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_userAddress != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(address(0),_userAddress,_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply + _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[_userAddress] = _balances[_userAddress] + _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_userAddress,_amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_userAddress != address(0),ERC20: burn from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _beforeTokenTransfer(_userAddress,address(0),_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[_userAddress] = _balances[_userAddress] - _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply - _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_userAddress,address(0),_amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[_owner][_spender] = _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(_owner,_spender,_amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _beforeTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenDecimals

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenName

Edges:
  0 -> 1

Function: onchainID
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenOnchainID

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenSymbol

Edges:
  0 -> 1

Function: version
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: TOKEN_VERSION

Edges:
  0 -> 1

Function: setName
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenName = _name

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: UpdatedTokenInformation(address(this),tokenName,tokenSymbol,tokenDecimals,TOKEN_VERSION,tokenOnchainID)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setSymbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenSymbol = _symbol

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: UpdatedTokenInformation(address(this),tokenName,tokenSymbol,tokenDecimals,TOKEN_VERSION,tokenOnchainID)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setOnchainID
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenOnchainID = _onchainID

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: UpdatedTokenInformation(address(this),tokenName,tokenSymbol,tokenDecimals,TOKEN_VERSION,tokenOnchainID)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenPaused

Edges:
  0 -> 1

Function: isFrozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: frozen[_userAddress]

Edges:
  0 -> 1

Function: getFrozenTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: frozenTokens[_userAddress]

Edges:
  0 -> 1

Function: checkTimelock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lockedAmount = getLockedAmount(_address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: userBalance = balanceOf(msg.sender)

  ID: 3
  Type: NodeType.IF
  Expression: userBalance < amount

  ID: 4
  Type: NodeType.RETURN
  Expression: false

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: nonLockedAmount = userBalance - lockedAmount

  ID: 7
  Type: NodeType.RETURN
  Expression: amount <= nonLockedAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7

Function: processBatches
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: senderBatches = userHoldings[from]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: receiverBatches = userHoldings[to]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: remainingAmount = amount

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.IFLOOP
  Expression: remainingAmount > 0 && i < senderBatches.length

  ID: 7
  Type: NodeType.IF
  Expression: senderBatches[i].amount <= remainingAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: remainingAmount -= senderBatches[i].amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: senderBatches[i] = senderBatches[senderBatches.length - 1]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: senderBatches.pop()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: senderBatches[i].amount -= remainingAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: remainingAmount = 0

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: receiverBatches.push(TokenBatch(amount,block.timestamp,0))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 14
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 13
  11 -> 12
  12 -> 13
  13 -> 6
  14 -> 15

Function: handleLocking
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: senderType = tokenIdentityRegistry.getInvestorType(_from)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: receiverType = tokenIdentityRegistry.getInvestorType(_to)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: releaseTime = block.timestamp + lockingTime

  ID: 4
  Type: NodeType.IF
  Expression: ((keccak256(bytes)(abi.encodePacked(senderType)) == keccak256(bytes)(abi.encodePacked(Encrypted1)) || keccak256(bytes)(abi.encodePacked(senderType)) == keccak256(bytes)(abi.encodePacked(Encrypted2))) && keccak256(bytes)(abi.encodePacked(receiverType)) == keccak256(bytes)(abi.encodePacked(Encrypted1))) || keccak256(bytes)(abi.encodePacked(receiverType)) == keccak256(bytes)(abi.encodePacked(Encrypted2))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _lock(_to,_amount,releaseTime)

  ID: 6
  Type: NodeType.IF
  Expression: keccak256(bytes)(abi.encodePacked(senderType)) == keccak256(bytes)(abi.encodePacked(Encrypted3)) && keccak256(bytes)(abi.encodePacked(receiverType)) == keccak256(bytes)(abi.encodePacked(Encrypted1))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _lock(_to,_amount,releaseTime)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 9
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! frozen[_to],Recipient wallet is frozen)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! frozen[msg.sender],Sender wallet is frozen)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= balanceOf(msg.sender) - (frozenTokens[msg.sender]),Insufficient Balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(checkTimelock(msg.sender,_amount),Locked Balances)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: availableBalance = balanceOf(msg.sender) - getLockedAmount(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= availableBalance,Insufficient balance-Locked Tokens(accounting for locked tokens))

  ID: 7
  Type: NodeType.IF
  Expression: tokenIdentityRegistry.isVerified(_to) && tokenCompliance.canTransfer(msg.sender,_to,_amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: processBatches(msg.sender,_to,_amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: handleLocking(msg.sender,_to,_amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance.transferred(msg.sender,_to,_amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_amount)

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Transfer not possible)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 13
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  15 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenPaused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: SetSellingAndDividendsStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellingStatus = _sellingstatus

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DividendsDist = _DividendsStatus

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenPaused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: identityRegistry
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenIdentityRegistry

Edges:
  0 -> 1

Function: compliance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenCompliance

Edges:
  0 -> 1

Function: batchTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _toList.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: transfer(_toList[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! frozen[_to],Recipient wallet is frozen)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! frozen[msg.sender],Sender wallet is frozen)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= balanceOf(_from) - frozenTokens[_from],Insufficient Balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(checkTimelock(_from,_amount),Locked Balances)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: availableBalance = balanceOf(_from) - getLockedAmount(_from)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= availableBalance,Insufficient balance - Locked Tokens (accounting for locked tokens))

  ID: 7
  Type: NodeType.IF
  Expression: tokenIdentityRegistry.isVerified(_to) && tokenCompliance.canTransfer(_from,_to,_amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: processBatches(_from,_to,_amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: handleLocking(_from,_to,_amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance.transferred(_from,_to,_amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _approve(_from,msg.sender,_allowances[_from][msg.sender] - _amount)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Transfer not possible)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 14
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  16 -> 1

Function: forcedTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: freeBalance = balanceOf(_from) - (frozenTokens[_from])

  ID: 2
  Type: NodeType.IF
  Expression: _amount > freeBalance

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokensToUnfreeze = _amount - (freeBalance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: frozenTokens[_from] = frozenTokens[_from] - (tokensToUnfreeze)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokensUnfrozen(_from,tokensToUnfreeze)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: tokenIdentityRegistry.isVerified(_to)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance.transferred(_from,_to,_amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Transfer not possible)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  11 -> 12
  13 -> 1

Function: batchForcedTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _fromList.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forcedTransfer(_fromList[i],_toList[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenIdentityRegistry.isVerified(_to),Identity is not verified.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenCompliance.canTransfer(msg.sender,_to,_amount),Compliance not followed)

  ID: 3
  Type: NodeType.IF
  Expression: approvedMinting[_to] == true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _mint(_to,_amount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: releasetime = block.timestamp + lockingTime

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _lock(_to,_amount,releasetime)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _mint(_to,_amount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance.created(_to,_amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: batchMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _toList.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mint(_toList[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: freeBalance = balanceOf(_userAddress) - frozenTokens[_userAddress]

  ID: 2
  Type: NodeType.IF
  Expression: _amount > freeBalance

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tokensToUnfreeze = _amount - (freeBalance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: frozenTokens[_userAddress] = frozenTokens[_userAddress] - (tokensToUnfreeze)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TokensUnfrozen(_userAddress,tokensToUnfreeze)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _burn(_userAddress,_amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance.destroyed(_userAddress,_amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: batchBurn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _userAddresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: burn(_userAddresses[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: setAddressFrozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: frozen[_userAddress] = _freeze

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AddressFrozen(_userAddress,_freeze,msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: batchSetAddressFrozen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _userAddresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: setAddressFrozen(_userAddresses[i],_freeze[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: freezePartialTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = balanceOf(_userAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance >= frozenTokens[_userAddress] + _amount,Amount exceeds available balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: frozenTokens[_userAddress] = frozenTokens[_userAddress] + (_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TokensFrozen(_userAddress,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: batchFreezePartialTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _userAddresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: freezePartialTokens(_userAddresses[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: unfreezePartialTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(frozenTokens[_userAddress] >= _amount,Amount should be less than or equal to frozen tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: frozenTokens[_userAddress] = frozenTokens[_userAddress] - (_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokensUnfrozen(_userAddress,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: batchUnfreezePartialTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _userAddresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: unfreezePartialTokens(_userAddresses[i],_amounts[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: setIdentityRegistry
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenIdentityRegistry = IIdentityRegistry(_identityRegistry)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IdentityRegistryAdded(_identityRegistry)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCompliance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenCompliance = ICompliance(_compliance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ComplianceAdded(_compliance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: recoveryAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(_lostWallet) != 0,no tokens to recover)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _onchainID = IIdentity(_investorOnchainID)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _key = keccak256(bytes)(abi.encode(_newWallet))

  ID: 4
  Type: NodeType.IF
  Expression: _onchainID.keyHasPurpose(_key,1)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: investorTokens = balanceOf(_lostWallet)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _frozenTokens = frozenTokens[_lostWallet]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokenIdentityRegistry.registerIdentity(_newWallet,_onchainID,tokenIdentityRegistry.investorCountry(_lostWallet))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tokenIdentityRegistry.deleteIdentity(_lostWallet)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: forcedTransfer(_lostWallet,_newWallet,investorTokens)

  ID: 10
  Type: NodeType.IF
  Expression: _frozenTokens > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: freezePartialTokens(_newWallet,_frozenTokens)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: frozen[_lostWallet] == true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: setAddressFrozen(_newWallet,true)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: RecoverySuccess(_lostWallet,_newWallet,_investorOnchainID)

  ID: 17
  Type: NodeType.RETURN
  Expression: true

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Recovery not possible)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: onlyAgent()

Edges:
  0 -> 20
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 18
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 19
  20 -> 1

Function: transferOwnershipOnTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferOwnership(_newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: addAgentOnTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addAgent(_agent)

Edges:
  0 -> 1

Function: removeAgentOnTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: removeAgent(_agent)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokenPaused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_VERSION = 3.4.0

Edges:


