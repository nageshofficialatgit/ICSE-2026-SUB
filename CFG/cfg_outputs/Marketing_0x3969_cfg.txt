Contract: IERC20
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: Marketing
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: superAdmin = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: radwToken = IERC20(_radwTokenAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: usdcToken = IERC20(_usdcAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: usdtToken = IERC20(_usdtAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_aggregatorAddress)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = _ownerWallet

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokenPrice = _initialPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isMarketingEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: updateRadwTokenAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newRadwTokenAddress != address(0),Invalid RADW token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: radwToken = IERC20(newRadwTokenAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: buyTokensWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,ETH amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,ethPrice,None,None,None) = priceFeed.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethPrice > 0,Invalid ETH price)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethUSDPrice = uint256(ethPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: radwTokens = (msg.value * ethUSDPrice) / tokenPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(ownerWallet).transfer(msg.value)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(ownerWallet,msg.sender,radwTokens),Token transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: buyTokensWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcAmount > 0,USDC amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: radwTokens = (usdcAmount * (10 ** (18 - 6 + 8))) / tokenPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.transferFrom(msg.sender,ownerWallet,usdcAmount),USDC transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(ownerWallet,msg.sender,radwTokens),Token transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: buyTokensWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtAmount > 0,USDT amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: radwTokens = (usdtAmount * (10 ** (18 - 6 + 8))) / tokenPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.transferFrom(msg.sender,ownerWallet,usdtAmount),USDT transfer failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(ownerWallet,msg.sender,radwTokens),Token transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: sellTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,ethPrice,None,None,None) = priceFeed.latestRoundData()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethPrice > 0,Invalid ETH price)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethUSDPrice = uint256(ethPrice)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: ethAmount = (tokenAmount * tokenPrice) / ethUSDPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= ethAmount,Insufficient ETH liquidity)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(msg.sender,ownerWallet,tokenAmount),Token transfer failed)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(msg.sender).call{value: ethAmount}()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: sellTokensForUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: usdcAmount = (tokenAmount * tokenPrice) / (10 ** (18 - 6 + 8))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.balanceOf(address(this)) >= usdcAmount,Insufficient USDC liquidity)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(msg.sender,ownerWallet,tokenAmount),Token transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.transfer(msg.sender,usdcAmount),USDC transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sellTokensForUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isMarketingEnabled,Marketing is disabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAmount > 0,Token amount must be greater than 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: usdtAmount = (tokenAmount * tokenPrice) / (10 ** (18 - 6 + 8))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.balanceOf(address(this)) >= usdtAmount,Insufficient USDT liquidity)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(radwToken.transferFrom(msg.sender,ownerWallet,tokenAmount),Token transfer failed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.transfer(msg.sender,usdtAmount),USDT transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: toggleMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMarketingEnabled = enable

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: setTokenPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newPrice > 0,Price must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenPrice = newPrice

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferSuperAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newSuperAdmin != address(0),Invalid address for super admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: superAdmin = newSuperAdmin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setOwnerWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwnerWallet != address(0),Invalid address for owner wallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = newOwnerWallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlySuperAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: depositUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.transferFrom(msg.sender,address(this),amount),USDC transfer failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: depositUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.transferFrom(msg.sender,address(this),amount),USDT transfer failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(ownerWallet).call{value: amount}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH withdrawal failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdrawUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcToken.transfer(ownerWallet,amount),USDC withdrawal failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.transfer(ownerWallet,amount),USDT withdrawal failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 2
  2 -> 1


