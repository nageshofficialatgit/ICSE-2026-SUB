Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: returndata

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 7

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: Aggregator
==================================================


Contract: Monkey_Sale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: aggregatorInterface = Aggregator(_oracle)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SaleToken = IERC20Metadata(0xE852A35fb6a319A90a78a2C3F534bf44a43E2948)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: USDTInterface = IERC20Metadata(_usdt)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ETH_MULTIPLIER = (10 ** 18)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: USDT_MULTIPLIER = (10 ** 6)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = _ownerWallet

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: treasuryWallet = _treasuryWallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: createPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_price > 0,Zero price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokensToSell > 0,Zero tokens to sell)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].Active == false,Previous Sale is Active)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: presaleId ++

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId] = Presale(0,0,_price,_nextStagePrice,0,_tokensToSell,_UsdtHardcap,0,false,false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: PresaleCreated(presaleId,_tokensToSell,0,0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: startPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].startTime = block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].Active = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: endPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].Active = true,This presale is already Inactive)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].endTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].Active = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: enableClaim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presale[_id].isEnableClaim = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: updatePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_price > 0,Zero price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokensToSell > 0,Zero tokens to sell)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: presale[_id].price = _price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: presale[_id].nextStagePrice = _nextStagePrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: presale[_id].tokensToSell = _tokensToSell

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: presale[_id].UsdtHardcap = _Hardcap

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: changeFundWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_wallet != address(0),Invalid parameters)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: treasuryWallet = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeOwnerTokenWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_wallet != address(0),Invalid parameters)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerWallet = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeUSDTToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newAddress != address(0),Zero token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDTInterface = IERC20Metadata(_newAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pausePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[_id],Already paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: paused[_id] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PresalePaused(_id,block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unPausePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paused[_id],Not paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: paused[_id] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PresaleUnpaused(_id,block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getLatestPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = aggregatorInterface.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: price = (price * (10 ** 10))

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: buyWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[presaleId],Presale paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].Active == true,Presale is not active yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,Amount should be less than leftHardcap)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tokens = usdtToTokens(presaleId,usdAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].Sold += tokens

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].amountRaised += usdAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: USDTInterface.transferFrom(msg.sender,treasuryWallet,usdAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SaleToken.transferFrom(ownerWallet,msg.sender,tokens)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: TokensBought(_msgSender(),presaleId,address(USDTInterface),tokens,usdAmount,block.timestamp)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(presaleId)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(presaleId,usdtToTokens(presaleId,usdAmount))

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(presaleId,usdtToTokens(presaleId,usdAmount))

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 1

Function: buyWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,Amount should be less than leftHardcap)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[presaleId],Presale paused)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[presaleId].Active == true,Presale is not active yet)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tokens = usdtToTokens(presaleId,usdAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].Sold += tokens

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId].amountRaised += usdAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sendValue(address(treasuryWallet),msg.value)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: SaleToken.transferFrom(ownerWallet,msg.sender,tokens)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TokensBought(_msgSender(),presaleId,address(0),tokens,msg.value,block.timestamp)

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(presaleId)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(presaleId,ethToTokens(presaleId,msg.value))

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(presaleId,ethToTokens(presaleId,msg.value))

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 1

Function: ethBuyHelper
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdPrice = (amount * presale[_id].price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ethAmount = (usdPrice * ETH_MULTIPLIER) / (getLatestPrice() * 10 ** IERC20Metadata(SaleToken).decimals())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 4
  Type: NodeType.RETURN
  Expression: ethAmount

Edges:
  0 -> 3
  1 -> 2
  2 -> 4
  3 -> 1

Function: usdtBuyHelper
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdPrice = (amount * presale[_id].price) / 10 ** IERC20Metadata(SaleToken).decimals()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 3
  Type: NodeType.RETURN
  Expression: usdPrice

Edges:
  0 -> 2
  1 -> 3
  2 -> 1

Function: ethToTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdAmount = amount * getLatestPrice() * USDT_MULTIPLIER / (ETH_MULTIPLIER * ETH_MULTIPLIER)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tokens = usdtToTokens(_id,usdAmount)

  ID: 3
  Type: NodeType.RETURN
  Expression: _tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: usdtToTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 3
  Type: NodeType.RETURN
  Expression: _tokens

Edges:
  0 -> 2
  1 -> 3
  2 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Low balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH Payment failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: unlockToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= presale[_id].endTime,You can only unlock on finalize)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1


