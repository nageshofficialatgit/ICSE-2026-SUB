Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: Auth
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[_owner] = true

Edges:
  0 -> 1
  1 -> 2

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: isGranted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: authorizations[adr]

Edges:
  0 -> 1

Function: renounce
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = adr

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(adr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IDEXFactory
==================================================


Contract: IDEXRouter
==================================================


Contract: SRA
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pair = IDEXFactory(router.factory()).createPair(WETH,address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = type()(uint256).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isTxLimitExempt[msg.sender] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isWalletLimitExempt[msg.sender] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: autoLiquidityReceiver = msg.sender

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: marketingFeeReceiver = msg.sender

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: projectFeeReceiver = msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: utilityFeeReceiver = msg.sender

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Auth(msg.sender)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: isOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account == owner

Edges:
  0 -> 1

Function: isGranted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: authorizations[adr]

Edges:
  0 -> 1

Function: renounce
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = adr

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: authorizations[adr] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(adr)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approve(spender,type()(uint256).max)

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transferFrom(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transferFrom(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: inSwap

  ID: 2
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! authorizations[sender] && ! authorizations[recipient]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,Trading not open yet)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shouldSwapBack()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amountReceived)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amountReceived)

  ID: 14
  Type: NodeType.RETURN
  Expression: true

  ID: 15
  Type: NodeType.IF
  Expression: (! shouldTakeFee(sender) || ! shouldTakeFee(recipient))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: amountReceived = amount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: amountReceived = takeFee(sender,amount,recipient)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 15
  12 -> 13
  13 -> 14
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 12

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: checkTxLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount || isTxLimitExempt[sender],TX Limit Exceeded)

Edges:
  0 -> 1

Function: shouldTakeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ! isFeeExempt[sender]

Edges:
  0 -> 1

Function: takeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: multiplier = transferMultiplier

  ID: 2
  Type: NodeType.IF
  Expression: recipient == pair

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: multiplier = burned

  ID: 4
  Type: NodeType.IF
  Expression: sender == pair

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: multiplier = buyMultiplier

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: utilityTokens = feeAmount.mul(utilityFee).div(totalFee)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: contractTokens = feeAmount.sub(utilityTokens)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(contractTokens)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _balances[utilityFeeReceiver] = _balances[utilityFeeReceiver].add(utilityTokens)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),contractTokens)

  ID: 14
  Type: NodeType.IF
  Expression: utilityTokens > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,utilityFeeReceiver,utilityTokens)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: amount.sub(feeAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 7
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17

Function: shouldSwapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender != pair && ! inSwap && swapEnabled && _balances[address(this)] >= swapThreshold

Edges:
  0 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amountToSwap = swapThreshold.sub(amountToLiquify)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 7
  Type: NodeType.VARIABLE
  Expression: balanceBefore = address(this).balance

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amountETH = address(this).balance.sub(balanceBefore)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: amountETHproject = amountETH.mul(projectFee).div(totalETHFee)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: (tmpSuccess,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHMarketing}()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (tmpSuccess,None) = address(projectFeeReceiver).call{gas: 30000,value: amountETHproject}()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: tmpSuccess = false

  ID: 18
  Type: NodeType.IF
  Expression: amountToLiquify > 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: AutoLiquify(amountETHLiquidity,amountToLiquify)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: swapping()

  ID: 23
  Type: NodeType.IF
  Expression: isOverLiquified(targetLiquidity,targetLiquidityDenominator)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: dynamicLiquidityFee = 0

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: dynamicLiquidityFee = liquidityFee

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 22
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 21
  19 -> 20
  20 -> 21
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 2

Function: setMaxWalletPercent_base1000
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(maxWallPercent_base1000 >= 10,Max Wallet cannot be lower than 1% total supply.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletToken = (_totalSupply * maxWallPercent_base1000) / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setMaxTxPercent_base1000
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(maxTXPercentage_base1000 >= 1,Max Transaction cannot be lower than 0.1% total supply.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = (_totalSupply * maxTXPercentage_base1000) / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: refresh
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amountETH = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(marketingFeeReceiver).transfer(amountETH * amountPercentage / 100)

Edges:
  0 -> 1
  1 -> 2

Function: validate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IERC20(tokenAddress).transfer(marketingFeeReceiver,tokens)

  ID: 2
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1

Function: BurnLP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: burned = Multiplier

Edges:
  0 -> 1

Function: setFeeReceivers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoLiquidityReceiver = _autoLiquidityReceiver

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingFeeReceiver = _marketingFeeReceiver

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: projectFeeReceiver = _projectFeeReceiver

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: utilityFeeReceiver = _utilityFeeReceiver

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setSwapBackSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = _amount

Edges:
  0 -> 1
  1 -> 2

Function: setTargetLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: targetLiquidity = _target

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: targetLiquidityDenominator = _denominator

Edges:
  0 -> 1
  1 -> 2

Function: getCirculatingSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO))

Edges:
  0 -> 1

Function: getLiquidityBacking
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply())

Edges:
  0 -> 1

Function: isOverLiquified
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getLiquidityBacking(accuracy) > target

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD = 0x000000000000000000000000000000000000dEaD

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ZERO = 0x0000000000000000000000000000000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 100000000 * (10 ** _decimals)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = 3000000 * (10 ** _decimals)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletToken = 3000000 * (10 ** _decimals)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: liquidityFee = 1

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: marketingFee = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: projectFee = 0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: utilityFee = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalFee = marketingFee + liquidityFee + projectFee + utilityFee

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: feeDenominator = 100

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: burned = 100

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyMultiplier = 100

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: transferMultiplier = 100

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: targetLiquidity = 30

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: targetLiquidityDenominator = 100

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = true

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = true

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapThreshold = _totalSupply / 250

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Strategic Reserve

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = SRA

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 4

Edges:
  0 -> 1
  1 -> 2


