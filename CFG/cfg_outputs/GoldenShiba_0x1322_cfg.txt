Contract: GoldenShiba
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: contractAdmin = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _tokenTotalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_tokenTotalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenName

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenSymbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenDecimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenTotalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _internalTransfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _internalApprove(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,Transfer exceeds allowance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _internalApprove(from,msg.sender,currentAllowance - amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _internalTransfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: reassignAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAdmin != address(0),New admin is zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AdminReassigned(contractAdmin,newAdmin)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: contractAdmin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: enableTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradeActive = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TradingStatusUpdated(_enabled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: configurePair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pairList[pair] = status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: PairConfigured(status,pair)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _internalApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(holder != address(0),Approve from zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Approve to zero addr)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[holder][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(holder,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _internalTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),Transfer from zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),Transfer to zero addr)

  ID: 3
  Type: NodeType.IF
  Expression: ! tradeActive

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from == contractAdmin,Trading not active yet)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: fromBal = _balances[from]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromBal >= amount,Insufficient balance)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: applyFee = false

  ID: 9
  Type: NodeType.VARIABLE
  Expression: feeAmount = 0

  ID: 10
  Type: NodeType.IF
  Expression: pairList[from]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: applyFee = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: feeAmount = (amount * purchaseCommission) / 100

  ID: 13
  Type: NodeType.IF
  Expression: pairList[to]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: applyFee = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: feeAmount = (amount * saleCommission) / 100

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBal - amount

  ID: 19
  Type: NodeType.IF
  Expression: applyFee && feeAmount > 0

  ID: 20
  Type: NodeType.VARIABLE
  Expression: sendAmount = amount - feeAmount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _balances[commissionCollector] += feeAmount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += sendAmount

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,commissionCollector,feeAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,sendAmount)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 17
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 25
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 27
  25 -> 26
  26 -> 27

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradeActive = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenName = GOLDENSHIBA

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenSymbol = GOL

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenDecimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenTotalSupply = 1_000_000_000 * 10 ** _tokenDecimals

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: purchaseCommission = 5

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: saleCommission = 5

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: commissionCollector = 0x50Ee2d1d768398081CC9c4f425709cAe3C2F4711

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


