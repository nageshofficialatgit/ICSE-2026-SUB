Contract: IERC20
==================================================


Contract: GestionFonds
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: modifierOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_nouvelOwner != address(0),Nouvel owner invalide)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnerChanged(owner,_nouvelOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = _nouvelOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniquementOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: retirerToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),Adresse invalide)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(montant > 0,Le montant doit etre superieur a 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokenAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(address(this)) >= montant,Solde insuffisant en tokens)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(recipient,montant),Echec du transfert)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: uniquementOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: recupererTokensDepuisContrat
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(contratSource != address(0),Contrat source invalide)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(montant > 0,Le montant doit etre superieur a 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokenAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(contratSource) >= montant,Solde insuffisant sur le contrat source)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transferFrom(contratSource,address(this),montant),Echec du transfert depuis le contrat)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokensRecuperes(tokenAddress,contratSource,montant)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: uniquementOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: executeDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(proxy != address(0),Adresse du proxy invalide)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,result) = proxy.delegatecall(data)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DelegateCallExecuted(proxy,data,success)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Echec de l'execution delegatecall)

  ID: 7
  Type: NodeType.RETURN
  Expression: (success,result)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: uniquementOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


