Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: PVPFUN
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _devWallet = address(_msgSender())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _marketingWallet = address(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[_msgSender()] = _tTotal

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[owner()] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_devWallet] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_marketingWallet] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][_msgSender()] >= amount,Transfer amount exceeds allowance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()] - amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: Can't approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: Can't approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: Can't transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: Can't transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxAmount = 0

  ID: 5
  Type: NodeType.IF
  Expression: ! _isExcludedFromFee[from] && ! _isExcludedFromFee[to]

  ID: 6
  Type: NodeType.IF
  Expression: whitelistOn && ! whitelist[from] && ! whitelist[to]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Transfer not allowed: address not in whitelist)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: from == uniswapV2Pair && to != address(uniswapV2Router)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount,Exceeds the _maxTxAmount.)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(to) + amount <= _maxWalletSize,Exceeds the _maxWalletSize.)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: from == uniswapV2Pair && to != address(this)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount * _BuyTax / 100

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: to == uniswapV2Pair && from != address(this)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount * _SellTax / 100

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 20
  Type: NodeType.IF
  Expression: ! inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold

  ID: 21
  Type: NodeType.IF
  Expression: block.number > lastContractSellBlock

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: contractSellCount = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool)(contractSellCount < 2)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(amountToSwap)

  ID: 27
  Type: NodeType.VARIABLE
  Expression: contractETHBalance = address(this).balance

  ID: 28
  Type: NodeType.IF
  Expression: contractETHBalance > 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: sendETHToFee(address(this).balance)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: contractSellCount ++

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: lastContractSellBlock = block.number

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.IF
  Expression: taxAmount > 0

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] += taxAmount

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(this),taxAmount)

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - amount

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + (amount - taxAmount)

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount - taxAmount)

  ID: 42
  Type: NodeType.IF
  Expression: (amount < contractTokenBalance && amount < _maxTaxSwap)

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: amountToSwap = amount

  ID: 45
  Type: NodeType.ENDIF
  Expression: 

  ID: 46
  Type: NodeType.IF
  Expression: (contractTokenBalance < _maxTaxSwap)

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: amountToSwap = contractTokenBalance

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: amountToSwap = _maxTaxSwap

  ID: 49
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 33
  21 -> 22
  21 -> 23
  22 -> 23
  23 -> 24
  24 -> 42
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  35 -> 38
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  42 -> 43
  42 -> 46
  43 -> 45
  45 -> 26
  46 -> 47
  46 -> 48
  47 -> 49
  48 -> 49
  49 -> 45

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tokenAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! tradingOpen

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: enableWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whitelistOn = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: disableWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: whitelistOn = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: addToWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < addresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whitelist[addresses[i]] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: removeFromWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < addresses.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whitelist[addresses[i]] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: updateTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _BuyTax = BuyTax

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _SellTax = SellTax

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _tTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletSize = _tTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxTxAmountUpdated(_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingOpen,Trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: manualSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.IF
  Expression: tokenBalance > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(tokenBalance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 6
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: sendETHToFee(ethBalance)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  9 -> 1

Function: sendETHToFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _marketingWallet.transfer(amount)

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _BuyTax = 15

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _SellTax = 35

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = _tTotal * 20 / 1000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletSize = _tTotal * 30 / 1000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxSwapThreshold = _tTotal * 5 / 10000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTaxSwap = _tTotal * 1 / 100

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: whitelistOn = false

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwap = false

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: contractSellCount = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastContractSellBlock = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = pvpfun.tech

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = PVPFUN

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 1000000000 * 10 ** _decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


