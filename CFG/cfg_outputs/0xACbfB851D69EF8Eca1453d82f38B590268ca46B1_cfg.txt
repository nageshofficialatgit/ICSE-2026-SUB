Contract: token
==================================================


Contract: CrowdSale
==================================================

Function: CrowdSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: creator = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: beneficiary = _ifSuccessfulSendTo

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: campaignUrl = _campaignUrl

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fundingMinimumTargetInWei = _fundingMinimumTargetInEther * 1000000000000000000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: fundingMaximumTargetInWei = _fundingMaximumTargetInEther * 1000000000000000000

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: deadline = now + (_timeInMinutesForFundraising * 60)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: currentBalance = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tokenReward = token(_addressOfTokenUsedAsReward)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: priceInWei = _etherCostOfEachToken * 1000000000000000000

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: LogFunderInitialized(creator,beneficiary,campaignUrl,fundingMaximumTargetInWei,deadline)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: contribute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amountInWei = msg.value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: contributions.push(Contribution({amount:msg.value,contributor:msg.sender}))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalRaised += msg.value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: currentBalance = totalRaised

  ID: 5
  Type: NodeType.IF
  Expression: fundingMaximumTargetInWei != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tokenReward.transfer(msg.sender,amountInWei / priceInWei)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokenReward.mintToken(msg.sender,amountInWei / priceInWei)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: LogFundingReceived(msg.sender,msg.value,totalRaised)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: checkIfFundingCompleteOrExpired()

  ID: 11
  Type: NodeType.RETURN
  Expression: contributions.length - 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: inState(State.Fundraising)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: isMinimum()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: inMultipleOfPrice()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 1

Function: checkIfFundingCompleteOrExpired
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: fundingMaximumTargetInWei != 0 && totalRaised > fundingMaximumTargetInWei

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: state = State.Successful

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: LogFundingSuccessful(totalRaised)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: payOut()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: completedAt = now

  ID: 6
  Type: NodeType.IF
  Expression: now > deadline

  ID: 7
  Type: NodeType.IF
  Expression: totalRaised >= fundingMinimumTargetInWei

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: state = State.Successful

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: LogFundingSuccessful(totalRaised)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: payOut()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: completedAt = now

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: state = State.Failed

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: completedAt = now

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 16
  6 -> 7
  6 -> 15
  7 -> 8
  7 -> 12
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: payOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! beneficiary.send(this.balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: state = State.Closed

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: currentBalance = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: LogWinnerPaid(beneficiary)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: inState(State.Successful)

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: getRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i <= contributions.length

  ID: 5
  Type: NodeType.IF
  Expression: contributions[i].contributor == msg.sender

  ID: 6
  Type: NodeType.VARIABLE
  Expression: amountToRefund = contributions[i].amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contributions[i].amount = 0

  ID: 8
  Type: NodeType.IF
  Expression: ! contributions[i].contributor.send(amountToRefund)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: contributions[i].amount = amountToRefund

  ID: 10
  Type: NodeType.RETURN
  Expression: false

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalRaised -= amountToRefund

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: currentBalance = totalRaised

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.RETURN
  Expression: true

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.RETURN
  Expression: false

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: inState(State.Failed)

Edges:
  0 -> 18
  1 -> 4
  2 -> 17
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 15
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 16
  16 -> 4
  18 -> 3

Function: removeContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isCreator()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: atEndOfLifecycle()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: state = State.Fundraising

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: version = 1

Edges:


