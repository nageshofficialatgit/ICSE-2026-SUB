Contract: itMaps
==================================================

Function: insert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: e = self.data[key]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: e.value = value

  ID: 3
  Type: NodeType.IF
  Expression: e.keyIndex > 0

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: e.keyIndex = ++ self.keys.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: self.keys[e.keyIndex - 1] = key

  ID: 7
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.RETURN
  Expression: replaced

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7

Function: remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: e = self.data[key]

  ID: 2
  Type: NodeType.IF
  Expression: e.keyIndex == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: false

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: e.keyIndex <= self.keys.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: self.data[self.keys[self.keys.length - 1]].keyIndex = e.keyIndex

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: self.keys[e.keyIndex - 1] = self.keys[self.keys.length - 1]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: self.keys.length -= 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: delete self.data[key]

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12

Function: destroy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < self.keys.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete self.data[self.keys[i]]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: delete self.keys

  ID: 8
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 3
  1 -> 4
  2 -> 7
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 8

Function: contains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.data[key].keyIndex > 0

  ID: 2
  Type: NodeType.RETURN
  Expression: exists

Edges:
  0 -> 1

Function: size
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.keys.length

Edges:
  0 -> 1

Function: get
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.data[key].value

Edges:
  0 -> 1

Function: getKeyByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.keys[idx]

Edges:
  0 -> 1

Function: getValueByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.data[self.keys[idx]].value

Edges:
  0 -> 1


Contract: ERC20
==================================================


Contract: IceRockMining
==================================================

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: initialSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances.get(tokenHolder)

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[owner][spender]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances.get(msg.sender) >= value && value > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances.insert(msg.sender,balances.get(msg.sender) - value)

  ID: 3
  Type: NodeType.IF
  Expression: balances.contains(to)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances.insert(to,balances.get(to) + value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances.insert(to,value)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,to,value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

  ID: 9
  Type: NodeType.RETURN
  Expression: false

  ID: 11
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances.get(from) >= value && allowed[from][msg.sender] >= value && value > 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToInsert = value

  ID: 3
  Type: NodeType.IF
  Expression: balances.contains(to)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: amountToInsert = amountToInsert + balances.get(to)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances.insert(to,amountToInsert)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances.insert(from,balances.get(from) - value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allowed[from][msg.sender] = allowed[from][msg.sender] - value

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.RETURN
  Expression: false

  ID: 13
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 11
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (value != 0) && (balances.get(msg.sender) >= value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][spender] = value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: IceRockMining
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IceRockMiningAddress = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances.insert(IceRockMiningAddress,initialSupply)

Edges:
  0 -> 1
  1 -> 2

Function: setCurrentExchangeRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: currentUSDExchangeRate = rate

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setBonus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bonus = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: send
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendp(addr,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: sendp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(addr != IceRockMiningAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances.get(IceRockMiningAddress) >= amount)

  ID: 4
  Type: NodeType.IF
  Expression: balances.contains(addr)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances.insert(addr,balances.get(addr) + amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances.insert(addr,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: balances.insert(IceRockMiningAddress,balances.get(IceRockMiningAddress) - amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(IceRockMiningAddress,addr,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amountInUSDollars = msg.value * currentUSDExchangeRate / 10 ** 18

  ID: 2
  Type: NodeType.VARIABLE
  Expression: valueToPass = amountInUSDollars / priceUSD

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: valueToPass = (valueToPass * (100 + bonus)) / 100

  ID: 4
  Type: NodeType.IF
  Expression: balances.get(IceRockMiningAddress) >= valueToPass

  ID: 5
  Type: NodeType.IF
  Expression: balances.contains(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances.insert(msg.sender,balances.get(msg.sender) + valueToPass)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances.insert(msg.sender,valueToPass)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances.insert(IceRockMiningAddress,balances.get(IceRockMiningAddress) - valueToPass)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(IceRockMiningAddress,msg.sender,valueToPass)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: approveDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dividendsPerToken = totalDividendsAmount * 10 ** 18 / initialSupply

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < balances.size()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokenHolder = balances.getKeyByIndex(i)

  ID: 7
  Type: NodeType.IF
  Expression: balances.get(tokenHolder) > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: approvedDividends[tokenHolder] = balances.get(tokenHolder) * dividendsPerToken

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i += 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 1

Function: burnUnsold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: burningAmount = balances.get(IceRockMiningAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: initialSupply -= burningAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances.insert(IceRockMiningAddress,0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Burned(IceRockMiningAddress,burningAmount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approvedDividendsOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approvedDividends[tokenHolder]

Edges:
  0 -> 1

Function: transferAllDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < balances.size()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tokenHolder = balances.getKeyByIndex(i)

  ID: 6
  Type: NodeType.IF
  Expression: approvedDividends[tokenHolder] > 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokenHolder.transfer(approvedDividends[tokenHolder])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: DividendsTransfered(tokenHolder,approvedDividends[tokenHolder])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: approvedDividends[tokenHolder] = 0

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i += 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 4
  12 -> 3

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IceRockMiningAddress.transfer(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: initialSupply = 20000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: currentUSDExchangeRate = 1340

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: bonus = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: priceUSD = 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = ICE ROCK MINING

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = ROCK2

Edges:
  0 -> 1


