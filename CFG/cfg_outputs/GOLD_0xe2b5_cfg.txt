Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: ERC20
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _name = name_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol_

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: senderBalance = _balances[sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = senderBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _createInitialSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IDexRouter
==================================================


Contract: IDexFactory
==================================================


Contract: GOLD
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: dexRouter = _dexRouter

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lpPair = IDexFactory(_dexRouter.factory()).createPair(address(this),_dexRouter.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(lpPair),true)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(address(lpPair),true)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: totalSupply = 1 * 1e9 * 1e18

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxBuyAmount = totalSupply * 3 / 100

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxSellAmount = totalSupply * 3 / 100

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: maxWalletAmount = totalSupply * 3 / 100

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = totalSupply * 1 / 1000

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: buyOperationsFee = 15

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: buyLiquidityFee = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyOperationsFee + buyLiquidityFee

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: sellOperationsFee = 15

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: sellLiquidityFee = 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellOperationsFee + sellLiquidityFee

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(newOwner,true)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(this),true)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(address(0xdead),true)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(newOwner,true)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(this),true)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: excludeFromFees(address(0xdead),true)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: operationsAddress = address(newOwner)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _createInitialSupply(newOwner,totalSupply)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: transferOwnership(newOwner)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: ERC20(Physical Gold,GOLD)

Edges:
  0 -> 27
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  27 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,amount must be greater than 0)

  ID: 4
  Type: NodeType.IF
  Expression: ! tradingActive

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isExcludedFromFees[from] || _isExcludedFromFees[to],Trading is not active.)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! bot[from] && ! bot[to],Bots cannot transfer tokens in or out except to owner or dead address.)

  ID: 8
  Type: NodeType.IF
  Expression: limitsInEffect

  ID: 9
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != address(0) && to != address(0xdead) && ! _isExcludedFromFees[from] && ! _isExcludedFromFees[to]

  ID: 10
  Type: NodeType.IF
  Expression: transferDelayEnabled

  ID: 11
  Type: NodeType.IF
  Expression: to != address(dexRouter) && to != address(lpPair)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_holderLastTransferTimestamp[tx.origin] < block.number - 2 && _holderLastTransferTimestamp[to] < block.number - 2,_transfer:: Transfer Delay enabled.  Try again later.)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _holderLastTransferTimestamp[tx.origin] = block.number

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _holderLastTransferTimestamp[to] = block.number

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && ! _isExcludedMaxTransactionAmount[to]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxBuyAmount,Buy transfer amount exceeds the max buy.)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWalletAmount,Cannot Exceed max wallet)

  ID: 20
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && ! _isExcludedMaxTransactionAmount[from]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= maxSellAmount,Sell transfer amount exceeds the max sell.)

  ID: 22
  Type: NodeType.IF
  Expression: ! _isExcludedMaxTransactionAmount[to]

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount + balanceOf(to) <= maxWalletAmount,Cannot Exceed max wallet)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 30
  Type: NodeType.VARIABLE
  Expression: canSwap = contractTokenBalance >= swapTokensAtAmount

  ID: 31
  Type: NodeType.IF
  Expression: canSwap && swapEnabled && ! swapping && ! automatedMarketMakerPairs[from] && ! _isExcludedFromFees[from] && ! _isExcludedFromFees[to]

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 37
  Type: NodeType.IF
  Expression: _isExcludedFromFees[from] || _isExcludedFromFees[to]

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.VARIABLE
  Expression: fees = 0

  ID: 41
  Type: NodeType.IF
  Expression: takeFee

  ID: 42
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && sellTotalFees > 0

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: fees = amount * sellTotalFees / 100

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: tokensForOperations += fees * sellOperationsFee / sellTotalFees

  ID: 46
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && buyTotalFees > 0

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: fees = amount * buyTotalFees / 100

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: tokensForOperations += fees * buyOperationsFee / buyTotalFees

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.IF
  Expression: fees > 0

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,address(this),fees)

  ID: 54
  Type: NodeType.ENDIF
  Expression: 

  ID: 55
  Type: NodeType.EXPRESSION
  Expression: amount -= fees

  ID: 56
  Type: NodeType.ENDIF
  Expression: 

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: super._transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 28
  9 -> 10
  9 -> 27
  10 -> 11
  10 -> 16
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 20
  18 -> 19
  19 -> 26
  20 -> 21
  20 -> 22
  21 -> 25
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 35
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  37 -> 39
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  41 -> 56
  42 -> 43
  42 -> 46
  43 -> 44
  44 -> 45
  45 -> 51
  46 -> 47
  46 -> 50
  47 -> 48
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  52 -> 54
  53 -> 54
  54 -> 55
  55 -> 56
  56 -> 57

Function: _createInitialSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: mint to the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingActive,Cannot reenable trading)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tradingActive = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tradingActiveBlock = block.number

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: EnabledTrading()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: limitsInEffect = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: transferDelayEnabled = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RemovedLimits()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: manageBoughtEarly
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bot[wallet] = flag

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: massManageBoughtEarly
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < wallets.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: bot[wallets[i]] = flag

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: disableTransferDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transferDelayEnabled = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateMaxBuyAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 2 / 1000) / 1e18,Cannot set max buy amount lower than 0.2%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxBuyAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxBuyAmount(maxBuyAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateMaxSellAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 2 / 1000) / 1e18,Cannot set max sell amount lower than 0.2%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxSellAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxSellAmount(maxSellAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateMaxWalletAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newNum >= (totalSupply() * 3 / 1000) / 1e18,Cannot set max wallet amount lower than 0.3%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: maxWalletAmount = newNum * (10 ** 18)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: UpdatedMaxWalletAmount(maxWalletAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateSwapTokensAtAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAmount >= totalSupply() * 1 / 100000,Swap amount cannot be lower than 0.001% total supply.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAmount <= totalSupply() * 1 / 1000,Swap amount cannot be higher than 0.1% total supply.)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = newAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _excludeFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedMaxTransactionAmount[updAds] = isExcluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MaxTransactionExclusion(updAds,isExcluded)

Edges:
  0 -> 1
  1 -> 2

Function: airdropToWallets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(wallets.length == amountsInTokens.length,arrays must be the same length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(wallets.length < 600,Can only airdrop 600 wallets per txn due to gas limits)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < wallets.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: wallet = wallets[i]

  ID: 8
  Type: NodeType.VARIABLE
  Expression: amount = amountsInTokens[i]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: super._transfer(msg.sender,wallet,amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: excludeFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! isEx

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(updAds != lpPair,Cannot remove uniswap pair from max txn)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedMaxTransactionAmount[updAds] = isEx

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != lpPair,The pair cannot be removed from automatedMarketMakerPairs)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setAutomatedMarketMakerPair(pair,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SetAutomatedMarketMakerPair(pair,value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[pair] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _excludeFromMaxTransaction(pair,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SetAutomatedMarketMakerPair(pair,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: updateBuyFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyOperationsFee = _operationsFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyLiquidityFee = _liquidityFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = buyOperationsFee + buyLiquidityFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyTotalFees <= 99,Must keep fees at 99% or less)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateSellFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sellOperationsFee = _operationsFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellLiquidityFee = _liquidityFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = sellOperationsFee + sellLiquidityFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellTotalFees <= 99,Must keep fees at 99% or less)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: excludeFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFees[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ExcludeFromFees(account,excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = dexRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(dexRouter),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(dexRouter),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: dexRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(0xdead),block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalTokensToSwap = tokensForLiquidity + tokensForOperations

  ID: 3
  Type: NodeType.IF
  Expression: contractBalance == 0 || totalTokensToSwap == 0

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: contractBalance > swapTokensAtAmount * 60

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: contractBalance = swapTokensAtAmount * 60

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(contractBalance - liquidityTokens)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 13
  Type: NodeType.VARIABLE
  Expression: ethForLiquidity = ethBalance

  ID: 14
  Type: NodeType.VARIABLE
  Expression: ethForOperations = ethBalance * tokensForOperations / (totalTokensToSwap - (tokensForLiquidity / 2))

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ethForLiquidity -= ethForOperations

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: tokensForLiquidity = 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: tokensForOperations = 0

  ID: 18
  Type: NodeType.IF
  Expression: liquidityTokens > 0 && ethForLiquidity > 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: addLiquidity(liquidityTokens,ethForLiquidity)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: address(this).balance > 0

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(operationsAddress).call{value: address(this).balance}()

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 23
  22 -> 23

Function: transferForeignToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_token != address(0),_token address cannot be 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _contractBalance = IERC20(_token).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _sent = IERC20(_token).transfer(_to,_contractBalance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferForeignToken(_token,_contractBalance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.RETURN
  Expression: _sent

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  5 -> 1

Function: withdrawStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(msg.sender).call{value: address(this).balance}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setOperationsAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_operationsAddress != address(0),_operationsAddress address cannot be 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: operationsAddress = address(_operationsAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: forceSwapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(address(this)) >= 0,No tokens to swap)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OwnerForcedSwapBack(block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingActiveBlock = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: limitsInEffect = true

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingActive = false

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapEnabled = false

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: transferDelayEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


