Contract: token
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: Crowdsale
==================================================

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: crowdsaleClosed || (maximumTarget - amountRaised) < msg.value

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amount = msg.value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] += amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: amountRaised += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: resAmount += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: soldTokens += amount / price

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokenReward.transfer(msg.sender,amount / price)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: FundTransfer(msg.sender,amount,true)

  ID: 11
  Type: NodeType.IF
  Expression: amountRaised >= minimumTarget && ! minimumTargetReached

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: minimumTargetReached = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: GoalReached(beneficiary,minimumTarget)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: minimumTargetReached

  ID: 16
  Type: NodeType.IF
  Expression: beneficiary.send(amount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: FundTransfer(beneficiary,amount,false)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: resAmount -= amount

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 20
  16 -> 17
  16 -> 19
  17 -> 18
  18 -> 19
  19 -> 20

Function: devWithdrawal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! minimumTargetReached || ! (beneficiary == msg.sender)

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: wAmount = num / den

  ID: 5
  Type: NodeType.IF
  Expression: beneficiary.send(wAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: FundTransfer(beneficiary,wAmount,false)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: resAmount -= wAmount

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8

Function: devResWithdrawal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! minimumTargetReached || ! (beneficiary == msg.sender)

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: beneficiary.send(resAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: FundTransfer(beneficiary,resAmount,false)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: resAmount -= resAmount

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7

Function: closeCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: beneficiary == msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: crowdsaleClosed = closeType

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: checkTargetReached
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amountRaised >= minimumTarget

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minimumTargetReached = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: afterDeadline()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: returnTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! crowdsaleClosed

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: beneficiary == msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: tokenReward.transfer(beneficiary,tokensAmount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: afterDeadline()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: safeWithdrawal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! crowdsaleClosed

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! minimumTargetReached && crowdsaleClosed

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amount = balanceOf[msg.sender]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] = 0

  ID: 7
  Type: NodeType.IF
  Expression: amount > 0

  ID: 8
  Type: NodeType.IF
  Expression: msg.sender.send(amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: FundTransfer(msg.sender,amount,false)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: resAmount -= amount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] = amount

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: afterDeadline()

Edges:
  0 -> 15
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 14
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 13
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: crowdsaleClosed = true

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minimumTargetReached = false

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: beneficiary = 0xC1fa2C60Ea649A477e40c0510744f2881C0486D9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: price = 1500000000000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minimumTarget = 1500000 * price

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumTarget = 9803020 * price

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: deadline = now + 43200 * 60

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokenReward = token(0x2Fd8019ce2AAc3bf9DB18D851A57EFe1a6151BBF)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7


