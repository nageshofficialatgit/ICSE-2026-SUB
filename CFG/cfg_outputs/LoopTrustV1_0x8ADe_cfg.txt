Contract: AggregatorV3Interface
==================================================


Contract: LoopTrustV1
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

Edges:
  0 -> 1
  1 -> 2

Function: payWithFlatFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethFee = getFlatFeeInETH()

  ID: 2
  Type: NodeType.IF
  Expression: msg.value < ethFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert FeeTooLow()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastCallTimestamp = block.timestamp

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: FeePaid(msg.sender,msg.value,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6

Function: getFlatFeeInETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.IF
  Expression: price <= 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPriceData()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethPrice = uint256(price)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: usdAmount = USD_FLAT_FEE * 1e8

  ID: 8
  Type: NodeType.RETURN
  Expression: (usdAmount * 1e18) / ethPrice

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: payWithPercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: requiredFee = (transactionValue * FEE_PERCENT_BPS) / 10000

  ID: 2
  Type: NodeType.IF
  Expression: msg.value < requiredFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert FeeTooLow()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastCallTimestamp = block.timestamp

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: FeePaid(msg.sender,msg.value,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (sent,None) = address(owner).call{value: balance}()

  ID: 4
  Type: NodeType.IF
  Expression: ! sent

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawFailed()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Withdraw(owner,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  8 -> 1

Function: timeSinceLastCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.timestamp - lastCallTimestamp

Edges:
  0 -> 1

Function: updatePriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newFeed == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPriceFeed()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newFeed.code.length > 0,Address must be a contract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(newFeed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INACTIVITY_THRESHOLD = 7200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_PERCENT_BPS = 700

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USD_FLAT_FEE = 50

Edges:
  0 -> 1
  1 -> 2


