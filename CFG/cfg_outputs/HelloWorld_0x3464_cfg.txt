Contract: HelloWorld
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: message = Hello, World!

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: bridge = Bridge(bridgeAddress)

Edges:
  0 -> 1
  1 -> 2

Function: setMessage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: message = newMessage

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: NewMessage(newMessage)

Edges:
  0 -> 1
  1 -> 2

Function: getMessage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: message

Edges:
  0 -> 1

Function: portMessage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(data.addresses.length > 0,Address array empty)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(data.strings.length > 0,String array empty)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: message = data.strings[0]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: NewMessage(data.strings[0])

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: sendMessage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,Fee amount must be greater than 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: addresses = new address[](1)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: integers = new uint256[](1)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: strings = new string[](1)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: bools = new bool[](1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: strings[0] = message

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(addresses.length <= 5,Addresses array length must be <= 5)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(integers.length <= 5,Integers array length must be <= 5)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(strings.length <= 5,Strings array length must be <= 5)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bools.length <= 5,Bools array length must be <= 5)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: data = CrossChainData({addresses:addresses,integers:integers,strings:strings,bools:bools})

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: bridge.outboundMessage{value: msg.value}(address(this),to,data,chain)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13


Contract: Bridge
==================================================


