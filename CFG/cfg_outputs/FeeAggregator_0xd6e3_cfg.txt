Contract: IPausable
==================================================


Contract: Common
==================================================


Contract: EnumerableBytesSet
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _add(set,value)

Edges:
  0 -> 1

Function: _add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _contains(set,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: set._values.push(value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: set._positions[value] = set._values.length

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _remove(set,value)

Edges:
  0 -> 1

Function: _remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: position = set._positions[value]

  ID: 2
  Type: NodeType.IF
  Expression: position != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: valueIndex = position - 1

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lastIndex = set._values.length - 1

  ID: 5
  Type: NodeType.IF
  Expression: valueIndex != lastIndex

  ID: 6
  Type: NodeType.VARIABLE
  Expression: lastValue = set._values[lastIndex]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: set._values[valueIndex] = lastValue

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: set._positions[lastValue] = position

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: set._values.pop()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: delete set._positions[value]

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 13
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: contains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _contains(set,value)

Edges:
  0 -> 1

Function: _contains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._positions[value] != 0

Edges:
  0 -> 1

Function: length
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _length(set)

Edges:
  0 -> 1

Function: _length
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values.length

Edges:
  0 -> 1

Function: at
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _at(set,index)

Edges:
  0 -> 1

Function: _at
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values[index]

Edges:
  0 -> 1

Function: values
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: store = _values(set)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: result = store

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _values
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values

Edges:
  0 -> 1


Contract: Errors
==================================================


Contract: Roles
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSER_ROLE = keccak256(bytes)(PAUSER_ROLE)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNPAUSER_ROLE = keccak256(bytes)(UNPAUSER_ROLE)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ASSET_ADMIN_ROLE = keccak256(bytes)(ASSET_ADMIN_ROLE)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BRIDGER_ROLE = keccak256(bytes)(BRIDGER_ROLE)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EARMARK_MANAGER_ROLE = keccak256(bytes)(EARMARK_MANAGER_ROLE)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WITHDRAWER_ROLE = keccak256(bytes)(WITHDRAWER_ROLE)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SWAPPER_ROLE = keccak256(bytes)(SWAPPER_ROLE)

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_MANAGER_ROLE = keccak256(bytes)(TOKEN_MANAGER_ROLE)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7


Contract: ITypeAndVersion
==================================================


Contract: IWERC20
==================================================


Contract: IERC677Receiver
==================================================


Contract: ILinkAvailable
==================================================


Contract: Client
==================================================

Function: _argsToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG,extraArgs)

  ID: 2
  Type: NodeType.RETURN
  Expression: bts

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9

Edges:


Contract: IAccessControl
==================================================


Contract: IERC5313
==================================================


Contract: IERC20
==================================================


Contract: IERC20Permit
==================================================


Contract: Address
==================================================

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressInsufficientBalance(address)(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 6
  Type: NodeType.IF
  Expression: ! success

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FailedInnerCall()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressInsufficientBalance(address)(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 7
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! success

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata)

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length == 0 && target.code.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AddressEmptyCode(address)(target)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: returndata

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! success

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata)

  ID: 3
  Type: NodeType.RETURN
  Expression: returndata

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FailedInnerCall()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: IERC165
==================================================


Contract: Math
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a > b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: average
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (a & b) + (a ^ b) / 2

Edges:
  0 -> 1

Function: ceilDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: a == 0

  ID: 6
  Type: NodeType.RETURN
  Expression: 0

  ID: 7
  Type: NodeType.RETURN
  Expression: (a - 1) / b + 1

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 5
  5 -> 6
  5 -> 7

Function: mulDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = mulDiv(x,y,denominator)

  ID: 2
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && mulmod(uint256,uint256,uint256)(x,y,denominator) > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: result += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = sqrt(a)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && result * result < a

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log2(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 1 << result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log10
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log10(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 10 ** result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log256(value)

  ID: 3
  Type: NodeType.IF
  Expression: unsignedRoundsUp(rounding) && 1 << (result << 3) < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: unsignedRoundsUp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint8(rounding) % 2 == 1

Edges:
  0 -> 1


Contract: SafeCast
==================================================

Function: toUint248
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint248).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(248,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint248(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint240
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint240).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(240,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint240(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint232
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint232).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(232,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint232(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint224).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(224,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint224(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint216
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint216).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(216,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint216(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint208
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint208).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(208,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint208(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint200
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint200).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(200,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint200(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint192
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint192).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(192,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint192(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint184
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint184).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(184,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint184(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint176
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint176).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(176,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint176(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint168
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint168).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(168,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint168(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint160
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint160).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(160,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint160(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint152
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint152).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(152,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint152(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint144
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint144).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(144,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint144(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint136
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint136).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(136,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint136(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint128
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint128).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(128,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint128(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint120
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint120).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(120,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint120(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint112
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint112).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(112,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint112(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint104
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint104).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(104,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint104(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint96
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint96).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(96,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint96(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint88
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint88).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(88,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint88(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint80
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint80).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(80,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint80(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint72
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint72).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(72,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint72(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint64).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(64,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint64(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint56
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint56).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(56,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint56(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint48
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint48).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(48,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint40
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint40).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(40,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint40(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint32).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(32,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint32(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint24
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint24).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(24,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint24(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint16
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint16).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(16,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint16(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint8
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > type()(uint8).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintDowncast(uint8,uint256)(8,value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint8(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toUint256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value < 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntToUint(int256)(value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: toInt248
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int248(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(248,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt240
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int240(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(240,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt232
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int232(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(232,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt224
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int224(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(224,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt216
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int216(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(216,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt208
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int208(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(208,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt200
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int200(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(200,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt192
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int192(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(192,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt184
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int184(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(184,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt176
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int176(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(176,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt168
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int168(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(168,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt160
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int160(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(160,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt152
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int152(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(152,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt144
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int144(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(144,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt136
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int136(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(136,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt128
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int128(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(128,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt120
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int120(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(120,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt112
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int112(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(112,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt104
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int104(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(104,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt96
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int96(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(96,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt88
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int88(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(88,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt80
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int80(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(80,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt72
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int72(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(72,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt64
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int64(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(64,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt56
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int56(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(56,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt48
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int48(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(48,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt40
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int40(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(40,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int32(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(32,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt24
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int24(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(24,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt16
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int16(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(16,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt8
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: downcasted = int8(value)

  ID: 2
  Type: NodeType.IF
  Expression: downcasted != value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedIntDowncast(uint8,int256)(8,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: downcasted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: toInt256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value > uint256(type()(int256).max)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SafeCastOverflowedUintToInt(uint256)(value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: int256(value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4


Contract: EnumerableSet
==================================================

Function: _add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _contains(set,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: set._values.push(value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: set._positions[value] = set._values.length

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: _remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: position = set._positions[value]

  ID: 2
  Type: NodeType.IF
  Expression: position != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: valueIndex = position - 1

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lastIndex = set._values.length - 1

  ID: 5
  Type: NodeType.IF
  Expression: valueIndex != lastIndex

  ID: 6
  Type: NodeType.VARIABLE
  Expression: lastValue = set._values[lastIndex]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: set._values[valueIndex] = lastValue

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: set._positions[lastValue] = position

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: set._values.pop()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: delete set._positions[value]

  ID: 12
  Type: NodeType.RETURN
  Expression: true

  ID: 13
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 13
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: _contains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._positions[value] != 0

Edges:
  0 -> 1

Function: _length
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values.length

Edges:
  0 -> 1

Function: _at
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values[index]

Edges:
  0 -> 1

Function: _values
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: set._values

Edges:
  0 -> 1

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _add(set._inner,bytes32(value))

Edges:
  0 -> 1

Function: remove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _remove(set._inner,bytes32(value))

Edges:
  0 -> 1

Function: contains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _contains(set._inner,bytes32(value))

Edges:
  0 -> 1

Function: length
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _length(set._inner)

Edges:
  0 -> 1

Function: at
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(_at(set._inner,index))

Edges:
  0 -> 1

Function: values
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: store = _values(set._inner)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: result = store

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: IFeeAggregator
==================================================


Contract: IRouterClient
==================================================


Contract: IAccessControlDefaultAdminRules
==================================================


Contract: IAccessControlEnumerable
==================================================


Contract: Pausable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: ERC165
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: NativeTokenReceiver
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: wrappedNativeToken != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setWrappedNativeToken(wrappedNativeToken)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ZeroBalance()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s_wrappedNativeToken.deposit{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: gasleft()() > MIN_GAS_FOR_RECEIVE

  ID: 2
  Type: NodeType.IF
  Expression: address(s_wrappedNativeToken) != address(0)

  ID: 3
  Type: NodeType.TRY
  Expression: s_wrappedNativeToken.deposit{value: msg.value}()

  ID: 4
  Type: NodeType.CATCH
  Expression: 

  ID: 5
  Type: NodeType.CATCH
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  3 -> 6
  4 -> 6
  5 -> 6
  6 -> 7

Function: _setWrappedNativeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: wrappedNativeToken == address(s_wrappedNativeToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.ValueNotUpdated()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s_wrappedNativeToken = IWERC20(wrappedNativeToken)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: WrappedNativeTokenSet(wrappedNativeToken)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: getWrappedNativeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_wrappedNativeToken

  ID: 2
  Type: NodeType.RETURN
  Expression: wrappedNativeToken

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_GAS_FOR_RECEIVE = 2300

Edges:


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transferFrom,(from,to,value)))

Edges:
  0 -> 1

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,oldAllowance + value)

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < requestedDecrease

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedDecreaseAllowance(address,uint256,uint256)(spender,currentAllowance,requestedDecrease)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: forceApprove(token,spender,currentAllowance - requestedDecrease)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: forceApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeCall(token.approve,(spender,value))

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.approve,(spender,0)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length != 0 && ! abi.decode(returndata,(bool))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: LinkReceiver
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: linkToken == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: i_linkToken = IERC20(linkToken)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: LinkTokenSet(linkToken)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: onTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != address(i_linkToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotLinkToken(address)(msg.sender)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getLinkToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: i_linkToken

  ID: 2
  Type: NodeType.RETURN
  Expression: linkToken

Edges:
  0 -> 1


Contract: AccessControl
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].hasRole[account]

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].adminRole

Edges:
  0 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].adminRole = adminRole

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

Edges:


Contract: AccessControlDefaultAdminRules
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].hasRole[account]

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].adminRole

Edges:
  0 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminRules()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: super.grantRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminRules()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: super.revokeRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (newDefaultAdmin,schedule) = pendingDefaultAdmin()

  ID: 5
  Type: NodeType.IF
  Expression: newDefaultAdmin != address(0) || ! _isScheduleSet(schedule) || ! _hasSchedulePassed(schedule)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminDelay(uint48)(schedule)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdminSchedule

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: super.renounceRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 9
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminRules()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: super._setRoleAdmin(role,adminRole)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE

  ID: 2
  Type: NodeType.IF
  Expression: defaultAdmin() != address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminRules()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _currentDefaultAdmin = account

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: super._grantRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: delete _currentDefaultAdmin

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: super._revokeRole(role,account)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialDefaultAdmin == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlInvalidDefaultAdmin(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentDelay = initialDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,initialDefaultAdmin)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: defaultAdmin()

Edges:
  0 -> 1

Function: defaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _currentDefaultAdmin

Edges:
  0 -> 1

Function: pendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_pendingDefaultAdmin,_pendingDefaultAdminSchedule)

  ID: 2
  Type: NodeType.RETURN
  Expression: (newAdmin,schedule)

Edges:
  0 -> 1

Function: defaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: _pendingDelay

  ID: 5
  Type: NodeType.RETURN
  Expression: _currentDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: pendingDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && ! _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: (_pendingDelay,schedule)

  ID: 5
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 7
  Type: NodeType.RETURN
  Expression: (newDelay,schedule)

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: defaultAdminDelayIncreaseWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 432000

Edges:
  0 -> 1

Function: beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _beginDefaultAdminTransfer(newAdmin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(newAdmin,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferScheduled(newAdmin,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _cancelDefaultAdminTransfer()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(address(0),0)

Edges:
  0 -> 1

Function: acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (newDefaultAdmin,None) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.IF
  Expression: _msgSender() != newDefaultAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlInvalidDefaultAdmin(address)(_msgSender())

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _acceptDefaultAdminTransfer()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (newAdmin,schedule) = pendingDefaultAdmin()

  ID: 4
  Type: NodeType.IF
  Expression: ! _isScheduleSet(schedule) || ! _hasSchedulePassed(schedule)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminDelay(uint48)(schedule)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(DEFAULT_ADMIN_ROLE,defaultAdmin())

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,newAdmin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdmin

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdminSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _changeDefaultAdminDelay(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(newDelay,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeScheduled(newDelay,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rollbackDefaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(0,0)

Edges:
  0 -> 1

Function: _delayChangeWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentDelay = defaultAdminDelay()

  ID: 3
  Type: NodeType.IF
  Expression: newDelay > currentDelay

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(Math.min(newDelay,defaultAdminDelayIncreaseWait()))

  ID: 5
  Type: NodeType.RETURN
  Expression: currentDelay - newDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: _setPendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,oldSchedule) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdmin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdminSchedule = newSchedule

  ID: 5
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferCanceled()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _setPendingDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldSchedule = _pendingDelaySchedule

  ID: 2
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 3
  Type: NodeType.IF
  Expression: _hasSchedulePassed(oldSchedule)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentDelay = _pendingDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeCanceled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _pendingDelay = newDelay

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _pendingDelaySchedule = newSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _isScheduleSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule != 0

Edges:
  0 -> 1

Function: _hasSchedulePassed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule < block.timestamp

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

Edges:


Contract: PausableWithAccessControl
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: AccessControlDefaultAdminRules(adminRoleTransferDelay,admin)

Edges:
  0 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId)

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: defaultAdmin()

Edges:
  0 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: granted = super._grantRole(role,account)

  ID: 2
  Type: NodeType.IF
  Expression: granted

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: s_roleMembers[role].add(account)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: granted

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: revoked = super._revokeRole(role,account)

  ID: 2
  Type: NodeType.IF
  Expression: revoked

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: s_roleMembers[role].remove(account)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: revoked

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].adminRole = adminRole

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: defaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _currentDefaultAdmin

Edges:
  0 -> 1

Function: pendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_pendingDefaultAdmin,_pendingDefaultAdminSchedule)

  ID: 2
  Type: NodeType.RETURN
  Expression: (newAdmin,schedule)

Edges:
  0 -> 1

Function: defaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: _pendingDelay

  ID: 5
  Type: NodeType.RETURN
  Expression: _currentDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: pendingDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && ! _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: (_pendingDelay,schedule)

  ID: 5
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 7
  Type: NodeType.RETURN
  Expression: (newDelay,schedule)

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: defaultAdminDelayIncreaseWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 432000

Edges:
  0 -> 1

Function: beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _beginDefaultAdminTransfer(newAdmin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(newAdmin,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferScheduled(newAdmin,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _cancelDefaultAdminTransfer()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(address(0),0)

Edges:
  0 -> 1

Function: acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (newDefaultAdmin,None) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.IF
  Expression: _msgSender() != newDefaultAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlInvalidDefaultAdmin(address)(_msgSender())

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _acceptDefaultAdminTransfer()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (newAdmin,schedule) = pendingDefaultAdmin()

  ID: 4
  Type: NodeType.IF
  Expression: ! _isScheduleSet(schedule) || ! _hasSchedulePassed(schedule)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminDelay(uint48)(schedule)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(DEFAULT_ADMIN_ROLE,defaultAdmin())

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,newAdmin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdmin

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdminSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _changeDefaultAdminDelay(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(newDelay,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeScheduled(newDelay,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rollbackDefaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(0,0)

Edges:
  0 -> 1

Function: _delayChangeWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentDelay = defaultAdminDelay()

  ID: 3
  Type: NodeType.IF
  Expression: newDelay > currentDelay

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(Math.min(newDelay,defaultAdminDelayIncreaseWait()))

  ID: 5
  Type: NodeType.RETURN
  Expression: currentDelay - newDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: _setPendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,oldSchedule) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdmin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdminSchedule = newSchedule

  ID: 5
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferCanceled()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _setPendingDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldSchedule = _pendingDelaySchedule

  ID: 2
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 3
  Type: NodeType.IF
  Expression: _hasSchedulePassed(oldSchedule)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentDelay = _pendingDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeCanceled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _pendingDelay = newDelay

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _pendingDelaySchedule = newSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _isScheduleSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule != 0

Edges:
  0 -> 1

Function: _hasSchedulePassed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule < block.timestamp

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].hasRole[account]

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].adminRole

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: emergencyPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: emergencyUnpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: getRoleMember
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].at(index)

Edges:
  0 -> 1

Function: getRoleMemberCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].length()

Edges:
  0 -> 1

Function: getRoleMembers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].values()

  ID: 2
  Type: NodeType.RETURN
  Expression: roleMembers

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

Edges:


Contract: EmergencyWithdrawer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: PausableWithAccessControl(adminRoleTransferDelay,admin)

Edges:
  0 -> 1

Function: emergencyPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: emergencyUnpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: getRoleMember
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].at(index)

Edges:
  0 -> 1

Function: getRoleMemberCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].length()

Edges:
  0 -> 1

Function: getRoleMembers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].values()

  ID: 2
  Type: NodeType.RETURN
  Expression: roleMembers

Edges:
  0 -> 1

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: defaultAdmin()

Edges:
  0 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].adminRole = adminRole

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: defaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _currentDefaultAdmin

Edges:
  0 -> 1

Function: pendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_pendingDefaultAdmin,_pendingDefaultAdminSchedule)

  ID: 2
  Type: NodeType.RETURN
  Expression: (newAdmin,schedule)

Edges:
  0 -> 1

Function: defaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: _pendingDelay

  ID: 5
  Type: NodeType.RETURN
  Expression: _currentDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: pendingDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && ! _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: (_pendingDelay,schedule)

  ID: 5
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 7
  Type: NodeType.RETURN
  Expression: (newDelay,schedule)

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: defaultAdminDelayIncreaseWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 432000

Edges:
  0 -> 1

Function: beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _beginDefaultAdminTransfer(newAdmin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(newAdmin,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferScheduled(newAdmin,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _cancelDefaultAdminTransfer()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(address(0),0)

Edges:
  0 -> 1

Function: acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (newDefaultAdmin,None) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.IF
  Expression: _msgSender() != newDefaultAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlInvalidDefaultAdmin(address)(_msgSender())

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _acceptDefaultAdminTransfer()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (newAdmin,schedule) = pendingDefaultAdmin()

  ID: 4
  Type: NodeType.IF
  Expression: ! _isScheduleSet(schedule) || ! _hasSchedulePassed(schedule)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminDelay(uint48)(schedule)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(DEFAULT_ADMIN_ROLE,defaultAdmin())

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,newAdmin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdmin

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdminSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _changeDefaultAdminDelay(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(newDelay,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeScheduled(newDelay,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rollbackDefaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(0,0)

Edges:
  0 -> 1

Function: _delayChangeWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentDelay = defaultAdminDelay()

  ID: 3
  Type: NodeType.IF
  Expression: newDelay > currentDelay

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(Math.min(newDelay,defaultAdminDelayIncreaseWait()))

  ID: 5
  Type: NodeType.RETURN
  Expression: currentDelay - newDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: _setPendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,oldSchedule) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdmin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdminSchedule = newSchedule

  ID: 5
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferCanceled()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _setPendingDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldSchedule = _pendingDelaySchedule

  ID: 2
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 3
  Type: NodeType.IF
  Expression: _hasSchedulePassed(oldSchedule)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentDelay = _pendingDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeCanceled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _pendingDelay = newDelay

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _pendingDelaySchedule = newSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _isScheduleSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule != 0

Edges:
  0 -> 1

Function: _hasSchedulePassed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule < block.timestamp

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].hasRole[account]

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].adminRole

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: assetAmounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.EmptyList()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < assetAmounts.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: asset = assetAmounts[i].asset

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amount = assetAmounts[i].amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _transferAsset(to,asset,amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: AssetEmergencyWithdrawn(to,asset,amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7
  13 -> 14
  14 -> 1

Function: emergencyWithdrawNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferNative(to,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AssetEmergencyWithdrawn(to,address(0),amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: _transferNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAmount()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (success,data) = to.call{value: amount}()

  ID: 10
  Type: NodeType.IF
  Expression: ! success

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert FailedNativeTokenTransfer(address,uint256,bytes)(to,amount,data)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12

Function: _transferAsset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0) || asset == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAmount()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(asset).safeTransfer(to,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

Edges:


Contract: FeeAggregator
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: params.ccipRouterClient == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: i_ccipRouter = IRouterClient(params.ccipRouterClient)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: CCIPRouterClientSet(params.ccipRouterClient)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: EmergencyWithdrawer(params.adminRoleTransferDelay,params.admin)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: LinkReceiver(params.linkToken)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: NativeTokenReceiver(params.wrappedNativeToken)

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ZeroBalance()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s_wrappedNativeToken.deposit{value: address(this).balance}()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: gasleft()() > MIN_GAS_FOR_RECEIVE

  ID: 2
  Type: NodeType.IF
  Expression: address(s_wrappedNativeToken) != address(0)

  ID: 3
  Type: NodeType.TRY
  Expression: s_wrappedNativeToken.deposit{value: msg.value}()

  ID: 4
  Type: NodeType.CATCH
  Expression: 

  ID: 5
  Type: NodeType.CATCH
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  3 -> 6
  4 -> 6
  5 -> 6
  6 -> 7

Function: _setWrappedNativeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: wrappedNativeToken == address(s_wrappedNativeToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.ValueNotUpdated()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s_wrappedNativeToken = IWERC20(wrappedNativeToken)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: WrappedNativeTokenSet(wrappedNativeToken)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: getWrappedNativeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_wrappedNativeToken

  ID: 2
  Type: NodeType.RETURN
  Expression: wrappedNativeToken

Edges:
  0 -> 1

Function: onTokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != address(i_linkToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotLinkToken(address)(msg.sender)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getLinkToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: i_linkToken

  ID: 2
  Type: NodeType.RETURN
  Expression: linkToken

Edges:
  0 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: assetAmounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.EmptyList()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < assetAmounts.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: asset = assetAmounts[i].asset

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amount = assetAmounts[i].amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _transferAsset(to,asset,amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: AssetEmergencyWithdrawn(to,asset,amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7
  13 -> 14
  14 -> 1

Function: emergencyWithdrawNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferNative(to,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AssetEmergencyWithdrawn(to,address(0),amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: _transferNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAmount()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (success,data) = to.call{value: amount}()

  ID: 10
  Type: NodeType.IF
  Expression: ! success

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert FailedNativeTokenTransfer(address,uint256,bytes)(to,amount,data)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12

Function: _transferAsset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: to == address(0) || asset == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: amount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAmount()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(asset).safeTransfer(to,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: emergencyPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.PAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (interfaceId == type()(IFeeAggregator).interfaceId || PausableWithAccessControl.supportsInterface(interfaceId))

Edges:
  0 -> 1

Function: emergencyUnpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _unpause()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.UNPAUSER_ROLE)

Edges:
  0 -> 3
  2 -> 1
  3 -> 2

Function: getRoleMember
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].at(index)

Edges:
  0 -> 1

Function: getRoleMemberCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].length()

Edges:
  0 -> 1

Function: getRoleMembers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_roleMembers[role].values()

  ID: 2
  Type: NodeType.RETURN
  Expression: roleMembers

Edges:
  0 -> 1

Function: _grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleGranted(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: _revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].hasRole[account] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleRevoked(role,account,_msgSender())

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: defaultAdmin()

Edges:
  0 -> 1

Function: grantRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _grantRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: revokeRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyRole(getRoleAdmin(role))

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: renounceRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: callerConfirmation != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlBadConfirmation()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(role,callerConfirmation)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _setRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousAdminRole = getRoleAdmin(role)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _roles[role].adminRole = adminRole

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RoleAdminChanged(role,previousAdminRole,adminRole)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: defaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _currentDefaultAdmin

Edges:
  0 -> 1

Function: pendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_pendingDefaultAdmin,_pendingDefaultAdminSchedule)

  ID: 2
  Type: NodeType.RETURN
  Expression: (newAdmin,schedule)

Edges:
  0 -> 1

Function: defaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: _pendingDelay

  ID: 5
  Type: NodeType.RETURN
  Expression: _currentDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: pendingDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: schedule = _pendingDelaySchedule

  ID: 3
  Type: NodeType.IF
  Expression: (_isScheduleSet(schedule) && ! _hasSchedulePassed(schedule))

  ID: 4
  Type: NodeType.RETURN
  Expression: (_pendingDelay,schedule)

  ID: 5
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 7
  Type: NodeType.RETURN
  Expression: (newDelay,schedule)

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: defaultAdminDelayIncreaseWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 432000

Edges:
  0 -> 1

Function: beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _beginDefaultAdminTransfer(newAdmin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _beginDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(newAdmin,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferScheduled(newAdmin,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _cancelDefaultAdminTransfer()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _cancelDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDefaultAdmin(address(0),0)

Edges:
  0 -> 1

Function: acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (newDefaultAdmin,None) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.IF
  Expression: _msgSender() != newDefaultAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlInvalidDefaultAdmin(address)(_msgSender())

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _acceptDefaultAdminTransfer()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _acceptDefaultAdminTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (newAdmin,schedule) = pendingDefaultAdmin()

  ID: 4
  Type: NodeType.IF
  Expression: ! _isScheduleSet(schedule) || ! _hasSchedulePassed(schedule)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlEnforcedDefaultAdminDelay(uint48)(schedule)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _revokeRole(DEFAULT_ADMIN_ROLE,defaultAdmin())

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _grantRole(DEFAULT_ADMIN_ROLE,newAdmin)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdmin

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: delete _pendingDefaultAdminSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _changeDefaultAdminDelay(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _changeDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(newDelay,newSchedule)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeScheduled(newDelay,newSchedule)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rollbackDefaultAdminDelay()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: _rollbackDefaultAdminDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPendingDelay(0,0)

Edges:
  0 -> 1

Function: _delayChangeWait
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentDelay = defaultAdminDelay()

  ID: 3
  Type: NodeType.IF
  Expression: newDelay > currentDelay

  ID: 4
  Type: NodeType.RETURN
  Expression: uint48(Math.min(newDelay,defaultAdminDelayIncreaseWait()))

  ID: 5
  Type: NodeType.RETURN
  Expression: currentDelay - newDelay

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: _setPendingDefaultAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,oldSchedule) = pendingDefaultAdmin()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdmin = newAdmin

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingDefaultAdminSchedule = newSchedule

  ID: 5
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminTransferCanceled()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: _setPendingDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldSchedule = _pendingDelaySchedule

  ID: 2
  Type: NodeType.IF
  Expression: _isScheduleSet(oldSchedule)

  ID: 3
  Type: NodeType.IF
  Expression: _hasSchedulePassed(oldSchedule)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentDelay = _pendingDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DefaultAdminDelayChangeCanceled()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _pendingDelay = newDelay

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _pendingDelaySchedule = newSchedule

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _isScheduleSet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule != 0

Edges:
  0 -> 1

Function: _hasSchedulePassed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: schedule < block.timestamp

Edges:
  0 -> 1

Function: hasRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].hasRole[account]

Edges:
  0 -> 1

Function: _checkRole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! hasRole(role,account)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AccessControlUnauthorizedAccount(address,bytes32)(account,role)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRoleAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _roles[role].adminRole

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: paused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _paused

Edges:
  0 -> 1

Function: _requireNotPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EnforcedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _requirePaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! paused()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ExpectedPause()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused(_msgSender())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferForSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: assetAmounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.EmptyList()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < assetAmounts.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: asset = assetAmounts[i].asset

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amount = assetAmounts[i].amount

  ID: 10
  Type: NodeType.IF
  Expression: ! s_allowlistedAssets.contains(asset)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.AssetNotAllowlisted(asset)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _transferAsset(to,asset,amount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AssetTransferredForSwap(to,asset,amount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.SWAPPER_ROLE)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.SWAPPER_ROLE)

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7
  16 -> 17
  17 -> 1
  18 -> 16

Function: isAssetAllowlisted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_allowlistedAssets.contains(asset)

  ID: 2
  Type: NodeType.RETURN
  Expression: isAllowlisted

Edges:
  0 -> 1

Function: getAllowlistedAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_allowlistedAssets.values()

  ID: 2
  Type: NodeType.RETURN
  Expression: allowlistedAssets

Edges:
  0 -> 1

Function: getAllowlistedDestinationChains
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_allowlistedDestinationChains.values()

  ID: 2
  Type: NodeType.RETURN
  Expression: allowlistedDestinationChains

Edges:
  0 -> 1

Function: bridgeAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! s_allowlistedReceivers[destinationChainSelector].contains(bridgeReceiver)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReceiverNotAllowlisted(uint64,bytes)(destinationChainSelector,bridgeReceiver)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: bridgeAssetAmounts.length == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Errors.EmptyList()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: evm2AnyMessage = _buildBridgeAssetsMessage(bridgeAssetAmounts,bridgeReceiver,extraArgs)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: fees = i_ccipRouter.getFee(destinationChainSelector,evm2AnyMessage)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: currentBalance = i_linkToken.balanceOf(address(this))

  ID: 10
  Type: NodeType.IF
  Expression: fees > currentBalance

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance(uint256,uint256)(currentBalance,fees)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: IERC20(address(i_linkToken)).safeIncreaseAllowance(address(i_ccipRouter),fees)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: messageId = i_ccipRouter.ccipSend(destinationChainSelector,evm2AnyMessage)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: BridgeAssetsMessageSent(messageId,evm2AnyMessage)

  ID: 16
  Type: NodeType.RETURN
  Expression: messageId

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.BRIDGER_ROLE)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.BRIDGER_ROLE)

  ID: 20
  Type: NodeType.RETURN
  Expression: messageId

Edges:
  0 -> 19
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 18
  18 -> 1
  19 -> 17

Function: _buildBridgeAssetsMessage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < bridgeAssetAmounts.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: asset = bridgeAssetAmounts[i].token

  ID: 6
  Type: NodeType.IF
  Expression: ! s_allowlistedAssets.contains(asset)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.AssetNotAllowlisted(asset)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IERC20(asset).safeIncreaseAllowance(address(i_ccipRouter),bridgeAssetAmounts[i].amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 11
  Type: NodeType.RETURN
  Expression: Client.EVM2AnyMessage({receiver:bridgeReceiver,data:,tokenAmounts:bridgeAssetAmounts,extraArgs:extraArgs,feeToken:address(i_linkToken)})

  ID: 12
  Type: NodeType.RETURN
  Expression: message

Edges:
  0 -> 3
  1 -> 4
  2 -> 11
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 4

Function: getAllowlistedReceivers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: s_allowlistedReceivers[destChainSelector].values()

  ID: 2
  Type: NodeType.RETURN
  Expression: allowlistedReceivers

Edges:
  0 -> 1

Function: linkAvailableForPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: int256(i_linkToken.balanceOf(address(this)))

  ID: 2
  Type: NodeType.RETURN
  Expression: linkBalance

Edges:
  0 -> 1

Function: getRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(i_ccipRouter)

  ID: 2
  Type: NodeType.RETURN
  Expression: ccipRouter

Edges:
  0 -> 1

Function: applyAllowlistedAssetUpdates
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < assetsToRemove.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: asset = assetsToRemove[i]

  ID: 6
  Type: NodeType.IF
  Expression: ! s_allowlistedAssets.remove(asset)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Errors.AssetNotAllowlisted(asset)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: AssetRemovedFromAllowlist(asset)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 11
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 12
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < assetsToAdd.length

  ID: 15
  Type: NodeType.VARIABLE
  Expression: asset_scope_1 = assetsToAdd[i_scope_0]

  ID: 16
  Type: NodeType.IF
  Expression: asset_scope_1 == address(0)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: ! s_allowlistedAssets.add(asset_scope_1)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: revert AssetAlreadyAllowlisted(address)(asset_scope_1)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: AssetAddedToAllowlist(asset_scope_1)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_0

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.ASSET_ADMIN_ROLE)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.ASSET_ADMIN_ROLE)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 25
  1 -> 4
  2 -> 13
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 4
  11 -> 14
  13 -> 11
  14 -> 15
  14 -> 12
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 14
  24 -> 26
  25 -> 24
  26 -> 3

Function: withdrawNonAllowlistedAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: assetAmounts.length == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Errors.EmptyList()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < assetAmounts.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: asset = assetAmounts[i].asset

  ID: 9
  Type: NodeType.VARIABLE
  Expression: amount = assetAmounts[i].amount

  ID: 10
  Type: NodeType.IF
  Expression: s_allowlistedAssets.contains(asset)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Errors.AssetAllowlisted(asset)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _transferAsset(to,asset,amount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: NonAllowlistedAssetWithdrawn(to,asset,amount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.WITHDRAWER_ROLE)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.WITHDRAWER_ROLE)

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7
  16 -> 17
  17 -> 1
  18 -> 16

Function: withdrawNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: wrappedNativeToken = address(s_wrappedNativeToken)

  ID: 2
  Type: NodeType.IF
  Expression: s_allowlistedAssets.contains(wrappedNativeToken)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Errors.AssetAllowlisted(wrappedNativeToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferNative(to,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NonAllowlistedAssetWithdrawn(to,address(0),amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.WITHDRAWER_ROLE)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyRole(Roles.WITHDRAWER_ROLE)

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1
  9 -> 7

Function: applyAllowlistedReceiverUpdates
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < receiversToRemove.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: destChainSelector = receiversToRemove[i].remoteChainSelector

  ID: 6
  Type: NodeType.VARIABLE
  Expression: receivers = receiversToRemove[i].receivers

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.IFLOOP
  Expression: j < receivers.length

  ID: 11
  Type: NodeType.VARIABLE
  Expression: receiver = receivers[j]

  ID: 12
  Type: NodeType.IF
  Expression: ! s_allowlistedReceivers[destChainSelector].remove(receiver)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert ReceiverNotAllowlisted(uint64,bytes)(destChainSelector,receiver)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ReceiverRemovedFromAllowlist(destChainSelector,receiver)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ++ j

  ID: 17
  Type: NodeType.IF
  Expression: s_allowlistedReceivers[destChainSelector].length() == 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: s_allowlistedDestinationChains.remove(destChainSelector)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: DestinationChainRemovedFromAllowlist(destChainSelector)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 22
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 23
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: 

  ID: 25
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < receiversToAdd.length

  ID: 26
  Type: NodeType.VARIABLE
  Expression: destChainSelector_scope_1 = receiversToAdd[i_scope_0].remoteChainSelector

  ID: 27
  Type: NodeType.IF
  Expression: destChainSelector_scope_1 == 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: revert InvalidChainSelector()()

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.VARIABLE
  Expression: receivers_scope_2 = receiversToAdd[i_scope_0].receivers

  ID: 31
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 32
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 33
  Type: NodeType.VARIABLE
  Expression: 

  ID: 34
  Type: NodeType.IFLOOP
  Expression: j_scope_3 < receivers_scope_2.length

  ID: 35
  Type: NodeType.VARIABLE
  Expression: receiver_scope_4 = receivers_scope_2[j_scope_3]

  ID: 36
  Type: NodeType.IF
  Expression: receiver_scope_4.length == 0 || keccak256(bytes)(receiver_scope_4) == EMPTY_ENCODED_BYTES32_ADDRESS_HASH

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: Errors.InvalidZeroAddress()

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 39
  Type: NodeType.IF
  Expression: ! s_allowlistedReceivers[destChainSelector_scope_1].add(receiver_scope_4)

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: revert ReceiverAlreadyAllowlisted(uint64,bytes)(destChainSelector_scope_1,receiver_scope_4)

  ID: 41
  Type: NodeType.ENDIF
  Expression: 

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: ReceiverAddedToAllowlist(destChainSelector_scope_1,receiver_scope_4)

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: ++ j_scope_3

  ID: 44
  Type: NodeType.IF
  Expression: s_allowlistedDestinationChains.add(destChainSelector_scope_1)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: DestinationChainAddedToAllowlist(destChainSelector_scope_1)

  ID: 46
  Type: NodeType.ENDIF
  Expression: 

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_0

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 48
  1 -> 4
  2 -> 24
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10
  17 -> 18
  17 -> 20
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 4
  22 -> 25
  24 -> 22
  25 -> 26
  25 -> 23
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 33
  31 -> 34
  32 -> 44
  33 -> 31
  34 -> 35
  34 -> 32
  35 -> 36
  36 -> 37
  36 -> 38
  37 -> 38
  38 -> 39
  39 -> 40
  39 -> 41
  40 -> 41
  41 -> 42
  42 -> 43
  43 -> 34
  44 -> 45
  44 -> 46
  45 -> 46
  46 -> 47
  47 -> 25
  48 -> 49
  49 -> 3

Function: setWrappedNativeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setWrappedNativeToken(wrappedNativeToken)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyRole(DEFAULT_ADMIN_ROLE)

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_ADMIN_ROLE = 0x00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_GAS_FOR_RECEIVE = 2300

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: typeAndVersion = Fee Aggregator 1.0.0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EMPTY_ENCODED_BYTES32_ADDRESS_HASH = keccak256(bytes)(abi.encode(address(0)))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


