Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: AggregatorV3Interface
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable2Step
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferStarted(owner(),newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete _pendingOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: super._transferOwnership(newOwner)

Edges:
  0 -> 1
  1 -> 2

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: pendingOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _pendingOwner

Edges:
  0 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pendingOwner() == sender,Ownable2Step: caller is not the new owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ChainlinkPriceOracle
==================================================

Function: pendingOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _pendingOwner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pendingOwner() == sender,Ownable2Step: caller is not the new owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < configs.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: config = configs[i]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: addConfig(config)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: getUnderlyingPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = tokenConfigs[cToken]

  ID: 2
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ConfigNotFound(address)(cToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: config.fixedPrice != 0

  ID: 6
  Type: NodeType.RETURN
  Expression: config.fixedPrice

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: priceFeed = AggregatorV3Interface(config.priceFeed)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: feedDecimals = priceFeed.decimals()

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (None,answer,None,None,None) = priceFeed.latestRoundData()

  ID: 12
  Type: NodeType.IF
  Expression: answer <= 0

  ID: 13
  Type: NodeType.RETURN
  Expression: 0

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: price = uint256(answer)

  ID: 16
  Type: NodeType.IF
  Expression: feedDecimals + config.underlyingAssetDecimals <= PRICE_SCALE

  ID: 17
  Type: NodeType.VARIABLE
  Expression: scale = 10 ** (PRICE_SCALE - feedDecimals - config.underlyingAssetDecimals)

  ID: 18
  Type: NodeType.RETURN
  Expression: price * scale

  ID: 19
  Type: NodeType.VARIABLE
  Expression: scale_scope_0 = 10 ** (feedDecimals + config.underlyingAssetDecimals - PRICE_SCALE)

  ID: 20
  Type: NodeType.RETURN
  Expression: price / scale_scope_0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 19
  17 -> 18
  19 -> 20

Function: getConfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = tokenConfigs[cToken]

  ID: 2
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ConfigNotFound(address)(cToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: config

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: addConfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _validateTokenConfig(config)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenConfig = TokenConfig(config.underlyingAssetDecimals,config.priceFeed,config.fixedPrice)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenConfigs[config.cToken] = tokenConfig

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: PriceOracleAssetAdded(config.cToken,config.underlyingAssetDecimals,config.priceFeed,config.fixedPrice)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateConfigPriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = tokenConfigs[cToken]

  ID: 2
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ConfigNotFound(address)(cToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: priceFeed == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPriceFeed(address)(priceFeed)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: config.priceFeed == priceFeed

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert UnchangedPriceFeed(address,address,address)(cToken,config.priceFeed,priceFeed)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _validateDecimals(priceFeed,config.underlyingAssetDecimals)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: existingPriceFeed = config.priceFeed

  ID: 13
  Type: NodeType.VARIABLE
  Expression: existingFixedPrice = config.fixedPrice

  ID: 14
  Type: NodeType.VARIABLE
  Expression: storageConfig = tokenConfigs[cToken]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: storageConfig.priceFeed = priceFeed

  ID: 16
  Type: NodeType.IF
  Expression: config.fixedPrice != 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: delete storageConfig.fixedPrice

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: PriceOracleAssetPriceFeedUpdated(cToken,existingPriceFeed,priceFeed,existingFixedPrice)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 20
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  20 -> 1

Function: updateConfigFixedPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = tokenConfigs[cToken]

  ID: 2
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ConfigNotFound(address)(cToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: fixedPrice == 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidFixedPrice(uint256)(fixedPrice)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: config.fixedPrice == fixedPrice

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: revert UnchangedFixedPrice(address,uint256,uint256)(cToken,config.fixedPrice,fixedPrice)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: existingFixedPrice = config.fixedPrice

  ID: 12
  Type: NodeType.VARIABLE
  Expression: existingPriceFeed = config.priceFeed

  ID: 13
  Type: NodeType.VARIABLE
  Expression: storageConfig = tokenConfigs[cToken]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: storageConfig.fixedPrice = fixedPrice

  ID: 15
  Type: NodeType.IF
  Expression: config.priceFeed != address(0)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: delete storageConfig.priceFeed

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: PriceOracleAssetFixedPriceUpdated(cToken,existingFixedPrice,fixedPrice,existingPriceFeed)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 19
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  19 -> 1

Function: removeConfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = tokenConfigs[cToken]

  ID: 2
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert ConfigNotFound(address)(cToken)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete tokenConfigs[cToken]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: PriceOracleAssetRemoved(cToken,config.underlyingAssetDecimals,config.priceFeed,config.fixedPrice)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _validateTokenConfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: config.cToken == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert MissingCTokenAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: config.priceFeed == address(0) && config.fixedPrice == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPriceConfigs(address,uint256)(config.priceFeed,config.fixedPrice)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: config.priceFeed != address(0) && config.fixedPrice != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPriceConfigs(address,uint256)(config.priceFeed,config.fixedPrice)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: existingConfig = tokenConfigs[config.cToken]

  ID: 11
  Type: NodeType.IF
  Expression: existingConfig.priceFeed != address(0) || existingConfig.fixedPrice != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert DuplicateConfig(address)(config.cToken)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: config.priceFeed != address(0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _validateDecimals(config.priceFeed,config.underlyingAssetDecimals)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16

Function: _validateDecimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: underlyingAssetDecimals > PRICE_SCALE - MIN_PRECISION

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidUnderlyingAssetDecimals(uint8)(underlyingAssetDecimals)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: aggregator = AggregatorV3Interface(priceFeed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: feedDecimals = aggregator.decimals()

  ID: 6
  Type: NodeType.IF
  Expression: feedDecimals + underlyingAssetDecimals > MAX_DECIMALS

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FormattingDecimalsTooHigh(uint16)(feedDecimals + underlyingAssetDecimals)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_DECIMALS = 72

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PRICE_SCALE = 36

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_PRECISION = 6

Edges:
  0 -> 1
  1 -> 2


