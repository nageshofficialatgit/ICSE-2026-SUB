Contract: MainnetAaveV3Addresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IAaveProtocolDataProvider
==================================================


Contract: DataTypes
==================================================


Contract: IPoolAddressesProvider
==================================================


Contract: IPoolV3
==================================================


Contract: IL2PoolV3
==================================================


Contract: AaveV3Helper
==================================================

Function: getLendingPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IL2PoolV3(IPoolAddressesProvider(_market).getPool())

Edges:
  0 -> 1

Function: getDataProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IAaveProtocolDataProvider(IPoolAddressesProvider(_market).getPoolDataProvider())

Edges:
  0 -> 1

Function: boolToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes1(0x01)

  ID: 4
  Type: NodeType.RETURN
  Expression: bytes1(0x00)

  ID: 6
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: bytesToBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x != bytes1(0x00)

  ID: 2
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1

Function: getWholeDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: STABLE_ID = 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: VARIABLE_ID = 2

  ID: 3
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (None,borrowsStable,borrowsVariable,None,None,None,None,None,None) = dataProvider.getUserReserveData(_tokenAddr,_debtOwner)

  ID: 7
  Type: NodeType.IF
  Expression: _borrowType == STABLE_ID

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsStable

  ID: 9
  Type: NodeType.IF
  Expression: _borrowType == VARIABLE_ID

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsVariable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: debt

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REFERRAL_CODE = 64

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: DSMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

Edges:
  0 -> 1


Contract: AaveV3RatioHelper
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: getSafetyRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = IPoolV3(IPoolAddressesProvider(_market).getPool())

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,totalDebtETH,availableBorrowsETH,None,None,None) = lendingPool.getUserAccountData(_user)

  ID: 5
  Type: NodeType.IF
  Expression: totalDebtETH == 0

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: wdiv(totalDebtETH + availableBorrowsETH,totalDebtETH)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getSafetyRatio(_market,_user)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: IPriceOracleGetter
==================================================


Contract: IAaveV3Oracle
==================================================


Contract: IReserveInterestRateStrategy
==================================================


Contract: IERC20
==================================================


Contract: IWETH
==================================================


Contract: WadRayMath
==================================================

Function: ray
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: RAY

Edges:
  0 -> 1

Function: wadMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: ! ! b | ! a > ~ 0 - HALF_WAD / b

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: c = a * b + HALF_WAD / WAD

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  2 -> 3
  3 -> 5
  4 -> 3
  5 -> 6
  6 -> 7

Function: wadDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: ! b | ! ! a > ~ 0 - b / 2 / WAD

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: c = a * WAD + b / 2 / b

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  2 -> 3
  3 -> 5
  4 -> 3
  5 -> 6
  6 -> 7

Function: rayMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: ! ! b | ! a > ~ 0 - HALF_RAY / b

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: c = a * b + HALF_RAY / RAY

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  2 -> 3
  3 -> 5
  4 -> 3
  5 -> 6
  6 -> 7

Function: rayDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: ! b | ! ! a > ~ 0 - b / 2 / RAY

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: c = a * RAY + b / 2 / b

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 4
  2 -> 3
  3 -> 5
  4 -> 3
  5 -> 6
  6 -> 7

Function: rayToWad
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: b = a / WAD_RAY_RATIO

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: remainder_rayToWad_asm_0 = a % WAD_RAY_RATIO

  ID: 5
  Type: NodeType.IF
  Expression: ! remainder_rayToWad_asm_0 < WAD_RAY_RATIO / 2

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: b = b + 1

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  5 -> 6
  6 -> 8
  7 -> 6
  8 -> 9

Function: wadToRay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: b = a * WAD_RAY_RATIO

  ID: 3
  Type: NodeType.IF
  Expression: ! b / WAD_RAY_RATIO == a

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 5
  3 -> 4
  4 -> 6
  5 -> 4
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 1e18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: HALF_WAD = 0.5e18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 1e27

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: HALF_RAY = 0.5e27

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD_RAY_RATIO = 1e9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: MathUtils
==================================================

Function: calculateLinearInterest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = rate * (block.timestamp - uint256(lastUpdateTimestamp))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: result = result / SECONDS_PER_YEAR

  ID: 3
  Type: NodeType.RETURN
  Expression: WadRayMath.RAY + result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: calculateCompoundedInterest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calculateCompoundedInterest(rate,lastUpdateTimestamp,block.timestamp)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SECONDS_PER_YEAR = 31536000

Edges:


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance(uint256,uint256)(balance,amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 7
  Type: NodeType.IF
  Expression: ! (success)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SendingValueFail()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalanceForCall(uint256,uint256)(balance,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isContract(target))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonContractCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 7
  Type: NodeType.IF
  Expression: success

  ID: 8
  Type: NodeType.RETURN
  Expression: returndata

  ID: 9
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 15
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  16 -> 17


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(returndata.length == 0 || abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: TokenUtils
==================================================

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: IERC20(_tokenAddr).allowance(address(this),_to) < _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenAddr).safeApprove(_to,_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: pullTokensIfNeeded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,_from)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransferFrom(_from,address(this),_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _to != address(0) && _to != address(this) && _amount != 0

  ID: 5
  Type: NodeType.IF
  Expression: _token != ETH_ADDR

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_to,_amount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = _to.call{value: _amount}()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Eth send fail)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: depositWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).deposit{value: _amount}()

Edges:
  0 -> 1

Function: withdrawWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).withdraw(_amount)

Edges:
  0 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: _acc.balance

  ID: 3
  Type: NodeType.RETURN
  Expression: IERC20(_tokenAddr).balanceOf(_acc)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getTokenDecimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 18

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: IERC20(_token).decimals()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1


Contract: IScaledBalanceToken
==================================================


Contract: IPriceOracleSentinel
==================================================


Contract: AaveV3View
==================================================

Function: getSafetyRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = IPoolV3(IPoolAddressesProvider(_market).getPool())

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,totalDebtETH,availableBorrowsETH,None,None,None) = lendingPool.getUserAccountData(_user)

  ID: 5
  Type: NodeType.IF
  Expression: totalDebtETH == 0

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: wdiv(totalDebtETH + availableBorrowsETH,totalDebtETH)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getSafetyRatio(_market,_user)

Edges:
  0 -> 1

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x + y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x - y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = x * y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x <= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: imax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x >= y

  ID: 3
  Type: NodeType.RETURN
  Expression: x

  ID: 4
  Type: NodeType.RETURN
  Expression: y

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: wmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),WAD / 2) / WAD

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rmul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,y),RAY / 2) / RAY

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: wdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,WAD),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rdiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: z = add(mul(x,RAY),y / 2) / y

  ID: 2
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2

Function: rpow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 5
  Type: NodeType.IFLOOP
  Expression: n != 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = rmul(x,x)

  ID: 7
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: z = rmul(z,x)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: n /= 2

  ID: 11
  Type: NodeType.IF
  Expression: n % 2 != 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: z = x

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: z = RAY

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 11
  2 -> 5
  3 -> 15
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 4

Function: getLendingPool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IL2PoolV3(IPoolAddressesProvider(_market).getPool())

Edges:
  0 -> 1

Function: getDataProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IAaveProtocolDataProvider(IPoolAddressesProvider(_market).getPoolDataProvider())

Edges:
  0 -> 1

Function: boolToBytes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: x

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes1(0x01)

  ID: 4
  Type: NodeType.RETURN
  Expression: bytes1(0x00)

  ID: 6
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: bytesToBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x != bytes1(0x00)

  ID: 2
  Type: NodeType.RETURN
  Expression: r

Edges:
  0 -> 1

Function: getWholeDebt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: STABLE_ID = 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: VARIABLE_ID = 2

  ID: 3
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (None,borrowsStable,borrowsVariable,None,None,None,None,None,None) = dataProvider.getUserReserveData(_tokenAddr,_debtOwner)

  ID: 7
  Type: NodeType.IF
  Expression: _borrowType == STABLE_ID

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsStable

  ID: 9
  Type: NodeType.IF
  Expression: _borrowType == VARIABLE_ID

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: debt = borrowsVariable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: debt

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: getHealthFactor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,None,None,None,None,healthFactor) = lendingPool.getUserAccountData(_user)

  ID: 3
  Type: NodeType.RETURN
  Expression: healthFactor

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getPrices
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: priceOracleAddress = IPoolAddressesProvider(_market).getPriceOracle()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: prices = IAaveV3Oracle(priceOracleAddress).getAssetsPrices(_tokens)

  ID: 3
  Type: NodeType.RETURN
  Expression: prices

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRatios
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ratios = new uint256[](_users.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _users.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ratios[i] = getSafetyRatio(_market,_users[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.RETURN
  Expression: ratios

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getCollFactors
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: collFactors = new uint256[](_tokens.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _tokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: config = lendingPool.getConfiguration(_tokens[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: collFactors[i] = getReserveFactor(config)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 10
  Type: NodeType.RETURN
  Expression: collFactors

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 10
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 6

Function: getTokenBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: userTokens = new AaveV3View.UserToken[](_tokens.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _tokens.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_tokens[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: userTokens[i].balance = reserveData.aTokenAddress.getBalance(_user)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: userTokens[i].borrowsStable = 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: userTokens[i].borrowsVariable = reserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: userTokens[i].stableBorrowRate = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: map = lendingPool.getUserConfiguration(_user)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: userTokens[i].enabledAsCollateral = isUsingAsCollateral(map,reserveData.id)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.RETURN
  Expression: userTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 15
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 6

Function: getTokensInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokens = new AaveV3View.TokenInfo[](_tokenAddresses.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _tokenAddresses.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: config = lendingPool.getConfiguration(_tokenAddresses[i])

  ID: 8
  Type: NodeType.VARIABLE
  Expression: collFactor = config.data & ~ LTV_MASK

  ID: 9
  Type: NodeType.VARIABLE
  Expression: aTokenAddr = lendingPool.getReserveAToken(_tokenAddresses[i])

  ID: 10
  Type: NodeType.VARIABLE
  Expression: priceOracleAddress = IPoolAddressesProvider(_market).getPriceOracle()

  ID: 11
  Type: NodeType.VARIABLE
  Expression: price = IAaveV3Oracle(priceOracleAddress).getAssetPrice(_tokenAddresses[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: tokens[i] = TokenInfo({aTokenAddress:aTokenAddr,underlyingTokenAddress:_tokenAddresses[i],collateralFactor:collFactor,price:price})

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: getTokenInfoFull
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(_tokenAddr)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: config = lendingPool.getConfiguration(_tokenAddr)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalVariableBorrow = IERC20(reserveData.variableDebtTokenAddress).totalSupply()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (isActive,isFrozen,None,isPaused) = getFlags(config)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _tokenInfo = TokenInfoFull({aTokenAddress:reserveData.aTokenAddress,underlyingTokenAddress:_tokenAddr,assetId:reserveData.id,supplyRate:reserveData.currentLiquidityRate,borrowRateVariable:reserveData.currentVariableBorrowRate,borrowRateStable:0,totalSupply:IERC20(reserveData.aTokenAddress).totalSupply() + reserveData.accruedToTreasury,availableLiquidity:_tokenAddr.getBalance(reserveData.aTokenAddress),totalBorrow:totalVariableBorrow,totalBorrowVar:totalVariableBorrow,totalBorrowStab:0,collateralFactor:getLtv(config),liquidationRatio:getLiquidationThreshold(config),price:getAssetPrice(_market,_tokenAddr),supplyCap:getSupplyCap(config),borrowCap:getBorrowCap(config),emodeCategory:0,usageAsCollateralEnabled:getLiquidationThreshold(config) > 0,borrowingEnabled:getBorrowingEnabled(config),stableBorrowRateEnabled:false,isolationModeBorrowingEnabled:getBorrowableInIsolation(config),debtCeilingForIsolationMode:getDebtCeiling(config),isolationModeTotalDebt:reserveData.isolationModeTotalDebt,isSiloedForBorrowing:isSiloedForBorrowing(_market,_tokenAddr),eModeCollateralFactor:0,isFlashLoanEnabled:getFlashLoanEnabled(config),ltv:0,liquidationThreshold:0,liquidationBonus:uint16(getLiquidationBonus(config)),priceSource:address(0),label:,isActive:isActive,isPaused:isPaused,isFrozen:isFrozen})

  ID: 10
  Type: NodeType.RETURN
  Expression: _tokenInfo

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: getFullTokensInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokens = new AaveV3View.TokenInfoFull[](_tokenAddresses.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _tokenAddresses.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tokens[i] = getTokenInfoFull(_market,_tokenAddresses[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getAllEmodes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: emodesData = new DataTypes.EModeCategoryNew[](256)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < 255

  ID: 7
  Type: NodeType.VARIABLE
  Expression: nextEmodeData = getEmodeData(lendingPool,i)

  ID: 8
  Type: NodeType.IF
  Expression: bytes(nextEmodeData.label).length == 0

  ID: 9
  Type: NodeType.BREAK
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: emodesData[i - 1] = nextEmodeData

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: emodesData

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 13
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 4
  10 -> 11
  11 -> 12
  12 -> 6

Function: getEmodeData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = _lendingPool.getEModeCategoryCollateralConfig(_id)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: emodeData = DataTypes.EModeCategoryNew({ltv:config.ltv,liquidationThreshold:config.liquidationThreshold,liquidationBonus:config.liquidationBonus,collateralBitmap:_lendingPool.getEModeCategoryCollateralBitmap(_id),borrowableBitmap:_lendingPool.getEModeCategoryBorrowableBitmap(_id),label:_lendingPool.getEModeCategoryLabel(_id)})

  ID: 3
  Type: NodeType.RETURN
  Expression: emodeData

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getLoanData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: reserveList = lendingPool.getReservesList()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: eModeId = lendingPool.getUserEMode(_user)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: data = LoanData({eMode:eModeId,user:_user,ratio:0,collAddr:new address[](reserveList.length),enabledAsColl:new bool[](reserveList.length),borrowAddr:new address[](reserveList.length),collAmounts:new uint256[](reserveList.length),borrowStableAmounts:new uint256[](reserveList.length),borrowVariableAmounts:new uint256[](reserveList.length),ltv:0,liquidationThreshold:0,liquidationBonus:0,priceSource:address(0),label:})

  ID: 5
  Type: NodeType.VARIABLE
  Expression: collPos = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: borrowPos = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < reserveList.length

  ID: 11
  Type: NodeType.VARIABLE
  Expression: reserve = reserveList[i]

  ID: 12
  Type: NodeType.VARIABLE
  Expression: price = getAssetPrice(_market,reserve)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: reserveData = lendingPool.getReserveData(reserve)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: aTokenBalance = reserveData.aTokenAddress.getBalance(_user)

  ID: 15
  Type: NodeType.IF
  Expression: aTokenBalance > 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: data.collAddr[collPos] = reserve

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: data.enabledAsColl[collPos] = isUsingAsCollateral(lendingPool.getUserConfiguration(_user),reserveData.id)

  ID: 18
  Type: NodeType.VARIABLE
  Expression: userTokenBalanceEth = (aTokenBalance * price) / (10 ** (reserve.getTokenDecimals()))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: data.collAmounts[collPos] = userTokenBalanceEth

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: collPos ++

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: borrowsVariable = reserveData.variableDebtTokenAddress.getBalance(_user)

  ID: 23
  Type: NodeType.IF
  Expression: borrowsVariable > 0

  ID: 24
  Type: NodeType.VARIABLE
  Expression: userBorrowBalanceEth = (borrowsVariable * price) / (10 ** (reserve.getTokenDecimals()))

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: data.borrowAddr[borrowPos] = reserve

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: data.borrowVariableAmounts[borrowPos] = userBorrowBalanceEth

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.IF
  Expression: borrowsVariable > 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: borrowPos ++

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: data.ratio = uint128(getSafetyRatio(_market,_user))

  ID: 33
  Type: NodeType.RETURN
  Expression: data

  ID: 34
  Type: NodeType.RETURN
  Expression: data

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 32
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 21
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 27
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 10
  32 -> 33

Function: getLoanDataArr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: loans = new AaveV3View.LoanData[](_users.length)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _users.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: loans[i] = getLoanData(_market,_users[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.RETURN
  Expression: loans

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getLtv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: self.data & ~ LTV_MASK

Edges:
  0 -> 1

Function: getReserveFactor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION

Edges:
  0 -> 1

Function: isUsingAsCollateral
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0

Edges:
  0 -> 1

Function: getLiquidationThreshold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION

Edges:
  0 -> 1

Function: getLiquidationBonus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION

Edges:
  0 -> 1

Function: getAssetPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: priceOracleAddress = IPoolAddressesProvider(_market).getPriceOracle()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: price = IAaveV3Oracle(priceOracleAddress).getAssetPrice(_tokenAddr)

  ID: 3
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getBorrowCap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION

Edges:
  0 -> 1

Function: getSupplyCap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION

Edges:
  0 -> 1

Function: getBorrowingEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ BORROWING_MASK) != 0

Edges:
  0 -> 1

Function: getBorrowableInIsolation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ BORROWABLE_IN_ISOLATION_MASK) != 0

Edges:
  0 -> 1

Function: getDebtCeiling
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION

Edges:
  0 -> 1

Function: isSiloedForBorrowing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dataProvider = getDataProvider(_market)

  ID: 2
  Type: NodeType.RETURN
  Expression: dataProvider.getSiloedBorrowing(_tokenAddr)

Edges:
  0 -> 1
  1 -> 2

Function: getEModeCollateralFactor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: categoryData = lendingPool.getEModeCategoryData(uint8(emodeCategory))

  ID: 2
  Type: NodeType.RETURN
  Expression: categoryData.ltv

Edges:
  0 -> 1
  1 -> 2

Function: getFlashLoanEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (self.data & ~ FLASHLOAN_ENABLED_MASK) != 0

Edges:
  0 -> 1

Function: getFlags
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dataLocal = self.data

  ID: 2
  Type: NodeType.RETURN
  Expression: ((dataLocal & ~ ACTIVE_MASK) != 0,(dataLocal & ~ FROZEN_MASK) != 0,(dataLocal & ~ BORROWING_MASK) != 0,(dataLocal & ~ PAUSED_MASK) != 0)

Edges:
  0 -> 1
  1 -> 2

Function: isReserveUsingVirtualAccounting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dataLocal = self.data

  ID: 2
  Type: NodeType.RETURN
  Expression: (dataLocal & ~ VIRTUAL_ACC_ACTIVE) != 0

Edges:
  0 -> 1
  1 -> 2

Function: isBorrowAllowed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: priceOracleSentinelAddress = IPoolAddressesProvider(_market).getPriceOracleSentinel()

  ID: 2
  Type: NodeType.RETURN
  Expression: (priceOracleSentinelAddress == address(0) || IPriceOracleSentinel(priceOracleSentinelAddress).isBorrowAllowed())

Edges:
  0 -> 1
  1 -> 2

Function: getApyAfterValuesEstimation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lendingPool = getLendingPool(_market)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: estimatedRates = new AaveV3View.EstimatedRates[](_reserveParams.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _reserveParams.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: asset = _reserveParams[i].reserveAddress

  ID: 8
  Type: NodeType.VARIABLE
  Expression: config = lendingPool.getConfiguration(asset)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: reserve = lendingPool.getReserveData(asset)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalVarDebt = IScaledBalanceToken(reserve.variableDebtTokenAddress).scaledTotalSupply().rayMul(_getNextVariableBorrowIndex(reserve))

  ID: 11
  Type: NodeType.IF
  Expression: _reserveParams[i].isDebtAsset

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalVarDebt += _reserveParams[i].liquidityTaken

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.VARIABLE
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: (estimatedSupplyRate,estimatedVariableBorrowRate) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(DataTypes.CalculateInterestRatesParams({unbacked:reserve.unbacked + lendingPool.getReserveDeficit(asset),liquidityAdded:_reserveParams[i].liquidityAdded,liquidityTaken:_reserveParams[i].liquidityTaken,totalDebt:totalVarDebt,reserveFactor:getReserveFactor(reserve.configuration),reserve:asset,usingVirtualBalance:isReserveUsingVirtualAccounting(config),virtualUnderlyingBalance:lendingPool.getVirtualUnderlyingBalance(asset)}))

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: estimatedRates[i] = EstimatedRates({reserveAddress:asset,supplyRate:estimatedSupplyRate,variableBorrowRate:estimatedVariableBorrowRate})

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 20
  Type: NodeType.RETURN
  Expression: estimatedRates

  ID: 21
  Type: NodeType.IF
  Expression: _reserveParams[i].liquidityAdded >= totalVarDebt

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: totalVarDebt = 0

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: totalVarDebt = totalVarDebt - _reserveParams[i].liquidityAdded

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 20
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 21
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 6
  21 -> 22
  21 -> 23
  22 -> 24
  23 -> 24
  24 -> 14

Function: _getNextVariableBorrowIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: scaledVariableDebt = IScaledBalanceToken(_reserve.variableDebtTokenAddress).scaledTotalSupply()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: variableBorrowIndex = _reserve.variableBorrowIndex

  ID: 3
  Type: NodeType.IF
  Expression: scaledVariableDebt > 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(_reserve.currentVariableBorrowRate,_reserve.lastUpdateTimestamp)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: variableBorrowIndex = uint128(cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: variableBorrowIndex

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REWARDS_CONTROLLER_ADDRESS = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEFAULT_AAVE_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_ORACLE_V3 = 0x54586bE62E3c3580375aE3723C145253060Ca0C2

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAKED_GHO_TOKEN = 0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_GOV_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: AAVE_REFERRAL_CODE = 64

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LIQUIDATION_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EMODE_CATEGORY_MASK = 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROWABLE_IN_ISOLATION_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEBT_CEILING_MASK = 0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLASHLOAN_ENABLED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VIRTUAL_ACC_ACTIVE = 0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LIQUIDATION_BONUS_START_BIT_POSITION = 32

  ID: 25
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RESERVE_FACTOR_START_BIT_POSITION = 64

  ID: 26
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROWING_ENABLED_START_BIT_POSITION = 58

  ID: 27
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BORROW_CAP_START_BIT_POSITION = 80

  ID: 28
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUPPLY_CAP_START_BIT_POSITION = 116

  ID: 29
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEBT_CEILING_START_BIT_POSITION = 212

  ID: 30
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLASHLOAN_ENABLED_START_BIT_POSITION = 63

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30


