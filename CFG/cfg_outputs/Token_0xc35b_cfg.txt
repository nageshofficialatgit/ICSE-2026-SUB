Contract: Coins
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: meta = _metadata[id]

  ID: 3
  Type: NodeType.IF
  Expression: bytes(meta.tokenURI).length != 0

  ID: 4
  Type: NodeType.RETURN
  Expression: meta.name

  ID: 5
  Type: NodeType.RETURN
  Expression: Token(address(uint160(id))).name()

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: meta = _metadata[id]

  ID: 3
  Type: NodeType.IF
  Expression: bytes(meta.tokenURI).length != 0

  ID: 4
  Type: NodeType.RETURN
  Expression: meta.symbol

  ID: 5
  Type: NodeType.RETURN
  Expression: Token(address(uint160(id))).symbol()

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: bytes(_metadata[id].tokenURI).length != 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 18

  ID: 4
  Type: NodeType.RETURN
  Expression: uint8(Token(address(uint160(id))).decimals())

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: tokenURI
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _metadata[id].tokenURI

Edges:
  0 -> 1

Function: create
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 15
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  10 -> 11
  11 -> 14
  12 -> 13
  13 -> 11
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: implementation = new Token()

Edges:


Contract: Token
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Coins(coins).name(uint160(address(this)))

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Coins(coins).symbol(uint160(address(this)))

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Coins(coins).totalSupply(uint160(address(this)))

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Coins(coins).balanceOf(owner,uint160(address(this)))

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: Coins(coins).isOperator(owner,spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: type()(uint256).max

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: Coins(coins).allowance(owner,spender,uint160(address(this)))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: Coins(coins).setAllowance(msg.sender,spender,uint160(address(this)),amount)

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: Coins(coins).transferFrom(msg.sender,to,uint160(address(this)),amount)

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: 

  ID: 3
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: coins = msg.sender

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:


