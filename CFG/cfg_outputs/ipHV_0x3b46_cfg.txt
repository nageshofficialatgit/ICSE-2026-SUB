Contract: IERC20
==================================================


Contract: IERC721
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = address(token).call(abi.encodeWithSelector(token.transfer.selector,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),SafeERC20: TRANSFER_ERROR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: ipHV
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender.code.length == 0,Smart contracts cannot send ETH to this ipHV contract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: etherBalances[msg.sender] += msg.value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: EtherReceived(msg.sender,msg.value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: verADD
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isVerified[msg.sender],You are already verified <3)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isVerified[msg.sender] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AddressVerified(msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: setTL
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(unlockTimes[msg.sender] == 0 || block.timestamp >= unlockTimes[msg.sender],Time lock already set, wait until unlocked)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(durationAsSec > 0 && durationAsSec <= 220752000,Invalid duration (max 7 years!))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp + durationAsSec > block.timestamp,Invalid timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: unlockTimes[msg.sender] = block.timestamp + durationAsSec

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TimeLockSet(msg.sender,unlockTimes[msg.sender])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyVerified()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: wdETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = etherBalances[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,No Ether to Withdraw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: etherBalances[msg.sender] = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: ipcss = (amount * 2) / 100

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amountAfterIpcss = amount - ipcss

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (successIpcss,None) = IPCSService.call{value: ipcss}()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(successIpcss,IPCSS transfer failed)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (successRecipient,None) = msg.sender.call{value: amountAfterIpcss}()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(successRecipient,Transfer failed)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: EtherWithdrawn(msg.sender,amount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyVerified()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: whenUnlocked()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  14 -> 15
  15 -> 1

Function: IPCSS
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: isIPCSService = msg.sender == IPCSService

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isIPCSService,Only IPCSS can withdraw tokens)

  ID: 3
  Type: NodeType.IF
  Expression: tokenAddress_erc20 != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddress_erc721 == address(0) && tokenId_erc721 == 0,Invalid parameters combination)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokenAddress_erc20)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(address(this))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No tokens to withdraw)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(token,IPCSService,balance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: TokenWithdrawn(tokenAddress_erc20,balance)

  ID: 10
  Type: NodeType.RETURN
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: tokenAddress_erc721 != address(0) && tokenId_erc721 != 0

  ID: 13
  Type: NodeType.VARIABLE
  Expression: token_scope_0 = IERC721(tokenAddress_erc721)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: token_scope_0.safeTransferFrom(address(this),IPCSService,tokenId_erc721)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: NFTWithdrawn(tokenAddress_erc721,tokenId_erc721)

  ID: 16
  Type: NodeType.RETURN
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 18
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  12 -> 17
  13 -> 14
  14 -> 15
  15 -> 16
  18 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IPCSService = 0x00081058476a5fcBf8E5f723367D06dF2D5C74ab

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: Version = v8.3.2

Edges:
  0 -> 1


