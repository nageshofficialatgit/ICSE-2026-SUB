Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: returndata

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 7

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: IERC20Permit
==================================================


Contract: IERC20
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

Edges:
  0 -> 1
  1 -> 2

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newAllowance = token.allowance(address(this),spender) + value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(oldAllowance >= value,SafeERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newAllowance = oldAllowance - value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safePermit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nonceBefore = token.nonces(owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.permit(owner,spender,value,deadline,v,r,s)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nonceAfter = token.nonces(owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(nonceAfter == nonceBefore + 1,SafeERC20: permit did not succeed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4


Contract: BlockCommon
==================================================

Function: transferCommon
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(tokenAddress)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: beforeAmount = erc20.balanceOf(to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: erc20.safeTransferFrom(msg.sender,to,amount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: afterAmount = erc20.balanceOf(to)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: finalAmount = afterAmount - beforeAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(finalAmount <= amount,FinalAmount is error)

  ID: 7
  Type: NodeType.RETURN
  Expression: finalAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkTokenAddress(tokenAddress)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: checkAmount(amount)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: withdrawCommon
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(tokenAddress)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = erc20.balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance >= amount,Insufficient balance)

  ID: 4
  Type: NodeType.IF
  Expression: flag

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: erc20.safeTransfer(withdrawAddress,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: erc20.transfer(withdrawAddress,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkAmount(amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: checkTokenAddress(tokenAddress)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: checkWithdrawAddress(withdrawAddress)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  8 -> 9
  9 -> 10
  10 -> 1


Contract: BlockATMPayout
==================================================

Function: transferCommon
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(tokenAddress)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: beforeAmount = erc20.balanceOf(to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: erc20.safeTransferFrom(msg.sender,to,amount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: afterAmount = erc20.balanceOf(to)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: finalAmount = afterAmount - beforeAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(finalAmount <= amount,FinalAmount is error)

  ID: 7
  Type: NodeType.RETURN
  Expression: finalAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkTokenAddress(tokenAddress)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: checkAmount(amount)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: withdrawCommon
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: erc20 = IERC20(tokenAddress)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = erc20.balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance >= amount,Insufficient balance)

  ID: 4
  Type: NodeType.IF
  Expression: flag

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: erc20.safeTransfer(withdrawAddress,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: erc20.transfer(withdrawAddress,amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: checkAmount(amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: checkTokenAddress(tokenAddress)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: checkWithdrawAddress(withdrawAddress)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  8 -> 9
  9 -> 10
  10 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwnerList.length > 0,owner address is empty)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < newOwnerList.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwnerList[i] != address(0),owner is the zero address)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ownerMap[newOwnerList[i]] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ownerList = newOwnerList

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: gatewayAddress = newGatewayAddress

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: activeFlag = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: managerAddress = msg.sender

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: feeTokenAddress = newFeeTokenAddress

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: feeToAddress = newFeeToAddress

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 9
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 5
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: payoutToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: payoutTokenCommon(safeFlag,payoutList,business)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: autoPayoutToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: payoutTokenCommon(safeFlag,payoutList,business)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyGateway()

Edges:
  0 -> 2
  2 -> 1

Function: payoutTokenCommon
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(activeFlag,The contract has already burned)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(payoutList.length > 0,payoutList is error)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(payoutList.length == business.length,business is error)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < payoutList.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: info = payoutList[i]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: super.withdrawCommon(safeFlag,info.tokenAddress,info.toAddress,info.amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.VARIABLE
  Expression: feeValue = fee * payoutList.length

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: super.withdrawCommon(safeFlag,feeTokenAddress,feeToAddress,feeValue)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: PayoutToken(msg.sender,feeTokenAddress,feeToAddress,feeValue,payoutList,business)

  ID: 14
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7
  11 -> 12
  12 -> 13
  13 -> 14

Function: getActiveFlag
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: activeFlag

Edges:
  0 -> 1

Function: setActiveFlag
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(activeFlag,The contract has already burned)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: activeFlag = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SetActiveFlag(activeFlag)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getOwnerAddressList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownerList

Edges:
  0 -> 1

Function: getOwnerAddressFlag
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownerMap[ownerAddress]

Edges:
  0 -> 1

Function: getManagerAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: managerAddress

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: fee = 1000000

Edges:


