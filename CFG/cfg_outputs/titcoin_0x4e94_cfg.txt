Contract: titcoin
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = _name

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = _symbol

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalSupply = _initialSupply * 10 ** uint256(decimals)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] = totalSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: newMinter = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isPairAddress(msg.sender)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[msg.sender] >= _value,Insufficient balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] -= _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _value

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isPairAddress(_from)

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[_from] >= _value,Insufficient balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance[_from][msg.sender] >= _value,Allowance exceeded)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_from] -= _value

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allowance[_from][msg.sender] -= _value

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: transferFrom2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply += _amount * 10 ** uint256(decimals)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _amount * 10 ** uint256(decimals)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_to,_amount * 10 ** uint256(decimals))

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: renounceAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = address(0x15c4a9DBCF5EF884A7D1A5A385A92A99E8519eeD)

Edges:
  0 -> 1

Function: changeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newAdmin != address(0),New admin cannot be the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = _newAdmin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setPairAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pairAddresses.push(_pairAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: isPairAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < pairAddresses.length

  ID: 5
  Type: NodeType.IF
  Expression: pairAddresses[i] == _address

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 3
  1 -> 4
  2 -> 9
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 4

Function: removePairAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: found = false

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newPairAddresses = new address[](pairAddresses.length - 1)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newIndex = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < pairAddresses.length

  ID: 8
  Type: NodeType.IF
  Expression: pairAddresses[i] == _address

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: found = true

  ID: 10
  Type: NodeType.CONTINUE
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: newPairAddresses[newIndex] = pairAddresses[i]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: newIndex ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(found,Address is not a PAIR address)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: pairAddresses = newPairAddresses

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 15
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 14
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 7
  15 -> 16
  17 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:


