Contract: IERC20
==================================================


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(initialOwner != address(0),Ownable: new owner is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = initialOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: governanceAddress = _governanceAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: rewardToken = IERC20(rewardTokenAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferInitiated(_owner,newOwner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == _pendingOwner,Ownable: caller is not the pending owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,_pendingOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = _pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(governanceAddress != address(0),Ownable: governance address is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,governanceAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = governanceAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: issueReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user != address(0),Ownable: cannot reward zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rewardBalances[user] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rewardToken.transfer(user,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RewardIssued(user,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: startVesting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user != address(0),Ownable: cannot start vesting for zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Ownable: amount must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(duration > 0,Ownable: duration must be greater than zero)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cliffTimestamp >= startTimestamp,Ownable: cliff must be after start)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _vestingSchedules[user] = OwnableVestingSchedule({totalAmount:amount,releasedAmount:0,startTimestamp:startTimestamp,cliffTimestamp:cliffTimestamp,duration:duration})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: claimVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _vestingSchedules[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(schedule.totalAmount > 0,Ownable: no vesting schedule found)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= schedule.cliffTimestamp,Ownable: vesting cliff not reached)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: vestedAmount = calculateVestedAmount(schedule)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: claimableAmount = vestedAmount - schedule.releasedAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(claimableAmount > 0,Ownable: no claimable tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: schedule.releasedAmount += claimableAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rewardToken.transfer(msg.sender,claimableAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: RewardIssued(msg.sender,claimableAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: calculateVestedAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: block.timestamp < schedule.startTimestamp

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.IF
  Expression: block.timestamp >= schedule.startTimestamp + schedule.duration

  ID: 4
  Type: NodeType.RETURN
  Expression: schedule.totalAmount

  ID: 5
  Type: NodeType.VARIABLE
  Expression: elapsedTime = block.timestamp - schedule.startTimestamp

  ID: 6
  Type: NodeType.RETURN
  Expression: (schedule.totalAmount * elapsedTime) / schedule.duration

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6

Function: rewardBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _rewardBalances[user]

Edges:
  0 -> 1

Function: vestedBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calculateVestedAmount(_vestingSchedules[user]) - _vestingSchedules[user].releasedAmount

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: rewardTokenAddress = 0xAcF6FE7E7f35D01154556980570EA3be54D381b6

Edges:


Contract: IUniswapV2Router02
==================================================


Contract: IPancakeRouter02
==================================================


Contract: USDTv1
==================================================


Contract: USDTv2
==================================================


Contract: USDTv3
==================================================


Contract: USDTv4
==================================================


Contract: USDTv5
==================================================


Contract: AutoSwapTokensEthereum
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = IUniswapV2Router02(_router)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Ownable(initialOwner,governanceAddress)

Edges:
  0 -> 2
  2 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == _ENTERED

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferInitiated(_owner,newOwner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == _pendingOwner,Ownable: caller is not the pending owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,_pendingOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = _pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(governanceAddress != address(0),Ownable: governance address is zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,governanceAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = governanceAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: issueReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user != address(0),Ownable: cannot reward zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rewardBalances[user] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rewardToken.transfer(user,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RewardIssued(user,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: startVesting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user != address(0),Ownable: cannot start vesting for zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Ownable: amount must be greater than zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(duration > 0,Ownable: duration must be greater than zero)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(cliffTimestamp >= startTimestamp,Ownable: cliff must be after start)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _vestingSchedules[user] = OwnableVestingSchedule({totalAmount:amount,releasedAmount:0,startTimestamp:startTimestamp,cliffTimestamp:cliffTimestamp,duration:duration})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwnerOrGovernance()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: claimVestedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: schedule = _vestingSchedules[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(schedule.totalAmount > 0,Ownable: no vesting schedule found)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= schedule.cliffTimestamp,Ownable: vesting cliff not reached)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: vestedAmount = calculateVestedAmount(schedule)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: claimableAmount = vestedAmount - schedule.releasedAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(claimableAmount > 0,Ownable: no claimable tokens)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: schedule.releasedAmount += claimableAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rewardToken.transfer(msg.sender,claimableAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: RewardIssued(msg.sender,claimableAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: calculateVestedAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: block.timestamp < schedule.startTimestamp

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.IF
  Expression: block.timestamp >= schedule.startTimestamp + schedule.duration

  ID: 4
  Type: NodeType.RETURN
  Expression: schedule.totalAmount

  ID: 5
  Type: NodeType.VARIABLE
  Expression: elapsedTime = block.timestamp - schedule.startTimestamp

  ID: 6
  Type: NodeType.RETURN
  Expression: (schedule.totalAmount * elapsedTime) / schedule.duration

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6

Function: rewardBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _rewardBalances[user]

Edges:
  0 -> 1

Function: vestedBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calculateVestedAmount(_vestingSchedules[user]) - _vestingSchedules[user].releasedAmount

Edges:
  0 -> 1

Function: setSwapAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: token == address(token1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token1SwapAmount = _amount

  ID: 3
  Type: NodeType.IF
  Expression: token == address(token2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token2SwapAmount = _amount

  ID: 5
  Type: NodeType.IF
  Expression: token == address(token3)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token3SwapAmount = _amount

  ID: 7
  Type: NodeType.IF
  Expression: token == address(token4)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: token4SwapAmount = _amount

  ID: 9
  Type: NodeType.IF
  Expression: token == address(token5)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: token5SwapAmount = _amount

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 16
  1 -> 2
  1 -> 3
  2 -> 15
  3 -> 4
  3 -> 5
  4 -> 14
  5 -> 6
  5 -> 7
  6 -> 13
  7 -> 8
  7 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: setDex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: currentDex = _dex

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getCurrentRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: currentDex == DexType.Uniswap

  ID: 2
  Type: NodeType.RETURN
  Expression: uniswapRouter

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: currentDex == DexType.PancakeSwap

  ID: 5
  Type: NodeType.RETURN
  Expression: pancakeRouter

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: sushiRouter

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7

Function: getEstimatedAmountOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountsOut = router.getAmountsOut(amountIn,path)

  ID: 5
  Type: NodeType.RETURN
  Expression: amountsOut[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: executeSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(address(this)) >= swapAmount,Saldo insuficiente)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: estimatedAmountOut = getEstimatedAmountOut(token,swapAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(estimatedAmountOut > 0,Precio de salida no valido)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOutMin = estimatedAmountOut - ((estimatedAmountOut * slippage) / 100)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token.approve(address(router),swapAmount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(token)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 9
  Type: NodeType.VARIABLE
  Expression: balanceBefore = address(this).balance

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETH(swapAmount,amountOutMin,path,address(this),block.timestamp + 300)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance > balanceBefore,Swap failed, no ETH received)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(address(token),swapAmount,amountOutMin)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: swapToken1
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token1,token1SwapAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastToken1SwapTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapToken2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token2,token2SwapAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastToken2SwapTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapToken3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token3,token3SwapAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastToken3SwapTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapToken4
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token4,token4SwapAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastToken4SwapTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapToken5
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token5,token5SwapAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastToken5SwapTime = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.approve(address(router),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: ethAmount}(address(token),tokenAmount,0,0,authorizedWallet,block.timestamp + 300)

Edges:
  0 -> 1
  1 -> 2

Function: calculateFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (amount * feePercentage) / 1000

Edges:
  0 -> 1

Function: swapWithFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fee = calculateFee(amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountAfterFee = amount - fee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.balanceOf(address(this)) >= amount,Insufficient contract balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token.transfer(authorizedWallet,fee)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: executeSwap(token,amountAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: dynamicSlippage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: liquidity = token.balanceOf(address(this))

  ID: 2
  Type: NodeType.IF
  Expression: liquidity > 10_000_000 * 10 ** 6

  ID: 3
  Type: NodeType.RETURN
  Expression: 1

  ID: 4
  Type: NodeType.RETURN
  Expression: 5

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(owner()).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.transfer(owner(),token.balanceOf(address(this)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: rewardTokenAddress = 0xAcF6FE7E7f35D01154556980570EA3be54D381b6

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token1 = USDTv1(0x878A7A25965e215550263d1a5F1bE1C85a1E8eE8)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token2 = USDTv2(0xf6229ae97409807B59672884d5A58640BD89EC4c)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token3 = USDTv3(0x587D2F6C3de834296Ceef1A2e54D1A748cDc5438)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token4 = USDTv4(0xfB4a8CD3Ed9C2B942312711f23EaA5e6B5970c3c)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token5 = USDTv5(0x6e5223b322156B2c5c46aee1f92685D732bA9237)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: feePercentage = 1

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapCooldown = 10 * 60

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: authorizedWallet = 0x4c0D8cb0c2452cDDF9d028044ac89f12477F6De0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token1SwapInterval = 3600

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token2SwapInterval = 7200

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token3SwapInterval = 10800

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token4SwapInterval = 14400

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token5SwapInterval = 18000

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token1SwapAmount = 2500 * 10 ** 6

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token2SwapAmount = 2000 * 10 ** 6

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token3SwapAmount = 2500 * 10 ** 6

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token4SwapAmount = 1500 * 10 ** 6

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: token5SwapAmount = 1000 * 10 ** 6

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: slippage = 2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223Fe8D0a0E5C4F27E1b6B13E0A27B0

Edges:


