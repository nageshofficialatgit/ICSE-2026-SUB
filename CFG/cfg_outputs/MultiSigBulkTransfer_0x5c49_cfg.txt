Contract: IERC20
==================================================


Contract: MultiSigBulkTransfer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: signers = _signers

Edges:
  0 -> 1
  1 -> 2

Function: signBulkTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isSigner(msg.sender),Not a designated signer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! hasSigned[msg.sender],Already signed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hasSigned[msg.sender] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: signCount += 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BulkTransferSigned(msg.sender,signCount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: executeBulkTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(signCount == 3,All three signers must approve)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens.length == recipients.length && recipients.length == amounts.length,Array length mismatch)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _resetSignatures()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 8
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokens[i])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(recipients[i],amounts[i]),Transfer failed)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: BulkTransferExecuted(msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7

Function: adminExecuteBulkTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,Caller is not admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).transfer(to,amount),Transfer failed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AdminTransferExecuted(msg.sender,token,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: updateSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin,Caller is not admin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < 3,Invalid index)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: oldSigner = signers[index]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: signers[index] = newSigner

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _resetSignatures()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SignerUpdated(index,oldSigner,newSigner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _resetSignatures
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < signers.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: hasSigned[signers[i]] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: signCount = 0

Edges:
  0 -> 3
  1 -> 4
  2 -> 7
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: isSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < signers.length

  ID: 5
  Type: NodeType.IF
  Expression: signers[i] == account

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 3
  1 -> 4
  2 -> 9
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 4


