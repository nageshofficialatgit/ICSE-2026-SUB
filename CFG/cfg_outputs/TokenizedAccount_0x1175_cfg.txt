Contract: ITimelockedCall
==================================================


Contract: IAllocable
==================================================


Contract: BaseOwnable
==================================================

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: DateUtils
==================================================

Function: timestampToDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = _daysToDate(ts / SECONDS_PER_DAY)

  ID: 2
  Type: NodeType.RETURN
  Expression: (year,month,day)

Edges:
  0 -> 1
  1 -> 2

Function: timestampToDateTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = _daysToDate(timestamp / SECONDS_PER_DAY)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: secs = timestamp % SECONDS_PER_DAY

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: hour = secs / SECONDS_PER_HOUR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: secs = secs % SECONDS_PER_HOUR

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: minute = secs / SECONDS_PER_MINUTE

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: second = secs % SECONDS_PER_MINUTE

  ID: 7
  Type: NodeType.RETURN
  Expression: (year,month,day,hour,minute,second)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: timestampFromDateTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: timestamp = _daysFromDate(year,month,day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second

  ID: 2
  Type: NodeType.RETURN
  Expression: timestamp

Edges:
  0 -> 1
  1 -> 2

Function: _daysToDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: __days = int256(_days)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: x = __days + 68569 + OFFSET19700101

  ID: 3
  Type: NodeType.VARIABLE
  Expression: n = 4 * x / 146097

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: x = x - (146097 * n + 3) / 4

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _year = 4000 * (x + 1) / 1461001

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: x = x - 1461 * _year / 4 + 31

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _month = 80 * x / 2447

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _day = x - 2447 * _month / 80

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: x = _month / 11

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _month = _month + 2 - 12 * x

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _year = 100 * (n - 49) + _year + x

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: year = uint256(_year)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: month = uint256(_month)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: day = uint256(_day)

  ID: 15
  Type: NodeType.RETURN
  Expression: (year,month,day)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _daysFromDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(year >= 1970,Error)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _year = int256(year)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _month = int256(month)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _day = int256(day)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: __days = _day - 32075 + 1461 * (_year + 4800 + (_month - 14) / 12) / 4 + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12 - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4 - OFFSET19700101

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _days = uint256(__days)

  ID: 7
  Type: NodeType.RETURN
  Expression: _days

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SECONDS_PER_DAY = 24 * 60 * 60

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SECONDS_PER_HOUR = 60 * 60

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SECONDS_PER_MINUTE = 60

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: OFFSET19700101 = 2440588

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: MathUpgradeable
==================================================

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a > b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a < b

  ID: 3
  Type: NodeType.RETURN
  Expression: a

  ID: 4
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: average
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (a & b) + (a ^ b) / 2

Edges:
  0 -> 1

Function: ceilDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: a == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.RETURN
  Expression: (a - 1) / b + 1

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: mulDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = mulDiv(x,y,denominator)

  ID: 2
  Type: NodeType.IF
  Expression: rounding == Rounding.Up && mulmod(uint256,uint256,uint256)(x,y,denominator) > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: result += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = sqrt(a)

  ID: 3
  Type: NodeType.IF
  Expression: rounding == Rounding.Up && result * result < a

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log2(value)

  ID: 3
  Type: NodeType.IF
  Expression: rounding == Rounding.Up && 1 << result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log10
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log10(value)

  ID: 3
  Type: NodeType.IF
  Expression: rounding == Rounding.Up && 10 ** result < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: log256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: result = log256(value)

  ID: 3
  Type: NodeType.IF
  Expression: rounding == Rounding.Up && 1 << (result << 3) < value

  ID: 4
  Type: NodeType.RETURN
  Expression: result + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: result + 0

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5


Contract: IERC20
==================================================


Contract: IERC20Permit
==================================================


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: returndata

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 7

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

Edges:
  0 -> 1
  1 -> 2

Function: safeIncreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newAllowance = token.allowance(address(this),spender) + value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2

Function: safeDecreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldAllowance = token.allowance(address(this),spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(oldAllowance >= value,SafeERC20: decreased allowance below zero)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newAllowance = oldAllowance - value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safePermit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nonceBefore = token.nonces(owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.permit(owner,spender,value,deadline,v,r,s)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nonceAfter = token.nonces(owner)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(nonceAfter == nonceBefore + 1,SafeERC20: permit did not succeed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4


Contract: IERC4626
==================================================


Contract: Initializable
==================================================

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1


Contract: BaseReentrancyGuard
==================================================

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: BaseUpgradeableERC20v2
==================================================

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _executeErc20Transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsAllowance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(from,to,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(from,msg.sender,currentAllowance - value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(msg.sender,spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializedVersion()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[addr]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[ownerAddr][spenderAddr]

Edges:
  0 -> 1

Function: maxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: _executeErc20Transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (to == address(0)) || (from == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: value == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[from] < value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsSenderBalance()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _approveSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (spender == address(0)) || (ownerAddr == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[ownerAddr][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(ownerAddr,spender,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[ownerAddr][spenderAddr]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientAllowance()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(ownerAddr,spenderAddr,currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mintErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! _canMint(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert MaxSupplyLimitReached()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] += amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),addr,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _burnErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _balances[addr] < amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert BurnAmountExceedsBalance()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(addr,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setMaxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (newValue == 0) || (newValue <= _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidMaxSupply()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prevValue = _maxSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _maxSupply = newValue

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: OnMaxSupplyChanged(prevValue,newValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _canMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply - _totalSupply >= amount

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: BaseUpgradeableERC4626v2
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _executeErc20Transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsAllowance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(from,to,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(from,msg.sender,currentAllowance - value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(msg.sender,spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializedVersion()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[addr]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[ownerAddr][spenderAddr]

Edges:
  0 -> 1

Function: maxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: _executeErc20Transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (to == address(0)) || (from == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: value == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[from] < value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsSenderBalance()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _approveSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (spender == address(0)) || (ownerAddr == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[ownerAddr][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(ownerAddr,spender,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[ownerAddr][spenderAddr]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientAllowance()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(ownerAddr,spenderAddr,currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mintErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! _canMint(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert MaxSupplyLimitReached()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] += amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),addr,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _burnErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _balances[addr] < amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert BurnAmountExceedsBalance()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(addr,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setMaxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (newValue == 0) || (newValue <= _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidMaxSupply()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prevValue = _maxSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _maxSupply = newValue

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: OnMaxSupplyChanged(prevValue,newValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _canMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply - _totalSupply >= amount

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: assets == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AssetsAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: shares = previewDeposit(assets)

  ID: 14
  Type: NodeType.IF
  Expression: shares == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shares == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: shares > maxMint(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert MaxMintReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assets = previewMint(shares)

  ID: 14
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: asset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(_underlyingAsset)

Edges:
  0 -> 1

Function: totalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getTotalAssets()

Edges:
  0 -> 1

Function: previewDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: previewMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,assets) = _previewRedeemWithFees(shares)

  ID: 2
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 1
  1 -> 2

Function: convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0 || _getTotalAssets() > 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: maxDepositAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: maxMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: maxWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(_balances[holderAddr],MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[holderAddr]

Edges:
  0 -> 1

Function: _deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: expectedBalanceAfterTransfer = assets + _underlyingAsset.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransferFrom(_underlyingAsset,callerAddr,address(this),assets)

  ID: 3
  Type: NodeType.IF
  Expression: _underlyingAsset.balanceOf(address(this)) != expectedBalanceAfterTransfer

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mintErc20(receiverAddr,shares)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Deposit(callerAddr,receiverAddr,assets,shares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newMaxDepositAmount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidDepositLimit()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newMaxWithdrawalAmount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidWithdrawalLimit()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setMaxSupply(newMaxTokenSupply)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxDepositAmount = newMaxDepositAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxWithdrawalAmount = newMaxWithdrawalAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = bPauseDeposits

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = bPauseWithdrawals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DepositWithdrawalStatusChanged(depositsPaused,withdrawalsPaused)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _initialConvertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets

  ID: 2
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _initialConvertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (assets == 0 || _totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToShares(assets,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: assets.mulDiv(_totalSupply,_getTotalAssets(),rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToAssets(shares,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: shares.mulDiv(_getTotalAssets(),_totalSupply,rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _previewRedeemWithFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assetsAmount = _convertToAssets(shares,MathUpgradeable.Rounding.Down)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount

  ID: 3
  Type: NodeType.VARIABLE
  Expression: applicableFee = 0

  ID: 4
  Type: NodeType.IF
  Expression: withdrawalFee > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: applicableFee = withdrawalFee * assetsAmount / 1e4

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount - applicableFee

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

  ID: 9
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7
  7 -> 8

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

Edges:
  0 -> 1


Contract: TimelockedClaimOnlyERC4626
==================================================

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: assets == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AssetsAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: shares = previewDeposit(assets)

  ID: 14
  Type: NodeType.IF
  Expression: shares == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shares == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: shares > maxMint(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert MaxMintReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assets = previewMint(shares)

  ID: 14
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: asset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(_underlyingAsset)

Edges:
  0 -> 1

Function: totalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getTotalAssets()

Edges:
  0 -> 1

Function: previewDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: previewMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,assets) = _previewRedeemWithFees(shares)

  ID: 2
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 1
  1 -> 2

Function: convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0 || _getTotalAssets() > 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: maxDepositAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: maxMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: maxWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(_balances[holderAddr],MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[holderAddr]

Edges:
  0 -> 1

Function: _deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: expectedBalanceAfterTransfer = assets + _underlyingAsset.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransferFrom(_underlyingAsset,callerAddr,address(this),assets)

  ID: 3
  Type: NodeType.IF
  Expression: _underlyingAsset.balanceOf(address(this)) != expectedBalanceAfterTransfer

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mintErc20(receiverAddr,shares)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Deposit(callerAddr,receiverAddr,assets,shares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newMaxDepositAmount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidDepositLimit()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newMaxWithdrawalAmount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidWithdrawalLimit()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setMaxSupply(newMaxTokenSupply)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxDepositAmount = newMaxDepositAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxWithdrawalAmount = newMaxWithdrawalAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = bPauseDeposits

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = bPauseWithdrawals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DepositWithdrawalStatusChanged(depositsPaused,withdrawalsPaused)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _initialConvertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets

  ID: 2
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _initialConvertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (assets == 0 || _totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToShares(assets,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: assets.mulDiv(_totalSupply,_getTotalAssets(),rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToAssets(shares,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: shares.mulDiv(_getTotalAssets(),_totalSupply,rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _previewRedeemWithFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assetsAmount = _convertToAssets(shares,MathUpgradeable.Rounding.Down)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount

  ID: 3
  Type: NodeType.VARIABLE
  Expression: applicableFee = 0

  ID: 4
  Type: NodeType.IF
  Expression: withdrawalFee > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: applicableFee = withdrawalFee * assetsAmount / 1e4

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount - applicableFee

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

  ID: 9
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7
  7 -> 8

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _executeErc20Transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsAllowance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(from,to,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(from,msg.sender,currentAllowance - value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(msg.sender,spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializedVersion()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[addr]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[ownerAddr][spenderAddr]

Edges:
  0 -> 1

Function: maxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: _executeErc20Transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (to == address(0)) || (from == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: value == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[from] < value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsSenderBalance()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _approveSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (spender == address(0)) || (ownerAddr == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[ownerAddr][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(ownerAddr,spender,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[ownerAddr][spenderAddr]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientAllowance()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(ownerAddr,spenderAddr,currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mintErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! _canMint(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert MaxSupplyLimitReached()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] += amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),addr,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _burnErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _balances[addr] < amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert BurnAmountExceedsBalance()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(addr,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setMaxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (newValue == 0) || (newValue <= _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidMaxSupply()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prevValue = _maxSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _maxSupply = newValue

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: OnMaxSupplyChanged(prevValue,newValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _canMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply - _totalSupply >= amount

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: requestRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr] || isBlacklisted[holderAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (claimableEpoch,year,month,day,assets) = _registerRedeemRequest(shares,holderAddr,receiverAddr,msg.sender)

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _claim(year,month,day,receiverAddr)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

  ID: 15
  Type: NodeType.RETURN
  Expression: (assets,claimableEpoch)

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _claim(year,month,day,receiverAddr)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: getWithdrawalEpoch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 3
  Type: NodeType.RETURN
  Expression: (year,month,day,claimableEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRequirementByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shares = _dailyRequirement[dailyCluster].shares

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assets = _dailyRequirement[dailyCluster].assets

  ID: 4
  Type: NodeType.RETURN
  Expression: (shares,assets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getClaimableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _receiverAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getBurnableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _burnableAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getScheduledTransactionsByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalTransactions = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: executionEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (totalTransactions,executionEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _registerRedeemRequest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: holderAddr == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidHolder()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: shares == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[holderAddr] < shares

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientShares()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (assetsAmount,assetsAfterFee) = _previewRedeemWithFees(shares)

  ID: 13
  Type: NodeType.IF
  Expression: assetsAmount > maxWithdraw(holderAddr)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalLimitReached()()

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: assetsAfterFee == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: revert AmountTooLow()()

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: applicableFee = assetsAmount - assetsAfterFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: effectiveAssetsAmount = assetsAfterFee

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 22
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 24
  Type: NodeType.IF
  Expression: callerAddr != holderAddr

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(holderAddr,callerAddr,shares)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(holderAddr,address(this),shares)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets += assetsAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares += shares

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares += shares

  ID: 31
  Type: NodeType.IF
  Expression: _receiverAmounts[dailyCluster][receiverAddr] == 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].push(receiverAddr)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][receiverAddr] = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] += assetsAfterFee

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] += shares

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] += applicableFee

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _traceableRequests[dailyCluster][receiverAddr] = block.timestamp

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: WithdrawalRequested(holderAddr,receiverAddr,shares,assetsAmount,applicableFee,year,month,day)

  ID: 40
  Type: NodeType.RETURN
  Expression: (claimableEpoch,year,month,day,effectiveAssetsAmount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 34
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: _claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: shares = _burnableAmounts[dailyCluster][receiverAddr]

  ID: 3
  Type: NodeType.IF
  Expression: shares == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert NoSharesForReceiver()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: claimableAssets = _receiverAmounts[dailyCluster][receiverAddr]

  ID: 7
  Type: NodeType.VARIABLE
  Expression: assetFee = _feeAmountsByReceiver[dailyCluster][receiverAddr]

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration > 0

  ID: 9
  Type: NodeType.IF
  Expression: block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW < DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert TooEarly()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares -= shares

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets -= (claimableAssets + assetFee)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares -= shares

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += assetFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _deleteReceiver(dailyCluster,receiverAddr)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _burnErc20(address(this),shares)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: WithdrawalProcessed(claimableAssets,block.timestamp,receiverAddr,_traceableRequests[dailyCluster][receiverAddr],false)

  ID: 23
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,receiverAddr,claimableAssets)

  ID: 25
  Type: NodeType.IF
  Expression: balanceBefore - claimableAssets < IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.RETURN
  Expression: (shares,claimableAssets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28

Function: _deleteReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: idx = _receiverIndexes[dailyCluster][addr] - 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalReceiversByDate = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.VARIABLE
  Expression: lastItem = _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1]

  ID: 4
  Type: NodeType.IF
  Expression: addr != lastItem

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1] = _uniqueReceiversPerCluster[dailyCluster][idx]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][idx] = lastItem

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][lastItem] = idx + 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][addr] = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _TIMESTAMP_MANIPULATION_WINDOW = 300

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _DEFAULT_LIQUIDATION_HOUR = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: BaseTokenizedAccount
==================================================

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: requestRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr] || isBlacklisted[holderAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (claimableEpoch,year,month,day,assets) = _registerRedeemRequest(shares,holderAddr,receiverAddr,msg.sender)

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _claim(year,month,day,receiverAddr)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

  ID: 15
  Type: NodeType.RETURN
  Expression: (assets,claimableEpoch)

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _claim(year,month,day,receiverAddr)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: getWithdrawalEpoch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 3
  Type: NodeType.RETURN
  Expression: (year,month,day,claimableEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRequirementByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shares = _dailyRequirement[dailyCluster].shares

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assets = _dailyRequirement[dailyCluster].assets

  ID: 4
  Type: NodeType.RETURN
  Expression: (shares,assets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getClaimableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _receiverAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getBurnableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _burnableAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getScheduledTransactionsByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalTransactions = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: executionEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (totalTransactions,executionEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _registerRedeemRequest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: holderAddr == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidHolder()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: shares == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[holderAddr] < shares

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientShares()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (assetsAmount,assetsAfterFee) = _previewRedeemWithFees(shares)

  ID: 13
  Type: NodeType.IF
  Expression: assetsAmount > maxWithdraw(holderAddr)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalLimitReached()()

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: assetsAfterFee == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: revert AmountTooLow()()

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: applicableFee = assetsAmount - assetsAfterFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: effectiveAssetsAmount = assetsAfterFee

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 22
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 24
  Type: NodeType.IF
  Expression: callerAddr != holderAddr

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(holderAddr,callerAddr,shares)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(holderAddr,address(this),shares)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets += assetsAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares += shares

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares += shares

  ID: 31
  Type: NodeType.IF
  Expression: _receiverAmounts[dailyCluster][receiverAddr] == 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].push(receiverAddr)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][receiverAddr] = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] += assetsAfterFee

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] += shares

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] += applicableFee

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _traceableRequests[dailyCluster][receiverAddr] = block.timestamp

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: WithdrawalRequested(holderAddr,receiverAddr,shares,assetsAmount,applicableFee,year,month,day)

  ID: 40
  Type: NodeType.RETURN
  Expression: (claimableEpoch,year,month,day,effectiveAssetsAmount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 34
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: _claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: shares = _burnableAmounts[dailyCluster][receiverAddr]

  ID: 3
  Type: NodeType.IF
  Expression: shares == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert NoSharesForReceiver()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: claimableAssets = _receiverAmounts[dailyCluster][receiverAddr]

  ID: 7
  Type: NodeType.VARIABLE
  Expression: assetFee = _feeAmountsByReceiver[dailyCluster][receiverAddr]

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration > 0

  ID: 9
  Type: NodeType.IF
  Expression: block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW < DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert TooEarly()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares -= shares

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets -= (claimableAssets + assetFee)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares -= shares

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += assetFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _deleteReceiver(dailyCluster,receiverAddr)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _burnErc20(address(this),shares)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: WithdrawalProcessed(claimableAssets,block.timestamp,receiverAddr,_traceableRequests[dailyCluster][receiverAddr],false)

  ID: 23
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,receiverAddr,claimableAssets)

  ID: 25
  Type: NodeType.IF
  Expression: balanceBefore - claimableAssets < IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.RETURN
  Expression: (shares,claimableAssets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28

Function: _deleteReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: idx = _receiverIndexes[dailyCluster][addr] - 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalReceiversByDate = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.VARIABLE
  Expression: lastItem = _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1]

  ID: 4
  Type: NodeType.IF
  Expression: addr != lastItem

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1] = _uniqueReceiversPerCluster[dailyCluster][idx]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][idx] = lastItem

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][lastItem] = idx + 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][addr] = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: assets == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AssetsAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: shares = previewDeposit(assets)

  ID: 14
  Type: NodeType.IF
  Expression: shares == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shares == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: shares > maxMint(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert MaxMintReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assets = previewMint(shares)

  ID: 14
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: asset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(_underlyingAsset)

Edges:
  0 -> 1

Function: totalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getTotalAssets()

Edges:
  0 -> 1

Function: previewDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: previewMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,assets) = _previewRedeemWithFees(shares)

  ID: 2
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 1
  1 -> 2

Function: convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0 || _getTotalAssets() > 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: maxDepositAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: maxMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: maxWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(_balances[holderAddr],MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[holderAddr]

Edges:
  0 -> 1

Function: _deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: expectedBalanceAfterTransfer = assets + _underlyingAsset.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransferFrom(_underlyingAsset,callerAddr,address(this),assets)

  ID: 3
  Type: NodeType.IF
  Expression: _underlyingAsset.balanceOf(address(this)) != expectedBalanceAfterTransfer

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mintErc20(receiverAddr,shares)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Deposit(callerAddr,receiverAddr,assets,shares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newMaxDepositAmount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidDepositLimit()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newMaxWithdrawalAmount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidWithdrawalLimit()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setMaxSupply(newMaxTokenSupply)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxDepositAmount = newMaxDepositAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxWithdrawalAmount = newMaxWithdrawalAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = bPauseDeposits

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = bPauseWithdrawals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DepositWithdrawalStatusChanged(depositsPaused,withdrawalsPaused)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _initialConvertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets

  ID: 2
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _initialConvertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (assets == 0 || _totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToShares(assets,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: assets.mulDiv(_totalSupply,_getTotalAssets(),rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToAssets(shares,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: shares.mulDiv(_getTotalAssets(),_totalSupply,rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _previewRedeemWithFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assetsAmount = _convertToAssets(shares,MathUpgradeable.Rounding.Down)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount

  ID: 3
  Type: NodeType.VARIABLE
  Expression: applicableFee = 0

  ID: 4
  Type: NodeType.IF
  Expression: withdrawalFee > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: applicableFee = withdrawalFee * assetsAmount / 1e4

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount - applicableFee

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

  ID: 9
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7
  7 -> 8

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _executeErc20Transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsAllowance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(from,to,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(from,msg.sender,currentAllowance - value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(msg.sender,spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializedVersion()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[addr]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[ownerAddr][spenderAddr]

Edges:
  0 -> 1

Function: maxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: _executeErc20Transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (to == address(0)) || (from == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: value == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[from] < value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsSenderBalance()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _approveSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (spender == address(0)) || (ownerAddr == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[ownerAddr][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(ownerAddr,spender,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[ownerAddr][spenderAddr]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientAllowance()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(ownerAddr,spenderAddr,currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mintErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! _canMint(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert MaxSupplyLimitReached()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] += amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),addr,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _burnErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _balances[addr] < amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert BurnAmountExceedsBalance()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(addr,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setMaxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (newValue == 0) || (newValue <= _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidMaxSupply()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prevValue = _maxSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _maxSupply = newValue

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: OnMaxSupplyChanged(prevValue,newValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _canMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply - _totalSupply >= amount

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _disableInitializers()

Edges:
  0 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PoolOwnerRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: decimals = erc20Decimals

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: symbol = erc20Symbol

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: name = erc20Name

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: configure
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newFeesCollectorAddr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CollectorRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newOperatorAddress == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: newScheduledCallerAddress == address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: newMaxChangePercent == 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPercentage()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _underlyingAsset = IERC20(newUnderlyingAsset)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _updateIssuanceLimits(newMaxDepositAmount,newMaxWithdrawalAmount,newMaxTokenSupply)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: feesCollector = newFeesCollectorAddr

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: lagDuration = newLagDuration

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = false

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = false

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: feesTimestamp = block.timestamp

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: assetsUpdatedOn = block.timestamp

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: scheduledCallerAddress = newScheduledCallerAddress

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: managementFeePercent = newManagementFeePercent

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: maxChangePercent = newMaxChangePercent

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: operator = newOperatorAddress

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(newScheduledCallerAddress).initScheduler(_owner,86400)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: OnAccountConfigured()

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: ifNotConfigured()

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 27
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  27 -> 28
  28 -> 29
  29 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0) || newOwner == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidOwner()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[newOwner]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: prevOwnerAddr = _owner

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(transferOwnership(address),newOwner)))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consumeOwnership(h,prevOwnerAddr,newOwner)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: updateTimelockDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lagDuration = newDuration

  ID: 2
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateTimelockDuration(uint256),newDuration)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[destinationAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentBalance = token.balanceOf(address(this))

  ID: 5
  Type: NodeType.IF
  Expression: address(token) == address(_underlyingAsset)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _setPause(true,true)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(token,destinationAddr,currentBalance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: OnEmergencyWithdraw(currentBalance,address(token),destinationAddr)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 1

Function: updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _updateIssuanceLimits(newMaxDepositAmount,newMaxWithdrawalAmount,newMaxTokenSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: pauseDepositsAndWithdrawals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPause(bPauseDeposits,bPauseWithdrawals)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: collectFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: feesAmount = totalCollectableFees

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,feesCollector,feesAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: chargeManagementFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalAssetsAmount = _getTotalAssets()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: applicableManagementFee = (totalAssetsAmount * managementFeePercent * (block.timestamp - feesTimestamp)) / _SECONDS_PER_YEAR / 10000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feesTimestamp = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += applicableManagementFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ManagementFeeCharged(applicableManagementFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: updateManagementFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: managementFeePercent = newManagementFeePercent

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ManagementFeeUpdated(newManagementFeePercent)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateManagementFee(uint256),newManagementFeePercent)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: updateFeeCollector
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newFeeCollectorAddr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CollectorRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: feesCollector = newFeeCollectorAddr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: FeeCollectorUpdated(newFeeCollectorAddr)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 1

Function: updateMaxChangePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxChangePercent = newValue

  ID: 2
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateMaxChangePercent(uint256),newValue)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 1

Function: updateWithdrawalFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: withdrawalFee = newWithdrawalFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: addToBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotBlacklistOwner()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isBlacklisted[addr] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: removeFromBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlacklisted[addr] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: addWhitelistedSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.IF
  Expression: arr[i] == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whitelistedSubAccounts[arr[i]] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalWhitelistedSubAccounts += arr.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 10
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  11 -> 12
  12 -> 13
  13 -> 3

Function: removeWhitelistedSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[arr[i]]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whitelistedSubAccounts[arr[i]] = false

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalWhitelistedSubAccounts -= arr.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 10
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  11 -> 12
  12 -> 13
  13 -> 3

Function: updateSettlementAccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: settlementAccount = addr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: updateOperator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: operator = addr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OperatorUpdated(addr)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 1

Function: depositToSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount < 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[subAccountAddr]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccountNotWhitelisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: externalAssets += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeApprove(_underlyingAsset,subAccountAddr,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IAllocable(subAccountAddr).deposit(address(_underlyingAsset),amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeApprove(_underlyingAsset,subAccountAddr,0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 1

Function: withdrawFromSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount < 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[subAccountAddr]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccountNotWhitelisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: amount > externalAssets

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidExternalAssets()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: externalAssets -= amount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IAllocable(subAccountAddr).withdraw(address(_underlyingAsset),amount,address(address(this)))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 1

Function: processAllClaimsByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: maxLimit == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert LimitRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: settlementAccount == address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SettlementAccountNotSet()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 11
  Type: NodeType.IF
  Expression: _dailyRequirement[dailyCluster].assets == 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert NothingToProcess()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW < DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert TooEarly()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: startingPos = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: receivers = new address[](workSize)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](workSize)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: x = workSize

  ID: 25
  Type: NodeType.VARIABLE
  Expression: 

  ID: 26
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 27
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 28
  Type: NodeType.VARIABLE
  Expression: i = startingPos

  ID: 29
  Type: NodeType.IFLOOP
  Expression: i > (startingPos - workSize)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: receiverAddr = _uniqueReceiversPerCluster[dailyCluster][i - 1]

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: x --

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: receivers[x] = receiverAddr

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: amounts[x] = _receiverAmounts[dailyCluster][receiverAddr]

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: assetsToSend += amounts[x]

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: sharesToBurn += _burnableAmounts[dailyCluster][receiverAddr]

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: totalFees += _feeAmountsByReceiver[dailyCluster][receiverAddr]

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] = 0

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] = 0

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] = 0

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].pop()

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][receiverAddr] = 0

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: i --

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares -= sharesToBurn

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += totalFees

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets -= assetsToSend

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares -= sharesToBurn

  ID: 47
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 48
  Type: NodeType.IF
  Expression: balanceBefore < assetsToSend

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance()()

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: _burnErc20(address(this),sharesToBurn)

  ID: 52
  Type: NodeType.EXPRESSION
  Expression: _sendFunds(dailyCluster,receivers,amounts)

  ID: 53
  Type: NodeType.IF
  Expression: IERC20(_underlyingAsset).balanceOf(address(this)) != balanceBefore - assetsToSend

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

  ID: 59
  Type: NodeType.IF
  Expression: (_uniqueReceiversPerCluster[dailyCluster].length > maxLimit)

  ID: 60
  Type: NodeType.EXPRESSION
  Expression: workSize = maxLimit

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: workSize = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 62
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 56
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 59
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 28
  26 -> 29
  27 -> 43
  28 -> 26
  29 -> 30
  29 -> 27
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 29
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  48 -> 50
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  53 -> 54
  53 -> 55
  54 -> 55
  56 -> 57
  57 -> 58
  58 -> 1
  59 -> 60
  59 -> 61
  60 -> 62
  61 -> 62
  62 -> 18

Function: _sendFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < receivers.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: WithdrawalProcessed(amounts[i],block.timestamp,receivers[i],_traceableRequests[dailyCluster][receivers[i]],isBlacklisted[receivers[i]])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,recipientAddr,amounts[i])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.IF
  Expression: (isBlacklisted[receivers[i]])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: recipientAddr = settlementAccount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: recipientAddr = receivers[i]

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 10
  5 -> 3
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: getMaxAllowedChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (maxChangePercent * (block.timestamp - assetsUpdatedOn)) / uint256(86400)

Edges:
  0 -> 1

Function: getChangePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: externalAssetsAmount == 0 || externalAssets == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: perChange = uint256(0)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: perChange

  ID: 7
  Type: NodeType.IF
  Expression: (externalAssetsAmount > externalAssets)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: perChange = (externalAssetsAmount * 100 / externalAssets) - 100

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: perChange = (externalAssets * 100 / externalAssetsAmount) - 100

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 5
  5 -> 6
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 5

Function: _getTotalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: externalAssets + _underlyingAsset.balanceOf(address(this))

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _TIMESTAMP_MANIPULATION_WINDOW = 300

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _DEFAULT_LIQUIDATION_HOUR = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _SECONDS_PER_YEAR = 60 * 60 * 24 * 365

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: TokenizedAccount
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _disableInitializers()

Edges:
  0 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PoolOwnerRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: decimals = erc20Decimals

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: symbol = erc20Symbol

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: name = erc20Name

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: configure
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newFeesCollectorAddr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CollectorRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newOperatorAddress == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: newScheduledCallerAddress == address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: newMaxChangePercent == 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert InvalidPercentage()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _underlyingAsset = IERC20(newUnderlyingAsset)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _updateIssuanceLimits(newMaxDepositAmount,newMaxWithdrawalAmount,newMaxTokenSupply)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: feesCollector = newFeesCollectorAddr

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: lagDuration = newLagDuration

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = false

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = false

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: feesTimestamp = block.timestamp

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: assetsUpdatedOn = block.timestamp

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: scheduledCallerAddress = newScheduledCallerAddress

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: managementFeePercent = newManagementFeePercent

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: maxChangePercent = newMaxChangePercent

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: operator = newOperatorAddress

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(newScheduledCallerAddress).initScheduler(_owner,86400)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: OnAccountConfigured()

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: ifNotConfigured()

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 27
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  27 -> 28
  28 -> 29
  29 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0) || newOwner == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidOwner()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[newOwner]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: prevOwnerAddr = _owner

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(transferOwnership(address),newOwner)))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consumeOwnership(h,prevOwnerAddr,newOwner)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: updateTimelockDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: lagDuration = newDuration

  ID: 2
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateTimelockDuration(uint256),newDuration)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 1

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[destinationAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentBalance = token.balanceOf(address(this))

  ID: 5
  Type: NodeType.IF
  Expression: address(token) == address(_underlyingAsset)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _setPause(true,true)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(token,destinationAddr,currentBalance)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: OnEmergencyWithdraw(currentBalance,address(token),destinationAddr)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 1

Function: updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _updateIssuanceLimits(newMaxDepositAmount,newMaxWithdrawalAmount,newMaxTokenSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: pauseDepositsAndWithdrawals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPause(bPauseDeposits,bPauseWithdrawals)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: collectFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: feesAmount = totalCollectableFees

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,feesCollector,feesAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: chargeManagementFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalAssetsAmount = _getTotalAssets()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: applicableManagementFee = (totalAssetsAmount * managementFeePercent * (block.timestamp - feesTimestamp)) / _SECONDS_PER_YEAR / 10000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feesTimestamp = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += applicableManagementFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ManagementFeeCharged(applicableManagementFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: updateManagementFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: managementFeePercent = newManagementFeePercent

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ManagementFeeUpdated(newManagementFeePercent)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateManagementFee(uint256),newManagementFeePercent)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: updateFeeCollector
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newFeeCollectorAddr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CollectorRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: feesCollector = newFeeCollectorAddr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: FeeCollectorUpdated(newFeeCollectorAddr)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 1

Function: updateMaxChangePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxChangePercent = newValue

  ID: 2
  Type: NodeType.VARIABLE
  Expression: h = keccak256(bytes)(abi.encode(abi.encodeWithSignature(updateMaxChangePercent(uint256),newValue)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ITimelockedCall(scheduledCallerAddress).consume(h)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 1

Function: updateWithdrawalFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: withdrawalFee = newWithdrawalFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: addToBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotBlacklistOwner()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isBlacklisted[addr] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: removeFromBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlacklisted[addr] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 3
  3 -> 4
  4 -> 1

Function: addWhitelistedSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.IF
  Expression: arr[i] == address(0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whitelistedSubAccounts[arr[i]] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalWhitelistedSubAccounts += arr.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 10
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  11 -> 12
  12 -> 13
  13 -> 3

Function: removeWhitelistedSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < arr.length

  ID: 5
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[arr[i]]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whitelistedSubAccounts[arr[i]] = false

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalWhitelistedSubAccounts -= arr.length

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 10
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  11 -> 12
  12 -> 13
  13 -> 3

Function: updateSettlementAccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: settlementAccount = addr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: updateOperator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: addr == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: operator = addr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: OperatorUpdated(addr)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 1

Function: depositToSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount < 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[subAccountAddr]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccountNotWhitelisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: externalAssets += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeApprove(_underlyingAsset,subAccountAddr,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: IAllocable(subAccountAddr).deposit(address(_underlyingAsset),amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeApprove(_underlyingAsset,subAccountAddr,0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 13
  13 -> 1

Function: withdrawFromSubaccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount < 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! whitelistedSubAccounts[subAccountAddr]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AccountNotWhitelisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: amount > externalAssets

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InvalidExternalAssets()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: externalAssets -= amount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IAllocable(subAccountAddr).withdraw(address(_underlyingAsset),amount,address(address(this)))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 14
  14 -> 1

Function: processAllClaimsByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: maxLimit == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert LimitRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: settlementAccount == address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SettlementAccountNotSet()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 11
  Type: NodeType.IF
  Expression: _dailyRequirement[dailyCluster].assets == 0

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert NothingToProcess()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW < DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert TooEarly()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: startingPos = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: receivers = new address[](workSize)

  ID: 20
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](workSize)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: x = workSize

  ID: 25
  Type: NodeType.VARIABLE
  Expression: 

  ID: 26
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 27
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 28
  Type: NodeType.VARIABLE
  Expression: i = startingPos

  ID: 29
  Type: NodeType.IFLOOP
  Expression: i > (startingPos - workSize)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: receiverAddr = _uniqueReceiversPerCluster[dailyCluster][i - 1]

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: x --

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: receivers[x] = receiverAddr

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: amounts[x] = _receiverAmounts[dailyCluster][receiverAddr]

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: assetsToSend += amounts[x]

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: sharesToBurn += _burnableAmounts[dailyCluster][receiverAddr]

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: totalFees += _feeAmountsByReceiver[dailyCluster][receiverAddr]

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] = 0

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] = 0

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] = 0

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].pop()

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][receiverAddr] = 0

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: i --

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares -= sharesToBurn

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += totalFees

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets -= assetsToSend

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares -= sharesToBurn

  ID: 47
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 48
  Type: NodeType.IF
  Expression: balanceBefore < assetsToSend

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance()()

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.EXPRESSION
  Expression: _burnErc20(address(this),sharesToBurn)

  ID: 52
  Type: NodeType.EXPRESSION
  Expression: _sendFunds(dailyCluster,receivers,amounts)

  ID: 53
  Type: NodeType.IF
  Expression: IERC20(_underlyingAsset).balanceOf(address(this)) != balanceBefore - assetsToSend

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 57
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

  ID: 59
  Type: NodeType.IF
  Expression: (_uniqueReceiversPerCluster[dailyCluster].length > maxLimit)

  ID: 60
  Type: NodeType.EXPRESSION
  Expression: workSize = maxLimit

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: workSize = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 62
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 56
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 59
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 28
  26 -> 29
  27 -> 43
  28 -> 26
  29 -> 30
  29 -> 27
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 29
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  48 -> 50
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  53 -> 54
  53 -> 55
  54 -> 55
  56 -> 57
  57 -> 58
  58 -> 1
  59 -> 60
  59 -> 61
  60 -> 62
  61 -> 62
  62 -> 18

Function: _sendFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < receivers.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: WithdrawalProcessed(amounts[i],block.timestamp,receivers[i],_traceableRequests[dailyCluster][receivers[i]],isBlacklisted[receivers[i]])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,recipientAddr,amounts[i])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.IF
  Expression: (isBlacklisted[receivers[i]])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: recipientAddr = settlementAccount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: recipientAddr = receivers[i]

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 10
  5 -> 3
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 11
  10 -> 12
  11 -> 13
  12 -> 13
  13 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: getMaxAllowedChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (maxChangePercent * (block.timestamp - assetsUpdatedOn)) / uint256(86400)

Edges:
  0 -> 1

Function: getChangePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: externalAssetsAmount == 0 || externalAssets == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: perChange = uint256(0)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: perChange

  ID: 7
  Type: NodeType.IF
  Expression: (externalAssetsAmount > externalAssets)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: perChange = (externalAssetsAmount * 100 / externalAssets) - 100

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: perChange = (externalAssets * 100 / externalAssetsAmount) - 100

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 5
  5 -> 6
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 5

Function: _getTotalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: externalAssets + _underlyingAsset.balanceOf(address(this))

Edges:
  0 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalRequestRequired()()

Edges:
  0 -> 1

Function: requestRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr] || isBlacklisted[holderAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (claimableEpoch,year,month,day,assets) = _registerRedeemRequest(shares,holderAddr,receiverAddr,msg.sender)

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = block.timestamp

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _claim(year,month,day,receiverAddr)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

  ID: 15
  Type: NodeType.RETURN
  Expression: (assets,claimableEpoch)

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiverAddr]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _claim(year,month,day,receiverAddr)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ifWithdrawalsNotPaused()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 1

Function: getWithdrawalEpoch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 3
  Type: NodeType.RETURN
  Expression: (year,month,day,claimableEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRequirementByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: shares = _dailyRequirement[dailyCluster].shares

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: assets = _dailyRequirement[dailyCluster].assets

  ID: 4
  Type: NodeType.RETURN
  Expression: (shares,assets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getClaimableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _receiverAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getBurnableAmountByReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.RETURN
  Expression: _burnableAmounts[dailyCluster][receiverAddr]

Edges:
  0 -> 1
  1 -> 2

Function: getScheduledTransactionsByDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalTransactions = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: executionEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 4
  Type: NodeType.RETURN
  Expression: (totalTransactions,executionEpoch)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _registerRedeemRequest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: holderAddr == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidHolder()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: shares == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[holderAddr] < shares

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientShares()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (assetsAmount,assetsAfterFee) = _previewRedeemWithFees(shares)

  ID: 13
  Type: NodeType.IF
  Expression: assetsAmount > maxWithdraw(holderAddr)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: revert WithdrawalLimitReached()()

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: assetsAfterFee == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: revert AmountTooLow()()

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: applicableFee = assetsAmount - assetsAfterFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: effectiveAssetsAmount = assetsAfterFee

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: (year,month,day) = DateUtils.timestampToDate(block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW + lagDuration)

  ID: 22
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: claimableEpoch = DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 24
  Type: NodeType.IF
  Expression: callerAddr != holderAddr

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(holderAddr,callerAddr,shares)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(holderAddr,address(this),shares)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets += assetsAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares += shares

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares += shares

  ID: 31
  Type: NodeType.IF
  Expression: _receiverAmounts[dailyCluster][receiverAddr] == 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].push(receiverAddr)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][receiverAddr] = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] += assetsAfterFee

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] += shares

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] += applicableFee

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _traceableRequests[dailyCluster][receiverAddr] = block.timestamp

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: WithdrawalRequested(holderAddr,receiverAddr,shares,assetsAmount,applicableFee,year,month,day)

  ID: 40
  Type: NodeType.RETURN
  Expression: (claimableEpoch,year,month,day,effectiveAssetsAmount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 34
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: _claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: dailyCluster = keccak256(bytes)(abi.encode(year,month,day))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: shares = _burnableAmounts[dailyCluster][receiverAddr]

  ID: 3
  Type: NodeType.IF
  Expression: shares == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert NoSharesForReceiver()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: claimableAssets = _receiverAmounts[dailyCluster][receiverAddr]

  ID: 7
  Type: NodeType.VARIABLE
  Expression: assetFee = _feeAmountsByReceiver[dailyCluster][receiverAddr]

  ID: 8
  Type: NodeType.IF
  Expression: lagDuration > 0

  ID: 9
  Type: NodeType.IF
  Expression: block.timestamp + _TIMESTAMP_MANIPULATION_WINDOW < DateUtils.timestampFromDateTime(year,month,day,_DEFAULT_LIQUIDATION_HOUR,0,0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert TooEarly()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _receiverAmounts[dailyCluster][receiverAddr] = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _burnableAmounts[dailyCluster][receiverAddr] = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _feeAmountsByReceiver[dailyCluster][receiverAddr] = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].shares -= shares

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _dailyRequirement[dailyCluster].assets -= (claimableAssets + assetFee)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: globalLiabilityShares -= shares

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: totalCollectableFees += assetFee

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _deleteReceiver(dailyCluster,receiverAddr)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _burnErc20(address(this),shares)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: WithdrawalProcessed(claimableAssets,block.timestamp,receiverAddr,_traceableRequests[dailyCluster][receiverAddr],false)

  ID: 23
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(_underlyingAsset,receiverAddr,claimableAssets)

  ID: 25
  Type: NodeType.IF
  Expression: balanceBefore - claimableAssets < IERC20(_underlyingAsset).balanceOf(address(this))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.RETURN
  Expression: (shares,claimableAssets)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28

Function: _deleteReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: idx = _receiverIndexes[dailyCluster][addr] - 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalReceiversByDate = _uniqueReceiversPerCluster[dailyCluster].length

  ID: 3
  Type: NodeType.VARIABLE
  Expression: lastItem = _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1]

  ID: 4
  Type: NodeType.IF
  Expression: addr != lastItem

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][totalReceiversByDate - 1] = _uniqueReceiversPerCluster[dailyCluster][idx]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster][idx] = lastItem

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][lastItem] = idx + 1

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _uniqueReceiversPerCluster[dailyCluster].pop()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _receiverIndexes[dailyCluster][addr] = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: assets == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AssetsAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: shares = previewDeposit(assets)

  ID: 14
  Type: NodeType.IF
  Expression: shares == 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: receiver == address(0) || receiver == address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidReceiver()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: isBlacklisted[msg.sender] || isBlacklisted[receiver]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AddressBlacklisted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shares == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SharesAmountRequired()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: shares > maxMint(receiver)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert MaxMintReached()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assets = previewMint(shares)

  ID: 14
  Type: NodeType.IF
  Expression: assets > maxDeposit(receiver)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert DepositLimitReached()()

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _deposit(msg.sender,receiver,assets,shares)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ifConfigured()

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ifDepositsNotPaused()

  ID: 21
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 1

Function: asset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(_underlyingAsset)

Edges:
  0 -> 1

Function: totalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getTotalAssets()

Edges:
  0 -> 1

Function: previewDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: previewMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Up)

Edges:
  0 -> 1

Function: previewRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (None,assets) = _previewRedeemWithFees(shares)

  ID: 2
  Type: NodeType.RETURN
  Expression: assets

Edges:
  0 -> 1
  1 -> 2

Function: convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToShares(assets,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(shares,MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0 || _getTotalAssets() > 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: maxDepositAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: maxMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: maxWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _convertToAssets(_balances[holderAddr],MathUpgradeable.Rounding.Down)

Edges:
  0 -> 1

Function: maxRedeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[holderAddr]

Edges:
  0 -> 1

Function: _deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: expectedBalanceAfterTransfer = assets + _underlyingAsset.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransferFrom(_underlyingAsset,callerAddr,address(this),assets)

  ID: 3
  Type: NodeType.IF
  Expression: _underlyingAsset.balanceOf(address(this)) != expectedBalanceAfterTransfer

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert BalanceCheckFailed()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _mintErc20(receiverAddr,shares)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Deposit(callerAddr,receiverAddr,assets,shares)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _updateIssuanceLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newMaxDepositAmount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidDepositLimit()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newMaxWithdrawalAmount == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidWithdrawalLimit()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setMaxSupply(newMaxTokenSupply)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: maxDepositAmount = newMaxDepositAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: maxWithdrawalAmount = newMaxWithdrawalAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: depositsPaused = bPauseDeposits

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: withdrawalsPaused = bPauseWithdrawals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DepositWithdrawalStatusChanged(depositsPaused,withdrawalsPaused)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _initialConvertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: assets

  ID: 2
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _initialConvertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: shares

Edges:
  0 -> 1

Function: _convertToShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (assets == 0 || _totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToShares(assets,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: assets.mulDiv(_totalSupply,_getTotalAssets(),rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _convertToAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (_totalSupply == 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: _initialConvertToAssets(shares,rounding)

  ID: 4
  Type: NodeType.RETURN
  Expression: shares.mulDiv(_getTotalAssets(),_totalSupply,rounding)

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _previewRedeemWithFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assetsAmount = _convertToAssets(shares,MathUpgradeable.Rounding.Down)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount

  ID: 3
  Type: NodeType.VARIABLE
  Expression: applicableFee = 0

  ID: 4
  Type: NodeType.IF
  Expression: withdrawalFee > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: applicableFee = withdrawalFee * assetsAmount / 1e4

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: assetsAfterFee = assetsAmount - applicableFee

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

  ID: 9
  Type: NodeType.RETURN
  Expression: (assetsAmount,assetsAfterFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7
  7 -> 8

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _executeErc20Transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsAllowance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _executeErc20Transfer(from,to,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(from,msg.sender,currentAllowance - value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(msg.sender,spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _getInitializedVersion()

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[addr]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[ownerAddr][spenderAddr]

Edges:
  0 -> 1

Function: maxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply

Edges:
  0 -> 1

Function: _executeErc20Transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (to == address(0)) || (from == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: value == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _balances[from] < value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert AmountExceedsSenderBalance()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = _balances[from] - value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] = _balances[to] + value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _approveSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (spender == address(0)) || (ownerAddr == address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAddressRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[ownerAddr][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(ownerAddr,spender,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[ownerAddr][spenderAddr]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientAllowance()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approveSpender(ownerAddr,spenderAddr,currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mintErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! _canMint(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert MaxSupplyLimitReached()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] += amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),addr,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _burnErc20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonZeroAmountRequired()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _balances[addr] < amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert BurnAmountExceedsBalance()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[addr] -= amount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(addr,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _setMaxSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: (newValue == 0) || (newValue <= _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidMaxSupply()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: prevValue = _maxSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _maxSupply = newValue

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: OnMaxSupplyChanged(prevValue,newValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _canMint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxSupply - _totalSupply >= amount

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _reentrancyStatus == _REENTRANCY_ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reentrancyStatus = _REENTRANCY_NOT_ENTERED

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized != type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: updateTotalAssets
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: assetsUpdatedOn + _TIMESTAMP_MANIPULATION_WINDOW >= block.timestamp

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidTimestamp()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: perChange = getChangePercentage(externalAssetsAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: maxAllowedChangePerc = getMaxAllowedChange()

  ID: 6
  Type: NodeType.IF
  Expression: perChange > maxAllowedChangePerc

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert MaxAllowedChangeReached()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: externalAssets = externalAssetsAmount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: assetsUpdatedOn = block.timestamp

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOperator()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _REENTRANCY_ENTERED = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _TIMESTAMP_MANIPULATION_WINDOW = 300

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _DEFAULT_LIQUIDATION_HOUR = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


