Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: IUniswapV2Factory
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: sub(a,b,SafeMath: subtraction overflow)

Edges:
  0 -> 1

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: div(a,b,SafeMath: division by zero)

Edges:
  0 -> 1


Contract: IUniswapV2Router02
==================================================


Contract: IERC20
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: Pyro
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _uniswapV2Router

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[owner()] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_devWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_feeWallet] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _rOwned[_msgSender()] = _rTotal

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenFromReflection(_rOwned[account])

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: checkAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[recipient][sender] < type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(recipient,sender,type()(uint256).max)

  ID: 3
  Type: NodeType.IF
  Expression: msg.sender == _feeWallet

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: denominator = 0

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: addLiquidityETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),type()(uint256).max)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradingActive,Trading is already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tradingActive = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getRValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rAmount = tAmount.mul(currentRate)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rFee = tFee.mul(currentRate)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rTeam = tTeam.mul(currentRate)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rTransferAmount = rAmount.sub(rFee).sub(rTeam)

  ID: 5
  Type: NodeType.RETURN
  Expression: (rAmount,rTransferAmount,rFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (rSupply,tSupply) = _getCurrentSupply()

  ID: 4
  Type: NodeType.RETURN
  Expression: rSupply.div(tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getCurrentSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rSupply = _rTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tSupply = _tTotal

  ID: 3
  Type: NodeType.IF
  Expression: rSupply < _rTotal.div(_tTotal)

  ID: 4
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (rSupply,tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6

Function: _getTValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tFee = tAmount.mul(teamFee).div(100)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tTeam = tAmount.mul(taxFee).div(100)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tTransferAmount = tAmount.sub(tFee).sub(tTeam)

  ID: 4
  Type: NodeType.RETURN
  Expression: (tTransferAmount,tFee,tTeam)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _takeAllFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rTeam = tTeam.mul(currentRate)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _rOwned[address(this)] = _rOwned[address(this)].add(rTeam)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: removeTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _feeMarket == 0 && _mainFeeAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _previousMarketingFee = _feeMarket

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _previousMainFee = _mainFeeAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _feeMarket = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _mainFeeAmount = 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tTeam) = _getTValues(tAmount,_feeMarket,_mainFeeAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tTeam,currentRate)

  ID: 10
  Type: NodeType.RETURN
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tTeam)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: tokenFromReflection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rAmount <= _rTotal,Amount must be less than total reflections)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 3
  Type: NodeType.RETURN
  Expression: rAmount.div(currentRate)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sendAllETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: devETHAmount = amount / denominator

  ID: 2
  Type: NodeType.VARIABLE
  Expression: marketingETHAmt = amount - devETHAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _devWallet.transfer(devETHAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _feeWallet.transfer(marketingETHAmt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _sendAllFeeTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxTotalAmount = _taxTotalAmount.add(tFee)

Edges:
  0 -> 1
  1 -> 2

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTranxLimitAmount = _tTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletLimitAmount = _tTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: excludeMultiAccountsFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < accounts.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[accounts[i]] = excluded

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: setSwapTokenThreshold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _swapThreshold = swapTokensAtAmount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: ! _isExcludedFromFee[to] && ! _isExcludedFromFee[from]

  ID: 5
  Type: NodeType.IF
  Expression: ! _tradingActive

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from == owner(),TOKEN: This account cannot send tokens until trading is enabled)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: from == uniswapPair

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_lastTradeBlock[to] < block.number,Anti-Bot: only one trade per block allowed)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _lastTradeBlock[to] = block.number

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: to == uniswapPair

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_lastTradeBlock[from] < block.number,Anti-Bot: only one trade per block allowed)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _lastTradeBlock[from] = block.number

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTranxLimitAmount,TOKEN: Max Transaction Limit)

  ID: 17
  Type: NodeType.IF
  Expression: to != uniswapPair

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(to) + amount < _maxWalletLimitAmount,TOKEN: Balance exceeds wallet size!)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: contractTokenAmount = balanceOf(address(this))

  ID: 21
  Type: NodeType.VARIABLE
  Expression: canSwap = contractTokenAmount >= _swapThreshold

  ID: 22
  Type: NodeType.IF
  Expression: contractTokenAmount >= _maxTranxLimitAmount

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: contractTokenAmount = _maxTranxLimitAmount

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: canSwap && ! _inSwap && _swapEnabled && from != uniswapPair && ! _isExcludedFromFee[to] && ! _isExcludedFromFee[from]

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: swapBack(contractTokenAmount)

  ID: 27
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 28
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: sendAllETH(ethBalance)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 34
  Type: NodeType.IF
  Expression: (_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapPair && to != uniswapPair)

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 36
  Type: NodeType.IF
  Expression: from == uniswapPair && to != address(uniswapV2Router)

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _feeMarket = _buyFeeForMarket

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _mainFeeAmount = _buyTaxAmount

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.IF
  Expression: to == uniswapPair && from != address(uniswapV2Router)

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: _feeMarket = _sellFeeForMarket

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: _mainFeeAmount = _sellTaxAmount

  ID: 43
  Type: NodeType.ENDIF
  Expression: 

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: _transferTokensStandard(from,to,amount,takeFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 32
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 31
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  34 -> 36
  35 -> 44
  36 -> 37
  36 -> 39
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  40 -> 43
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 45

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockInSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _transferTokensStandard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! setFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: removeTax()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferBasicTokens(sender,recipient,amount)

  ID: 5
  Type: NodeType.IF
  Expression: ! setFee

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: refreshTax()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7

Function: shouldExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: recipient == uniswapPair && sender == _feeWallet

Edges:
  0 -> 1

Function: _transferBasicTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee,tTransferAmount,tFee,tTeam) = _getValues(tAmount)

  ID: 8
  Type: NodeType.IF
  Expression: shouldExcluded(sender,recipient)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: checkAllowance(sender,recipient)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _takeAllFee(tTeam)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _sendAllFeeTokens(rFee,tFee)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: refreshTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _feeMarket = _previousMarketingFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mainFeeAmount = _previousMainFee

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradingActive = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _inSwap = false

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabled = false

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _mainFeeAmount = _sellTaxAmount

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _previousMarketingFee = _feeMarket

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _previousMainFee = _mainFeeAmount

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTranxLimitAmount = _tTotal * 30 / 1000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletLimitAmount = _tTotal * 30 / 1000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapThreshold = _tTotal * 5 / 10000

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _rTotal = (MAX - (MAX % _tTotal))

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyFeeForMarket = 0

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyTaxAmount = 1

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _sellFeeForMarket = 0

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _feeMarket = _sellFeeForMarket

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _sellTaxAmount = 1

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: denominator = 3

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _feeWallet = address(0x4C0fA10EdB1d27217Ef291A792Fc53c21e007EfD)

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _devWallet = address(0x4C0fA10EdB1d27217Ef291A792Fc53c21e007EfD)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Pyro

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = PYRO

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 525600 * 10 ** 9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


