Contract: IERC20
==================================================


Contract: KeitoStaking
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stakingToken = IERC20(_stakingToken)

Edges:
  0 -> 1
  1 -> 2

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(lockDuration == 604800 || lockDuration == 2592000 || lockDuration == 7776000)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakingToken.transferFrom(msg.sender,address(this),amount))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lockTimestamp = block.timestamp + lockDuration

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stakes[msg.sender].push(Stake({amount:amount,timestamp:block.timestamp,lockTimestamp:lockTimestamp,unstakeForced:false,claimedReward:0}))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Staked(msg.sender,amount,lockTimestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: calculateReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[user][stakeIndex]

  ID: 2
  Type: NodeType.IF
  Expression: userStake.amount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: 0

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: stakedDuration = block.timestamp - userStake.timestamp

  ID: 6
  Type: NodeType.VARIABLE
  Expression: apy = getAPYForDuration(userStake.lockTimestamp - userStake.timestamp)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: reward = (userStake.amount * apy * stakedDuration) / (31536000 * 100)

  ID: 8
  Type: NodeType.RETURN
  Expression: reward - userStake.claimedReward

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: claimReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender][stakeIndex]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: reward = calculateReward(msg.sender,stakeIndex)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(reward > 0,No reward to claim)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: userStake.claimedReward += reward

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakingToken.transfer(msg.sender,reward))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: RewardClaimed(msg.sender,reward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender][stakeIndex]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(userStake.amount > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(block.timestamp >= userStake.lockTimestamp)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: reward = calculateReward(msg.sender,stakeIndex)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalAmount = userStake.amount + reward

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: userStake.amount = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakingToken.transfer(msg.sender,totalAmount))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Unstaked(msg.sender,userStake.amount,reward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: forcedUnstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender][stakeIndex]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(userStake.amount > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! userStake.unstakeForced)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: reward = calculateReward(msg.sender,stakeIndex)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalAmount = userStake.amount + reward

  ID: 6
  Type: NodeType.VARIABLE
  Expression: fee = (totalAmount * FORCE_UNSTAKE_FEE) / 100

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amountAfterFee = totalAmount - fee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: userStake.unstakeForced = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: userStake.amount = 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stakingToken.transfer(msg.sender,amountAfterFee))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ForcedUnstake(msg.sender,totalAmount,fee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: infoUserStake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = stakes[user].length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _amounts = new uint256[](length)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: _timestamps = new uint256[](length)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _lockTimestamps = new uint256[](length)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _claimedRewards = new uint256[](length)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _unstakeForced = new bool[](length)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < length

  ID: 11
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[user][i]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _amounts[i] = userStake.amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _timestamps[i] = userStake.timestamp

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _lockTimestamps[i] = userStake.lockTimestamp

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _claimedRewards[i] = userStake.claimedReward

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _unstakeForced[i] = userStake.unstakeForced

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 18
  Type: NodeType.RETURN
  Expression: (_amounts,_timestamps,_lockTimestamps,_claimedRewards,_unstakeForced)

  ID: 19
  Type: NodeType.RETURN
  Expression: (amounts,timestamps,lockTimestamps,claimedRewards,unstakeForced)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 18
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 10

Function: getAPYForDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lockDuration == 604800

  ID: 2
  Type: NodeType.RETURN
  Expression: apy1

  ID: 3
  Type: NodeType.IF
  Expression: lockDuration == 2592000

  ID: 4
  Type: NodeType.RETURN
  Expression: apy2

  ID: 5
  Type: NodeType.IF
  Expression: lockDuration == 7776000

  ID: 6
  Type: NodeType.RETURN
  Expression: apy3

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: setAPY
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: apy1 = _apy1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: apy2 = _apy2

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: apy3 = _apy3

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = stakingToken.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount <= contractBalance,Insufficient balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stakingToken.transfer(owner,_amount),Transfer failed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: contractBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: stakingToken.balanceOf(address(this))

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: apy1 = 50

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: apy2 = 100

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: apy3 = 200

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FORCE_UNSTAKE_FEE = 30

Edges:


