Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: Presale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mainToken = _token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokensToSell = 3000000000e18

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenPerUsdPrice = 1000000000000000000000

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = address(_fundReceiver)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: getLatestPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is Paused, check back later)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: _referral != address(0) && _referral != msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: refReward = ((msg.value * refPercent) / 1000)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: address(_referral).transfer(refReward)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: fundReceiver.transfer(msg.value - refReward)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = nativeToToken(msg.value)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(soldToken + numberOfTokens <= tokensToSell,Presale Sold Out)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + (numberOfTokens)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: amountRaised = amountRaised + msg.value

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ethToUSDTConverted = EthToUsd(msg.value)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ethToUSDTConverted = ethToUSDTConverted / 1e12

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + ethToUSDTConverted

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].native_balance = users[msg.sender].native_balance + (msg.value)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance = users[msg.sender].token_balance + (numberOfTokens)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: users[_referral].eth_reward = users[_referral].eth_reward + (refReward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25

Function: buyTokenUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is Paused, check back later)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: _referral != address(0) && _referral != msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: refReward = ((amount * refPercent) / 1000)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: USDC.transferFrom(msg.sender,_referral,refReward)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: USDC.transferFrom(msg.sender,fundReceiver,amount - refReward)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = usdtToToken(amount)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(soldToken + numberOfTokens <= tokensToSell,Presale Sold Out)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + numberOfTokens

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: amountRaisedUSDC = amountRaisedUSDC + amount

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + amount

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].usdc_balance += amount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance = users[msg.sender].token_balance + numberOfTokens

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: users[_referral].usdc_reward = users[_referral].usdc_reward + (refReward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22

Function: buyTokenUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is Paused, check back later)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: _referral != address(0) && _referral != msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: refReward = ((amount * refPercent) / 1000)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: USDT.transferFrom(msg.sender,_referral,refReward)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: USDT.transferFrom(msg.sender,fundReceiver,amount - refReward)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = usdtToToken(amount)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(soldToken + numberOfTokens <= tokensToSell,Presale Sold Out)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + numberOfTokens

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: amountRaisedUSDT = amountRaisedUSDT + amount

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + amount

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].usdt_balance += amount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance = users[msg.sender].token_balance + numberOfTokens

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: users[_referral].usdt_reward = users[_referral].usdt_reward + (refReward)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isPresaleEnded,Presale has not ended yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isClaimEnabled,Claim has not enabled yet)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: user = users[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(user.token_balance > 0,No tokens purchased)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: claimableTokens = user.token_balance - user.claimed_tokens

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(claimableTokens > 0,No tokens to claim)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: user.claimed_tokens += claimableTokens

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: mainToken.transfer(msg.sender,claimableTokens)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ClaimToken(msg.sender,claimableTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: whitelistdAddresses
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_addresses.length == _tokenAmount.length,Addresses and amounts must be equal)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _addresses.length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: users[_addresses[i]].token_balance += _tokenAmount[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 1

Function: setPresaleStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleStatus = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: endPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPresaleEnded = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: startClaim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isClaimEnabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: nativeToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsd = (_amount * (getLatestPrice())) / (1000000000000000000)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: numberOfTokens = (ethToUsd * tokenPerUsdPrice) / (1e8)

  ID: 3
  Type: NodeType.RETURN
  Expression: numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: EthToUsd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsd = (_amount * (getLatestPrice())) / (1e8)

  ID: 2
  Type: NodeType.RETURN
  Expression: ethToUsd

Edges:
  0 -> 1
  1 -> 2

Function: usdtToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: numberOfTokens = (_amount * tokenPerUsdPrice) / (1e6)

  ID: 2
  Type: NodeType.RETURN
  Expression: numberOfTokens

Edges:
  0 -> 1
  1 -> 2

Function: updateToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mainToken = IERC20(_token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateStableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDT = IERC20(_USDT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDC = IERC20(_USDC)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: initiateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundReceiver.transfer(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: totalUsersCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: UsersAddresses.length

Edges:
  0 -> 1

Function: changeFundReciever
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = address(_addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updatePriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: priceFeed = _priceFeed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: ChangePriceAndTokensTOSell
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenPerUsdPrice = _tokenPerUsdPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokensToSell = _tokensToSell

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setRefPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: refPercent = _updatedRefValue

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refPercent = 400

Edges:
  0 -> 1
  1 -> 2


