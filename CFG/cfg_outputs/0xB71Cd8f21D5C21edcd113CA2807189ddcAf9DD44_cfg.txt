Contract: koth_v1b
==================================================

Function: koth_v1b
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: feeAddress = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: resetKoth()

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lastBlock > 0 && block.number > lastBlock

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 3
  Type: NodeType.RETURN
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: minBet = highestBet + minRaise

  ID: 6
  Type: NodeType.IF
  Expression: msg.value < minBet

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 8
  Type: NodeType.RETURN
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: pot < 1000000000000000000

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: maxBet = 3 * pot

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: maxBet = 5 * pot / 4

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: msg.value > maxBet

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 17
  Type: NodeType.RETURN
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: betId ++

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: highestBet = msg.value

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: koth = msg.sender

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: pot += highestBet

  ID: 23
  Type: NodeType.VARIABLE
  Expression: potEther = pot / 1000000000000000000

  ID: 24
  Type: NodeType.VARIABLE
  Expression: blocksRemaining = (potEther ** 2) / 2 - 8 * potEther + 37

  ID: 25
  Type: NodeType.IF
  Expression: blocksRemaining < 6

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: blocksRemaining = 3

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: lastBlock = block.number + blocksRemaining

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: NewKoth(gameId,betId,koth,highestBet,pot,lastBlock,minBet,maxBet)

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 18
  16 -> 17
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29

Function: resetKoth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: gameId ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: highestBet = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: koth = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pot = minPot

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastBlock = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: betId = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: firstBlock = block.number

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: rewardKoth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == feeAddress && lastBlock > 0 && block.number > lastBlock

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = pot / 20

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: KothWin(gameId,betId,koth,highestBet,pot,fee,firstBlock,lastBlock)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: netPot = pot - fee

  ID: 5
  Type: NodeType.VARIABLE
  Expression: winner = koth

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: resetKoth()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: winner.transfer(netPot)

  ID: 8
  Type: NodeType.IF
  Expression: this.balance - fee >= minPot

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: feeAddress.transfer(fee)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 11
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: addFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != feeAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == feeAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(feeAddress)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: gameId = 0

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minPot = 1000000000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minRaise = 1000000000000000

Edges:
  0 -> 1


