Contract: SafeMath
==================================================

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x + y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((z >= x) && (z >= y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeSubtract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(x >= y)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: z = x - y

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeMult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x * y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((x == 0) || (z / x == y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: BasicAccessControl
==================================================

Function: BasicAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: ChangeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: AddModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_newModerator] == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_newModerator] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: RemoveModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_oldModerator] == true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_oldModerator] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators -= 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: UpdateMaintaining
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMaintaining = _isMaintaining

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalModerators = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isMaintaining = true

Edges:
  0 -> 1


Contract: EtheremonEnum
==================================================


Contract: EtheremonDataBase
==================================================

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x + y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((z >= x) && (z >= y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeSubtract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(x >= y)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: z = x - y

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeMult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x * y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((x == 0) || (z / x == y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: BasicAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: ChangeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: AddModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_newModerator] == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_newModerator] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: RemoveModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_oldModerator] == true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_oldModerator] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators -= 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: UpdateMaintaining
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMaintaining = _isMaintaining

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalModerators = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isMaintaining = true

Edges:
  0 -> 1


Contract: EtheremonGateway
==================================================

Function: BasicAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: ChangeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: AddModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_newModerator] == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_newModerator] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: RemoveModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_oldModerator] == true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_oldModerator] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators -= 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: UpdateMaintaining
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMaintaining = _isMaintaining

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalModerators = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isMaintaining = true

Edges:
  0 -> 1


Contract: EtheremonWorld
==================================================

Function: safeAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x + y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((z >= x) && (z >= y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeSubtract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(x >= y)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: z = x - y

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeMult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x * y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)((x == 0) || (z / x == y))

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: BasicAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: ChangeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: AddModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_newModerator] == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_newModerator] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: RemoveModerator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moderators[_oldModerator] == true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moderators[_oldModerator] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalModerators -= 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  5 -> 1

Function: UpdateMaintaining
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isMaintaining = _isMaintaining

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: EtheremonWorld
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: dataContract = _dataContract

Edges:
  0 -> 1

Function: setMaxDexSize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxDexSize = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 2
  2 -> 1

Function: setOriginalPriceGen0
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: gen0Config[1] = Gen0Config(1,300000000000000000,3000000000000000,374)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: gen0Config[2] = Gen0Config(2,300000000000000000,3000000000000000,408)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: gen0Config[3] = Gen0Config(3,300000000000000000,3000000000000000,373)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gen0Config[4] = Gen0Config(4,200000000000000000,2000000000000000,437)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: gen0Config[5] = Gen0Config(5,100000000000000000,1000000000000000,497)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: gen0Config[6] = Gen0Config(6,300000000000000000,3000000000000000,380)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: gen0Config[7] = Gen0Config(7,200000000000000000,2000000000000000,345)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: gen0Config[8] = Gen0Config(8,100000000000000000,1000000000000000,518)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: gen0Config[9] = Gen0Config(9,100000000000000000,1000000000000000,447)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: gen0Config[10] = Gen0Config(10,200000000000000000,2000000000000000,380)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: gen0Config[11] = Gen0Config(11,200000000000000000,2000000000000000,354)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: gen0Config[12] = Gen0Config(12,200000000000000000,2000000000000000,346)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: gen0Config[13] = Gen0Config(13,200000000000000000,2000000000000000,351)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: gen0Config[14] = Gen0Config(14,200000000000000000,2000000000000000,338)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: gen0Config[15] = Gen0Config(15,200000000000000000,2000000000000000,341)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: gen0Config[16] = Gen0Config(16,350000000000000000,3500000000000000,384)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: gen0Config[17] = Gen0Config(17,100000000000000000,1000000000000000,305)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: gen0Config[18] = Gen0Config(18,100000000000000000,1000000000000000,427)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: gen0Config[19] = Gen0Config(19,100000000000000000,1000000000000000,304)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: gen0Config[20] = Gen0Config(20,400000000000000000,5000000000000000,82)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: gen0Config[21] = Gen0Config(21,1,1,123)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: gen0Config[22] = Gen0Config(22,200000000000000000,1000000000000000,468)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: gen0Config[23] = Gen0Config(23,500000000000000000,2500000000000000,302)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: gen0Config[24] = Gen0Config(24,1000000000000000000,5000000000000000,195)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 25
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  25 -> 1

Function: getEarningAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalValidAmount = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: classId = 1

  ID: 5
  Type: NodeType.IFLOOP
  Expression: classId <= GEN0_NO

  ID: 6
  Type: NodeType.VARIABLE
  Expression: gen0 = gen0Config[classId]

  ID: 7
  Type: NodeType.IF
  Expression: gen0.total > 0 && gen0.classId == classId && gen0.originalPrice > 0 && gen0.returnPrice > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: rate = gen0.originalPrice / gen0.returnPrice

  ID: 9
  Type: NodeType.IF
  Expression: rate < gen0.total

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalValidAmount += (gen0.originalPrice + gen0.returnPrice) * rate / 2

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalValidAmount += (gen0.total - rate) * gen0.returnPrice

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalValidAmount += (gen0.originalPrice + gen0.returnPrice * (rate - gen0.total + 1)) / 2 * gen0.total

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: classId ++

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: totalValidAmount = safeAdd(totalValidAmount,totalEarn)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: totalValidAmount = safeSubtract(totalValidAmount,totalCashout)

  ID: 18
  Type: NodeType.RETURN
  Expression: totalValidAmount

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 16
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  7 -> 14
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 5
  16 -> 17
  17 -> 18

Function: withdrawEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount > this.balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: EventWithdrawEther(_sendTo,ResultCode.ERROR_INVALID_AMOUNT,0)

  ID: 3
  Type: NodeType.RETURN
  Expression: ResultCode.ERROR_INVALID_AMOUNT

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalValidAmount = getEarningAmount()

  ID: 6
  Type: NodeType.IF
  Expression: _amount > totalValidAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: EventWithdrawEther(_sendTo,ResultCode.ERROR_INVALID_AMOUNT,0)

  ID: 8
  Type: NodeType.RETURN
  Expression: ResultCode.ERROR_INVALID_AMOUNT

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _sendTo.transfer(_amount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalCashout += _amount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: EventWithdrawEther(_sendTo,ResultCode.SUCCESS,_amount)

  ID: 13
  Type: NodeType.RETURN
  Expression: ResultCode.SUCCESS

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 14
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: addMonsterClassBasic
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (class.classId,class.price,class.returnPrice,class.total,class.catchable) = data.getMonsterClass(_classId)

  ID: 4
  Type: NodeType.IF
  Expression: _classId == 0 || class.classId == _classId

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: data.setMonsterClass(_classId,_price,_returnPrice,true)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.CLASS_TYPE,uint64(_classId),_type)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss1)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss2)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss3)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss4)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss5)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_START,uint64(_classId),_ss6)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  15 -> 1

Function: addMonsterClassExtend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.IF
  Expression: _classId == 0 || data.getSizeArrayType(ArrayType.STAT_STEP,uint64(_classId)) > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: _type2 > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.CLASS_TYPE,uint64(_classId),_type2)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: _type3 > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.CLASS_TYPE,uint64(_classId),_type3)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st1)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st2)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st3)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st4)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st5)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_STEP,uint64(_classId),_st6)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: setCatchable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gen0 = gen0Config[_classId]

  ID: 2
  Type: NodeType.IF
  Expression: gen0.classId == _classId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (class.classId,class.price,class.returnPrice,class.total,class.catchable) = data.getMonsterClass(_classId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: data.setMonsterClass(class.classId,class.price,class.returnPrice,catchable)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: setPriceIncreasingRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: priceIncreasingRatio = _ratio

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 2
  2 -> 1

Function: setGason
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pro = genxProperty[_classId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pro.isGason = _isGason

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: addClassProperty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pro = genxProperty[_classId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pro.classId = _classId

  ID: 3
  Type: NodeType.IF
  Expression: _type == PropertyType.ANCESTOR

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pro.ancestors.push(value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: pro.xfactors.push(value)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  7 -> 1

Function: increaseMonsterExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: data.increaseMonsterExp(_objId,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: decreaseMonsterExp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: data.decreaseMonsterExp(_objId,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyModerators()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getRandom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: genNum = uint256(block.blockhash(block.number - 1)) + uint256(priAddress)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < index && i < 6

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: genNum /= 256

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.RETURN
  Expression: uint8(genNum % maxRan)

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != ETHEREMON_PROCESSOR

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: isGason
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(_objId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: pro = genxProperty[obj.classId]

  ID: 5
  Type: NodeType.RETURN
  Expression: pro.isGason

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getObjIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(_objId)

  ID: 4
  Type: NodeType.RETURN
  Expression: (obj.classId,obj.createIndex,obj.lastClaimIndex)

  ID: 5
  Type: NodeType.RETURN
  Expression: (classId,createIndex,lastClaimIndex)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getObjBattleInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(_objId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: pro = genxProperty[obj.classId]

  ID: 5
  Type: NodeType.RETURN
  Expression: (obj.classId,obj.exp,pro.isGason,pro.ancestors.length,pro.xfactors.length)

  ID: 6
  Type: NodeType.RETURN
  Expression: (classId,exp,isGason,ancestorLength,xfactorsLength)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getClassPropertySize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _type == PropertyType.ANCESTOR

  ID: 2
  Type: NodeType.RETURN
  Expression: genxProperty[_classId].ancestors.length

  ID: 3
  Type: NodeType.RETURN
  Expression: genxProperty[_classId].xfactors.length

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getClassPropertyValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _type == PropertyType.ANCESTOR

  ID: 2
  Type: NodeType.RETURN
  Expression: genxProperty[_classId].ancestors[index]

  ID: 3
  Type: NodeType.RETURN
  Expression: genxProperty[_classId].xfactors[index]

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getGen0COnfig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gen0 = gen0Config[_classId]

  ID: 2
  Type: NodeType.RETURN
  Expression: (gen0.classId,gen0.originalPrice,gen0.total)

Edges:
  0 -> 1
  1 -> 2

Function: getReturnFromMonster
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: classId = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: createIndex = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: lastClaimIndex = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (classId,createIndex,lastClaimIndex) = getObjIndex(_objId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: gen0 = gen0Config[classId]

  ID: 6
  Type: NodeType.IF
  Expression: gen0.classId != classId

  ID: 7
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: currentGap = 0

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalGap = 0

  ID: 11
  Type: NodeType.IF
  Expression: lastClaimIndex < gen0.total

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: currentGap = gen0.total - lastClaimIndex

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: createIndex < gen0.total

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: totalGap = gen0.total - createIndex

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: (safeMult(currentGap,gen0.returnPrice),safeMult(totalGap,gen0.returnPrice))

  ID: 18
  Type: NodeType.RETURN
  Expression: (current,total)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17

Function: moveDataContractBalanceToWorld
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: data.withdrawEther(address(this),data.balance)

Edges:
  0 -> 1
  1 -> 2

Function: renameMonster
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(_objId)

  ID: 4
  Type: NodeType.IF
  Expression: obj.monsterId != _objId || obj.trainer != msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: data.setMonsterObj(_objId,name,obj.exp,obj.createIndex,obj.lastClaimIndex)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isActive()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  8 -> 1

Function: catchMonster
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (class.classId,class.price,class.returnPrice,class.total,class.catchable) = data.getMonsterClass(_classId)

  ID: 4
  Type: NodeType.IF
  Expression: class.classId == 0 || class.catchable == false

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: data.getMonsterDexSize(msg.sender) > maxDexSize

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalBalance = safeAdd(msg.value,data.getExtraBalance(msg.sender))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: payPrice = class.price

  ID: 12
  Type: NodeType.IF
  Expression: class.total > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: payPrice += class.price * (class.total - 1) / priceIncreasingRatio

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: payPrice > totalBalance

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: totalEarn += payPrice

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: data.setExtraBalance(msg.sender,safeSubtract(totalBalance,payPrice))

  ID: 20
  Type: NodeType.VARIABLE
  Expression: objId = data.addMonsterObj(_classId,msg.sender,_name)

  ID: 21
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 22
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 24
  Type: NodeType.IFLOOP
  Expression: i < STAT_COUNT

  ID: 25
  Type: NodeType.VARIABLE
  Expression: value = getRandom(STAT_MAX,uint8(i),lastHunter) + data.getElementInArrayType(ArrayType.STAT_START,uint64(_classId),i)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: data.addElementToArrayType(ArrayType.STAT_BASE,objId,value)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: i += 1

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: lastHunter = msg.sender

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: EventCatchMonster(msg.sender,objId)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: isActive()

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 23
  21 -> 24
  22 -> 28
  23 -> 21
  24 -> 25
  24 -> 22
  25 -> 26
  26 -> 27
  27 -> 24
  28 -> 29
  30 -> 1

Function: cashOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalAmount = data.getExtraBalance(msg.sender)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: objId = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: dexSize = data.getMonsterDexSize(msg.sender)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < dexSize

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: objId = data.getMonsterObjId(msg.sender,i)

  ID: 10
  Type: NodeType.IF
  Expression: objId > 0

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: (obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(objId)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: gen0 = gen0Config[obj.classId]

  ID: 14
  Type: NodeType.IF
  Expression: gen0.classId == obj.classId

  ID: 15
  Type: NodeType.IF
  Expression: obj.lastClaimIndex < gen0.total

  ID: 16
  Type: NodeType.VARIABLE
  Expression: gap = uint32(safeSubtract(gen0.total,obj.lastClaimIndex))

  ID: 17
  Type: NodeType.IF
  Expression: gap > 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: totalAmount += safeMult(gap,gen0.returnPrice)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: data.setMonsterObj(obj.monsterId, name me ,obj.exp,obj.createIndex,gen0.total)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 25
  Type: NodeType.IF
  Expression: _amount == 0

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: _amount = totalAmount

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.IF
  Expression: _amount > totalAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.IF
  Expression: this.balance + data.balance < _amount

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 33
  Type: NodeType.IF
  Expression: this.balance < _amount

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: data.withdrawEther(address(this),data.balance)

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.IF
  Expression: _amount > 0

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: data.setExtraBalance(msg.sender,totalAmount - _amount)

  ID: 39
  Type: NodeType.IF
  Expression: ! msg.sender.send(_amount)

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: data.setExtraBalance(msg.sender,totalAmount)

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: EventCashOut(msg.sender,ResultCode.ERROR_SEND_FAIL,0)

  ID: 42
  Type: NodeType.RETURN
  Expression: ResultCode.ERROR_SEND_FAIL

  ID: 43
  Type: NodeType.ENDIF
  Expression: 

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: EventCashOut(msg.sender,ResultCode.SUCCESS,_amount)

  ID: 46
  Type: NodeType.RETURN
  Expression: ResultCode.SUCCESS

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 25
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  10 -> 23
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 22
  15 -> 16
  15 -> 21
  16 -> 17
  17 -> 18
  17 -> 20
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 8
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 33
  32 -> 36
  33 -> 34
  33 -> 35
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  37 -> 44
  38 -> 39
  39 -> 40
  39 -> 43
  40 -> 41
  41 -> 42
  43 -> 44
  44 -> 45
  45 -> 46

Function: getTrainerEarn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: returnFromMonster = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: gen0current = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: gen0total = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: objId = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: dexSize = data.getMonsterDexSize(_trainer)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < dexSize

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: objId = data.getMonsterObjId(_trainer,i)

  ID: 12
  Type: NodeType.IF
  Expression: objId > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (gen0current,gen0total) = getReturnFromMonster(objId)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: returnFromMonster += gen0current

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.RETURN
  Expression: returnFromMonster

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: getTrainerBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: userExtraBalance = data.getExtraBalance(_trainer)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: returnFromMonster = getTrainerEarn(_trainer)

  ID: 4
  Type: NodeType.RETURN
  Expression: (userExtraBalance + returnFromMonster)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getMonsterClassBasic
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = EtheremonDataBase(dataContract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (class.classId,class.price,class.returnPrice,class.total,class.catchable) = data.getMonsterClass(_classId)

  ID: 4
  Type: NodeType.RETURN
  Expression: (class.price,class.returnPrice,class.total,class.catchable)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalModerators = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isMaintaining = true

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalCashout = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalEarn = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: priceIncreasingRatio = 1000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxDexSize = 500

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastHunter = address(0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETHEREMON_PROCESSOR = address(0x8a60806F05876f4d6dB00c877B0558DbCAD30682)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAT_COUNT = 6

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STAT_MAX = 32

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_NO = 24

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


