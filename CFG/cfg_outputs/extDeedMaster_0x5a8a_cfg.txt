Contract: ABS_Reg
==================================================


Contract: extDeedMaster
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: masterCopy = _masterCopy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = tx.origin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrar = ABS_Reg(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: creationDate = uint64(block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getMasterCopy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: masterCopy

Edges:
  0 -> 1

Function: adjustBal_1k3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance <= newValue

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(this).balance > 0 && address(address(uint160(owner))).send(address(this).balance - newValue),A)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: closeDeed_igk
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (receiver != address(0x0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(address(receiver)).send(address(this).balance),B)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(address(owner)).send(address(this).balance),B)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lstate = registrar.state_pln(lhash)

  ID: 2
  Type: NodeType.IF
  Expression: lstate == 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lhash != 0x0 && msg.value > 0 && address(this).balance == msg.value,C)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: registrar.saveExtDeedCntr_gm9(msg.sender,lhash,msg.value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewBid(msg.sender)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lhash != 0x0 && msg.value == 0 && owner == msg.sender,D)

  ID: 8
  Type: NodeType.IF
  Expression: lstate == 4

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: registrar.unsealExternalBid_qfG(lhash)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: RevealBid(msg.sender)

  ID: 11
  Type: NodeType.IF
  Expression: lstate == 2

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: registrar.finalizeExternalAuction_WmS(lhash)

  ID: 13
  Type: NodeType.IF
  Expression: lstate == 6

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: registrar.cancelExternalBid_9ig(keccak256(bytes)(abi.encode(lhash,owner,address(this).balance,kkk)),lhash)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: CancelBid(msg.sender)

  ID: 16
  Type: NodeType.IF
  Expression: lstate == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(owner).send(address(this).balance),E)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: CancelBid(msg.sender)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(false,F)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 24
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 23
  11 -> 12
  11 -> 13
  12 -> 22
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 21
  16 -> 17
  16 -> 19
  17 -> 18
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24


