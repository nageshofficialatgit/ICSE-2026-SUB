Contract: Interface
==================================================


Contract: Artwork
==================================================

Function: Artwork
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _ownerCommission > 9750 || _ownerCommission < 0

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SHA256ofArtwork = _SHA256ofArtwork

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: editionSize = _editionSize

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: title = _title

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: fileLink = _fileLink

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: customText = _customText

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ownerCommission = _ownerCommission

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: activationTime = now

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyBy(owner)

Edges:
  0 -> 2
  2 -> 1

Function: setProof
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! proofSet

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: proofLink = _proofLink

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: proofSet = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: remainder = editionSize % 40

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ethartAward = (editionSize - remainder) / 40

  ID: 7
  Type: NodeType.IF
  Expression: remainder > 0 && now % 39 <= remainder

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ethartAward ++

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[registrar] = ethartAward

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[owner] = editionSize - ethartAward

  ID: 12
  Type: NodeType.THROW
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyBy(owner)

Edges:
  0 -> 14
  1 -> 2
  1 -> 12
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 13
  14 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: piecesOwned[msg.sender] >= _amount && _amount > 0 && piecesOwned[_to] + _amount > piecesOwned[_to] && _to != 0x0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[msg.sender] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[_to] += _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: notLocked(msg.sender,_amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 8
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  8 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = editionSize

  ID: 2
  Type: NodeType.RETURN
  Expression: totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: piecesOwned[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: piecesOwned[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && piecesOwned[_to] + _amount > piecesOwned[_to] && _to != 0x0 && (_from != lowestAskAddress || piecesOwned[_from] > _amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[_from] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[_to] += _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_amount)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: notLocked(_from,_amount)

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 9
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  9 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: piecesOwned[msg.sender] >= _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[msg.sender] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: editionSize -= _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Burn(msg.sender,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.THROW
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: notLocked(msg.sender,_amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 8
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  8 -> 1

Function: burnFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: piecesOwned[_from] >= _value && allowed[_from][msg.sender] >= _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[_from] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: editionSize -= _value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Burn(_from,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.THROW
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: notLocked(_from,_value)

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 9
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  9 -> 1

Function: buyPiece
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: pieceForSale && msg.value >= lowestAskPrice

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _amountOwner = msg.value / 10000 * ownerCommission

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _amountEthart = msg.value / 40

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _amountSeller = msg.value - _amountOwner - _amountEthart

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(_amountOwner)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: lowestAskAddress.transfer(_amountSeller)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: registrar.transfer(_amountEthart)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[lowestAskAddress] --

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[msg.sender] ++

  ID: 13
  Type: NodeType.VARIABLE
  Expression: a = Interface(registrar)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: a.issuePatrons(msg.sender,msg.value / 5 * 2)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: pieceSold(lowestAskAddress,msg.sender,msg.value)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: pieceForSale = false

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: lowestAskPrice = 0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: lowestAskAddress = 0x0

  ID: 19
  Type: NodeType.THROW
  Expression: 

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 19
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 20

Function: offerPieceForSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _price < lowestAskPrice || ! pieceForSale

  ID: 2
  Type: NodeType.IF
  Expression: _price <= highestBidPrice

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fillBid()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pieceForSale = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lowestAskPrice = _price

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lowestAskAddress = msg.sender

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: lowestAskTime = now

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: newLowestAsk(_price,lowestAskAddress)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.THROW
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ethArtOnlyAfterOneYear()

Edges:
  0 -> 12
  1 -> 2
  1 -> 10
  2 -> 3
  2 -> 4
  3 -> 9
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 11
  12 -> 1

Function: placeBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.value > highestBidPrice || (pieceForSale && msg.value >= lowestAskPrice)

  ID: 2
  Type: NodeType.IF
  Expression: pieceWanted

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: highestBidAddress.transfer(highestBidPrice)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: pieceForSale && msg.value >= lowestAskPrice

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: buyPiece()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pieceWanted = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: highestBidPrice = msg.value

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: highestBidAddress = msg.sender

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: highestBidTime = now

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: newHighestBid(msg.value,highestBidAddress)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.THROW
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 13
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 12
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 14

Function: fillBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: pieceWanted && piecesOwned[msg.sender] >= 1

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _amountOwner = highestBidPrice / 10000 * ownerCommission

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _amountEthart = highestBidPrice / 40

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _amountSeller = highestBidPrice - _amountOwner - _amountEthart

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(_amountOwner)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(_amountSeller)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: registrar.transfer(_amountEthart)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[highestBidAddress] ++

  ID: 13
  Type: NodeType.VARIABLE
  Expression: a = Interface(registrar)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: patronReward = highestBidPrice / 5 * 2

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: a.issuePatrons(highestBidAddress,patronReward)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: piecesOwned[msg.sender] --

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: pieceSold(msg.sender,highestBidAddress,highestBidPrice)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: pieceWanted = false

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: highestBidPrice = 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: highestBidAddress = 0x0

  ID: 21
  Type: NodeType.THROW
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ownerFirst()

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: ethArtOnlyAfterOneYear()

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: notLocked(msg.sender,1)

Edges:
  0 -> 23
  1 -> 2
  1 -> 21
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 22
  23 -> 24
  24 -> 25
  25 -> 1

Function: cancelBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: pieceWanted && now > highestBidTime + 86400

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pieceWanted = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(highestBidPrice)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: highestBidPrice = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: highestBidAddress = 0x0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: newHighestBid(0,0x0)

  ID: 7
  Type: NodeType.THROW
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyBy(highestBidAddress)

Edges:
  0 -> 9
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  9 -> 1

Function: cancelSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: pieceForSale && now > lowestAskTime + 86400

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pieceForSale = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lowestAskPrice = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lowestAskAddress = 0x0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: newLowestAsk(0,0x0)

  ID: 6
  Type: NodeType.THROW
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyBy(lowestAskAddress)

Edges:
  0 -> 8
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  8 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: registrar = 0xaD3e7D2788126250d48598e1DB6A2D3E19B89738

Edges:


