Contract: Address
==================================================

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert AddressInsufficientBalance(address)(address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 7
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! success

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata)

  ID: 3
  Type: NodeType.IF
  Expression: returndata.length == 0 && target.code.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert AddressEmptyCode(address)(target)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: returndata

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert FailedInnerCall()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeCall(token.transfer,(to,value)))

Edges:
  0 -> 1

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data)

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length != 0 && ! abi.decode(returndata,(bool))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert SafeERC20FailedOperation(address)(address(token))

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4


Contract: IRouter
==================================================


Contract: IFactory
==================================================


Contract: IPair
==================================================


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: IERC20Errors
==================================================


Contract: ICommonError
==================================================


Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(msg.sender)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: BigBackBitcoin
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isLimitExempt[msg.sender] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isLimitExempt[projectOwner] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _mint(msg.sender,21_000_000_000 * 10 ** DECIMALS)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pair = IFactory(router.factory()).createPair(address(this),router.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isPairLP[pair] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isLimitExempt[pair] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(msg.sender)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == owner()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotUseCurrentAddress(address)(newOwner)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: newOwner == address(0xdead)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress(address)(newOwner)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: projectOwner = newOwner

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: super.transferOwnership(newOwner)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: wTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: toTransfer = amount

  ID: 2
  Type: NodeType.VARIABLE
  Expression: receiver = SAFU_OWNER

  ID: 3
  Type: NodeType.IF
  Expression: tokenAddress == address(this)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert CannotWithdrawNativeToken()()

  ID: 5
  Type: NodeType.IF
  Expression: tokenAddress == address(0)

  ID: 6
  Type: NodeType.IF
  Expression: amount == 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: toTransfer = address(this).balance

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: msg.sender == receiver

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert ReceiverCannotInitiateTransferEther()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: address(receiver).transfer(toTransfer)

  ID: 13
  Type: NodeType.IF
  Expression: amount == 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: toTransfer = IERC20(tokenAddress).balanceOf(address(this))

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenAddress).safeTransfer(receiver,toTransfer)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 18
  5 -> 6
  5 -> 13
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 17
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tradeEnabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert TradeAlreadyEnabled(bool,uint256)(tradeEnabled,tradeStartTime)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tradeEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isMaxLimitEnabled = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tradeStartTime = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TradeEnabled(msg.sender,block.timestamp)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: circulatingSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalSupply() - balanceOf(address(0xdead)) - balanceOf(address(0))

Edges:
  0 -> 1

Function: setPairLP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isPairLP[lpPair] == newStatus

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotUseCurrentState(bool)(newStatus)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: IPair(lpPair).token0() != address(this) && IPair(lpPair).token1() != address(this)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress(address)(lpPair)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: oldStatus = isPairLP[lpPair]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isPairLP[lpPair] = newStatus

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: SetAddressState(isPairLP,lpPair,oldStatus,newStatus,msg.sender,block.timestamp)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: updateRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newRouter == address(router)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotUseCurrentAddress(address)(newRouter)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldRouter = address(router)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router = IRouter(newRouter)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UpdateRouter(oldRouter,newRouter,msg.sender,block.timestamp)

  ID: 7
  Type: NodeType.IF
  Expression: address(IFactory(router.factory()).getPair(address(this),router.WETH())) == address(0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pair = IFactory(router.factory()).createPair(address(this),router.WETH())

  ID: 9
  Type: NodeType.IF
  Expression: ! isPairLP[pair]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isPairLP[pair] = true

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlySafuOwner()

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 12
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  13 -> 1

Function: updateLimitExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isLimitExempt[user] == newState

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotUseCurrentState(bool)(newState)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldState = isLimitExempt[user]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isLimitExempt[user] = newState

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SetAddressState(isLimitExempt,user,oldState,newState,msg.sender,block.timestamp)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: updateUseMaxLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isMaxLimitEnabled == newState

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert CannotUseCurrentState(bool)(newState)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldState = isMaxLimitEnabled

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isMaxLimitEnabled = newState

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UpdateState(isMaxLimitEnabled,oldState,newState,msg.sender,block.timestamp)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: updateMaxTransactionLimit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: maxTransactionLimit == newLimit || newLimit < MINLIMIT

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidValue(uint256)(newLimit)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: oldLimit = maxTransactionLimit

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: maxTransactionLimit = newLimit

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UpdateValue(maxTransactionLimit,oldLimit,newLimit,msg.sender,block.timestamp)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: triggerZeusBuyback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount > 5000000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidValue(uint256)(5000000000000000000)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalTriggerZeusBuyback += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastTriggerZeusTimestamp = block.timestamp

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: buyTokens(amount,address(0xdead))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == address(0xdead)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAddress(address)(address(0xdead))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = router.WETH()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = address(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: NAME

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SYMBOL

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: DECIMALS

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: provider = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(provider,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[provider][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: provider = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(provider,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: spender = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,spender,value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSender(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: ! tradeEnabled && (! isLimitExempt[from] && ! isLimitExempt[to])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert TradeNotYetEnabled()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: isMaxLimitEnabled && ! isLimitExempt[from] && value > totalSupply() * maxTransactionLimit / DENOMINATOR

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert ExceedLimit()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: (block.timestamp - lastAutoBurnTime) >= autoBurnTriggerTime && balanceOf(address(this)) > 0

  ID: 14
  Type: NodeType.VARIABLE
  Expression: burning = balanceOf(address(this))

  ID: 15
  Type: NodeType.IF
  Expression: burning > totalSupply() * 2_100 / DENOMINATOR

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: burning = totalSupply() * 2_100 / DENOMINATOR

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _update(address(this),address(0xdead),burning)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _update(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 19
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: _update
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: from == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += value

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fromBalance = _balances[from]

  ID: 4
  Type: NodeType.IF
  Expression: fromBalance < value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientBalance(address,uint256,uint256)(from,fromBalance,value)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - value

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: to == address(0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= value

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += value

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: account == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidReceiver(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _update(address(0),account,value)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: provider == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidApprover(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: spender == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InvalidSpender(address)(address(0))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _allowances[provider][spender] = value

  ID: 8
  Type: NodeType.IF
  Expression: emitEvent

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Approval(provider,spender,value)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(provider,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance < type()(uint256).max

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(provider,spender,currentAllowance - value,false)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: provider = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(provider,spender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(provider,spender,currentAllowance + value,true)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: provider = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(provider,spender)

  ID: 3
  Type: NodeType.IF
  Expression: currentAllowance < value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert ERC20InsufficientAllowance(address,uint256,uint256)(spender,currentAllowance,value)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(provider,spender,currentAllowance - value,true)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxTransactionLimit = 500

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradeStartTime = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastAutoBurnTime = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoBurnTriggerTime = 126230400

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalTriggerZeusBuyback = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastTriggerZeusTimestamp = 0

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: projectOwner = 0xD2cb8AD52b28D85Dd8B2a5e2167Fd53be779B589

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradeEnabled = false

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isMaxLimitEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NAME = Big Back Bitcoin

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SYMBOL = BBBTC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DECIMALS = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DENOMINATOR = 100_000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MINLIMIT = 500

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SAFU_OWNER = 0x516a55FA43339b8e85C1F32C4709E06E93755AFE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


