Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1


Contract: ERC20Basic
==================================================


Contract: ERC20
==================================================


Contract: BasicToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 2
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 8
  Type: NodeType.IF
  Expression: fee > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,owner,fee)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,sendAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: basisPointsRate = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumFee = 0

Edges:
  0 -> 1


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 2
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 8
  Type: NodeType.IF
  Expression: fee > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,owner,fee)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,sendAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 3
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: _allowance < MAX_UINT

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 12
  Type: NodeType.IF
  Expression: fee > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,owner,fee)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,sendAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(3 * 32)

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! ((_value != 0) && (allowed[msg.sender][_spender] != 0)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: basisPointsRate = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumFee = 0

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_UINT = 2 ** 256 - 1

Edges:


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: BlackList
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 2
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 8
  Type: NodeType.IF
  Expression: fee > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,owner,fee)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,sendAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: getBlackListStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: isBlackListed[_maker]

Edges:
  0 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: addBlackList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlackListed[_evilUser] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AddedBlackList(_evilUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeBlackList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlackListed[_clearedUser] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RemovedBlackList(_clearedUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: destroyBlackFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isBlackListed[_blackListedUser])

  ID: 2
  Type: NodeType.VARIABLE
  Expression: dirtyFunds = balanceOf(_blackListedUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_blackListedUser] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= dirtyFunds

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DestroyedBlackFunds(_blackListedUser,dirtyFunds)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: basisPointsRate = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumFee = 0

Edges:
  0 -> 1


Contract: UpgradedStandardToken
==================================================

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 3
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: _allowance < MAX_UINT

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 12
  Type: NodeType.IF
  Expression: fee > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,owner,fee)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,sendAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(3 * 32)

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! ((_value != 0) && (allowed[msg.sender][_spender] != 0)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fee = (_value.mul(basisPointsRate)).div(10000)

  ID: 2
  Type: NodeType.IF
  Expression: fee > maximumFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fee = maximumFee

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sendAmount = _value.sub(fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(sendAmount)

  ID: 8
  Type: NodeType.IF
  Expression: fee > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = balances[owner].add(fee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,owner,fee)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,sendAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: basisPointsRate = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumFee = 0

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_UINT = 2 ** 256 - 1

Edges:


Contract: TetherUSDToken
==================================================

Function: getBlackListStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: isBlackListed[_maker]

Edges:
  0 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: addBlackList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlackListed[_evilUser] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AddedBlackList(_evilUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeBlackList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlackListed[_clearedUser] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RemovedBlackList(_clearedUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: destroyBlackFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isBlackListed[_blackListedUser])

  ID: 2
  Type: NodeType.VARIABLE
  Expression: dirtyFunds = balanceOf(_blackListedUser)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_blackListedUser] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= dirtyFunds

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DestroyedBlackFunds(_blackListedUser,dirtyFunds)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isBlackListed[msg.sender])

  ID: 2
  Type: NodeType.IF
  Expression: deprecated

  ID: 3
  Type: NodeType.RETURN
  Expression: UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  6 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: deprecated

  ID: 2
  Type: NodeType.RETURN
  Expression: UpgradedStandardToken(upgradedAddress).balanceOf(who)

  ID: 3
  Type: NodeType.RETURN
  Expression: super.balanceOf(who)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isBlackListed[_from])

  ID: 2
  Type: NodeType.IF
  Expression: deprecated

  ID: 3
  Type: NodeType.RETURN
  Expression: UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender,_from,_to,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: deprecated

  ID: 2
  Type: NodeType.RETURN
  Expression: UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: super.approve(_spender,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  5 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: deprecated

  ID: 2
  Type: NodeType.RETURN
  Expression: StandardToken(upgradedAddress).allowance(_owner,_spender)

  ID: 3
  Type: NodeType.RETURN
  Expression: super.allowance(_owner,_spender)

  ID: 5
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: TetherUSDToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _initialSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: name = _name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: symbol = _symbol

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: decimals = _decimals

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[owner] = _initialSupply

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: deprecated = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: deprecate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deprecated = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: upgradedAddress = _upgradedAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Deprecate(_upgradedAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: deprecated

  ID: 2
  Type: NodeType.RETURN
  Expression: StandardToken(upgradedAddress).totalSupply()

  ID: 3
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: issue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_totalSupply + amount > _totalSupply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances[owner] + amount > balances[owner])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[owner] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _totalSupply += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Issue(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_totalSupply >= amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances[owner] >= amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _totalSupply -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[owner] -= amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Redeem(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setParams
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newBasisPoints < 20)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newMaxFee < 50)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: basisPointsRate = newBasisPoints

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: maximumFee = newMaxFee.mul(10 ** decimals)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Params(basisPointsRate,maximumFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: basisPointsRate = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maximumFee = 0

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_UINT = 2 ** 256 - 1

Edges:


