Contract: SimplifiedKishu
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rOwned[msg.sender] = _rTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenFromReflection(_rOwned[account])

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_allowances[sender][msg.sender] >= amount,Allowance exceeded)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0) && recipient != address(0),Invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(sender) >= amount,Insufficient balance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rAmount = amount * currentRate

  ID: 5
  Type: NodeType.VARIABLE
  Expression: rFee = (rAmount * reflectionFee) / 1000

  ID: 6
  Type: NodeType.VARIABLE
  Expression: rTransferAmount = rAmount - rFee

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] -= rAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] += rTransferAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,amount * reflectionFee / 1000)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount - (amount * reflectionFee / 1000))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _reflectFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rTotal -= rFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tFeeTotal += tFee

Edges:
  0 -> 1
  1 -> 2

Function: tokenFromReflection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rAmount <= _rTotal,Amount must be less than total reflections)

  ID: 2
  Type: NodeType.RETURN
  Expression: rAmount / _getRate()

Edges:
  0 -> 1
  1 -> 2

Function: _getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _rTotal / totalSupply

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Kishu Coin

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = Kishu

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSupply = 1000000000 * 10 ** decimals

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _rTotal = (type()(uint256).max - (type()(uint256).max % totalSupply))

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: reflectionFee = 5

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


