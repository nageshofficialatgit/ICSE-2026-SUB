Contract: HouseOwned
==================================================

Function: HouseOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: house = msg.sender

Edges:
  0 -> 1


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ERC20Interface
==================================================


Contract: Token
==================================================

Function: HouseOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: house = msg.sender

Edges:
  0 -> 1

Function: Token
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = JACK Token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = JACK

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: supply = 1000000

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: HouseOwned()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setJackpot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(jackpot) == 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_jackpot != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: jackpot = Jackpot(_jackpot)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: bountyPortion = supply / 40

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[house] = bountyPortion

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[jackpot] = supply - bountyPortion

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: croupier = jackpot.croupier()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyHouse()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: returnDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(depositOf[_to] > 0 || _extra > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amount = depositOf[_to]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: depositOf[_to] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalDeposit = totalDeposit.sub(amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(croupier,_to,amount.add(_extra))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Deposit(_to,amount,1,0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCroupier()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: supply

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(jackpot) != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(croupier != 0x0)

  ID: 3
  Type: NodeType.IF
  Expression: _to == address(jackpot)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _burnFromAccount(msg.sender,1)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: jackpot.betToken(msg.sender)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: _to == croupier && msg.sender != house

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: depositOf[msg.sender] += _value

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalDeposit = totalDeposit.add(_value)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Deposit(msg.sender,_value,0,depositOf[msg.sender])

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: _transfer(msg.sender,_to,_value)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyPayloadSize(2 * 32)

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= balances[_from])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value <= allowed[_from][msg.sender])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: freezeDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(depositOf[_user] > 0 || _extra > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: deposit = depositOf[_user]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: depositOf[_user] = depositOf[_user].sub(deposit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalDeposit = totalDeposit.sub(deposit)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: depositWithExtra = deposit.add(_extra)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: frozenPool = frozenPool.add(depositWithExtra)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: DepositFrozen(_user,depositWithExtra)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyCroupier()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: unfreezeDeposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(frozenPool >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: depositOf[_user] = depositOf[_user].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalDeposit = totalDeposit.add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: frozenPool = frozenPool.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DepositUnfrozen(_user,depositOf[_user])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCroupier()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: transferFromCroupier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(frozenPool >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: frozenPool = frozenPool.sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(croupier,_to,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyJackpot()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _burnFromAccount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances[_sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_sender] = balances[_sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: supply = supply.sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Burn(_sender,_value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 0

Edges:


Contract: Jackpot
==================================================

Function: HouseOwned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: house = msg.sender

Edges:
  0 -> 1

Function: Jackpot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_croupier != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: croupier = _croupier

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: lastBetUser = _croupier

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: HouseOwned()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(token) == 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_token != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token = Token(_token)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyHouse()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(croupier != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(token) != 0x0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stage != Stages.Aborted)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: stage == Stages.InitialOffer

  ID: 6
  Type: NodeType.VARIABLE
  Expression: started = checkGameStart()

  ID: 7
  Type: NodeType.IF
  Expression: started

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 9
  Type: NodeType.RETURN
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= currentIcoTokenPrice)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: tokens = _icoTokensForEther(msg.value)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: EtherIco(msg.sender,msg.value,tokens)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: investmentOf[msg.sender] = investmentOf[msg.sender].add(msg.value.sub(msg.value / 5))

  ID: 15
  Type: NodeType.IF
  Expression: icoEndTime == 0 && this.balance >= gameStartJackpotThreshold

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: icoEndTime = now + icoTerminationTimeout

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: tokens > 0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,tokens)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: house.transfer(msg.value / 5)

  ID: 22
  Type: NodeType.IF
  Expression: stage == Stages.GameOn

  ID: 23
  Type: NodeType.VARIABLE
  Expression: terminated = checkTermination()

  ID: 24
  Type: NodeType.IF
  Expression: terminated

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value)

  ID: 26
  Type: NodeType.RETURN
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= currentBetAmount)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: tokens = _betTokensForEther(msg.value)

  ID: 30
  Type: NodeType.VARIABLE
  Expression: sellingFromJackpot = 0

  ID: 31
  Type: NodeType.VARIABLE
  Expression: sellingFromCroupier = 0

  ID: 32
  Type: NodeType.IF
  Expression: tokens > 0

  ID: 33
  Type: NodeType.VARIABLE
  Expression: croupierPool = token.frozenPool()

  ID: 34
  Type: NodeType.VARIABLE
  Expression: jackpotPool = token.balanceOf(this)

  ID: 35
  Type: NodeType.IF
  Expression: croupierPool == 0

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: sellingFromJackpot = tokens

  ID: 37
  Type: NodeType.IF
  Expression: sellingFromJackpot > jackpotPool

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: sellingFromJackpot = jackpotPool

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.IF
  Expression: jackpotPool == 0 || tokens <= croupierPool

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: sellingFromCroupier = tokens

  ID: 42
  Type: NodeType.IF
  Expression: sellingFromCroupier > croupierPool

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: sellingFromCroupier = croupierPool

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: sellingFromCroupier = croupierPool

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: sellingFromJackpot = tokens.sub(sellingFromCroupier)

  ID: 47
  Type: NodeType.IF
  Expression: sellingFromJackpot > jackpotPool

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: sellingFromJackpot = jackpotPool

  ID: 49
  Type: NodeType.ENDIF
  Expression: 

  ID: 50
  Type: NodeType.ENDIF
  Expression: 

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.ENDIF
  Expression: 

  ID: 53
  Type: NodeType.VARIABLE
  Expression: tokenValue = msg.value.sub(currentBetAmount)

  ID: 54
  Type: NodeType.VARIABLE
  Expression: croupierSaleRevenue = 0

  ID: 55
  Type: NodeType.IF
  Expression: sellingFromCroupier > 0

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: croupierSaleRevenue = tokenValue.div(sellingFromJackpot.add(sellingFromCroupier)).mul(sellingFromCroupier)

  ID: 57
  Type: NodeType.ENDIF
  Expression: 

  ID: 58
  Type: NodeType.VARIABLE
  Expression: jackpotSaleRevenue = tokenValue.sub(croupierSaleRevenue)

  ID: 59
  Type: NodeType.VARIABLE
  Expression: dividends = (currentBetAmount.div(4)).add(jackpotSaleRevenue.div(2))

  ID: 60
  Type: NodeType.EXPRESSION
  Expression: pendingEtherForCroupier = pendingEtherForCroupier.add(dividends.add(croupierSaleRevenue))

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: EtherBet(msg.sender,msg.value,dividends)

  ID: 62
  Type: NodeType.EXPRESSION
  Expression: lastBetUser = msg.sender

  ID: 63
  Type: NodeType.EXPRESSION
  Expression: terminationTime = now + _terminationDuration()

  ID: 64
  Type: NodeType.IF
  Expression: croupierSaleRevenue > 0

  ID: 65
  Type: NodeType.EXPRESSION
  Expression: SoldTokensFromCroupier(msg.sender,croupierSaleRevenue,sellingFromCroupier)

  ID: 66
  Type: NodeType.ENDIF
  Expression: 

  ID: 67
  Type: NodeType.EXPRESSION
  Expression: _checkMinorPrizes(msg.sender,currentBetAmount)

  ID: 68
  Type: NodeType.EXPRESSION
  Expression: _updateBetAmount()

  ID: 69
  Type: NodeType.IF
  Expression: sellingFromJackpot > 0

  ID: 70
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,sellingFromJackpot)

  ID: 71
  Type: NodeType.ENDIF
  Expression: 

  ID: 72
  Type: NodeType.IF
  Expression: sellingFromCroupier > 0

  ID: 73
  Type: NodeType.EXPRESSION
  Expression: token.transferFromCroupier(msg.sender,sellingFromCroupier)

  ID: 74
  Type: NodeType.ENDIF
  Expression: 

  ID: 75
  Type: NodeType.IF
  Expression: stage == Stages.GameOver

  ID: 76
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == winner || msg.sender == house)

  ID: 77
  Type: NodeType.IF
  Expression: msg.sender == winner

  ID: 78
  Type: NodeType.EXPRESSION
  Expression: require(bool)(pendingJackpotForWinner > 0)

  ID: 79
  Type: NodeType.VARIABLE
  Expression: winnersPay = pendingJackpotForWinner

  ID: 80
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForWinner = 0

  ID: 81
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(winnersPay)

  ID: 82
  Type: NodeType.IF
  Expression: msg.sender == house

  ID: 83
  Type: NodeType.EXPRESSION
  Expression: require(bool)(pendingJackpotForHouse > 0)

  ID: 84
  Type: NodeType.VARIABLE
  Expression: housePay = pendingJackpotForHouse

  ID: 85
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForHouse = 0

  ID: 86
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(housePay)

  ID: 87
  Type: NodeType.ENDIF
  Expression: 

  ID: 88
  Type: NodeType.ENDIF
  Expression: 

  ID: 89
  Type: NodeType.ENDIF
  Expression: 

  ID: 90
  Type: NodeType.ENDIF
  Expression: 

  ID: 91
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 22
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 91
  22 -> 23
  22 -> 75
  23 -> 24
  24 -> 25
  24 -> 27
  25 -> 26
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 52
  33 -> 34
  34 -> 35
  35 -> 36
  35 -> 40
  36 -> 37
  37 -> 38
  37 -> 39
  38 -> 39
  39 -> 51
  40 -> 41
  40 -> 45
  41 -> 42
  42 -> 43
  42 -> 44
  43 -> 44
  44 -> 50
  45 -> 46
  46 -> 47
  47 -> 48
  47 -> 49
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  53 -> 54
  54 -> 55
  55 -> 56
  55 -> 57
  56 -> 57
  57 -> 58
  58 -> 59
  59 -> 60
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 64
  64 -> 65
  64 -> 66
  65 -> 66
  66 -> 67
  67 -> 68
  68 -> 69
  69 -> 70
  69 -> 71
  70 -> 71
  71 -> 72
  72 -> 73
  72 -> 74
  73 -> 74
  74 -> 90
  75 -> 76
  75 -> 89
  76 -> 77
  77 -> 78
  77 -> 82
  78 -> 79
  79 -> 80
  80 -> 81
  81 -> 88
  82 -> 83
  82 -> 87
  83 -> 84
  84 -> 85
  85 -> 86
  86 -> 87
  87 -> 88
  88 -> 89
  89 -> 90
  90 -> 91

Function: payOutJackpot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(winner != 0x0)

  ID: 2
  Type: NodeType.IF
  Expression: pendingJackpotForHouse > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: housePay = pendingJackpotForHouse

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForHouse = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: house.transfer(housePay)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: pendingJackpotForWinner > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: winnersPay = pendingJackpotForWinner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForWinner = 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: winner.transfer(winnersPay)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyCroupier()

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: shouldBeTerminated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: stage == Stages.GameOn && terminationTime != 0 && now > terminationTime

  ID: 2
  Type: NodeType.RETURN
  Expression: should

Edges:
  0 -> 1

Function: checkTermination
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shouldBeTerminated()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stage = Stages.GameOver

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: winner = lastBetUser

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _flushEtherToCroupier()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: JackpotWon(winner,this.balance)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: jackpot = this.balance

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForHouse = jackpot.div(5)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pendingJackpotForWinner = jackpot.sub(pendingJackpotForHouse)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: false

  ID: 12
  Type: NodeType.RETURN
  Expression: terminated

Edges:
  0 -> 1
  1 -> 2
  1 -> 10
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 11

Function: shouldBeStarted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: stage == Stages.InitialOffer && icoEndTime != 0 && now > icoEndTime

  ID: 2
  Type: NodeType.RETURN
  Expression: should

Edges:
  0 -> 1

Function: checkGameStart
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: shouldBeStarted()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stage = Stages.GameOn

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.RETURN
  Expression: started

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  4 -> 5

Function: betToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stage == Stages.GameOn)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: terminated = checkTermination()

  ID: 3
  Type: NodeType.IF
  Expression: terminated

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokenBet(_user)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: lastBetUser = _user

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: terminationTime = now + _terminationDuration()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _checkMinorPrizes(_user,0)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyToken()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: abort
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stage == Stages.InitialOffer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stage = Stages.Aborted

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: abortTime = now

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyHouse()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stage == Stages.Aborted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(investmentOf[msg.sender] > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: payment = investmentOf[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: investmentOf[msg.sender] = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(payment)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: killAborted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(stage == Stages.Aborted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > abortTime + 5184000)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(house)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyHouse()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _terminationDuration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (5 + 19200 / (100 + totalBets)) * 60

  ID: 2
  Type: NodeType.RETURN
  Expression: duration

Edges:
  0 -> 1

Function: _updateIcoPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newIcoTokenPrice = currentIcoTokenPrice

  ID: 2
  Type: NodeType.IF
  Expression: icoSoldTokens < 10000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: newIcoTokenPrice = 4000000000000000

  ID: 4
  Type: NodeType.IF
  Expression: icoSoldTokens < 20000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: newIcoTokenPrice = 5000000000000000

  ID: 6
  Type: NodeType.IF
  Expression: icoSoldTokens < 30000

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: newIcoTokenPrice = 5300000000000000

  ID: 8
  Type: NodeType.IF
  Expression: icoSoldTokens < 40000

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: newIcoTokenPrice = 5700000000000000

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: newIcoTokenPrice = 6000000000000000

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: newIcoTokenPrice != currentIcoTokenPrice

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: currentIcoTokenPrice = newIcoTokenPrice

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 14
  4 -> 5
  4 -> 6
  5 -> 13
  6 -> 7
  6 -> 8
  7 -> 12
  8 -> 9
  8 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17

Function: _updateBetAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newBetAmount = 10000000000000000 + (totalBets / 100) * 6000000000000000

  ID: 2
  Type: NodeType.IF
  Expression: newBetAmount != currentBetAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: currentBetAmount = newBetAmount

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: _betTokensForEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokens = (value / currentBetAmount) - 1

  ID: 2
  Type: NodeType.IF
  Expression: tokens >= 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 4

  ID: 4
  Type: NodeType.IF
  Expression: tokens >= 300

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 5

  ID: 6
  Type: NodeType.IF
  Expression: tokens >= 100

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 7

  ID: 8
  Type: NodeType.IF
  Expression: tokens >= 50

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 10

  ID: 10
  Type: NodeType.IF
  Expression: tokens >= 20

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 20

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 16
  4 -> 5
  4 -> 6
  5 -> 15
  6 -> 7
  6 -> 8
  7 -> 14
  8 -> 9
  8 -> 10
  9 -> 13
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: _icoTokensForEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokens = value / currentIcoTokenPrice

  ID: 2
  Type: NodeType.IF
  Expression: tokens >= 10000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 4

  ID: 4
  Type: NodeType.IF
  Expression: tokens >= 5000

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 5

  ID: 6
  Type: NodeType.IF
  Expression: tokens >= 1000

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 7

  ID: 8
  Type: NodeType.IF
  Expression: tokens >= 500

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 10

  ID: 10
  Type: NodeType.IF
  Expression: tokens >= 200

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = tokens + tokens / 20

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: tokens > token.balanceOf(this)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: tokens = token.balanceOf(this)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: icoSoldTokens += uint32(tokens)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _updateIcoPrice()

  ID: 22
  Type: NodeType.RETURN
  Expression: tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 16
  4 -> 5
  4 -> 6
  5 -> 15
  6 -> 7
  6 -> 8
  7 -> 14
  8 -> 9
  8 -> 10
  9 -> 13
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22

Function: _flushEtherToCroupier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: pendingEtherForCroupier > 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: willTransfer = pendingEtherForCroupier

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingEtherForCroupier = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: croupier.transfer(willTransfer)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 5

Function: _checkMinorPrizes
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalBets ++

  ID: 2
  Type: NodeType.IF
  Expression: value > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: etherSince20 = etherSince20.add(value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: etherSince50 = etherSince50.add(value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: etherSince100 = etherSince100.add(value)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: (totalBets + 30) % 100 == 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: etherPayout = (etherSince100 - 1) / 10

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: etherSince100 = 1

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: MinorPrizePayout(user,etherPayout,3)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: user.transfer(etherPayout)

  ID: 13
  Type: NodeType.RETURN
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: (totalBets + 5) % 50 == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: etherPayout = (etherSince50 - 1) / 10

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: etherSince50 = 1

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: MinorPrizePayout(user,etherPayout,2)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: user.transfer(etherPayout)

  ID: 20
  Type: NodeType.RETURN
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: totalBets % 20 == 0

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: etherPayout = (etherSince20 - 1) / 10

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: etherSince20 = 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _flushEtherToCroupier()

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: MinorPrizePayout(user,etherPayout,1)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: user.transfer(etherPayout)

  ID: 28
  Type: NodeType.RETURN
  Expression: 

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.RETURN
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  15 -> 16
  15 -> 21
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  21 -> 22
  22 -> 23
  22 -> 29
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  29 -> 30

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalBets = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: etherSince20 = 1

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: etherSince50 = 1

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: etherSince100 = 1

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: pendingEtherForCroupier = 0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: stage = Stages.InitialOffer

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: currentIcoTokenPrice = initialIcoTokenPrice

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: currentBetAmount = initialBetAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: initialIcoTokenPrice = 4000000000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: initialBetAmount = 10000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: gameStartJackpotThreshold = 333000000000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: icoTerminationTimeout = 172800

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


