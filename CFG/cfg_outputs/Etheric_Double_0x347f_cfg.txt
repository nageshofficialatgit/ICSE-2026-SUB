Contract: Etheric_Double
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = 1000000 * 10 ** uint256(decimals)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] = totalSupply

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(_addr)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[msg.sender] >= _value,Insufficient balance)

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isContract(_to),Only the owner can send tokens to contracts)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] -= _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _value

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[_from] >= _value,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance[_from][msg.sender] >= _value,Allowance exceeded)

  ID: 3
  Type: NodeType.IF
  Expression: _from != owner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isContract(_to),Only the owner can send tokens to contracts)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_from] -= _value

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balanceOf[_to] += _value

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: allowance[_from][msg.sender] -= _value

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 10
  Type: NodeType.RETURN
  Expression: true

  ID: 11
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] += _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[owner] >= _amount,Insufficient balance to burn)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] -= _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(owner,address(0),_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner cannot be the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Etheric Double

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = E2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2


