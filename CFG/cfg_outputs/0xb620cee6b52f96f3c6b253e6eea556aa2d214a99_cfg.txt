Contract: DrainMe
==================================================

Function: DranMe
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: getLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: seed.length

Edges:
  0 -> 1

Function: setSecret
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: secret = _secret

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getPlayerCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: players.length

Edges:
  0 -> 1

Function: getPrize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: becomePlayer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= 20000000000000000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: players.push(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approvedPlayers[msg.sender] = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: manipulateSecret
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= 10000000000000000)

  ID: 2
  Type: NodeType.IF
  Expression: msg.sender != owner || unlockSecret()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amount = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  6 -> 1

Function: unlockSecret
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: hash = keccak256()(blockhash(uint256)(block.number - 1))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: secret = uint256(hash)

  ID: 3
  Type: NodeType.IF
  Expression: secret % 5 == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: winner = msg.sender

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5

Function: callFirstTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= 5000000000000000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: firstTarget.call.value(msg.value)()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: callSecondTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= 5000000000000000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondTarget.call.value(msg.value)()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setSeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: seed[_index] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 2
  2 -> 1

Function: addSeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: seed.length = _add

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 2
  2 -> 1

Function: guessSeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_seed / (seed[0] * seed[1]))

  ID: 2
  Type: NodeType.IF
  Expression: (_seed / (seed[0] * seed[1])) == secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = winner

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 5
  2 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: checkSecret
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= 10000000000000000)

  ID: 2
  Type: NodeType.IF
  Expression: msg.value == secret

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyPlayers()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  2 -> 4
  5 -> 1

Function: winPrize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner.call.value(1)()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: claimPrize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: winner.transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyWinner()

Edges:
  0 -> 2
  2 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: winner = 0x0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: seed = (951828771,158769871220)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


