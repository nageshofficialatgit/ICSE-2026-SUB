Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: TheFedererToeknPresale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token = IERC20(_token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenMetadata = IERC20Metadata(_token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: paymentAddress = _payment

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_priceFeed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: startTime = block.timestamp

  ID: 6
  Type: NodeType.VARIABLE
  Expression: fourteenDays = 14 * 24 * 60 * 60

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stages[1] = Stage(1,20,1000000000000,startTime,startTime + fourteenDays)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: stages[2] = Stage(2,15,2000000000000,startTime + fourteenDays,startTime + (2 * fourteenDays))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: stages[3] = Stage(3,10,3000000000000,startTime + (2 * fourteenDays),startTime + (3 * fourteenDays))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: stages[4] = Stage(4,5,4000000000000,startTime + (3 * fourteenDays),startTime + (4 * fourteenDays))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: currentStageId = 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: getEthToUsdPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: convertEthToUsd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsdPrice = getEthToUsdPrice()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: usdAmount = (ethAmount * uint256(ethToUsdPrice)) / (10 ** priceFeed.decimals())

  ID: 3
  Type: NodeType.RETURN
  Expression: usdAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: checkPresaleStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: presaleActive && (block.timestamp > stages[maxStage].end || (totalSold >= presaleTokenAmount))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: presaleActive = false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: checkPresaleStatus()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleActive,Presale is not active!)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount >= 0,Please enter minimum token!)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: _id = getCurrentStageIdActive()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id > 0,Stage info not available!)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _bonus = stages[_id].bonus

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _price = stages[_id].price

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _start = stages[_id].start

  ID: 9
  Type: NodeType.VARIABLE
  Expression: _end = stages[_id].end

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_start <= block.timestamp,Presale has not started yet!)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_end >= block.timestamp,Presale end!)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: _totalPayUsd = _amount * _price

  ID: 13
  Type: NodeType.VARIABLE
  Expression: _ethToUsd = convertEthToUsd(1e18)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: _totalPayAmount = _totalPayUsd / _ethToUsd

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= _totalPayAmount,Not enough payment!)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: _weiAmount = _amount * 1e18

  ID: 17
  Type: NodeType.VARIABLE
  Expression: _bonusAmount = (_amount * _bonus) / 100

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _bonusAmount *= 1e18

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _totalAmount = _weiAmount + _bonusAmount

  ID: 20
  Type: NodeType.VARIABLE
  Expression: _tokenDecimals = tokenMetadata.decimals()

  ID: 21
  Type: NodeType.VARIABLE
  Expression: _subDecimals = 18 - _tokenDecimals

  ID: 22
  Type: NodeType.VARIABLE
  Expression: _totalTokenAmount = _totalAmount / (10 ** _subDecimals)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_totalTokenAmount <= token.balanceOf(address(this)),Presale contract doesn't have enough token!)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((totalSold + _totalTokenAmount) <= presaleTokenAmount,Presale token amount exceeds!)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(paymentAddress).send(msg.value),Failed to transfer ETH payment!)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: pendingTokens[msg.sender] += _totalTokenAmount

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: totalSold += _totalTokenAmount

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: TokensPurchased(msg.sender,_weiAmount,_bonusAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28

Function: setToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_token != address(0),Token is zero address!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token = IERC20(_token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenMetadata = IERC20Metadata(_token)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setPriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_priceFeed != address(0),Token is zero address!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(_priceFeed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setPaymentAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paymentAddress = _paymentAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPresaleTokenAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleTokenAmount = _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: flipPresaleActive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleActive = ! presaleActive

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxStage = _maxStage

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setTotalSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSold = _totalSold

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: addStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _id = currentStageId + 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_id <= maxStage,Maximum stage excceds!)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_bonus <= 100,Bonus should be between 0 and 100)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_start > 0 && _end > 0,Invalid date!)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_start < _end,End date smaller than start!)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: currentStageId += 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: stages[_id] = Stage(_id,_bonus,_price,_start,_end)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: setStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(stages[_id].id == _id,ID doesn't exist!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_bonus <= 100,Bonus should be between 0 and 100)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_start > 0 && _end > 0,Invalid date!)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_start < _end,End date smaller than start!)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stages[_id] = Stage(_id,_bonus,_price,_start,_end)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: getCurrentStageIdActive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _id = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i <= maxStage

  ID: 6
  Type: NodeType.IF
  Expression: (block.timestamp >= stages[i].start) && (block.timestamp < stages[i].end)

  ID: 7
  Type: NodeType.RETURN
  Expression: i

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: _id

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  8 -> 9
  9 -> 5

Function: withdrawFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(msg.sender).send(address(this).balance),Failed withdraw!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _tokenBalance = token.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokenBalance >= _amount,Exceeds token balance!)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = token.transfer(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Failed to transfer token!)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: getRemainingTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: presaleTokenAmount - totalSold

Edges:
  0 -> 1

Function: getTotalSoldTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalSold / 10 ** 18

Edges:
  0 -> 1

Function: resetTotalSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSold = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: syncTotalSold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: contractBalance = token.balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSold = presaleTokenAmount - contractBalance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getContractBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: token.balanceOf(address(this)) / 10 ** 18

Edges:
  0 -> 1

Function: getPresaleAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: presaleTokenAmount / 10 ** 18

Edges:
  0 -> 1

Function: getStageInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: stage = stages[_stageId]

  ID: 2
  Type: NodeType.RETURN
  Expression: (stage.id,stage.bonus,stage.price,stage.start,stage.end,(block.timestamp >= stage.start && block.timestamp <= stage.end))

  ID: 3
  Type: NodeType.RETURN
  Expression: (id,bonus,price,start,end,isCurrentlyActive)

Edges:
  0 -> 1
  1 -> 2

Function: updateCurrentStageId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i <= maxStage

  ID: 5
  Type: NodeType.IF
  Expression: (block.timestamp >= stages[i].start) && (block.timestamp <= stages[i].end)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: currentStageId = i

  ID: 7
  Type: NodeType.BREAK
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 2
  8 -> 9
  9 -> 4
  10 -> 3

Function: getStageTimings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (block.timestamp,stages[1].start,stages[1].end,stages[2].start,stages[2].end)

  ID: 2
  Type: NodeType.RETURN
  Expression: (currentTime,stage1Start,stage1End,stage2Start,stage2End)

Edges:
  0 -> 1

Function: enableClaiming
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimingEnabled = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ClaimingEnabled()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(claimingEnabled,Claiming not enabled yet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pendingTokens[msg.sender] > 0,No tokens to claim)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amount = pendingTokens[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pendingTokens[msg.sender] = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token.transfer(msg.sender,amount),Failed to transfer tokens)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokensClaimed(msg.sender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getPendingTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pendingTokens[user]

Edges:
  0 -> 1

Function: setClaimingEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimingEnabled = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: presaleTokenAmount = 100000000000000000000000000000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: presaleActive = true

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimingEnabled = false

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSold = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxStage = 4

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: currentStageId = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


