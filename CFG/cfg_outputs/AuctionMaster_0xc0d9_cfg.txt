Contract: Abstract_ENS
==================================================


Contract: ABS_TokenProxy
==================================================


Contract: Abstract_Resolver
==================================================


Contract: ABS_ReverseRegistrar
==================================================


Contract: ABS_Resolver
==================================================


Contract: AbstractGWMBaseReg
==================================================


Contract: AbstractETHRegCntrl
==================================================


Contract: AbsIntentions
==================================================


Contract: ABS_GWP
==================================================


Contract: NmWrapper
==================================================


Contract: ABS_GWF
==================================================


Contract: ABS_Reg
==================================================


Contract: IntDeedProxy
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: masterCopy = _masterCopy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: creationDate = uint64(block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lhash = _lhash

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DeedCreated(address(this))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: master_fallback_asm_0 = sload(uint256)(0) & 0xffffffffffffffffffffffffffffffffffffffff

  ID: 4
  Type: NodeType.IF
  Expression: calldataload(uint256)(0) == 0xa619486e00000000000000000000000000000000000000000000000000000000

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0,master_fallback_asm_0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: return(uint256,uint256)(0,0x20)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptr_fallback_asm_0 = mload(uint256)(0x40)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: success_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),master_fallback_asm_0,ptr_fallback_asm_0,calldatasize()(),0,0)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())

  ID: 14
  Type: NodeType.IF
  Expression: success_fallback_asm_0 == 0

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0x204)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: return(uint256,uint256)(0,returndatasize()())

  ID: 18
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  4 -> 5
  5 -> 8
  6 -> 7
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  14 -> 15
  15 -> 17
  16 -> 15
  17 -> 18


Contract: ABS_IntDeedMaster
==================================================


Contract: intDeedMaster
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: masterCopy = _masterCopy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = tx.origin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: theRegistrar = ABS_Reg(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: creationDate = uint64(block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getMasterCopy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: masterCopy

Edges:
  0 -> 1

Function: registrar
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ABS_IntDeedMaster(masterCopy).theRegistrar()

Edges:
  0 -> 1

Function: adjustBal_1k3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance < newValue

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar()) && address(address(uint160(owner))).send(address(this).balance - newValue),G)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: closeDeed_igk
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: l_rcv = owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0x0),H)

  ID: 3
  Type: NodeType.IF
  Expression: uint160(receiver) > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: l_rcv = receiver

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar()) && l_rcv != address(0x0) && address(l_rcv).send(address(this).balance),I)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6


Contract: extDeedMaster
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: masterCopy = _masterCopy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = tx.origin

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrar = ABS_Reg(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: creationDate = uint64(block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getMasterCopy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: masterCopy

Edges:
  0 -> 1

Function: adjustBal_1k3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: address(this).balance <= newValue

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(this).balance > 0 && address(address(uint160(owner))).send(address(this).balance - newValue),A)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: closeDeed_igk
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (receiver != address(0x0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(address(receiver)).send(address(this).balance),B)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == address(registrar) && address(address(owner)).send(address(this).balance),B)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: lstate = registrar.state_pln(lhash)

  ID: 2
  Type: NodeType.IF
  Expression: lstate == 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lhash != 0x0 && msg.value > 0 && address(this).balance == msg.value,C)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: registrar.saveExtDeedCntr_gm9(msg.sender,lhash,msg.value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: NewBid(msg.sender)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lhash != 0x0 && msg.value == 0 && owner == msg.sender,D)

  ID: 8
  Type: NodeType.IF
  Expression: lstate == 4

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: registrar.unsealExternalBid_qfG(lhash)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: RevealBid(msg.sender)

  ID: 11
  Type: NodeType.IF
  Expression: lstate == 2

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: registrar.finalizeExternalAuction_WmS(lhash)

  ID: 13
  Type: NodeType.IF
  Expression: lstate == 6

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: registrar.cancelExternalBid_9ig(keccak256(bytes)(abi.encode(lhash,owner,address(this).balance,kkk)),lhash)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: CancelBid(msg.sender)

  ID: 16
  Type: NodeType.IF
  Expression: lstate == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(owner).send(address(this).balance),E)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: CancelBid(msg.sender)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(false,F)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 24
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 23
  11 -> 12
  11 -> 13
  12 -> 22
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 21
  16 -> 17
  16 -> 19
  17 -> 18
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24


Contract: BiddingProxy
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: masterCopy = _masterCopy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrar = ABS_Reg(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: creationDate = uint64(block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: lhash = _lhash

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DeedCreated(address(this),_lhash)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr_fallback_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: success_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),sload(uint256)(0) & 0xffffffffffffffffffffffffffffffffffffffff,ptr_fallback_asm_0,calldatasize()(),0,0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())

  ID: 8
  Type: NodeType.IF
  Expression: success_fallback_asm_0 == 0

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0x204)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: return(uint256,uint256)(0,returndatasize()())

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 10
  8 -> 9
  9 -> 11
  10 -> 9
  11 -> 12


Contract: ABS_ExtDeed
==================================================


Contract: AuctionMaster
==================================================

Function: __calledByUngravelGWP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(sender),J)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: hsh = getdHash(ABS_GWP(sender))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(hsh != 0x0,K)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: gwfc = ABS_GWP(sender).getGWF()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(gwfc),L)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ABS_GWF(gwfc).getOwner(hsh) == sender,M)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: __calledByGWMember
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gwp = ABS_GWP(__gwpc(_hash))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(gwp) != address(0x0) && _validContract(address(gwp)),N)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(address(gwp)) && msg.sender == tx.origin && gwp.getIsOwner(msg.sender),O)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: __ungravelGW
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gwp = ABS_GWP(__gwpc(_hash))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(gwp) != address(0x0) && _validContract(address(gwp)),Q)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: hsh = getdHash(gwp)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: gwfc = gwp.getGWF()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_hash != 0x0 && hsh != 0x0 && _validContract(address(gwp)) && _validContract(gwfc) && ABS_GWF(gwfc).getOwner(hsh) == address(gwp),R)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _onlyByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(RegOwner == msg.sender,S)

Edges:
  0 -> 1

Function: _onlyByRegistrar
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(ABS_ExtDeed(address(msg.sender)).registrar()) == address(this),T)

Edges:
  0 -> 1

Function: _validIntentionsContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(a) && _validContract(address(ABS_GWP(a).getIntention())),U)

Edges:
  0 -> 1

Function: _basedOnGWFC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: intent = AbsIntentions(_gwp.getIntention())

  ID: 2
  Type: NodeType.VARIABLE
  Expression: gwfc = address(intent.getGWF())

  ID: 3
  Type: NodeType.VARIABLE
  Expression: gwfc2 = _gwp.getGWF()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: gwfc3 = _tokenContract(_gwp).owner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(gwfc) && _validContract(gwfc2) && _validContract(gwfc3) && gwfc == gwfc2 && gwfc3 == gwfc,V)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _validContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (ct != address(0x0) && isContract(ct))

Edges:
  0 -> 1

Function: state_pln
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: __finalize(_hash)

  ID: 2
  Type: NodeType.RETURN
  Expression: Mode.Over

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: l_regDate = __regDate(_hash)

  ID: 5
  Type: NodeType.IF
  Expression: block.timestamp < l_regDate

  ID: 6
  Type: NodeType.IF
  Expression: block.timestamp < (l_regDate - __revealPeriod(_hash))

  ID: 7
  Type: NodeType.RETURN
  Expression: Mode.Auction

  ID: 8
  Type: NodeType.RETURN
  Expression: Mode.Reveal

  ID: 10
  Type: NodeType.IF
  Expression: __highestBid(_hash) == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: Mode.Open

  ID: 12
  Type: NodeType.RETURN
  Expression: Mode.Owned

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 10
  6 -> 7
  6 -> 8
  10 -> 11
  10 -> 12

Function: entries
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: l_reveal = __revealPeriod(_hash)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: l_state = state_pln(_hash)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: l_add = address(__deed(_hash))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: l_a[0] = __minPrice(_hash)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: l_a[2] = __highestBid(_hash)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: l_a[3] = __deedValue(_hash)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: l_a[4] = __regDate(_hash)

  ID: 10
  Type: NodeType.RETURN
  Expression: (l_state,l_add,l_a[4],l_a[3],l_a[2],l_a[1],l_a[0],l_reveal)

  ID: 11
  Type: NodeType.IF
  Expression: __finalize(_hash)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: l_a[1] = 1

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: l_a[1] = 0

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 11
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 7

Function: __biddVal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(biddingValue[bidder][hash] & k_maskBidVal)

Edges:
  0 -> 1

Function: __sealedBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(uint160(uint256(uint256(uint256(biddingValue[bidder][hash]) >> 80) & k_addressMask)))

Edges:
  0 -> 1

Function: saveSealedBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: biddingValue[bidder][seal] = uint256(uint256(uint256(uint160(bid)) << 80) & k_maskSealBid) + uint256(biddingValue[bidder][seal] & k_maskBidVal)

Edges:
  0 -> 1

Function: saveBiddVal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: biddingValue[bidder][hash] = uint256(biddingValue[bidder][hash] & k_maskSealBid) + uint256(val & k_maskBidVal)

Edges:
  0 -> 1

Function: getBiddingValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(__biddVal(bidder,hash))

Edges:
  0 -> 1

Function: sealedBidContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: __sealedBid(bidder,hash)

Edges:
  0 -> 1

Function: __deed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(uint160(uint256(entry_B[hash] & k_addressMask)))

Edges:
  0 -> 1

Function: saveDeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_B[hash] = uint256(entry_B[hash] & k_highBidMask) + uint256(uint256(uint160(deed)) & k_addressMask)

Edges:
  0 -> 1

Function: __highestBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(uint256(uint256(entry_B[hash] & k_highBidMask) >> 160) & k_maskBidVal)

Edges:
  0 -> 1

Function: saveHighestBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_B[hash] = uint256(entry_B[hash] & k_addressMask) + uint256(uint256(uint256(highBid & k_maskBidVal) << 160) & k_highBidMask)

Edges:
  0 -> 1

Function: saveDeedAndHighBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_B[hash] = uint256(uint256(uint160(deed)) & k_addressMask) + uint256(uint256(uint256(highBid & k_maskBidVal) << 160) & k_highBidMask)

Edges:
  0 -> 1

Function: __gwpc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(uint160(uint256(entry_A[hash] & k_addressMask)))

Edges:
  0 -> 1

Function: saveGWPC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(entry_A[hash] & k_highBidMask) + uint256(uint256(uint160(gw)) & k_addressMask)

Edges:
  0 -> 1

Function: __regDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(uint256(uint256(entry_A[hash] & k_regDataMask) >> 160) & k_regDataMask2)

Edges:
  0 -> 1

Function: saveRegDate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(entry_A[hash] & k_regDataMask3) + uint256(uint256(uint256(regDate & k_regDataMask2) << 160) & k_regDataMask)

Edges:
  0 -> 1

Function: __finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bool(uint256(uint256(entry_A[hash] & k_finalizeMask)) > 0)

Edges:
  0 -> 1

Function: saveFinalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: finalize

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(entry_A[hash] & k_finFlagMask) + uint256(k_finalizeMask)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! finalize

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(entry_A[hash] & k_finFlagMask)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: __minPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(uint256(uint256(entry_A[hash] & k_minPrcMask) >> 176) & k_minPrcMask2)

Edges:
  0 -> 1

Function: saveMinPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(entry_A[hash] & k_minPrcMask3) + uint256(uint256(uint256(minPrc & k_minPrcMask2) << 176) & k_minPrcMask)

Edges:
  0 -> 1

Function: saveGWRegDFinaMinPrc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: l_finalize = 0

  ID: 2
  Type: NodeType.IF
  Expression: finalize

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: l_finalize = uint256(k_finalizeMask)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: entry_A[hash] = uint256(uint256(uint160(gw)) & k_addressMask) + uint256(uint256(uint256(regDate & k_regDataMask2) << 160) & k_regDataMask) + l_finalize + uint256(uint256(uint256(minPrc & k_minPrcMask2) << 176) & k_minPrcMask)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: __deedValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(uint256(uint256(entry_C[hash] & k_maskBidVal)))

Edges:
  0 -> 1

Function: saveDeedValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_C[hash] = uint256(entry_C[hash] & k_maskSealBid) + uint256(val & k_maskBidVal)

Edges:
  0 -> 1

Function: __revealPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint256(uint256(uint256(uint256(entry_C[hash] & k_rvlPerMask) >> 80) & k_regDataMask2))

Edges:
  0 -> 1

Function: saveRevealPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_C[hash] = uint256(entry_C[hash] & k_rvlPerMask2) + uint256(uint256(uint256(rvlPer & k_regDataMask2) << 80) & k_rvlPerMask)

Edges:
  0 -> 1

Function: saveRevealPerValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: entry_C[hash] = uint256(uint256(uint256(rvlPer & k_regDataMask2) << 80) & k_rvlPerMask) + uint256(val & k_maskBidVal)

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: RegOwner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registryStarted = block.timestamp

Edges:
  0 -> 1
  1 -> 2

Function: max
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a > b

  ID: 2
  Type: NodeType.RETURN
  Expression: a

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 5
  Type: NodeType.RETURN
  Expression: lmax

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a < b

  ID: 2
  Type: NodeType.RETURN
  Expression: a

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 5
  Type: NodeType.RETURN
  Expression: lmin

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: strlen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ptr = s + 1

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: end = mload(uint256)(s) + ptr

  ID: 7
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: len = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: ptr < end

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: b = mload(uint256)(ptr) & 0xFF

  ID: 15
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: b < 0x80

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ptr += 1

  ID: 18
  Type: NodeType.IF
  Expression: b < 0xE0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ptr += 2

  ID: 20
  Type: NodeType.IF
  Expression: b < 0xF0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ptr += 3

  ID: 22
  Type: NodeType.IF
  Expression: b < 0xF8

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ptr += 4

  ID: 24
  Type: NodeType.IF
  Expression: b < 0xFC

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: ptr += 5

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: ptr += 6

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: len ++

  ID: 33
  Type: NodeType.RETURN
  Expression: len

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 33
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 31
  18 -> 19
  18 -> 20
  19 -> 30
  20 -> 21
  20 -> 22
  21 -> 29
  22 -> 23
  22 -> 24
  23 -> 28
  24 -> 25
  24 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 11

Function: memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(dest,mload(uint256)(src))

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: dest += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: src += 32

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: len -= 32

  ID: 10
  Type: NodeType.IF
  Expression: len == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - len) - 1

  ID: 14
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: srcpart_memcpy_asm_1 = mload(uint256)(src) & ~ mask

  ID: 17
  Type: NodeType.VARIABLE
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: destpart_memcpy_asm_1 = mload(uint256)(dest) & mask

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(dest,destpart_memcpy_asm_1 | srcpart_memcpy_asm_1)

  ID: 20
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 10
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 3
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: stringMemoryTobytes32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: a = mload(uint256)(_data + 32)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: bytes32ToBytes32WithLen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(uint256(_b) & k_lenByteMask) + uint256(uint256(strlen(bytes32ToStr(_b))) & 0xff))

Edges:
  0 -> 1

Function: substring
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(offset + len <= self.length,W)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ret = new bytes(len)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: dest = ret + 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: src = self + 32 + offset

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: memcpy(dest,src,len)

  ID: 10
  Type: NodeType.RETURN
  Expression: ret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: mb32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: a = mload(uint256)(_data + 32)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: toLowerCaseBytes32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(uint256(_in) | 0x2000000000000000000000000000000000000000000000000000000000000000))

Edges:
  0 -> 1

Function: bytes32ToStr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bArr = new bytes(32)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: off = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < 32 && off == 0

  ID: 6
  Type: NodeType.IF
  Expression: _b[i] != 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: bArr[i] = _b[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: off = i

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: rArr = new bytes(off)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i = 0

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: i < 32 && off > 0

  ID: 16
  Type: NodeType.IF
  Expression: bArr[i] != 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: rArr[i] = bArr[i]

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: off --

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 21
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: string(rArr)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  5 -> 6
  5 -> 11
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 5
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  15 -> 21
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 15
  21 -> 22

Function: getChainId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.chainid

Edges:
  0 -> 1

Function: isENSV3
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (address(gwfc.ensNameWrapper()) != address(0x0))

Edges:
  0 -> 1

Function: tldOfChain
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: chainId = getChainId()

  ID: 2
  Type: NodeType.IF
  Expression: chainId == 10

  ID: 3
  Type: NodeType.RETURN
  Expression: .op

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: chainId == 137

  ID: 6
  Type: NodeType.RETURN
  Expression: .matic

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: chainId == 8453

  ID: 9
  Type: NodeType.RETURN
  Expression: .base

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: chainId == 42161

  ID: 12
  Type: NodeType.RETURN
  Expression: .one

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: chainId == 81457

  ID: 15
  Type: NodeType.RETURN
  Expression: .blast

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: chainId == 421614

  ID: 18
  Type: NodeType.RETURN
  Expression: .arb

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: chainId == 534352

  ID: 21
  Type: NodeType.RETURN
  Expression: .scroll

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: chainId == 11155111

  ID: 24
  Type: NodeType.RETURN
  Expression: .sepeth

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: chainId == 11155420

  ID: 27
  Type: NodeType.RETURN
  Expression: .opt

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.RETURN
  Expression: .eth

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  25 -> 26
  26 -> 27
  26 -> 28
  28 -> 29

Function: getPercentageOfCost
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: chainId = getChainId()

  ID: 2
  Type: NodeType.IF
  Expression: chainId == 10

  ID: 3
  Type: NodeType.RETURN
  Expression: 10

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: chainId == 137

  ID: 6
  Type: NodeType.RETURN
  Expression: 25

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: chainId == 8453

  ID: 9
  Type: NodeType.RETURN
  Expression: 10

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: chainId == 42161

  ID: 12
  Type: NodeType.RETURN
  Expression: 10

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: chainId == 81457

  ID: 15
  Type: NodeType.RETURN
  Expression: 10

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: chainId == 421614

  ID: 18
  Type: NodeType.RETURN
  Expression: 10

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: chainId == 534352

  ID: 21
  Type: NodeType.RETURN
  Expression: 10

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: chainId == 11155111

  ID: 24
  Type: NodeType.RETURN
  Expression: 25

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: chainId == 11155420

  ID: 27
  Type: NodeType.RETURN
  Expression: 10

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.RETURN
  Expression: 5

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  25 -> 26
  26 -> 27
  26 -> 28
  28 -> 29

Function: getAllowedTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: registryStarted

  ID: 2
  Type: NodeType.RETURN
  Expression: timestamp

Edges:
  0 -> 1

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(addr)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getGWPfromAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ungravelGW(_hash)

  ID: 2
  Type: NodeType.RETURN
  Expression: __gwpc(_hash)

Edges:
  0 -> 1
  1 -> 2

Function: _tokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: GWF = ABS_GWF(gw.getGWF())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(GWF) != address(0x0),X)

  ID: 3
  Type: NodeType.RETURN
  Expression: ABS_TokenProxy(GWF.getProxyToken(getdHash(gw)))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRevs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: GWF = gw.getGWF()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(GWF) != address(0x0),Y)

  ID: 3
  Type: NodeType.RETURN
  Expression: ABS_GWF(GWF).reverseContract()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: intentionsFromGWP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ungravelGW(_hash)

  ID: 2
  Type: NodeType.RETURN
  Expression: ABS_GWP(__gwpc(_hash)).getIntention()

Edges:
  0 -> 1
  1 -> 2

Function: getAuctionMinBiddingPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: __minPrice(_hash)

Edges:
  0 -> 1

Function: getGasPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: gasPrice = gasprice()()

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: gasPrice

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: calculateMinAuctionPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: minP = uint64(getGasPrice() * uint256(2433123) * (100 / getPercentageOfCost()))

  ID: 2
  Type: NodeType.IF
  Expression: minP < 1000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: minP += 1000000000000000

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: minP

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: shaBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(hash,owner,value,salt))

  ID: 2
  Type: NodeType.RETURN
  Expression: sealedBid

Edges:
  0 -> 1

Function: startAuction_ge0
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __calledByUngravelGWP(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _validIntentionsContract(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(state_pln(_hash) == Mode.Open,Z)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: intCtr = AbsIntentions(ABS_GWP(msg.sender).getIntention())

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_validContract(address(intCtr)),a)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: mCapGWP = intCtr.mCap(msg.sender)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: minPrice = calculateMinAuctionPrice()

  ID: 9
  Type: NodeType.VARIABLE
  Expression: tokenC = _tokenContract(ABS_GWP(msg.sender))

  ID: 10
  Type: NodeType.VARIABLE
  Expression: bal = uint256(tokenC.balanceOf(address(this))) / 100

  ID: 11
  Type: NodeType.VARIABLE
  Expression: tNb = ABS_GWP(msg.sender).getTransactionsCount() - 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tNb > 0,t)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: bal2 = uint256(uint8(uint256(ABS_GWP(msg.sender).getTransactionRecord(tNb) >> 208) & 0x03))

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: bal2 = bal + ((1 + (bal2 * bal2)) * 10000)

  ID: 15
  Type: NodeType.IF
  Expression: (mCapGWP > 0) && (mCapGWP > minPrice)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: minPrice = uint256(uint256(mCapGWP * bal2) / 1200000)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: saveRevealPerValue(_hash,l_revealP,0)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: saveHighestBid(_hash,0)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: saveGWRegDFinaMinPrc(_hash,msg.sender,uint64(block.timestamp) + uint64(l_revealP << 1),false,minPrice)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: AuctionStarted(_hash,__regDate(_hash))

  ID: 22
  Type: NodeType.IF
  Expression: uint32(revealP) > 0

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: l_revealP = uint32(revealP)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: l_revealP = 60

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 22
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 5

Function: saveExtDeedCntr_gm9
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gwp = __gwpc(_hash)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _validIntentionsContract(gwp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ABS_GWP(gwp).getIntention().getIntendedLOIShares(gwp,_sender) > 0,LI)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lseal = keccak256(bytes)(abi.encode(_hash,_sender,_value,kkk))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(__sealedBid(_sender,lseal) == k_add00 && _value >= __minPrice(_hash),sx)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: __calledByUngravelGWP(_sender)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(_sender,lseal,address(msg.sender))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(_sender,_hash,_value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: newBidProxy_DKJ
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ungravelGW(_hash)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: __calledByGWMember(_hash)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(masterContract == internalDeedMaster && seal != 0x0 && __sealedBid(msg.sender,seal) == k_add00 && msg.value >= __minPrice(_hash),BP)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: deed = address((new IntDeedProxy){value: msg.value}(masterContract,msg.sender,_hash))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(msg.sender,seal,deed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,msg.value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: createBidBucketProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __ungravelGW(_hash)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(masterContract == externalDeedMaster && state_pln(_hash) == Mode.Auction && ! __finalize(_hash),AP)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: deed = address((new BiddingProxy){value: 0}(masterContract,_hash))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: gwp = ABS_GWP(__gwpc(_hash))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _validIntentionsContract(address(gwp))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _basedOnGWFC(gwp)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: labelhashOrStr = nextBucketLabel(gwp)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tokenContract(gwp).nameBidBucket(getdHash(gwp),labelhashOrStr,deed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: auctionTRecord
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: i = gwp.getTransactionsCount()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(i > 0,>0)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.IFLOOP
  Expression: (i > 0) && (t > 0) && ((t & k_typeMask) != k_typeMask)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i --

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: t = gwp.getTransactionRecord(i)

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(uint160(t & k_addressMask)) == address(this),nA)

  ID: 10
  Type: NodeType.RETURN
  Expression: (address(uint160(t & k_addressMask)),i)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 6
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 5
  8 -> 9
  9 -> 10

Function: getLabelBytes32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(gw.getTransactionRecord(_tNb) & k_valueMask) << 48)

Edges:
  0 -> 1

Function: addBucketNbToLabel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes32(uint256(uint256(uint256(nb + 96)) << 248) + uint256(uint256(label32) >> 8))

Edges:
  0 -> 1

Function: nextBucketLabel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gwfc = gw.getGWF()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(gwfc) != address(0x0),fc)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: ens = ABS_GWF(gwfc).ens()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(ens) != address(0x0),es)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (auctionTAddr,tNb) = auctionTRecord(gw)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(auctionTAddr != address(0x0) && tNb > 0,*A)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: label = getLabelBytes32(gw,tNb)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: domHash = getdHash(gw)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 14
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 15
  Type: NodeType.IFLOOP
  Expression: ens.recordExists(dhash) && i <= 26

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: labelHash = keccak256(bytes)(bytes(bytes32ToStr(addBucketNbToLabel(label,i))))

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: dhash = keccak256(bytes)(abi.encodePacked(domHash,labelHash))

  ID: 19
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: ! ens.recordExists(dhash)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: isENSv3 = isENSV3(ABS_GWF(gwfc))

  ID: 22
  Type: NodeType.IF
  Expression: ! isENSv3

  ID: 23
  Type: NodeType.RETURN
  Expression: labelHash

  ID: 24
  Type: NodeType.RETURN
  Expression: bytes32ToBytes32WithLen(addBucketNbToLabel(label,i))

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(false,bb)

  ID: 28
  Type: NodeType.RETURN
  Expression: l

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  15 -> 19
  16 -> 17
  17 -> 18
  18 -> 15
  19 -> 20
  20 -> 21
  20 -> 26
  21 -> 22
  22 -> 23
  22 -> 24
  26 -> 27
  27 -> 28

Function: unsealBid_le$
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: seal = keccak256(bytes)(abi.encode(_hash,msg.sender,_value,_salt))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: bid = intDeedMaster(address(__sealedBid(msg.sender,seal)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(bid) != address(0x0),bd)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(msg.sender,seal,address(0x0))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: value = min(_value,address(bid).balance)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: bid.adjustBal_1k3(value)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: auctionState = state_pln(_hash)

  ID: 8
  Type: NodeType.IF
  Expression: auctionState == Mode.Owned

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,0)

  ID: 11
  Type: NodeType.IF
  Expression: auctionState != Mode.Reveal

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert(string)(unsealBid auctionState != Mode.Reveal error)

  ID: 13
  Type: NodeType.IF
  Expression: value < __minPrice(_hash) || bid.creationDate() > __regDate(_hash) - __revealPeriod(_hash)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,0)

  ID: 16
  Type: NodeType.IF
  Expression: value > __highestBid(_hash)

  ID: 17
  Type: NodeType.IF
  Expression: __deed(_hash) != address(0x0)

  ID: 18
  Type: NodeType.VARIABLE
  Expression: previousWinner = intDeedMaster(__deed(_hash))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(previousWinner.owner(),_hash,0)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: previousWinner.closeDeed_igk(address(0x0))

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,__highestBid(_hash))

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: saveDeedAndHighBid(_hash,address(bid),value)

  ID: 24
  Type: NodeType.IF
  Expression: value > __deedValue(_hash)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,value)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,0)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,0)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 34
  11 -> 12
  11 -> 13
  12 -> 33
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 32
  16 -> 17
  16 -> 24
  17 -> 18
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 31
  24 -> 25
  24 -> 28
  25 -> 26
  26 -> 27
  27 -> 30
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34

Function: unsealExternalBid_qfG
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByRegistrar()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_hash != 0x0,eD)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: l_sender = ABS_ExtDeed(msg.sender).owner()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: l_value = address(msg.sender).balance

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seal = keccak256(bytes)(abi.encode(_hash,l_sender,l_value,kkk))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(__sealedBid(l_sender,seal) == msg.sender,D2)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: bid = extDeedMaster(address(__sealedBid(l_sender,seal)))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(bid) != address(0x0),D3)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(l_sender,seal,address(0x0))

  ID: 10
  Type: NodeType.IF
  Expression: l_value < __minPrice(_hash) || bid.creationDate() > __regDate(_hash) - __revealPeriod(_hash)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(l_sender,_hash,0)

  ID: 13
  Type: NodeType.IF
  Expression: l_value > __highestBid(_hash)

  ID: 14
  Type: NodeType.IF
  Expression: __deed(_hash) != address(0x0)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: previousWinner = extDeedMaster(address(__deed(_hash)))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(previousWinner.owner(),_hash,0)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: previousWinner.closeDeed_igk(address(0x0))

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,__highestBid(_hash))

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: saveDeedAndHighBid(_hash,address(bid),l_value)

  ID: 21
  Type: NodeType.IF
  Expression: l_value > __deedValue(_hash)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,l_value)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(l_sender,_hash,0)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(l_sender,_hash,0)

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 29
  13 -> 14
  13 -> 21
  14 -> 15
  14 -> 18
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 28
  21 -> 22
  21 -> 25
  22 -> 23
  23 -> 24
  24 -> 27
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29

Function: getdHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: gwfc = gw.getGWF()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(gwfc) != address(0x0),hs)

  ID: 3
  Type: NodeType.RETURN
  Expression: bytes32(gw.getTransactionRecord(uint256(uint160(gwfc))))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: splitTLDFromDomain
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bytes(substring(bytes(domain),0,strlen(domain) - strlen(tldOfChain())))

Edges:
  0 -> 1

Function: getDomainNameString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isENSV3(ABS_GWF(gw.getGWF()))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenC = _tokenContract(gw)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(tokenC) != address(0x0),v3)

  ID: 4
  Type: NodeType.RETURN
  Expression: tokenC.name()

  ID: 5
  Type: NodeType.VARIABLE
  Expression: reverseR = getRevs(gw)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(reverseR) != address(0x0),v4)

  ID: 7
  Type: NodeType.RETURN
  Expression: reverseR.defaultResolver().name(reverseR.node(address(gw)))

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7

Function: getNodeHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(AbstractGWMBaseReg(ABS_GWF(gw.getGWF()).base()).baseNode(),keccak256(bytes)(abi.encodePacked(bytes32ToStr(toLowerCaseBytes32(mb32(bytes(getDomainNameString(gw)))))))))

Edges:
  0 -> 1

Function: transferGroupShares
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ptoken = _tokenContract(gwc)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(receiver) != address(0x0) && address(ptoken) != address(0x0),p8)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: bal = ptoken.balanceOf(address(this))

  ID: 4
  Type: NodeType.IF
  Expression: bal > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ptoken.transfer_G8l(receiver,bal)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: (bal > 0)

  ID: 9
  Type: NodeType.RETURN
  Expression: bal

  ID: 10
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 8
  8 -> 9
  8 -> 10

Function: transferGroupSharesAdjustPrices
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ptoken = _tokenContract(gwc)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(ptoken) != address(0x0),pt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(receiver) != address(0x0),rv)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(deedContract) != address(0x0),dC)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(payment > 0,py)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: dHash = getdHash(gwc)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: bal = uint32(ptoken.balanceOf(address(this)))

  ID: 8
  Type: NodeType.IF
  Expression: bal > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ptoken.transferAdjustPrices(receiver,bal,payment,dHash,deedContract)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10

Function: finalizeAuction_H3D
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: l_deed = intDeedMaster(address(__deed(_hash)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(((state_pln(_hash) == Mode.Owned) || (state_pln(_hash) == Mode.Over)) && (msg.sender == l_deed.owner()),oF)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: l_deedVal = max(__deedValue(_hash),__minPrice(_hash))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,l_deedVal)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: l_deed.adjustBal_1k3(l_deedVal)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: gwp = __gwpc(_hash)

  ID: 7
  Type: NodeType.IF
  Expression: _validContract(gwp)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: transferGroupSharesAdjustPrices(ABS_GWP(gwp),l_deed.owner(),l_deedVal,address(l_deed))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: l_deed.closeDeed_igk(gwp)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: l_deed.closeDeed_igk(address(this))

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: saveFinalize(_hash,true)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,_hash,0)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionFinalized(_hash,l_deed.owner(),l_deedVal,__regDate(_hash))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: finalizeExternalAuction_WmS
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByRegistrar()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: l_deed = extDeedMaster(address(__deed(_hash)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! __finalize(_hash) && block.timestamp >= __regDate(_hash) && __highestBid(_hash) > 0 && ABS_ExtDeed(msg.sender).owner() == l_deed.owner(),fx)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: l_deedVal = max(__deedValue(_hash),__minPrice(_hash))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,l_deedVal)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: l_deed.adjustBal_1k3(l_deedVal)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: gwp = __gwpc(_hash)

  ID: 8
  Type: NodeType.IF
  Expression: _validContract(gwp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: transferGroupSharesAdjustPrices(ABS_GWP(gwp),l_deed.owner(),l_deedVal,address(l_deed))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: l_deed.closeDeed_igk(gwp)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: l_deed.closeDeed_igk(address(this))

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: saveFinalize(_hash,true)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(ABS_ExtDeed(msg.sender).owner(),_hash,0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: AuctionFinalized(_hash,l_deed.owner(),l_deedVal,__regDate(_hash))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: cancelBid_k4U
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bid = intDeedMaster(address(__sealedBid(msg.sender,seal)))

  ID: 2
  Type: NodeType.IF
  Expression: address(bid) != address(0x0)

  ID: 3
  Type: NodeType.IF
  Expression: block.timestamp < bid.creationDate() + (__revealPeriod(hash) * 2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert(string)(cBid1)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(msg.sender,seal,address(0x0))

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(msg.sender,hash,0)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: gwp = __gwpc(hash)

  ID: 11
  Type: NodeType.IF
  Expression: _validContract(gwp)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: transferGroupShares(ABS_GWP(gwp),gwp)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13

Function: cancelExternalBid_9ig
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByRegistrar()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(__finalize(hash),cE)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: l_sender = ABS_ExtDeed(msg.sender).owner()

  ID: 4
  Type: NodeType.VARIABLE
  Expression: bid = extDeedMaster(address(__sealedBid(l_sender,seal)))

  ID: 5
  Type: NodeType.IF
  Expression: address(bid) != address(0x0)

  ID: 6
  Type: NodeType.IF
  Expression: block.timestamp < bid.creationDate() + (__revealPeriod(hash) * 2)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(cancelExBid)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: bid.closeDeed_igk(address(0x0))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: saveSealedBid(l_sender,seal,address(0x0))

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: saveBiddVal(l_sender,hash,0)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: gwp = __gwpc(hash)

  ID: 14
  Type: NodeType.IF
  Expression: _validContract(gwp)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: transferGroupShares(ABS_GWP(gwp),gwp)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16

Function: releaseDeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deed = intDeedMaster(address(__deed(_hash)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(state_pln(_hash) == Mode.Over && msg.sender == deed.owner() && block.timestamp >= __regDate(_hash),re)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saveDeedAndHighBid(_hash,address(0x0),0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: deed.closeDeed_igk(address(0x0))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: releaseExternalDeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deed = extDeedMaster(address(__deed(_hash)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(state_pln(_hash) == Mode.Over && msg.sender == deed.owner() && block.timestamp >= __regDate(_hash),rE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saveDeedValue(_hash,0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saveDeedAndHighBid(_hash,address(0x0),0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: deed.closeDeed_igk(address(0x0))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: deployExtDeedMaster
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByOwner()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: deedContract = address((new extDeedMaster){value: 0}(address(this)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: externalDeedMaster = deedContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ExternalDeedMaster(deedContract)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: deployIntDeedMaster
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByOwner()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: deedContract = address((new intDeedMaster){value: 0}(address(this)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: internalDeedMaster = deedContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: InternalDeedMaster(deedContract)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: version
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 20010105

  ID: 2
  Type: NodeType.RETURN
  Expression: v

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _onlyByOwner()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(address(uint160(msg.sender))).send(address(this).balance),wi)

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(false,Af)

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Deposit(msg.sender,msg.value)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_add00 = address(0x0)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_maskBidVal = 0x00000000000000000000000000000000000000000000ffffffffffffffffffff

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_maskSealBid = 0xffffffffffffffffffffffffffffffffffffffffffff00000000000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_addressMask = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_highBidMask = 0x0000ffffffffffffffffffff0000000000000000000000000000000000000000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_regDataMask = 0x00000000000000007fffffff0000000000000000000000000000000000000000

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_regDataMask2 = 0x000000000000000000000000000000000000000000000000000000007fffffff

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_regDataMask3 = 0xffffffffffffffff80000000ffffffffffffffffffffffffffffffffffffffff

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_finalizeMask = 0x0000000000000000800000000000000000000000000000000000000000000000

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_finFlagMask = 0xffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffff

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_minPrcMask = 0xffffffffffffffff000000000000000000000000000000000000000000000000

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_minPrcMask2 = 0x000000000000000000000000000000000000000000000000ffffffffffffffff

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_minPrcMask3 = 0x0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_rvlPerMask = 0x0000000000000000000000000000000000007fffffff00000000000000000000

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_rvlPerMask2 = 0xffffffffffffffffffffffffffffffffffff80000000ffffffffffffffffffff

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_valueMask = 0x000000000000ffffffffffff0000000000000000000000000000000000000000

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_typeMask = 0xf000000000000000000000000000000000000000000000000000000000000000

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: k_lenByteMask = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17


