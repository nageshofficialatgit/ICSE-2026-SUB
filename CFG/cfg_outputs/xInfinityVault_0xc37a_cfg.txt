Contract: IERC20
==================================================


Contract: ReentrancyGuard
==================================================


Contract: xInfinityVault
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: _payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: payout = this.payoutOf(_addr)

  ID: 2
  Type: NodeType.IF
  Expression: payout > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: players[_addr].last_payout = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: players[_addr].dividends += payout

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _refPayout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: up = players[_addr].upline

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < ref_bonuses.length

  ID: 6
  Type: NodeType.IF
  Expression: up == address(0)

  ID: 7
  Type: NodeType.BREAK
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: bonus = _amount * ref_bonuses[i] / PERCENT_DIVIDER

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: players[up].match_bonus += bonus

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: players[up].total_match_bonus += bonus

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: match_bonus += bonus

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: MatchPayout(up,_addr,bonus)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: up = players[up].upline

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 3
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 5

Function: _setUpline
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: players[_addr].upline == address(0) && _addr != owner

  ID: 2
  Type: NodeType.IF
  Expression: players[_upline].deposits.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _upline = owner

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: players[_addr].upline = _upline

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Upline(_addr,_upline,_amount / 100)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < BONUS_LINES_COUNT

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: players[_upline].structure[i] ++

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _upline = players[_upline].upline

  ID: 13
  Type: NodeType.IF
  Expression: _upline == address(0)

  ID: 14
  Type: NodeType.BREAK
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 17
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 8
  15 -> 16
  16 -> 10

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= 1000000000000000,Minimum deposit amount is 0.001 ETH)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: player = players[msg.sender]

  ID: 3
  Type: NodeType.IF
  Expression: player.deposits.length == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakers.push(msg.sender)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(player.deposits.length < 100,Max 100 deposits per address)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setUpline(msg.sender,_upline,msg.value)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: marketingFee = msg.value / 300

  ID: 9
  Type: NodeType.VARIABLE
  Expression: depositAmount = msg.value - marketingFee

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: player.deposits.push(Deposit({amount:depositAmount,time:block.timestamp}))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: player.total_invested += depositAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: invested += depositAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: marketing_fees += marketingFee

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _refPayout(msg.sender,depositAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: address(MARKETING_WALLET).transfer(marketingFee)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: NewDeposit(msg.sender,depositAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: noReentrant()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: player = players[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(player.total_invested > 0,Join first)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _payout(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(player.dividends > 0 || player.match_bonus > 0,Zero amount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amount = player.dividends + player.match_bonus

  ID: 6
  Type: NodeType.VARIABLE
  Expression: marketingFee = amount / 300

  ID: 7
  Type: NodeType.VARIABLE
  Expression: withdrawAmount = amount - marketingFee

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: player.dividends = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: player.match_bonus = 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: player.total_withdrawn += withdrawAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: withdrawn += withdrawAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: marketing_fees += marketingFee

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: address(MARKETING_WALLET).transfer(marketingFee)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(withdrawAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Withdraw(msg.sender,withdrawAmount)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: noReentrant()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: payoutOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: player = players[_addr]

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < player.deposits.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: dep = player.deposits[i]

  ID: 8
  Type: NodeType.VARIABLE
  Expression: to = block.timestamp

  ID: 9
  Type: NodeType.IF
  Expression: from < to

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: value += (dep.amount * (to - from) * 10) / (86400 * 1000)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: value

  ID: 14
  Type: NodeType.IF
  Expression: player.last_payout > dep.time

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: from = player.last_payout

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: from = dep.time

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: value

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 13
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 14
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 5
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 8

Function: userInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: player = players[_addr]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: payout = this.payoutOf(_addr)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < ref_bonuses.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: structure[i] = player.structure[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: (payout + player.dividends + player.match_bonus,player.total_invested,player.total_withdrawn,player.total_match_bonus,structure)

  ID: 10
  Type: NodeType.RETURN
  Expression: (for_withdraw,total_invested,total_withdrawn,total_match_bonus,structure)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: contractInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (invested,withdrawn,match_bonus)

  ID: 2
  Type: NodeType.RETURN
  Expression: (_invested,_withdrawn,_match_bonus)

Edges:
  0 -> 1

Function: getTotalStakers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: stakers.length

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ref_bonuses = (50,30,20,10,5)

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MARKETING_WALLET = 0x8a7198c128587E89a8d21cfFe5F1e3ED38FA7be5

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONUS_LINES_COUNT = 5

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PERCENT_DIVIDER = 1000

Edges:
  0 -> 1
  1 -> 2


