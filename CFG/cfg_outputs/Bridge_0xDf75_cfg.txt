Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable2Step
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferStarted(owner(),newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete _pendingOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: super._transferOwnership(newOwner)

Edges:
  0 -> 1
  1 -> 2

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: pendingOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _pendingOwner

Edges:
  0 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.IF
  Expression: pendingOwner() != sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(sender)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5


Contract: ReceiptClaimLib
==================================================

Function: ok
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ReceiptClaim(imageId,SYSTEM_STATE_ZERO_DIGEST,ExitCode(SystemExitCode.Halted,0),bytes32(0),Output(journalDigest,bytes32(0)).digest())

Edges:
  0 -> 1

Function: digest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: sha256(bytes)(abi.encodePacked(TAG_DIGEST,claim.input,claim.preStateDigest,claim.postStateDigest,claim.output,uint32(claim.exitCode.system) << 24,uint32(claim.exitCode.user) << 24,uint16(4) << 8))

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TAG_DIGEST = sha256(bytes)(risc0.ReceiptClaim)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SYSTEM_STATE_ZERO_DIGEST = 0xa3acc27117418996340b84e5a90f3ef4c49d22c79e44aad822ec9c313e1eb8e2

Edges:
  0 -> 1


Contract: SystemStateLib
==================================================

Function: digest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: sha256(bytes)(abi.encodePacked(TAG_DIGEST,state.merkle_root,reverseByteOrderUint32(state.pc),uint16(1) << 8))

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TAG_DIGEST = sha256(bytes)(risc0.SystemState)

Edges:


Contract: OutputLib
==================================================

Function: digest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: sha256(bytes)(abi.encodePacked(TAG_DIGEST,output.journalDigest,output.assumptionsDigest,uint16(2) << 8))

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TAG_DIGEST = sha256(bytes)(risc0.Output)

Edges:


Contract: IRiscZeroVerifier
==================================================


Contract: RiscZeroVerifierRouter
==================================================

Function: pendingOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _pendingOwner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.IF
  Expression: pendingOwner() != sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(sender)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Ownable(admin)

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: addVerifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: verifiers[selector] == TOMBSTONE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SelectorRemoved(bytes4)({selector:selector})

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: verifiers[selector] != UNSET

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert SelectorInUse(bytes4)({selector:selector})

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: verifiers[selector] = verifier

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  8 -> 1

Function: removeVerifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: verifiers[selector] == UNSET

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SelectorUnknown(bytes4)({selector:selector})

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: verifiers[selector] = TOMBSTONE

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: getVerifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getVerifier(bytes4(seal))

Edges:
  0 -> 1

Function: verify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: getVerifier(seal).verify(seal,imageId,journalDigest)

Edges:
  0 -> 1

Function: _verify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: getVerifier(seal).verify(seal,imageId,journalDigest)

Edges:
  0 -> 1

Function: verifyWithJournal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: getVerifier(seal).verify(seal,imageId,sha256(bytes)(journal))

Edges:
  0 -> 1

Function: verifyIntegrity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: getVerifier(receipt.seal).verifyIntegrity(receipt)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNSET = IRiscZeroVerifier(address(0))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOMBSTONE = IRiscZeroVerifier(address(1))

Edges:
  0 -> 1


Contract: QTOVToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: bridgeInitialized = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setBridge
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_bridge != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: bridge = _bridge

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bridgeInitialized = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BridgeUpdated(_bridge)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[_owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,msg.sender,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(bridgeInitialized,Bridge not initialized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _mint(to,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyBridge()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == bridge,Unauthorized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _burn(from,amount)

Edges:
  0 -> 1
  1 -> 2

Function: burnFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(account,msg.sender,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _burn(account,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),From zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),To zero address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fromBalance = _balances[from]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromBalance >= amount,Insufficient balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),Mint to zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _balances[account] += amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),account,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),Burn from zero address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,Burn amount exceeds balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner != address(0),Approve from zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Approve to zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[_owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(_owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(_owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,Insufficient allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(_owner,spender,currentAllowance - amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Quantova

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = QTOV

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2


Contract: Bridge
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(verifierAddress != address(0),Invalid verifier address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddress != address(0),Invalid token address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: verifier = RiscZeroVerifierRouter(verifierAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token = QTOVToken(tokenAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IMAGE_ID = _imageId

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: inwardNonce = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: outwardNonce = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: transferOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be positive)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(beneficiary != address(0),Invalid beneficiary)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token.burn(msg.sender,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: outwardNonce ++

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentNonce = outwardNonce

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: outwardTransfers[currentNonce] = OutwardRemittance(beneficiary,amount,currentNonce)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: outwardTransfersEncoded[currentNonce] = abi.encode(beneficiary,amount,currentNonce)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonceStatuses.push(NonceStatus({nonce:currentNonce,isClaimed:false,timestamp:block.timestamp,beneficiary:beneficiary,amount:amount,isInbound:false}))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: OutboundTransferInitiated(currentNonce,msg.sender,beneficiary,amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: OutwardNonceIncremented(outwardNonce)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: bridgeWithVerification
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.TRY
  Expression: verifier.verifyWithJournal(seal,IMAGE_ID,journal)

  ID: 2
  Type: NodeType.CATCH
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _processVerifiedTransaction(journal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: VerificationSuccess(IMAGE_ID,sha256(bytes)(journal))

  ID: 5
  Type: NodeType.CATCH
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: VerificationFailed(IMAGE_ID,reason)

  ID: 7
  Type: NodeType.CATCH
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: VerificationFailed(IMAGE_ID,Low-level verification error)

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  1 -> 7
  2 -> 3
  3 -> 4
  5 -> 6
  7 -> 8

Function: bridgeWithVerificationDebug
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.TRY
  Expression: verifier.verifyWithJournal(seal,IMAGE_ID,journal)

  ID: 2
  Type: NodeType.CATCH
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _processVerifiedTransaction(postStateJournal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: VerificationSuccess(IMAGE_ID,sha256(bytes)(journal))

  ID: 5
  Type: NodeType.CATCH
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: VerificationFailed(IMAGE_ID,reason)

  ID: 7
  Type: NodeType.CATCH
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: VerificationFailed(IMAGE_ID,Low-level verification error)

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  1 -> 7
  2 -> 3
  3 -> 4
  5 -> 6
  7 -> 8

Function: _processVerifiedTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (lastFinalizedHashBytes,transfers,latestFinalizedHashBytes) = abi.decode(journal,(bytes,Transfer,bytes))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lastFinalizedHashBytes.length == 32,Invalid lastFinalizedHash length)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(latestFinalizedHashBytes.length == 32,Invalid latestFinalizedHash length)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: lastFinalizedHash = abi.decode(lastFinalizedHashBytes,(bytes32))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: newLatestFinalizedHash = abi.decode(latestFinalizedHashBytes,(bytes32))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newLatestFinalizedHash != latestFinalizedHash,This batch was already processed)

  ID: 10
  Type: NodeType.IF
  Expression: latestFinalizedHash != bytes32(0)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(lastFinalizedHash == latestFinalizedHash,Invalid hash sequence: lastFinalizedHash doesn't match stored latestFinalizedHash)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: transfers.length > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(uint64(transfers[0].nonce) == inwardNonce + 1,Nonce sequence violation)

  ID: 15
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 18
  Type: NodeType.IFLOOP
  Expression: i < transfers.length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: transfer = transfers[i]

  ID: 20
  Type: NodeType.IF
  Expression: i > 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transfer.nonce == transfers[i - 1].nonce + 1,Nonce sequence violation)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! processedNonces[transfer.nonce],Transfer nonce already processed)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: processedNonces[transfer.nonce] = true

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: inwardTransfers[uint64(transfer.nonce)] = InwardRemittance(transfer.beneficiary,transfer.amount,uint64(transfer.nonce))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: nonceStatuses.push(NonceStatus({nonce:transfer.nonce,isClaimed:false,timestamp:block.timestamp,beneficiary:transfer.beneficiary,amount:transfer.amount,isInbound:true}))

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: NonceRecorded(transfer.nonce,transfer.beneficiary,transfer.amount,block.timestamp)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: inwardNonce = uint64(transfers[transfers.length - 1].nonce)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: InwardNonceAdvanced(inwardNonce)

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: latestFinalizedHash = newLatestFinalizedHash

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: TransfersProcessed(lastFinalizedHash,latestFinalizedHash,transfers.length)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 31
  14 -> 17
  15 -> 18
  16 -> 29
  17 -> 15
  18 -> 19
  18 -> 16
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 18
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(processedNonces[nonce],Nonce does not exist)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < nonceStatuses.length

  ID: 10
  Type: NodeType.IF
  Expression: nonceStatuses[i].nonce == nonce

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! nonceStatuses[i].isClaimed,Nonce already claimed)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: nonceStatuses[i].isClaimed = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: found = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: index = i

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: beneficiary = nonceStatuses[i].beneficiary

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: amount = nonceStatuses[i].amount

  ID: 17
  Type: NodeType.BREAK
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(found,Nonce not found in records)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,amount)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: NonceClaimed(nonce,beneficiary,amount,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 20
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  10 -> 18
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 7
  18 -> 19
  19 -> 9
  20 -> 21
  21 -> 22

Function: setVerifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newVerifier != address(0),Invalid verifier address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: VerifierChanged(address(verifier),newVerifier)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: verifier = RiscZeroVerifierRouter(newVerifier)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: setTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newToken != address(0),Invalid token address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TokenContractChanged(address(token),newToken)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token = QTOVToken(newToken)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getTransferCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (outwardNonce - 1) + inwardNonce

Edges:
  0 -> 1

Function: getInwardTransferCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: inwardNonce

Edges:
  0 -> 1

Function: getOutwardTransferCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: outwardNonce - 1

Edges:
  0 -> 1

Function: getNonceStatusCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: nonceStatuses.length

Edges:
  0 -> 1

Function: getNonceStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < nonceStatuses.length,Index out of bounds)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: status = nonceStatuses[index]

  ID: 3
  Type: NodeType.RETURN
  Expression: (status.nonce,status.isClaimed,status.timestamp,status.beneficiary,status.amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: (nonce,isClaimed,timestamp,beneficiary,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getNonceStatusByNonce
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! processedNonces[nonce]

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0,address(0),0,false)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < nonceStatuses.length

  ID: 8
  Type: NodeType.IF
  Expression: nonceStatuses[i].nonce == nonce

  ID: 9
  Type: NodeType.RETURN
  Expression: (nonceStatuses[i].isClaimed,nonceStatuses[i].timestamp,nonceStatuses[i].beneficiary,nonceStatuses[i].amount,true)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 12
  Type: NodeType.RETURN
  Expression: (false,0,address(0),0,false)

  ID: 13
  Type: NodeType.RETURN
  Expression: (isClaimed,timestamp,beneficiary,amount,exists)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 6
  4 -> 7
  5 -> 12
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 7

Function: getInwardNonce
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: inwardNonce

Edges:
  0 -> 1

Function: getOutwardNonce
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: outwardNonce

Edges:
  0 -> 1

Function: getInwardTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < inwardNonce,Invalid index)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nonce = uint64(index + 1)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: remittance = inwardTransfers[nonce]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(remittance.nonce == nonce,Transfer not found)

  ID: 5
  Type: NodeType.RETURN
  Expression: Transfer(nonce,remittance.beneficiary,remittance.amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getOutwardTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(index < outwardNonce - 1,Invalid index)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nonce = uint64(index + 1)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: remittance = outwardTransfers[nonce]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(remittance.nonce == nonce,Transfer not found)

  ID: 5
  Type: NodeType.RETURN
  Expression: Transfer(nonce,remittance.beneficiary,remittance.amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


