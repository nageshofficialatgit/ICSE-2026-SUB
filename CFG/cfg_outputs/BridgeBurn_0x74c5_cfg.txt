Contract: IERC20
==================================================


Contract: IArbInbox
==================================================


Contract: BridgeBurn
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenRates[UNI] = 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: supportedTokens.push(UNI)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: addToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(token != address(0),Invalid token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rate > 0,Rate must be > 0)

  ID: 3
  Type: NodeType.IF
  Expression: tokenRates[token] == 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: supportedTokens.push(token)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: tokenRates[token] = rate

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  7 -> 1

Function: removeToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenRates[token] > 0,Token not supported)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: delete tokenRates[token]

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < supportedTokens.length

  ID: 7
  Type: NodeType.IF
  Expression: supportedTokens[i] == token

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: supportedTokens[i] = supportedTokens[supportedTokens.length - 1]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: supportedTokens.pop()

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 13
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 4
  11 -> 12
  12 -> 6
  13 -> 1

Function: updateTokenRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenRates[token] > 0,Token not supported)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newRate > 0,Rate must be > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenRates[token] = newRate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateL2Destination
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newL2Dest != address(0),Invalid L2 destination)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: l2Destination = newL2Dest

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: updateArbInbox
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newInbox != address(0),Invalid Inbox address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: arbInbox = IArbInbox(newInbox)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getAllTokenRates
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: len = supportedTokens.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokens = new address[](len + 1)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rates = new uint256[](len + 1)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokens[0] = address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: rates[0] = ETH_RATE

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < len

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: tokens[i + 1] = supportedTokens[i]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: rates[i + 1] = tokenRates[supportedTokens[i]]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: (tokens,rates)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 13
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 9

Function: calculateMintAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: token == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mintAmount = (amount * ETH_RATE) / 1e18

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rate = tokenRates[token]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rate > 0,Token not supported)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mintAmount = amount * rate

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: mintAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getUserMinted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: mintedLedger[user]

Edges:
  0 -> 1

Function: burnAndSend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rate = tokenRates[token]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rate > 0,Token not supported)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).transferFrom(msg.sender,BURN_ADDRESS,amount),Token transfer failed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: mintAmount = amount * rate

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mintedLedger[msg.sender] += mintAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TokenBurned(msg.sender,token,amount,rate,mintAmount)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: l2Data = abi.encodeWithSignature(mintFromBridge(address,uint256),msg.sender,mintAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: arbInbox.sendTxToL2{value: msg.value}(l2Destination,l2Data)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: burnAndSendETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(burnAmount > 0,Burn amount must be > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= burnAmount,Insufficient ETH sent)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fee = msg.value - burnAmount

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (sent,None) = BURN_ADDRESS.call{value: burnAmount}()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sent,ETH burn failed)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: mintAmount = (burnAmount * ETH_RATE) / 1e18

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: mintedLedger[msg.sender] += mintAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: EthBurned(msg.sender,burnAmount,ETH_RATE,mintAmount)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: l2Data = abi.encodeWithSignature(mintFromBridge(address,uint256),msg.sender,mintAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: arbInbox.sendTxToL2{value: fee}(l2Destination,l2Data)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: arbInbox = IArbInbox(0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: l2Destination = 0x9c7A755378D108d667568851356428635C24EA61

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_RATE = 150

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984

Edges:
  0 -> 1
  1 -> 2


