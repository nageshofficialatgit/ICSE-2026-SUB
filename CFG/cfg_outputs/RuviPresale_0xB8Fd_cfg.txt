Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: AggregatorV3Interface
==================================================


Contract: RuviPresale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mainToken = _token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = address(_fundReceiver)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < tokensToSell.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: phases[i].tokensToSell = tokensToSell[i]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: phases[i].tokenPerUsdPrice = tokenPerUsdPrice[i]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalStages = tokensToSell.length

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: updatePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(phases[_phaseId].tokensToSell > 0,presale doesn't exist)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: phases[_phaseId].tokensToSell = _tokensToSell

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: phases[_phaseId].tokenPerUsdPrice = _tokenPerUsdPrice

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getLatestPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = priceFeed.latestRoundData()

  ID: 3
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: buyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is currently Paused)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: fundReceiver.transfer(msg.value)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = nativeToToken(msg.value,currentStage)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(phases[currentStage].totalSoldTokens + numberOfTokens <= phases[currentStage].tokensToSell,Phase Limit Reached)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: mainToken.transfer(msg.sender,numberOfTokens)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + (numberOfTokens)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: amountRaised = amountRaised + (msg.value)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ethToUsdConverted = nativeToUsd(msg.value)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + ethToUsdConverted

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].native_balance += (msg.value)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].ethToUsd_balance += ethToUsdConverted

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance += numberOfTokens

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: phases[currentStage].totalSoldTokens += numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21

Function: buyTokenUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is currently Paused)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: USDC.transferFrom(msg.sender,fundReceiver,amount)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = usdtToToken(amount,currentStage)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(phases[currentStage].totalSoldTokens + numberOfTokens <= phases[currentStage].tokensToSell,Phase Limit Reached)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: mainToken.transfer(msg.sender,numberOfTokens)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + numberOfTokens

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: amountRaisedUSDT = amountRaisedUSDT + amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + amount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].usdc_balance += amount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance += numberOfTokens

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: phases[currentStage].totalSoldTokens += numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: buyTokenUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isPresaleEnded,Presale ended)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presaleStatus, Presale is currently Paused)

  ID: 3
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UsersAddresses.push(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: USDT.transferFrom(msg.sender,fundReceiver,amount)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: numberOfTokens = usdtToToken(amount,currentStage)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(phases[currentStage].totalSoldTokens + numberOfTokens <= phases[currentStage].tokensToSell,Phase Limit Reached)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: mainToken.transfer(msg.sender,numberOfTokens)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: soldToken = soldToken + numberOfTokens

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: amountRaisedUSDC = amountRaisedUSDC + amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: amountRaisedOverall = amountRaisedOverall + amount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].usdt_balance += amount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: users[msg.sender].token_balance += numberOfTokens

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: phases[currentStage].totalSoldTokens += numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: getPhaseDetail
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: phase = phases[phaseInd]

  ID: 2
  Type: NodeType.RETURN
  Expression: (phase.tokensToSell,phase.totalSoldTokens,phase.tokenPerUsdPrice)

  ID: 3
  Type: NodeType.RETURN
  Expression: (tokenToSell,soldTokens,priceUsd)

Edges:
  0 -> 1
  1 -> 2

Function: setPresaleStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presaleStatus = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: endPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPresaleEnded = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: nativeToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethToUsd = (_amount * (getLatestPrice())) / (1000000000000000000)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: numberOfTokens = (ethToUsd * phases[phaseId].tokenPerUsdPrice) / (1e8)

  ID: 3
  Type: NodeType.RETURN
  Expression: numberOfTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: usdtToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: numberOfTokens = (_amount * phases[phaseId].tokenPerUsdPrice) / (1e6)

  ID: 2
  Type: NodeType.RETURN
  Expression: numberOfTokens

Edges:
  0 -> 1
  1 -> 2

Function: nativeToUsd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nativeTousd = (_amount * (getLatestPrice())) / (1e20)

  ID: 2
  Type: NodeType.RETURN
  Expression: nativeTousd

Edges:
  0 -> 1
  1 -> 2

Function: updateToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mainToken = IERC20(_token)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateStableTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDT = IERC20(_USDT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDC = IERC20(_USDC)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: initiateTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundReceiver.transfer(_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: changeFundReciever
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = address(_addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setCurrentStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: currentStage = _stageNum

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updatePriceFeed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: priceFeed = _priceFeed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,_value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: totalUsersCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: UsersAddresses.length

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokenPerUsdPrice = (100000000000000000000,66666666666666666666,50000000000000000000,35714285714285714285,28571428571428571428,20000000000000000000,14285714285714285714)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokensToSell = (100_000_000 * 10 ** 18,150_000_000 * 10 ** 18,200_000_000 * 10 ** 18,225_000_000 * 10 ** 18,250_000_000 * 10 ** 18,275_000_000 * 10 ** 18,300_000_000 * 10 ** 18)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


