Contract: MainnetActionsUtilAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: ActionsUtilHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


Contract: MainnetAuthAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AuthHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AdminVault
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: admin = ADMIN_ADDR

Edges:
  0 -> 1
  1 -> 2

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotAdmin()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: changeAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: admin != msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SenderNotAdmin()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: admin = _admin

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IERC20
==================================================


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance(uint256,uint256)(balance,amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 7
  Type: NodeType.IF
  Expression: ! (success)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SendingValueFail()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalanceForCall(uint256,uint256)(balance,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isContract(target))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonContractCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 7
  Type: NodeType.IF
  Expression: success

  ID: 8
  Type: NodeType.RETURN
  Expression: returndata

  ID: 9
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 15
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  16 -> 17


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(returndata.length == 0 || abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: AdminAuth
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: DFSRegistry
==================================================

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: getAddr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: entries[_id].contractAddr

Edges:
  0 -> 1

Function: isRegistered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: entries[_id].exists

Edges:
  0 -> 1

Function: addNewContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryAlreadyExistsError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: entries[_id] = Entry({contractAddr:_contractAddr,waitPeriod:_waitPeriod,changeStartTime:0,inContractChange:false,inWaitPeriodChange:false,exists:true})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: AddNewContract(msg.sender,_id,_contractAddr,_waitPeriod)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: revertToPreviousAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (entries[_id].exists)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: previousAddresses[_id] == address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EmptyPrevAddrError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: currentAddr = entries[_id].contractAddr

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].contractAddr = previousAddresses[_id]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: RevertToPreviousAddress(msg.sender,_id,currentAddr,previousAddresses[_id])

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: startContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AlreadyInWaitPeriodChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = block.timestamp

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = _newContractAddr

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: StartContractChange(msg.sender,_id,entries[_id].contractAddr,_newContractAddr)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: approveContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ChangeNotReadyError(uint256,uint256)(block.timestamp,(entries[_id].changeStartTime + entries[_id].waitPeriod))

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldContractAddr = entries[_id].contractAddr

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: entries[_id].contractAddr = pendingAddresses[_id]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = false

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = address(0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: previousAddresses[_id] = oldContractAddr

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: ApproveContractChange(msg.sender,_id,oldContractAddr,entries[_id].contractAddr)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 17
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1

Function: cancelContractChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: oldContractAddr = pendingAddresses[_id]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pendingAddresses[_id] = address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inContractChange = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: CancelContractChange(msg.sender,_id,oldContractAddr,entries[_id].contractAddr)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: startWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: entries[_id].inContractChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert AlreadyInContractChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = _newWaitPeriod

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = block.timestamp

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: StartWaitPeriodChange(msg.sender,_id,_newWaitPeriod)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: approveWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert ChangeNotReadyError(uint256,uint256)(block.timestamp,(entries[_id].changeStartTime + entries[_id].waitPeriod))

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: oldWaitTime = entries[_id].waitPeriod

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: entries[_id].waitPeriod = pendingWaitTimes[_id]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = false

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ApproveWaitPeriodChange(msg.sender,_id,oldWaitTime,entries[_id].waitPeriod)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 16
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: cancelWaitPeriodChange
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! entries[_id].exists

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert EntryNonExistentError(bytes4)(_id)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: ! entries[_id].inWaitPeriodChange

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert EntryNotInChangeError(bytes4)(_id)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: oldWaitPeriod = pendingWaitTimes[_id]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pendingWaitTimes[_id] = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: entries[_id].inWaitPeriodChange = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: entries[_id].changeStartTime = 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: CancelWaitPeriodChange(msg.sender,_id,oldWaitPeriod,entries[_id].waitPeriod)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 12
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: DSAuthority
==================================================


Contract: DSAuthEvents
==================================================


Contract: DSAuth
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(msg.sender)

Edges:
  0 -> 1
  1 -> 2

Function: setOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = owner_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAuthority
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authority = authority_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetAuthority(address(authority))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: src == address(this)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.IF
  Expression: src == owner

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.IF
  Expression: authority == DSAuthority(address(0))

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.RETURN
  Expression: authority.canCall(src,address(this),sig)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7


Contract: DSNote
==================================================


Contract: DSProxy
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (setCache(_cacheAddr))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isAuthorized(msg.sender,msg.sig),Not authorized)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: setOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = owner_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetOwner(owner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAuthority
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authority = authority_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: LogSetAuthority(address(authority))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auth()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isAuthorized
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: src == address(this)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.IF
  Expression: src == owner

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.IF
  Expression: authority == DSAuthority(address(0))

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 7
  Type: NodeType.RETURN
  Expression: authority.canCall(src,address(this),sig)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: DSProxyCache
==================================================

Function: read
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: hash = keccak256(bytes)(_code)

  ID: 2
  Type: NodeType.RETURN
  Expression: cache[hash]

Edges:
  0 -> 1
  1 -> 2

Function: write
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: target = create(uint256,uint256,uint256)(0,_code + 0x20,mload(uint256)(_code))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: switch_expr_22985_172_0_write_asm_0 = ! extcodesize(uint256)(target)

  ID: 5
  Type: NodeType.IF
  Expression: switch_expr_22985_172_0_write_asm_0 == 1

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(0,0)

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: hash = keccak256(bytes)(_code)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cache[hash] = target

  ID: 11
  Type: NodeType.RETURN
  Expression: target

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  5 -> 6
  6 -> 8
  7 -> 6
  8 -> 9
  9 -> 10
  10 -> 11


Contract: ISafe
==================================================


Contract: IDSProxyFactory
==================================================


Contract: MainnetProxyFactoryAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:


Contract: DSProxyFactoryHelper
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:


Contract: CheckWalletType
==================================================

Function: isDSProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy)

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

Edges:


Contract: DefisaverLogger
==================================================

Function: logRecipeEvent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: RecipeEvent(msg.sender,_logName)

Edges:
  0 -> 1

Function: logActionDirectEvent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ActionDirectEvent(msg.sender,_logName,_data)

Edges:
  0 -> 1


Contract: ActionBase
==================================================

Function: isDSProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy)

Edges:
  0 -> 1

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: _parseParamUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = uint256(_returnValues[getReturnIndex(_mapType)])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _param = uint256(_subData[getSubIndex(_mapType)])

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _parseParamAddr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])))

  ID: 4
  Type: NodeType.IF
  Expression: _mapType == 254

  ID: 5
  Type: NodeType.RETURN
  Expression: address(this)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _mapType == 255

  ID: 8
  Type: NodeType.RETURN
  Expression: fetchOwnersOrWallet()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])))

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 12
  2 -> 3
  2 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _parseParamABytes32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = (_returnValues[getReturnIndex(_mapType)])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _param = _subData[getSubIndex(_mapType)]

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: isReplaceable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _type != NO_PARAM_MAPPING

Edges:
  0 -> 1

Function: isReturnInjection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE)

Edges:
  0 -> 1

Function: getReturnIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isReturnInjection(_type))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SubIndexValueError()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (_type - RETURN_MIN_INDEX_VALUE)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: getSubIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _type < SUB_MIN_INDEX_VALUE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReturnIndexValueError()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (_type - SUB_MIN_INDEX_VALUE)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: fetchOwnersOrWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isDSProxy(address(this))

  ID: 2
  Type: NodeType.RETURN
  Expression: DSProxy(address(address(this))).owner()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: owners = ISafe(address(this)).getOwners()

  ID: 6
  Type: NodeType.IF
  Expression: owners.length == 1

  ID: 7
  Type: NodeType.RETURN
  Expression: owners[0]

  ID: 8
  Type: NodeType.RETURN
  Expression: address(this)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: registry = DFSRegistry(REGISTRY_ADDR)

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: logger = DefisaverLogger(DFS_LOGGER_ADDR)

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_MIN_INDEX_VALUE = 128

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_MAX_INDEX_VALUE = 255

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETURN_MIN_INDEX_VALUE = 1

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETURN_MAX_INDEX_VALUE = 127

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_PARAM_MAPPING = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20


Contract: MainnetFluidAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: DFSMath
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2


Contract: FluidHelper
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IFluidVaultResolver
==================================================


Contract: IFluidVaultT1
==================================================


Contract: IWETH
==================================================


Contract: TokenUtils
==================================================

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: IERC20(_tokenAddr).allowance(address(this),_to) < _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenAddr).safeApprove(_to,_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: pullTokensIfNeeded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,_from)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransferFrom(_from,address(this),_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _to != address(0) && _to != address(this) && _amount != 0

  ID: 5
  Type: NodeType.IF
  Expression: _token != ETH_ADDR

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_to,_amount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = _to.call{value: _amount}()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Eth send fail)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: depositWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).deposit{value: _amount}()

Edges:
  0 -> 1

Function: withdrawWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).withdraw(_amount)

Edges:
  0 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: _acc.balance

  ID: 3
  Type: NodeType.RETURN
  Expression: IERC20(_tokenAddr).balanceOf(_acc)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getTokenDecimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 18

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: IERC20(_token).decimals()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1


Contract: FluidVaultT1Adjust
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2

Function: _parseParamUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = uint256(_returnValues[getReturnIndex(_mapType)])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _param = uint256(_subData[getSubIndex(_mapType)])

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: _parseParamAddr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])))

  ID: 4
  Type: NodeType.IF
  Expression: _mapType == 254

  ID: 5
  Type: NodeType.RETURN
  Expression: address(this)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _mapType == 255

  ID: 8
  Type: NodeType.RETURN
  Expression: fetchOwnersOrWallet()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])))

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 12
  2 -> 3
  2 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _parseParamABytes32
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isReplaceable(_mapType)

  ID: 2
  Type: NodeType.IF
  Expression: isReturnInjection(_mapType)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _param = (_returnValues[getReturnIndex(_mapType)])

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _param = _subData[getSubIndex(_mapType)]

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _param

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: isReplaceable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _type != NO_PARAM_MAPPING

Edges:
  0 -> 1

Function: isReturnInjection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE)

Edges:
  0 -> 1

Function: getReturnIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isReturnInjection(_type))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert SubIndexValueError()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (_type - RETURN_MIN_INDEX_VALUE)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: getSubIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _type < SUB_MIN_INDEX_VALUE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReturnIndexValueError()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (_type - SUB_MIN_INDEX_VALUE)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: fetchOwnersOrWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isDSProxy(address(this))

  ID: 2
  Type: NodeType.RETURN
  Expression: DSProxy(address(address(this))).owner()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: owners = ISafe(address(this)).getOwners()

  ID: 6
  Type: NodeType.IF
  Expression: owners.length == 1

  ID: 7
  Type: NodeType.RETURN
  Expression: owners[0]

  ID: 8
  Type: NodeType.RETURN
  Expression: address(this)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 6
  6 -> 7
  6 -> 8

Function: isDSProxy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy)

Edges:
  0 -> 1

Function: withdrawStuckFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_receiver).transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: kill
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(address(msg.sender))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyAdmin()

Edges:
  0 -> 2
  2 -> 1

Function: executeAction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: params = parseInputs(_callData)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: params.vault = _parseParamAddr(params.vault,_paramMapping[0],_subData,_returnValues)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: params.nftId = _parseParamUint(params.nftId,_paramMapping[1],_subData,_returnValues)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: params.collAmount = _parseParamUint(params.collAmount,_paramMapping[2],_subData,_returnValues)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: params.debtAmount = _parseParamUint(params.debtAmount,_paramMapping[3],_subData,_returnValues)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: params.from = _parseParamAddr(params.from,_paramMapping[4],_subData,_returnValues)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: params.to = _parseParamAddr(params.to,_paramMapping[5],_subData,_returnValues)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: params.collAction = FluidVaultT1Adjust.CollActionType(_parseParamUint(uint8(params.collAction),_paramMapping[7],_subData,_returnValues))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: params.debtAction = FluidVaultT1Adjust.DebtActionType(_parseParamUint(uint8(params.debtAction),_paramMapping[8],_subData,_returnValues))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (debtAmount,logData) = _adjust(params)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ActionEvent(FluidVaultT1Adjust,logData)

  ID: 15
  Type: NodeType.RETURN
  Expression: bytes32(debtAmount)

  ID: 16
  Type: NodeType.IF
  Expression: params.sendWrappedEth

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: params.sendWrappedEth = _parseParamUint(1,_paramMapping[6],_subData,_returnValues) == 1

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: params.sendWrappedEth = _parseParamUint(0,_paramMapping[6],_subData,_returnValues) == 1

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 16
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 17
  16 -> 18
  17 -> 19
  18 -> 19
  19 -> 9

Function: executeActionDirect
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: params = parseInputs(_callData)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (None,logData) = _adjust(params)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: logger.logActionDirectEvent(FluidVaultT1Adjust,logData)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: actionType
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: uint8(ActionType.STANDARD_ACTION)

Edges:
  0 -> 1

Function: _adjust
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: constants = IFluidVaultT1(_params.vault).constantsView()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vars.sendWithdrawnEthAsWrapped = _params.sendWrappedEth && _params.collAction == CollActionType.WITHDRAW && constants.supplyToken == TokenUtils.ETH_ADDR && _params.collAmount > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vars.sendBorrowedEthAsWrapped = _params.sendWrappedEth && _params.debtAction == DebtActionType.BORROW && constants.borrowToken == TokenUtils.ETH_ADDR && _params.debtAmount > 0

  ID: 5
  Type: NodeType.IF
  Expression: _params.collAction == CollActionType.SUPPLY

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (vars.supplyTokenAmount,vars.msgValue) = _handleSupply(_params,constants.supplyToken)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: _params.collAction == CollActionType.WITHDRAW

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: vars.supplyTokenAmount = _handleWithdraw(_params)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: _params.debtAction == DebtActionType.PAYBACK

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (paybackSnapshot,vars.msgValue,vars.borrowTokenAmount) = _handlePayback(_params,constants.borrowToken,vars.msgValue)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: _params.debtAction == DebtActionType.BORROW

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: vars.borrowTokenAmount = _handleBorrow(_params)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: 

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: (None,exactCollAmt,exactDebtAmt) = IFluidVaultT1(_params.vault).operate{value: vars.msgValue}(_params.nftId,vars.supplyTokenAmount,vars.borrowTokenAmount,vars.sendTokensTo)

  ID: 22
  Type: NodeType.IF
  Expression: vars.sendWithdrawnEthAsWrapped

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.depositWeth(uint256(- exactCollAmt))

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.WETH_ADDR.withdrawTokens(_params.to,uint256(- exactCollAmt))

  ID: 25
  Type: NodeType.IF
  Expression: _params.debtAction == DebtActionType.BORROW

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: constants.borrowToken.withdrawTokens(_params.to,uint256(exactDebtAmt))

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.IF
  Expression: vars.sendBorrowedEthAsWrapped

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.depositWeth(uint256(exactDebtAmt))

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.WETH_ADDR.withdrawTokens(_params.to,uint256(exactDebtAmt))

  ID: 32
  Type: NodeType.IF
  Expression: _params.collAction == CollActionType.WITHDRAW

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: constants.supplyToken.withdrawTokens(_params.to,uint256(- exactCollAmt))

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.IF
  Expression: paybackSnapshot.maxPayback

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: _handleMaxPaybackRefund(_params,constants.borrowToken,paybackSnapshot)

  ID: 38
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.RETURN
  Expression: (retVal,abi.encode(_params))

  ID: 41
  Type: NodeType.IF
  Expression: (vars.sendWithdrawnEthAsWrapped || vars.sendBorrowedEthAsWrapped)

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: vars.sendTokensTo = address(this)

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: vars.sendTokensTo = _params.to

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.IF
  Expression: _params.debtAction == DebtActionType.BORROW

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: retVal = uint256(exactDebtAmt)

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: retVal = uint256(- exactDebtAmt)

  ID: 48
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 17
  17 -> 41
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 28
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  29 -> 35
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 34
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  36 -> 38
  37 -> 38
  38 -> 45
  41 -> 42
  41 -> 43
  42 -> 44
  43 -> 44
  44 -> 19
  45 -> 46
  45 -> 47
  46 -> 48
  47 -> 48
  48 -> 40

Function: parseInputs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: params = abi.decode(_callData,(Params))

  ID: 2
  Type: NodeType.RETURN
  Expression: params

Edges:
  0 -> 1
  1 -> 2

Function: _handleSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _params.collAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (0,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _supplyToken == TokenUtils.ETH_ADDR

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _params.collAmount = TokenUtils.WETH_ADDR.pullTokensIfNeeded(_params.from,_params.collAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.withdrawWeth(_params.collAmount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: msgValue = _params.collAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _params.collAmount = _supplyToken.pullTokensIfNeeded(_params.from,_params.collAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _supplyToken.approveToken(_params.vault,_params.collAmount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: supplyTokenAmount = signed256(_params.collAmount)

  ID: 12
  Type: NodeType.RETURN
  Expression: (supplyTokenAmount,msgValue)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: _handleWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _params.collAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: _params.collAmount == type()(uint256).max

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: supplyTokenAmount = type()(int256).min

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: supplyTokenAmount = - signed256(_params.collAmount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: supplyTokenAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 5
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 9

Function: _handleBorrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _params.debtAmount == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: borrowTokenAmount = signed256(_params.debtAmount)

  ID: 5
  Type: NodeType.RETURN
  Expression: borrowTokenAmount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5

Function: _handlePayback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: msgValue = _currentMsgValue

  ID: 2
  Type: NodeType.IF
  Expression: _params.debtAmount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: (snapshot,msgValue,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (userPosition,None) = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionByNftId(_params.nftId)

  ID: 7
  Type: NodeType.IF
  Expression: _params.debtAmount > userPosition.borrow

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: snapshot.maxPayback = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _params.debtAmount = userPosition.borrow * 100001 / 100000 + 5

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: _borrowToken == TokenUtils.ETH_ADDR

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _params.debtAmount = TokenUtils.WETH_ADDR.pullTokensIfNeeded(_params.from,_params.debtAmount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: TokenUtils.withdrawWeth(_params.debtAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msgValue = _params.debtAmount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: _params.debtAmount = _borrowToken.pullTokensIfNeeded(_params.from,_params.debtAmount)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _borrowToken.approveToken(_params.vault,_params.debtAmount)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: _borrowToken == TokenUtils.ETH_ADDR

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: snapshot.borrowTokenBalanceBefore = address(this).balance

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: snapshot.borrowTokenBalanceBefore = _borrowToken.getBalance(address(this))

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: snapshot.maxPayback

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: borrowTokenAmount = type()(int256).min

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: borrowTokenAmount = - signed256(_params.debtAmount)

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.RETURN
  Expression: (snapshot,msgValue,borrowTokenAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 20
  11 -> 12
  12 -> 13
  12 -> 16
  13 -> 14
  14 -> 15
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 24
  20 -> 21
  20 -> 22
  21 -> 23
  22 -> 23
  23 -> 11
  24 -> 25
  24 -> 26
  25 -> 27
  26 -> 27
  27 -> 28

Function: _handleMaxPaybackRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: _params.from != address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(borrowTokenBalanceAfter >= _snapshot.borrowTokenBalanceBefore)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: borrowTokenBalanceAfter > _snapshot.borrowTokenBalanceBefore

  ID: 6
  Type: NodeType.VARIABLE
  Expression: dustAmount = borrowTokenBalanceAfter - _snapshot.borrowTokenBalanceBefore

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _borrowToken.withdrawTokens(_params.from,dustAmount)

  ID: 8
  Type: NodeType.IF
  Expression: _borrowToken != TokenUtils.ETH_ADDR

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _borrowToken.approveToken(_params.vault,0)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: _borrowToken == TokenUtils.ETH_ADDR

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: borrowTokenBalanceAfter = address(this).balance

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: borrowTokenBalanceAfter = _borrowToken.getBalance(address(this))

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 12
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 11
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  12 -> 13
  12 -> 14
  13 -> 15
  14 -> 15
  15 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: adminVault = AdminVault(ADMIN_VAULT_ADDR)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: registry = DFSRegistry(REGISTRY_ADDR)

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: logger = DefisaverLogger(DFS_LOGGER_ADDR)

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_MIN_INDEX_VALUE = 128

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUB_MAX_INDEX_VALUE = 255

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETURN_MIN_INDEX_VALUE = 1

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RETURN_MAX_INDEX_VALUE = 127

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NO_PARAM_MAPPING = 0

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24


