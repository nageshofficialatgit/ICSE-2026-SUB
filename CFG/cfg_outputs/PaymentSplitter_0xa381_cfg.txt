Contract: PaymentSplitter
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_recipients.length == _shares.length,Recipients and shares length mismatch)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_recipients.length > 0,No recipients specified)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < _shares.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_shares[i] > 0,Share cannot be zero)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalShares += _shares[i]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: recipients.push(_recipients[i])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: shares.push(_shares[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalShares == 10000,Total shares must equal 10000 (100%))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 13
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,No ETH received)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < recipients.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amount = (msg.value * shares[i]) / 10000

  ID: 8
  Type: NodeType.IF
  Expression: i == recipients.length - 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: amount = address(this).balance

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: address(recipients[i]).transfer(amount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalSent += amount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 6

Function: recipientCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: recipients.length

Edges:
  0 -> 1


