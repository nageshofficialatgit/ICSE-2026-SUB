Contract: AccessControl
==================================================

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admins.push(_adminAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1


Contract: ERC721
==================================================


Contract: TulipBase
==================================================

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admins.push(_adminAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _generateTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: id = tulips.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: createTime = block.timestamp

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seed = uint256(block.blockhash(block.number - 1)) + uint256(block.blockhash(block.number - 100)) + uint256(block.coinbase) + createTime + id

  ID: 4
  Type: NodeType.VARIABLE
  Expression: traits = uint256(keccak256()(seed))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: genes = traits / 0x10000 * 0x10000 + _gen

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newTulip = Tulip(genes,createTime,_name)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tulips.push(newTulip)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[id] = _owner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_owner].push(id)

  ID: 10
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _transferTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[_id] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_to].push(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_id] = address(0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromTulips = ownerToTulips[_from]

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < fromTulips.length

  ID: 9
  Type: NodeType.IF
  Expression: fromTulips[i] == _id

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(i < fromTulips.length)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: fromTulips[i] = fromTulips[fromTulips.length - 1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: delete fromTulips[fromTulips.length - 1]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: fromTulips.length --

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 6
  11 -> 12
  12 -> 8
  13 -> 14
  14 -> 15
  15 -> 16


Contract: TulipToken
==================================================

Function: _generateTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: id = tulips.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: createTime = block.timestamp

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seed = uint256(block.blockhash(block.number - 1)) + uint256(block.blockhash(block.number - 100)) + uint256(block.coinbase) + createTime + id

  ID: 4
  Type: NodeType.VARIABLE
  Expression: traits = uint256(keccak256()(seed))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: genes = traits / 0x10000 * 0x10000 + _gen

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newTulip = Tulip(genes,createTime,_name)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tulips.push(newTulip)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[id] = _owner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_owner].push(id)

  ID: 10
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _transferTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[_id] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_to].push(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_id] = address(0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromTulips = ownerToTulips[_from]

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < fromTulips.length

  ID: 9
  Type: NodeType.IF
  Expression: fromTulips[i] == _id

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(i < fromTulips.length)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: fromTulips[i] = fromTulips[fromTulips.length - 1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: delete fromTulips[fromTulips.length - 1]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: fromTulips.length --

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 6
  11 -> 12
  12 -> 8
  13 -> 14
  14 -> 15
  15 -> 16

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admins.push(_adminAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tulips.length

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner].length

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = tulipToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToApproved[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == _from)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(_from,_to,_tokenId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Ether Tulips

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ETHT

Edges:
  0 -> 1

Function: tokenOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < ownerToTulips[_owner].length)

  ID: 2
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner][_index]

Edges:
  0 -> 1
  1 -> 2


Contract: TulipSales
==================================================

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tulips.length

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner].length

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = tulipToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToApproved[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == _from)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(_from,_to,_tokenId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Ether Tulips

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ETHT

Edges:
  0 -> 1

Function: tokenOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < ownerToTulips[_owner].length)

  ID: 2
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner][_index]

Edges:
  0 -> 1
  1 -> 2

Function: _generateTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: id = tulips.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: createTime = block.timestamp

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seed = uint256(block.blockhash(block.number - 1)) + uint256(block.blockhash(block.number - 100)) + uint256(block.coinbase) + createTime + id

  ID: 4
  Type: NodeType.VARIABLE
  Expression: traits = uint256(keccak256()(seed))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: genes = traits / 0x10000 * 0x10000 + _gen

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newTulip = Tulip(genes,createTime,_name)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tulips.push(newTulip)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[id] = _owner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_owner].push(id)

  ID: 10
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _transferTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[_id] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_to].push(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_id] = address(0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromTulips = ownerToTulips[_from]

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < fromTulips.length

  ID: 9
  Type: NodeType.IF
  Expression: fromTulips[i] == _id

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(i < fromTulips.length)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: fromTulips[i] = fromTulips[fromTulips.length - 1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: delete fromTulips[fromTulips.length - 1]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: fromTulips.length --

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 6
  11 -> 12
  12 -> 8
  13 -> 14
  14 -> 15
  15 -> 16

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admins.push(_adminAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: TulipSales
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startBlock = uint128(block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: genToStartPrice.push(10000000000000000)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setExp15()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: periodsElapsed = (uint128(block.number) - startBlock) / increasePeriod

  ID: 3
  Type: NodeType.RETURN
  Expression: _priceAtPeriod(periodsElapsed,_gen)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: nextPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: periodsElapsed = (uint128(block.number) - startBlock) / increasePeriod

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: futurePrice = _priceAtPeriod(periodsElapsed + 1,_gen)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: blocksRemaining = increasePeriod - (uint128(block.number) - startBlock) % increasePeriod

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: changeBlock = uint128(block.number) + blocksRemaining

  ID: 6
  Type: NodeType.RETURN
  Expression: (futurePrice,blocksRemaining,changeBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: buyTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == price(_gen))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: id = _generateTulip(_name,msg.sender,_gen)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Purchase(msg.sender,price(_gen),1)

  ID: 6
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: buyTulips
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == price(_gen) * _amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_amount <= 100)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < _amount

  ID: 8
  Type: NodeType.VARIABLE
  Expression: id = _generateTulip(,msg.sender,_gen)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,id)

  ID: 10
  Type: NodeType.IF
  Expression: i == 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: firstId = id

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Purchase(msg.sender,price(_gen),_amount)

  ID: 15
  Type: NodeType.RETURN
  Expression: firstId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 14
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 7
  14 -> 15

Function: renameTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_id] == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tulips[_id].name = _name

Edges:
  0 -> 1
  1 -> 2

Function: addGen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(genToStartPrice.length < 65535)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: genToStartPrice.push(_startPrice)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_amount <= this.balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _priceAtPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _period >= exp15.length

  ID: 2
  Type: NodeType.RETURN
  Expression: genToStartPrice[_gen] * 10000

  ID: 3
  Type: NodeType.RETURN
  Expression: genToStartPrice[_gen] * exp15[_period] / 1000000000000000000

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _setExp15
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: exp15 = (1000000000000000000,1500000000000000000,2250000000000000000,3380000000000000000,5060000000000000000,7590000000000000000,11400000000000000000,17100000000000000000,25600000000000000000,38400000000000000000,57700000000000000000,86500000000000000000,130000000000000000000,195000000000000000000,292000000000000000000,438000000000000000000,657000000000000000000,985000000000000000000,1480000000000000000000,2220000000000000000000,3330000000000000000000,4990000000000000000000,7480000000000000000000)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: increasePeriod = 6000

Edges:


Contract: TulipCore
==================================================

Function: TulipSales
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startBlock = uint128(block.number)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: genToStartPrice.push(10000000000000000)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setExp15()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: periodsElapsed = (uint128(block.number) - startBlock) / increasePeriod

  ID: 3
  Type: NodeType.RETURN
  Expression: _priceAtPeriod(periodsElapsed,_gen)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: nextPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: periodsElapsed = (uint128(block.number) - startBlock) / increasePeriod

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: futurePrice = _priceAtPeriod(periodsElapsed + 1,_gen)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: blocksRemaining = increasePeriod - (uint128(block.number) - startBlock) % increasePeriod

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: changeBlock = uint128(block.number) + blocksRemaining

  ID: 6
  Type: NodeType.RETURN
  Expression: (futurePrice,blocksRemaining,changeBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: buyTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == price(_gen))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: id = _generateTulip(_name,msg.sender,_gen)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Purchase(msg.sender,price(_gen),1)

  ID: 6
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: buyTulips
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_gen < genToStartPrice.length)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == price(_gen) * _amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_amount <= 100)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < _amount

  ID: 8
  Type: NodeType.VARIABLE
  Expression: id = _generateTulip(,msg.sender,_gen)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,id)

  ID: 10
  Type: NodeType.IF
  Expression: i == 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: firstId = id

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Purchase(msg.sender,price(_gen),_amount)

  ID: 15
  Type: NodeType.RETURN
  Expression: firstId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 14
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 7
  14 -> 15

Function: renameTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_id] == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tulips[_id].name = _name

Edges:
  0 -> 1
  1 -> 2

Function: addGen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(genToStartPrice.length < 65535)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: genToStartPrice.push(_startPrice)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_amount <= this.balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _priceAtPeriod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _period >= exp15.length

  ID: 2
  Type: NodeType.RETURN
  Expression: genToStartPrice[_gen] * 10000

  ID: 3
  Type: NodeType.RETURN
  Expression: genToStartPrice[_gen] * exp15[_period] / 1000000000000000000

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _setExp15
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: exp15 = (1000000000000000000,1500000000000000000,2250000000000000000,3380000000000000000,5060000000000000000,7590000000000000000,11400000000000000000,17100000000000000000,25600000000000000000,38400000000000000000,57700000000000000000,86500000000000000000,130000000000000000000,195000000000000000000,292000000000000000000,438000000000000000000,657000000000000000000,985000000000000000000,1480000000000000000000,2220000000000000000000,3330000000000000000000,4990000000000000000000,7480000000000000000000)

Edges:
  0 -> 1

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tulips.length

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner].length

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = tulipToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToApproved[_tokenId] == msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tulipToOwner[_tokenId] == _from)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferTulip(_from,_to,_tokenId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: Ether Tulips

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ETHT

Edges:
  0 -> 1

Function: tokenOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < ownerToTulips[_owner].length)

  ID: 2
  Type: NodeType.RETURN
  Expression: ownerToTulips[_owner][_index]

Edges:
  0 -> 1
  1 -> 2

Function: _generateTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: id = tulips.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: createTime = block.timestamp

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seed = uint256(block.blockhash(block.number - 1)) + uint256(block.blockhash(block.number - 100)) + uint256(block.coinbase) + createTime + id

  ID: 4
  Type: NodeType.VARIABLE
  Expression: traits = uint256(keccak256()(seed))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: genes = traits / 0x10000 * 0x10000 + _gen

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newTulip = Tulip(genes,createTime,_name)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: tulips.push(newTulip)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[id] = _owner

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_owner].push(id)

  ID: 10
  Type: NodeType.RETURN
  Expression: id

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: _transferTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tulipToOwner[_id] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerToTulips[_to].push(_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tulipToApproved[_id] = address(0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: fromTulips = ownerToTulips[_from]

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < fromTulips.length

  ID: 9
  Type: NodeType.IF
  Expression: fromTulips[i] == _id

  ID: 10
  Type: NodeType.BREAK
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(i < fromTulips.length)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: fromTulips[i] = fromTulips[fromTulips.length - 1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: delete fromTulips[fromTulips.length - 1]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: fromTulips.length --

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  10 -> 6
  11 -> 12
  12 -> 8
  13 -> 14
  14 -> 15
  15 -> 16

Function: addAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admins.push(_adminAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: TulipCore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: getTulip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tulip = tulips[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: genes = tulip.genes

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: createTime = tulip.createTime

  ID: 4
  Type: NodeType.VARIABLE
  Expression: byteArray = new bytes(32)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < 32

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: byteArray[i] = tulip.name[i]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: name = string(byteArray)

  ID: 12
  Type: NodeType.RETURN
  Expression: (genes,createTime,name)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 11
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 8
  11 -> 12

Function: myTulips
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tulipsMemory = ownerToTulips[msg.sender]

  ID: 2
  Type: NodeType.RETURN
  Expression: tulipsMemory

Edges:
  0 -> 1
  1 -> 2

Function: myTulipsBatched
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tulipArr = ownerToTulips[msg.sender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: j = int256(tulipArr.length) - 1 - int256(_startIndex)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amount = _maxAmount

  ID: 4
  Type: NodeType.IF
  Expression: j < 0

  ID: 5
  Type: NodeType.RETURN
  Expression: (new uint256[](0),0)

  ID: 6
  Type: NodeType.IF
  Expression: j + 1 < _maxAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: amount = uint256(j + 1)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: resultIds = new uint256[](amount)

  ID: 11
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 12
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 14
  Type: NodeType.IFLOOP
  Expression: i < amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: resultIds[i] = tulipArr[uint256(j)]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: j --

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 18
  Type: NodeType.RETURN
  Expression: (resultIds,uint256(j + 1))

  ID: 19
  Type: NodeType.RETURN
  Expression: (tulipIds,amountRemaining)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 13
  11 -> 14
  12 -> 18
  13 -> 11
  14 -> 15
  14 -> 12
  15 -> 16
  16 -> 17
  17 -> 14

Function: setMaintenance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: underMaintenance = _underMaintenance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MaintenanceUpdate(underMaintenance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: upgradeContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newContractAddress = _newContractAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: deprecated = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ContractUpgrade(_newContractAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyAdmins()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: increasePeriod = 6000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: underMaintenance = false

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: deprecated = false

Edges:
  0 -> 1
  1 -> 2


