Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = msg.sender

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: INTERNAL TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IERC20
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: CrypTalk
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),WETH)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[uniswapV2Pair] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromFees(owner(),true)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromFees(address(this),true)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromFees(address(0xdead),true)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromFees(mktWallet,true)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(owner(),true)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(address(uniswapV2Router),true)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(address(this),true)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(address(0xdead),true)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(address(uniswapV2Pair),true)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: setExcludedFromMaxTransaction(mktWallet,true)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_balances[msg.sender])

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),type()(uint256).max)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 18

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: currentAllowance != type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,msg.sender,currentAllowance - amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: ! launched && (from != owner() && from != address(this) && to != owner())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Trading not enabled)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: canSwap = balanceOf(address(this)) >= swapTokensAtAmount

  ID: 8
  Type: NodeType.IF
  Expression: canSwap && ! swapping && ! automatedMarketMakerPairs[from] && ! _isExcludedFromFees[from] && ! _isExcludedFromFees[to]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: takeFee = ! swapping

  ID: 14
  Type: NodeType.IF
  Expression: _isExcludedFromFees[from] || _isExcludedFromFees[to]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: senderBalance = _balances[from]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

  ID: 19
  Type: NodeType.VARIABLE
  Expression: fees = 0

  ID: 20
  Type: NodeType.IF
  Expression: takeFee

  ID: 21
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[to] && sellTotalFees > 0

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: fees = (amount * sellTotalFees) / 1000

  ID: 23
  Type: NodeType.IF
  Expression: automatedMarketMakerPairs[from] && buyTotalFees > 0

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: fees = (amount * buyTotalFees) / 1000

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: fees > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: amount = amount - fees

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= fees

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] += fees

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(this),fees)

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: _balances[from] -= amount

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 33
  21 -> 22
  21 -> 23
  22 -> 26
  23 -> 24
  23 -> 25
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 32
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36

Function: setDistributionFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mktFee = _MktFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(mktFee == 100,Distribution have to be equal to 100%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_buyTotalFees <= 400,Buy fees must be less than or equal to 40%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_sellTotalFees <= 400,Sell fees must be less than or equal to 40%)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buyTotalFees = _buyTotalFees

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellTotalFees = _sellTotalFees

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setExcludedFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFees[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setExcludedFromMaxTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedMaxTransactionAmount[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: openTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! launched,Already launched)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: launched = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutomatedMarketMakerPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != uniswapV2Pair,The pair cannot be removed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: automatedMarketMakerPairs[pair] = value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setSwapAtAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newSwapAmount >= (totalSupply() * 1) / 100000,Swap amount cannot be lower than 0.001% of the supply)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newSwapAmount <= (totalSupply() * 5) / 1000,Swap amount cannot be higher than 0.5% of the supply)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapTokensAtAmount = newSwapAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: updateMktWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newAddress != address(0),Address cannot be zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: mktWallet = newAddress

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: excludedFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcludedFromFees[account]

Edges:
  0 -> 1

Function: withdrawStuckToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _contractBalance = IERC20(token).balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(token,to,_contractBalance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawStuckETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(addr != address(0),Invalid address)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = addr.call{value: address(this).balance}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Withdrawal failed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: swapThreshold = swapTokensAtAmount

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: balanceOf(address(this)) > swapTokensAtAmount * 20

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = swapTokensAtAmount * 20

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(swapThreshold,0,path,address(this),block.timestamp)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 11
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: ethForMkt = (ethBalance * mktFee) / 100

  ID: 13
  Type: NodeType.VARIABLE
  Expression: ethForTreasury = ethBalance - ethForMkt

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(mktWallet).call{value: ethForMkt}()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: SwapAndLiquify(swapThreshold,ethForTreasury)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 16
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapTokensAtAmount = (_totalSupply * 2) / 10000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mktWallet = 0x7de44D46360Be1fb58632D54d77941c83a64B6C7

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyTotalFees = 300

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellTotalFees = 100

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mktFee = 100

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = CrypTalk

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = TALK

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 10_000_000 * 1e18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


