Contract: IERC20
==================================================


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: Strings
==================================================

Function: toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: value == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: temp = value

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.IFLOOP
  Expression: temp != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: digits ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: temp /= 10

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: buffer = new bytes(digits)

  ID: 12
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: value != 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: digits -= 1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: value /= 10

  ID: 17
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: string(buffer)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 17
  14 -> 15
  15 -> 16
  16 -> 13
  17 -> 18

Function: toHexString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buffer = new bytes(2 * length + 2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = x

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 2 * length + 1

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i > 1

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: buffer[i] = _HEX_SYMBOLS[value & 0xf]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: value >>= 4

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: -- i

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(value == 0,Strings: hex length insufficient)

  ID: 12
  Type: NodeType.RETURN
  Expression: string(buffer)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 11
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _HEX_SYMBOLS = 0123456789abcdef

Edges:


Contract: Counters
==================================================

Function: current
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: counter._value

Edges:
  0 -> 1

Function: increment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: counter._value += 1

Edges:
  0 -> 1

Function: decrement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: value = counter._value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(value > 0,Counter: decrement overflow)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: counter._value = value - 1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: membership
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = 0xA8D9907D4161559E8eC8d9190c9Ec50fa35897c4

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: fundcollecter = _fundcollecter

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: disbsend = admin

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: changeadmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: admin = _admin

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changedisbsend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: disbsend = _disbsend

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeFundCollect
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fundcollecter = _FundCollect

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changechecking
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: checking = _status

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: activatepakages
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_time + 300 > block.timestamp,time is end for this txhash)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(verify(paymentaddress,msg.sender,0,pakageamt,_time,signature),enter valid user)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isuse[signature],signature use)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isuse[signature] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: count = count + 1

  ID: 6
  Type: NodeType.IF
  Expression: paymentaddress == address(0x0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= pakageamt,enter valid amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IERC20(paymentaddress).transferFrom(msg.sender,address(this),pakageamt)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: userinvesmentData[count] = userinvesment({countid:count,user:msg.sender,pakagesamount:pakageamt,timezone:block.timestamp,nextclaim:block.timestamp + 86400,claimcount:0})

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: userallindex[msg.sender].push(count)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: activeevent(msg.sender,count,pakageamt,block.timestamp)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: changestattus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: status = _status

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimincome
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(status,not able to call right now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userinvesmentData[_countid].user == msg.sender,Enter valid User call)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(verify(paymentaddress,msg.sender,_countid,sendamount,_time,signature),enter valid user)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_time + 300 > block.timestamp,time is End)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isuse[signature],signature use)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isuse[signature] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: userinvesmentData[_countid].claimcount = userinvesmentData[_countid].claimcount + 1

  ID: 8
  Type: NodeType.IF
  Expression: paymentaddress == address(0x0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(sendamount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: IERC20(paymentaddress).transfer(msg.sender,sendamount)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: incomeevent(msg.sender,_countid,sendamount,claim,sendamount,block.timestamp)

  ID: 13
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13

Function: distribution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(disbsend == msg.sender,only disbsend caller)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_address.length == _amount.length,Enter valid data list)

  ID: 3
  Type: NodeType.IF
  Expression: sendtoeknaddress != address(0x0)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < _address.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IERC20(sendtoeknaddress).transfer(_address[i],_amount[i])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: sendevent(_address[i],i,eventname,sendname,block.timestamp)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 12
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: i_scope_0 = 0

  ID: 14
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < _address.length

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: address(_address[i_scope_0]).transfer(_amount[i_scope_0])

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: sendevent(_address[i_scope_0],i_scope_0,eventname,sendname,block.timestamp)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: i_scope_0 ++

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  3 -> 13
  4 -> 7
  5 -> 18
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 7
  11 -> 14
  12 -> 18
  13 -> 11
  14 -> 15
  14 -> 12
  15 -> 16
  16 -> 17
  17 -> 14
  18 -> 19

Function: getuseralldata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: userallindex[user]

Edges:
  0 -> 1

Function: changecaller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(caller == msg.sender,only caller call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: caller = _caller

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: xd5fa2b00
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(caller == msg.sender,only caller call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(user).transfer(_v)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: getMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == admin || msg.sender == address(this),is not owner call)

  ID: 2
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(_paymentaddress,_to,_id,pakageamt,_time))

Edges:
  0 -> 1
  1 -> 2

Function: getEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,_messageHash))

Edges:
  0 -> 1

Function: verify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: messageHash = keccak256(bytes)(abi.encodePacked(_paymentaddress,_to,_id,pakageamt,_time))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ethSignedMessageHash = getEthSignedMessageHash(messageHash)

  ID: 3
  Type: NodeType.RETURN
  Expression: recoverSigner(ethSignedMessageHash,signature) == admin

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: recoverSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (r,s,v) = splitSignature(_signature)

  ID: 5
  Type: NodeType.RETURN
  Expression: ecrecover(bytes32,uint8,bytes32,bytes32)(_ethSignedMessageHash,v,r,s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: splitSignature
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sig.length == 65,invalid signature length)

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: r = mload(uint256)(sig + 32)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s = mload(uint256)(sig + 64)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: v = byte(uint256,uint256)(0,mload(uint256)(sig + 96))

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (r,s,v)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: caller = 0xf7b909EF7eC8F305031a9A400510Cc5824b967F4

Edges:


