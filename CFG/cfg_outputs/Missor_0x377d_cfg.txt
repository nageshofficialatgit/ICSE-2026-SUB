Contract: IUniswapV2Router02
==================================================


Contract: Missor
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] = totalSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowance[address(this)][routerAddress] = type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transfer(msg.sender,to,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[from][msg.sender] -= amount

  ID: 2
  Type: NodeType.RETURN
  Expression: _transfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(TradingOpenStatus || from == deployer || to == deployer)

  ID: 2
  Type: NodeType.IF
  Expression: ! TradingOpenStatus && pair == address(0) && amount > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pair = to

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= amount

  ID: 6
  Type: NodeType.IF
  Expression: to == pair && ! swapping && balanceOf[address(this)] >= swapAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: swapping = true

  ID: 8
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: path[1] = ETH

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(swapAmount,0,path,address(this),block.timestamp)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: deployer.transfer(address(this).balance)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: swapping = false

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: from != address(this)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: amount -= FinalFigure

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: balanceOf[address(this)] += FinalFigure

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 22
  Type: NodeType.RETURN
  Expression: true

  ID: 23
  Type: NodeType.IF
  Expression: from == pair

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: FinalFigure = amount * BurnTNumber / 100

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: FinalFigure = amount * ConfirmTNumber / 100

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 14
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 23
  15 -> 19
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 17

Function: OpenTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == deployer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! TradingOpenStatus)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TradingOpenStatus = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: setMISSOR
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender == deployer

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BurnTNumber = newTBurn

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ConfirmTNumber = newTConfirm

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newTBurn < 10)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newTConfirm < 10)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BurnTNumber = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ConfirmTNumber = 0

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Missor

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = MISSOR

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSupply = 1_000_000 * 10 ** decimals

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapAmount = totalSupply / 100

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _uniswapV2Router = IUniswapV2Router02(routerAddress)

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: deployer = address(address(0x670Ab58fBeE3aBd1328C8a36ce27F9E491C459Ab))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


