Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: IERC20Meta
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: QuestAI
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxWallet = address(_msgSender())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[address(this)] = _tTotal * 96 / 100

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[_vitalik] = _tTotal * 2 / 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[_trump] = _tTotal * 2 / 100

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _feeExempt[_msgSender()] = true

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 9
  Type: NodeType.IFLOOP
  Expression: i < _randomAddresses.length

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _isFakeTrader[_randomAddresses[i]] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _fakeTraders.push(_randomAddresses[i])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),address(this),_tTotal * 96 / 100)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_vitalik,_tTotal * 2 / 100)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_trump,_tTotal * 2 / 100)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Ownable()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 13
  8 -> 6
  9 -> 10
  9 -> 7
  10 -> 11
  11 -> 12
  12 -> 9
  13 -> 14
  14 -> 15
  16 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_maxTxAmount == _tTotal,Remove limits first)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: super.renounceOwnership()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tAmounts[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tAllowed[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_tAllowed[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: generateFakeVolume
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeExempt[msg.sender],Not authorized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,Trading not open)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < numberOfTransactions

  ID: 7
  Type: NodeType.VARIABLE
  Expression: fakeTrader = _randomAddresses[i % _randomAddresses.length]

  ID: 8
  Type: NodeType.VARIABLE
  Expression: fakeAmount = (_tTotal * (i + 1)) / 1000

  ID: 9
  Type: NodeType.IF
  Expression: i % 2 == 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: Transfer(uniswapV2Pair,fakeTrader,fakeAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(fakeTrader,uniswapV2Pair,fakeAmount)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: FakeVolumeGenerated(numberOfTransactions)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 14
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 6

Function: simulateLargeTransactions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeExempt[msg.sender],Not authorized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,Trading not open)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](3)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: amounts[0] = _tTotal.div(100)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: amounts[1] = _tTotal.div(50)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: amounts[2] = _tTotal.div(20)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < amounts.length

  ID: 11
  Type: NodeType.VARIABLE
  Expression: fakeTrader = _randomAddresses[i]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(uniswapV2Pair,fakeTrader,amounts[i])

  ID: 13
  Type: NodeType.VARIABLE
  Expression: sellAmount = amounts[i].mul(90).div(100)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(fakeTrader,uniswapV2Pair,sellAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 10

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tAllowed[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxAmount = _getDefaultTax(from,to,amount)

  ID: 5
  Type: NodeType.IF
  Expression: from != owner() && to != owner()

  ID: 6
  Type: NodeType.IF
  Expression: from == uniswapV2Pair && to != address(uniswapV2Router) && ! _feeExempt[to]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingOpen,Trading not open yet.)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount >= 10 ** _decimals,Amount too small)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: to == uniswapV2Pair

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: ! inSwap && to == uniswapV2Pair && swapEnabled && _buyCount > _preventSwapBefore

  ID: 16
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 17
  Type: NodeType.IF
  Expression: contractTokenBalance > _taxSwapThreshold

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: swapTokensForETH(min(amount,min(contractTokenBalance,_maxTaxSwap)))

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: sendTax()

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: taxAmount > 0

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[address(this)] = _tAmounts[address(this)].add(taxAmount)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(this),taxAmount)

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[from] = _tAmounts[from].sub(amount)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _tAmounts[to] = _tAmounts[to].add(amount.sub(taxAmount))

  ID: 29
  Type: NodeType.IF
  Expression: _deadWallet != to

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount.sub(taxAmount))

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_finalBuyTax).div(100)

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_initialBuyTax).div(100)

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_finalSellTax).div(100)

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount.mul(_initialSellTax).div(100)

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 22
  6 -> 7
  6 -> 11
  7 -> 8
  8 -> 32
  10 -> 11
  11 -> 12
  12 -> 36
  12 -> 14
  14 -> 15
  15 -> 16
  15 -> 21
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 26
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  29 -> 31
  30 -> 31
  32 -> 33
  32 -> 34
  33 -> 35
  34 -> 35
  35 -> 10
  36 -> 37
  36 -> 38
  37 -> 39
  38 -> 39
  39 -> 14

Function: _getDefaultTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _feeExempt[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(from,msg.sender,amount)

  ID: 3
  Type: NodeType.IF
  Expression: from != uniswapV2Pair && to == _deadWallet

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(from,msg.sender,amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 6
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: min
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: swapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: removeLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = _tTotal

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletSize = _tTotal

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MaxTxAmountUpdated(_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: sendTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxWallet.transfer(address(this).balance)

Edges:
  0 -> 1

Function: clearQuestEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(address(this).balance > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(_msgSender()).transfer(address(this).balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: clearQuestToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(_address).transfer(_msgSender(),_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setTaxWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeExempt[msg.sender],Not authorized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxWallet = newWallet

Edges:
  0 -> 1
  1 -> 2

Function: launchQuest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingOpen,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),_tTotal)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 9
  Type: NodeType.VARIABLE
  Expression: fakeTrader = _randomAddresses[i]

  ID: 10
  Type: NodeType.VARIABLE
  Expression: fakeAmount = _tTotal.div(200)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(uniswapV2Pair,fakeTrader,fakeAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(fakeTrader,uniswapV2Pair,fakeAmount.mul(9).div(10))

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = true

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 14
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 8
  14 -> 15
  16 -> 1

Function: isTrader
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isFakeTrader[account]

Edges:
  0 -> 1

Function: getTradingStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tradingOpen

Edges:
  0 -> 1

Function: getSwapStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: swapEnabled

Edges:
  0 -> 1

Function: getFeeStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _feeExempt[account]

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 5

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 5

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 5

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = 2 * _tTotal / 100

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletSize = 2 * _tTotal / 100

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxSwapThreshold = 1 * _tTotal / 100

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTaxSwap = 1 * _tTotal / 100

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _randomAddresses = (address(0x1234567890123456789012345678901234567890),address(0x2345678901234567890123456789012345678901),address(0x3456789012345678901234567890123456789012),address(0x4567890123456789012345678901234567890123),address(0x5678901234567890123456789012345678901234))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 1_000_000_000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Quest AI

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = QUEST

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _vitalik = address(0x5D3a3702B835Aa2385dFEaBAd15AA02864915a04)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _trump = address(0x09AB3e8a8915B3cbF0510D71f1D3c2Df16a092D8)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _deadWallet = address(0xdead)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


