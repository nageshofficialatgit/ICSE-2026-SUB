Contract: IERC20
==================================================


Contract: TecFiStaking
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token = IERC20(_token)

Edges:
  0 -> 1

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.transferFrom(msg.sender,address(this),amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: userStake.amount += amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: userStake.unlockTime = block.timestamp + LOCK_PERIOD

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(userStake.amount > 0,No tokens staked)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= userStake.unlockTime,Tokens are still locked)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: toUnstake = userStake.amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: userStake.amount = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,toUnstake)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: claimRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[msg.sender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: reward = userStake.rewardDebt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(reward > 0,No rewards to claim)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: userStake.rewardDebt = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,reward)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: updateReward(msg.sender)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: calculateReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userStake = stakes[user]

  ID: 2
  Type: NodeType.IF
  Expression: userStake.amount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: userStake.rewardDebt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: timeElapsed = block.timestamp - userStake.lastUpdated

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pending = (userStake.amount * APY * timeElapsed) / (SECONDS_IN_YEAR * 100)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: available = MAX_REWARD_SUPPLY - totalRewardsDistributed

  ID: 8
  Type: NodeType.IF
  Expression: pending > available

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pending = available

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: userStake.rewardDebt + pending

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: APY = 210

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SECONDS_IN_YEAR = 31536000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LOCK_PERIOD = 604800

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_REWARD_SUPPLY = 800000000000000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


