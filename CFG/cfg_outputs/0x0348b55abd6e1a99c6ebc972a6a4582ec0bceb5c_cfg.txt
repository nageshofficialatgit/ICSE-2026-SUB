Contract: PromissoryToken
==================================================

Function: PromissoryToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: founder = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: founderHash = sha3()(_founderHash)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: cofounder = _cofounderAddress

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: numOfBackers = _numOfBackers

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: cofounderSwitchAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != cofounder

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: cofounder = _newCofounderAddr

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: CofounderSwitchedEvent(_newCofounderAddr)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: founderSwitchRequest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: sha3()(_founderHash) != founderHash

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tempHashes[msg.sender] = sha3()(msg.sender,founderHash,_oneTimesharedPhrase)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: FounderSwitchRequestEvent(msg.sender)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: cofounderApproveSwitchRequest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != cofounder || sha3()(_newFounderAddr,founderHash,_oneTimesharedPhrase) != tempHashes[_newFounderAddr]

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: previousFounders.push(founder)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: founder = _newFounderAddr

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: FounderSwitchedEvent(_newFounderAddr)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setPrepaid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenPrice == 0 || _tokenAmount == 0 || claimedPrepaidUnits > 0 || _tokenAmount + prepaidUnits + claimedUnits > promissoryUnits

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: earlyBackerList.length == numOfBackers && backers[_backer].length == 0

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: backers[_backer].length == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: earlyBackerList.push(_backer)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: backersAddresses.push(_backer)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank))

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: prepaidUnits += _tokenAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: lastPrice = _tokenPrice

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AddedPrepaidTokensEvent(_backer,backers[_backer].length - 1,_tokenPrice,_tokenAmount)

  ID: 15
  Type: NodeType.RETURN
  Expression: backers[_backer].length - 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: founderCall()

Edges:
  0 -> 16
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: claimPrepaid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: backers[msg.sender][_index].claimed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: claimedPrepaidUnits += _tokenAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: PrepaidTokensClaimedEvent(msg.sender,_index,_boughtTokensPrice,_tokenAmount)

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: EarliestBackersSet()

Edges:
  0 -> 7
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 6
  7 -> 1

Function: claim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: lastPrice == 0

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: msg.value == 0

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: discountPrice = lastPrice * discountAmount / divisor

  ID: 8
  Type: NodeType.VARIABLE
  Expression: tokenAmount = (msg.value / discountPrice)

  ID: 9
  Type: NodeType.IF
  Expression: tokenAmount + claimedUnits + prepaidUnits > promissoryUnits

  ID: 10
  Type: NodeType.THROW
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: backers[msg.sender].length == 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: backersAddresses.push(msg.sender)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0))

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: claimedUnits += tokenAmount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: TokensClaimedEvent(msg.sender,backers[msg.sender].length - 1,discountPrice,tokenAmount)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: MinimumBackersClaimed()

Edges:
  0 -> 18
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 1

Function: checkBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (backers[_backerAddress][index].tokenPrice,backers[_backerAddress][index].tokenAmount,backers[_backerAddress][index].privateHash,backers[_backerAddress][index].prepaid,backers[_backerAddress][index].claimed)

Edges:
  0 -> 1

Function: approveWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: withdrawalsVotes[msg.sender][_withdrawalID] = true

  ID: 2
  Type: NodeType.VARIABLE
  Expression: backerStake = 0

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < backers[msg.sender].length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: backerStake += backers[msg.sender][i].tokenAmount

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: withdrawals[_withdrawalID].backerApprovals.push(msg.sender)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: withdrawals[_withdrawalID].totalStake += backerStake

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: WithdrawalVotedEvent(_withdrawalID,msg.sender,backerStake,withdrawals[_withdrawalID].totalStake)

  ID: 12
  Type: NodeType.IF
  Expression: withdrawals[_withdrawalID].totalStake >= (claimedPrepaidUnits + claimedUnits) / 3

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: isMultiPayment = withdrawals[_withdrawalID].destination.length > 1

  ID: 15
  Type: NodeType.IF
  Expression: isMultiPayment == false

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: amountPerAddr = withdrawals[_withdrawalID].Amount

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: amountPerAddr = withdrawals[_withdrawalID].Amount / withdrawals[_withdrawalID].destination.length

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: withdrawals[_withdrawalID].approved = true

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: withdrawals[_withdrawalID].spent = true

  ID: 21
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 22
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: i = 0

  ID: 24
  Type: NodeType.IFLOOP
  Expression: i < withdrawals[_withdrawalID].destination.length

  ID: 25
  Type: NodeType.IF
  Expression: ! withdrawals[_withdrawalID].destination[i].send(amountPerAddr)

  ID: 26
  Type: NodeType.THROW
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: WithdrawalApproved(_withdrawalID,withdrawals[_withdrawalID].totalStake,isMultiPayment,withdrawals[_withdrawalID].Amount,withdrawals[_withdrawalID].reason)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: backerCheck(_withdrawalID)

Edges:
  0 -> 31
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 30
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 23
  21 -> 24
  22 -> 29
  23 -> 21
  24 -> 25
  24 -> 22
  25 -> 26
  25 -> 27
  27 -> 28
  28 -> 24
  29 -> 30
  31 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: this.balance < _totalAmount

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: withdrawalID = withdrawals.length ++

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: withdrawals[withdrawalID].Amount = _totalAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: withdrawals[withdrawalID].reason = _reason

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: withdrawals[withdrawalID].destination = _destination

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: withdrawals[withdrawalID].approved = false

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: withdrawals[withdrawalID].spent = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: WithdrawalCreatedEvent(withdrawalID,_totalAmount,_reason)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: founderCall()

Edges:
  0 -> 11
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: backersRedeemed[_backerAddr] == true

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalTokens = 0

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < backers[_backerAddr].length

  ID: 9
  Type: NodeType.IF
  Expression: backers[_backerAddr][i].claimed == false

  ID: 10
  Type: NodeType.RETURN
  Expression: false

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: totalTokens += backers[_backerAddr][i].tokenAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.IF
  Expression: totalTokens == _amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: backersRedeemed[_backerAddr] = true

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: RedeemEvent(_backerAddr,totalTokens)

  ID: 17
  Type: NodeType.RETURN
  Expression: true

  ID: 18
  Type: NodeType.RETURN
  Expression: false

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 14
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  9 -> 11
  11 -> 12
  12 -> 13
  13 -> 8
  14 -> 15
  14 -> 18
  15 -> 16
  16 -> 17

Function: getWithdrawalData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (withdrawals[_withdrawalID].Amount,withdrawals[_withdrawalID].approved,withdrawals[_withdrawalID].reason,withdrawals[_withdrawalID].backerApprovals,withdrawals[_withdrawalID].totalStake,withdrawals[_withdrawalID].destination)

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.THROW
  Expression: 

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: discountAmount = 60

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: divisor = 100

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minimumPrepaidClaimedPercent = 65

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: promissoryUnits = 3000000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: prepaidUnits = 0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimedUnits = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimedPrepaidUnits = 0

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: redeemedTokens = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: lastPrice = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


