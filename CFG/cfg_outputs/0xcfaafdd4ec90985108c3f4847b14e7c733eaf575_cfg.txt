Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: TrueloveAccessControl
==================================================

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: TrueloveBase
==================================================

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: EIP20Interface
==================================================


Contract: ERC721
==================================================


Contract: ERC721Metadata
==================================================

Function: getMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenId == 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = Hello World! :D

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: count = 15

  ID: 4
  Type: NodeType.IF
  Expression: _tokenId == 2

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = I would definitely choose a medi

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = um length string.

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: count = 49

  ID: 8
  Type: NodeType.IF
  Expression: _tokenId == 3

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = Lorem ipsum dolor sit amet, mi e

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = st accumsan dapibus augue lorem,

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: buffer[2] =  tristique vestibulum id, libero

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: buffer[3] =  suscipit varius sapien aliquam.

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: count = 128

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: (buffer,count)

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 16
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 15
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17


Contract: TrueloveOwnership
==================================================

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: TrueloveFlowerOwnership
==================================================

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_UINT256 = 2 ** 256 - 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

Edges:
  0 -> 1


Contract: TrueloveNextSale
==================================================

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: TrueloveRegistration
==================================================

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: giveRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[_addr].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[_addr].able = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: buyRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registerPrice <= msg.value)

  ID: 2
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: _giveSenderRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRegistrationRight
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: able = registrationRights[_addr].able

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: used = registrationRights[_addr].used

  ID: 3
  Type: NodeType.RETURN
  Expression: (able,used)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signed = registrations[_unique].signed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secret = registrations[_unique].secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: topSecret = registrations[_unique].topSecret

  ID: 4
  Type: NodeType.RETURN
  Expression: (signed,secret,topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].able == true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].used == false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].used = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTrueloveByCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrations[_registerID].signed == false)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].signed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].secret = _secret

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].topSecret = _topSecret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: TrueloveShop
==================================================

Function: giveRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[_addr].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[_addr].able = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: buyRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registerPrice <= msg.value)

  ID: 2
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: _giveSenderRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRegistrationRight
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: able = registrationRights[_addr].able

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: used = registrationRights[_addr].used

  ID: 3
  Type: NodeType.RETURN
  Expression: (able,used)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signed = registrations[_unique].signed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secret = registrations[_unique].secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: topSecret = registrations[_unique].topSecret

  ID: 4
  Type: NodeType.RETURN
  Expression: (signed,secret,topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].able == true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].used == false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].used = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTrueloveByCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrations[_registerID].signed == false)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].signed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].secret = _secret

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].topSecret = _topSecret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: buyDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index == 1 || _index == 2 || _index == 3)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: model = _getModel(_index)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.current < model.total)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.price <= msg.value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newDiamondId = diamonds.push(Diamond({model:model.model,year:model.year,no:uint16(model.current + 1),activateAt:0})) - 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,msg.sender,newDiamondId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: model.current ++

  ID: 9
  Type: NodeType.RETURN
  Expression: newDiamondId

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: buyFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flower.current + _amount < flower.total)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: price = currentFlowerPrice()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(price * _amount <= msg.value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,_amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _addFlower(_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: currentFlowerPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: flower.current < 10 + REMAINING_AMOUNT

  ID: 2
  Type: NodeType.RETURN
  Expression: flower.price

  ID: 3
  Type: NodeType.IF
  Expression: flower.current < 30 + REMAINING_AMOUNT

  ID: 4
  Type: NodeType.RETURN
  Expression: flower.price * 4

  ID: 5
  Type: NodeType.RETURN
  Expression: flower.price * 10

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: TrueloveDelivery
==================================================

Function: buyDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index == 1 || _index == 2 || _index == 3)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: model = _getModel(_index)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.current < model.total)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.price <= msg.value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newDiamondId = diamonds.push(Diamond({model:model.model,year:model.year,no:uint16(model.current + 1),activateAt:0})) - 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,msg.sender,newDiamondId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: model.current ++

  ID: 9
  Type: NodeType.RETURN
  Expression: newDiamondId

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: buyFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flower.current + _amount < flower.total)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: price = currentFlowerPrice()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(price * _amount <= msg.value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,_amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _addFlower(_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: currentFlowerPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: flower.current < 10 + REMAINING_AMOUNT

  ID: 2
  Type: NodeType.RETURN
  Expression: flower.price

  ID: 3
  Type: NodeType.IF
  Expression: flower.current < 30 + REMAINING_AMOUNT

  ID: 4
  Type: NodeType.RETURN
  Expression: flower.price * 4

  ID: 5
  Type: NodeType.RETURN
  Expression: flower.price * 10

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5

Function: giveRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[_addr].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[_addr].able = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: buyRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registerPrice <= msg.value)

  ID: 2
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: _giveSenderRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRegistrationRight
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: able = registrationRights[_addr].able

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: used = registrationRights[_addr].used

  ID: 3
  Type: NodeType.RETURN
  Expression: (able,used)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signed = registrations[_unique].signed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secret = registrations[_unique].secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: topSecret = registrations[_unique].topSecret

  ID: 4
  Type: NodeType.RETURN
  Expression: (signed,secret,topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].able == true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].used == false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].used = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTrueloveByCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrations[_registerID].signed == false)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].signed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].secret = _secret

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].topSecret = _topSecret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: signSendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendDiamond(_truelove,_registerID,_letter,_date,_tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: sendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > diamonds[_tokenId].activateAt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_truelove,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamonds[_tokenId].activateAt = now + 259200

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Diamond,diamonds[_tokenId].model,diamonds[_tokenId].year,diamonds[_tokenId].no,1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: signSendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendFlower(_truelove,_registerID,_letter,_date,_amount)

Edges:
  0 -> 1
  1 -> 2

Function: sendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_truelove] += (_amount * 9 / 10)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Flower,flower.model,flower.year,0,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: giftSendIndex = 1

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: TrueloveAuction
==================================================

Function: signSendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendDiamond(_truelove,_registerID,_letter,_date,_tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: sendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > diamonds[_tokenId].activateAt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_truelove,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamonds[_tokenId].activateAt = now + 259200

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Diamond,diamonds[_tokenId].model,diamonds[_tokenId].year,diamonds[_tokenId].no,1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: signSendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendFlower(_truelove,_registerID,_letter,_date,_amount)

Edges:
  0 -> 1
  1 -> 2

Function: sendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_truelove] += (_amount * 9 / 10)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Flower,flower.model,flower.year,0,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: buyDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index == 1 || _index == 2 || _index == 3)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: model = _getModel(_index)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.current < model.total)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.price <= msg.value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newDiamondId = diamonds.push(Diamond({model:model.model,year:model.year,no:uint16(model.current + 1),activateAt:0})) - 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,msg.sender,newDiamondId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: model.current ++

  ID: 9
  Type: NodeType.RETURN
  Expression: newDiamondId

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: buyFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flower.current + _amount < flower.total)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: price = currentFlowerPrice()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(price * _amount <= msg.value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,_amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _addFlower(_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: currentFlowerPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: flower.current < 10 + REMAINING_AMOUNT

  ID: 2
  Type: NodeType.RETURN
  Expression: flower.price

  ID: 3
  Type: NodeType.IF
  Expression: flower.current < 30 + REMAINING_AMOUNT

  ID: 4
  Type: NodeType.RETURN
  Expression: flower.price * 4

  ID: 5
  Type: NodeType.RETURN
  Expression: flower.price * 10

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5

Function: giveRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[_addr].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[_addr].able = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: buyRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registerPrice <= msg.value)

  ID: 2
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: _giveSenderRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRegistrationRight
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: able = registrationRights[_addr].able

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: used = registrationRights[_addr].used

  ID: 3
  Type: NodeType.RETURN
  Expression: (able,used)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signed = registrations[_unique].signed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secret = registrations[_unique].secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: topSecret = registrations[_unique].topSecret

  ID: 4
  Type: NodeType.RETURN
  Expression: (signed,secret,topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].able == true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].used == false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].used = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTrueloveByCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrations[_registerID].signed == false)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].signed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].secret = _secret

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].topSecret = _topSecret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: setDiamondAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = DiamondAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isDiamondAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamondAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createDiamondAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,diamondAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamondAuction.createAuction(_tokenId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setFlowerAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = FlowerAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isFlowerAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createFlowerAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: approveFlower(flowerAuction,_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerAuction.createAuction(_amount,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawAuctionBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondAuction.withdrawBalance()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerAuction.withdrawBalance()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: giftSendIndex = 1

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: TrueloveCore
==================================================

Function: setDiamondAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = DiamondAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isDiamondAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamondAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createDiamondAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,diamondAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamondAuction.createAuction(_tokenId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setFlowerAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = FlowerAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isFlowerAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createFlowerAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: approveFlower(flowerAuction,_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerAuction.createAuction(_amount,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawAuctionBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondAuction.withdrawBalance()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerAuction.withdrawBalance()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: signSendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendDiamond(_truelove,_registerID,_letter,_date,_tokenId)

Edges:
  0 -> 1
  1 -> 2

Function: sendDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now > diamonds[_tokenId].activateAt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_truelove,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamonds[_tokenId].activateAt = now + 259200

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Diamond,diamonds[_tokenId].model,diamonds[_tokenId].year,diamonds[_tokenId].no,1)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: signSendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sendFlower(_truelove,_registerID,_letter,_date,_amount)

Edges:
  0 -> 1
  1 -> 2

Function: sendFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_truelove] += (_amount * 9 / 10)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: GiftSend(giftSendIndex,_truelove,msg.sender,_registerID,_letter,_date,GiftType.Flower,flower.model,flower.year,0,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: giftSendIndex ++

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sendCheck(_registerID)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: buyDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index == 1 || _index == 2 || _index == 3)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: model = _getModel(_index)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.current < model.total)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(model.price <= msg.value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: newDiamondId = diamonds.push(Diamond({model:model.model,year:model.year,no:uint16(model.current + 1),activateAt:0})) - 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,msg.sender,newDiamondId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: model.current ++

  ID: 9
  Type: NodeType.RETURN
  Expression: newDiamondId

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: buyFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flower.current + _amount < flower.total)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: price = currentFlowerPrice()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(price * _amount <= msg.value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _giveSenderRegistration()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,_amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _addFlower(_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: currentFlowerPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: flower.current < 10 + REMAINING_AMOUNT

  ID: 2
  Type: NodeType.RETURN
  Expression: flower.price

  ID: 3
  Type: NodeType.IF
  Expression: flower.current < 30 + REMAINING_AMOUNT

  ID: 4
  Type: NodeType.RETURN
  Expression: flower.price * 4

  ID: 5
  Type: NodeType.RETURN
  Expression: flower.price * 10

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5

Function: giveRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[_addr].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[_addr].able = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  5 -> 1

Function: buyRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registerPrice <= msg.value)

  ID: 2
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: _giveSenderRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: registrationRights[msg.sender].able == false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].able = true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: getRegistrationRight
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: able = registrationRights[_addr].able

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: used = registrationRights[_addr].used

  ID: 3
  Type: NodeType.RETURN
  Expression: (able,used)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getRegistration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: signed = registrations[_unique].signed

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secret = registrations[_unique].secret

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: topSecret = registrations[_unique].topSecret

  ID: 4
  Type: NodeType.RETURN
  Expression: (signed,secret,topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].able == true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrationRights[msg.sender].used == false)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrationRights[msg.sender].used = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: signTrueloveByCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _signTruelove(_registerID,_secret,_topSecret)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _signTruelove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(registrations[_registerID].signed == false)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].signed = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].secret = _secret

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: registrations[_registerID].topSecret = _topSecret

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: TrueloveNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

Edges:
  0 -> 1

Function: openNextSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= nextSaleTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond1.price = _diamond1Price

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _openSaleDiamond2(_diamond2Model,_diamond2Price)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _openSaleFlower(_flowerModel,_flowerPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _giveRemainingFlower()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _openSaleDiamond2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamond2.model = _diamond2Model

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamond2.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: diamond2.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond2.price = _diamond2Price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _openSaleFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.model = _flowerModel

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flower.current = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flower.year ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flower.price = _flowerPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flower.total = 1000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _giveRemainingFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFlower(0,msg.sender,REMAINING_AMOUNT)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _addFlower(REMAINING_AMOUNT)

Edges:
  0 -> 1
  1 -> 2

Function: supportsEIP20Interface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _interfaceID == EIP20InterfaceSignature

Edges:
  0 -> 1

Function: _transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: transferFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[msg.sender] >= _value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFromFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = flowerAllowed[_from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(flowerBalances[_from] >= _value && allowance >= _value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: flowerBalances[_from] -= _value

  ID: 5
  Type: NodeType.IF
  Expression: allowance < MAX_UINT256

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[_from][msg.sender] -= _value

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TransferFlower(_from,_to,_value)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

  ID: 10
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9

Function: balanceOfFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerBalances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approveFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flowerAllowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ApprovalFlower(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowanceFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: flowerAllowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: _addFlower
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: flower.current += _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: flowerTotalSupply += _amount

Edges:
  0 -> 1
  1 -> 2

Function: TrueloveBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = 1000000000000000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: registerPrice = 10000000000000000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setVars()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: diamond1 = Model({model:OnlyOne,current:0,total:1,year:2018,price:1000000000000000000000})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: diamond2 = Model({model:Eternity2018,current:0,total:5,year:2018,price:50000000000000000000})

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: diamond3 = Model({model:Memorial,current:0,total:1000,year:2018,price:1000000000000000000})

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: flower = Model({model:MySassyGirl,current:0,total:10000000,year:2018,price:10000000000000000})

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _setVars
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: beginSaleTime = now

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nextSaleTime = beginSaleTime + 25920000

Edges:
  0 -> 1
  1 -> 2

Function: setSendGiftPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendGiftPrice = _sendGiftPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: setRegisterPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: registerPrice = _registerPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _index == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: diamond1

  ID: 3
  Type: NodeType.IF
  Expression: _index == 2

  ID: 4
  Type: NodeType.RETURN
  Expression: diamond2

  ID: 5
  Type: NodeType.IF
  Expression: _index == 3

  ID: 6
  Type: NodeType.RETURN
  Expression: diamond3

  ID: 7
  Type: NodeType.IF
  Expression: _index == 4

  ID: 8
  Type: NodeType.RETURN
  Expression: flower

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert()()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: getModel
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _model = _getModel(_index)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = _model.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: current = _model.current

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: total = _model.total

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: year = _model.year

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = _model.price

  ID: 7
  Type: NodeType.RETURN
  Expression: (model,current,total,year,price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: setMetadataAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: erc721Metadata = ERC721Metadata(_contractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 2
  2 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete diamondIndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamondIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: diamondIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(diamondAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: diamonds.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = diamondIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDiamonds = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: diamondId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: diamondId <= totalDiamonds

  ID: 12
  Type: NodeType.IF
  Expression: diamondIndexToOwner[diamondId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = diamondId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: diamondId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: tokenMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc721Metadata != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (buffer,count) = erc721Metadata.getMetadata(_tokenId,_preferredTransport)

  ID: 5
  Type: NodeType.RETURN
  Expression: _toString(buffer,count)

  ID: 6
  Type: NodeType.RETURN
  Expression: infoUrl

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: getDiamond
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: diamond = diamonds[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: model = diamond.model

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: year = diamond.year

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: no = diamond.no

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: activateAt = diamond.activateAt

  ID: 6
  Type: NodeType.RETURN
  Expression: (model,year,no,activateAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: TrueloveCore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: cooAddress = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: setNewAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newContractAddress = _v2Address

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ContractUpgrade(_v2Address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(diamondAuction) || msg.sender == address(flowerAuction))

Edges:
  0 -> 1

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress.transfer(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: giftSendIndex = 1

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = CryptoTruelove

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = CT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(0x9a20483d)

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: EIP20InterfaceSignature = bytes4(0x98474109)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REMAINING_AMOUNT = 50000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: ClockAuctionBase
==================================================

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),_auction.seller,uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1


Contract: ClockAuction
==================================================

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),_auction.seller,uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(msg.sender,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _bid(_tokenId,msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:


Contract: DiamondAuction
==================================================

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId].seller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _bid(_tokenId,msg.value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),_auction.seller,uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: DiamondAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ClockAuction(_nftAddr,0)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isDiamondAuction = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:


Contract: FlowerAuction
==================================================

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: FlowerAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownerCut = 0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: candidateContract = EIP20Interface(_nftAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsEIP20Interface(InterfaceSignature_EIP20))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(tokenContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_amount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,_amount,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _bid(_auctionId,_amount,msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_amount)

Edges:
  0 -> 1
  1 -> 2

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(tokenContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = auctions[_auctionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_auctionId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = auctions[_auctionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_auctionId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = auctions[_auctionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.amount,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,amount,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = auctions[_auctionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenContract.transferFromFlower(_owner,this,_amount)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tokenContract.transferFlower(_receiver,_amount)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: currentAuctionId ++

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: auctions[currentAuctionId] = _auction

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sellerToAuction[_auction.seller] = currentAuctionId

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(currentAuctionId,_auction.seller,_auction.amount,uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amount = auctions[_auctionId].amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: delete sellerToAuction[auctions[_auctionId].seller]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: delete auctions[_auctionId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_auctionId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = auctions[_auctionId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: totalPrice = price * _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= totalPrice)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: auction.amount -= _amount

  ID: 7
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 8
  Type: NodeType.IF
  Expression: totalPrice > 0

  ID: 9
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(totalPrice)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = totalPrice - auctioneerCut

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - totalPrice

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 15
  Type: NodeType.IF
  Expression: auction.amount == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: AuctionSoldOut(_auctionId)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: delete auctions[_auctionId]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_auctionId,_amount,msg.sender)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.RETURN
  Expression: totalPrice

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 12
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  15 -> 18
  16 -> 17
  17 -> 19
  18 -> 19
  19 -> 20

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFlowerAuction = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_EIP20 = bytes4(0x98474109)

Edges:


