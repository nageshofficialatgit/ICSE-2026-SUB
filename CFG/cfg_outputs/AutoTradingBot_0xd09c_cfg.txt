Contract: IUniswapV3Router
==================================================


Contract: IERC20
==================================================


Contract: IWETH
==================================================


Contract: IOps
==================================================


Contract: IGelato
==================================================


Contract: AutoTradingBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV3Router(UNISWAP_V3_ROUTER_ADDRESS)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ops = IOps(_gelatoOps)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: gelato = IGelato(_gelatoFeeHandler)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: initializeGelatoTask
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: createGelatoTask()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wbtcToUsdcThreshold = _wbtcToUsdcThreshold

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: usdcToWbtcThreshold = _usdcToWbtcThreshold

  ID: 3
  Type: NodeType.IF
  Expression: gelatoTaskId != bytes32(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ops.cancelTask(gelatoTaskId)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: createGelatoTask()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ReInitialized(msg.sender,_wbtcToUsdcThreshold,_usdcToWbtcThreshold)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: createGelatoTask
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: gelatoTaskId = ops.createTask(address(this),this.checkAndTrade.selector,address(this),abi.encodeWithSelector(this.canExecute.selector))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: GelatoTaskCreated(gelatoTaskId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: cancelGelatoTask
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ops.cancelTask(gelatoTaskId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: gelatoTaskId = bytes32(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: canExecute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: wbtcBalance = IERC20(WBTC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: usdcBalance = IERC20(USDC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 3
  Type: NodeType.IF
  Expression: wbtcBalance > wbtcToUsdcThreshold || usdcBalance > usdcToWbtcThreshold

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: execPayload = abi.encodeWithSelector(this.checkAndTrade.selector)

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,execPayload)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (false,bytes())

  ID: 8
  Type: NodeType.RETURN
  Expression: (canExec,execPayload)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  6 -> 7

Function: checkAndTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: wbtcBalance = IERC20(WBTC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: usdcBalance = IERC20(USDC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 3
  Type: NodeType.IF
  Expression: wbtcBalance > wbtcToUsdcThreshold

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: executeTrade(WBTC_CONTRACT_ADDRESS,USDC_CONTRACT_ADDRESS,wbtcBalance,3000)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: usdcBalance > usdcToWbtcThreshold

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: executeTrade(USDC_CONTRACT_ADDRESS,WBTC_CONTRACT_ADDRESS,usdcBalance,3000)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (fee,feeToken) = gelato.getFeeDetails()

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: IERC20(feeToken).transfer(address(gelato),fee)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyGelato()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: executeTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).approve(UNISWAP_V3_ROUTER_ADDRESS,amountIn)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountOutMin = (amountIn * (10000 - slippageTolerance)) / 10000

  ID: 3
  Type: NodeType.VARIABLE
  Expression: params = IUniswapV3Router.ExactInputSingleParams({tokenIn:tokenIn,tokenOut:tokenOut,fee:fee,recipient:address(this),deadline:block.timestamp + 120,amountIn:amountIn,amountOutMinimum:amountOutMin,sqrtPriceLimitX96:0})

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountOut = uniswapRouter.exactInputSingle(params)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(tokenIn,tokenOut,amountIn,amountOut)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Insufficient ETH balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: address(recipientWallet).transfer(amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: withdrawUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: usdcBalance = IERC20(USDC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= usdcBalance,Insufficient USDC balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(USDC_CONTRACT_ADDRESS).transfer(owner,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: unwrapWBTCAndSendToWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Amount must be greater than zero)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: wbtcBalance = IERC20(WBTC_CONTRACT_ADDRESS).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= wbtcBalance,Insufficient WBTC balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(WBTC_CONTRACT_ADDRESS).approve(UNISWAP_V3_ROUTER_ADDRESS,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IWETH(WBTC_CONTRACT_ADDRESS).withdraw(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: address(recipientWallet).transfer(amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: slippageTolerance = 1000

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: wbtcToUsdcThreshold = 6000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: usdcToWbtcThreshold = 5000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: recipientWallet = 0x939280dA81bA3F39ce29B3226AdAD869fF96f5C5

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBTC_CONTRACT_ADDRESS = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC_CONTRACT_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNISWAP_V3_ROUTER_ADDRESS = 0xE592427A0AEce92De3Edee1F18E0157C05861564

Edges:
  0 -> 1
  1 -> 2


