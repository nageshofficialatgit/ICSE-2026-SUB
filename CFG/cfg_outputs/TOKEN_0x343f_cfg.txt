Contract: IBEP20
==================================================


Contract: SafeMath
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: SafeMathInt
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)((b == 0) || (c / b == a))

  ID: 4
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(b != - 1 || a != MIN_INT256)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)((b >= 0 && c <= a) || (b < 0 && c > a))

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)((b >= 0 && c >= a) || (b < 0 && c < a))

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: abs
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(a != MIN_INT256)

  ID: 3
  Type: NodeType.IF
  Expression: a < 0

  ID: 4
  Type: NodeType.RETURN
  Expression: - a

  ID: 5
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 1
  1 -> 3
  3 -> 4
  3 -> 5

Function: toUint256Safe
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(a >= 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: uint256(a)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_INT256 = int256(1) << 255

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_INT256 = ~ (int256(1) << 255)

Edges:
  0 -> 1


Contract: SafeMathUint
==================================================

Function: toInt256Safe
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: b = int256(a)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(b >= 0)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = initialOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),initialOwner)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: TokensFactory
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: theOwner = msg.sender

Edges:
  0 -> 1

Function: createToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= _fee,Not enough cash)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: newToken = new TOKEN(cOwner,marketingWallet,name,symbol,totalSupply,taxFee)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: withdrawEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == theOwner,Only owner can withdraw)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: beneficiary.transfer(address(this).balance)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _fee = 10000000000000000

Edges:


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IUniswapV2Router01
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: TOKEN
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _marketingWallet = marketingWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _name = name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _symbol = symbol

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tTotal = totalSupply * 10 ** 18

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = taxFee

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _rOwned[cOwner] = _rTotal

  ID: 7
  Type: NodeType.VARIABLE
  Expression: uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Router = uniswapV2Router

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH())

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[owner()] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[_marketingWallet] = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromAutoLiquidity[_uniswapV2Pair] = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromAutoLiquidity[address(_uniswapV2Router)] = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),cOwner,_tTotal)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Ownable(cOwner)

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _isExcluded[account]

  ID: 2
  Type: NodeType.RETURN
  Expression: _tOwned[account]

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: tokenFromReflection(_rOwned[account])

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,BEP20: decreased allowance below zero))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: isExcludedFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcluded[account]

Edges:
  0 -> 1

Function: totalFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tFeeTotal

Edges:
  0 -> 1

Function: deliver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isExcluded[sender],Excluded addresses cannot call this function)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (None,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (rAmount,None,None) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _tFeeTotal = _tFeeTotal.add(tAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: reflectionFromToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tAmount <= _tTotal,Amount must be less than supply)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (None,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.IF
  Expression: ! deductTransferFee

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (rAmount,None,None) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 9
  Type: NodeType.RETURN
  Expression: rAmount

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: (None,rTransferAmount,None) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 12
  Type: NodeType.RETURN
  Expression: rTransferAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  10 -> 11
  11 -> 12

Function: tokenFromReflection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rAmount <= _rTotal,Amount must be less than total reflections)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 3
  Type: NodeType.RETURN
  Expression: rAmount.div(currentRate)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: excludeFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isExcluded[account],Account is already excluded)

  ID: 2
  Type: NodeType.IF
  Expression: _rOwned[account] > 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tOwned[account] = tokenFromReflection(_rOwned[account])

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcluded[account] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _excluded.push(account)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: includeInReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_isExcluded[account],Account is already excluded)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _excluded.length

  ID: 6
  Type: NodeType.IF
  Expression: _excluded[i] == account

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _excluded[i] = _excluded[_excluded.length - 1]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tOwned[account] = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _isExcluded[account] = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _excluded.pop()

  ID: 11
  Type: NodeType.BREAK
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 14
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 12
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 3
  12 -> 13
  13 -> 5
  14 -> 1

Function: setMarketingWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _marketingWallet = marketingWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMinimumTokenBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _minTokenBalance = minimumToken

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setExcludedFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[account] = e

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setTaxFeePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(taxFee <= 4,Holder Reflection cannot exceed 4%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxFee = taxFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setLiquidityFeePercent
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(liquidityFee <= 10,Liquidity Fee cannot exceed 10%)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = liquidityFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setPercentageOfLiquidityForMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _percentageOfLiquidityForMarketing = marketingFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxWalletTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxWalletToken = _maxToken

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setSwapAndLiquifyEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _swapAndLiquifyEnabled = e

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SwapAndLiquifyEnabledUpdated(e)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setUniswapRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: uniswapV2Router = IUniswapV2Router02(r)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Router = uniswapV2Router

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setUniswapPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Pair = p

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setExcludedFromAutoLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromAutoLiquidity[a] = b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: _reflectFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tFeeTotal = _tFeeTotal.add(tFee)

Edges:
  0 -> 1
  1 -> 2

Function: _getTValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tFee = calculateFee(tAmount,_taxFee)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tLiquidity = calculateFee(tAmount,_liquidityFee)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tTransferAmount = tAmount.sub(tFee)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tTransferAmount = tTransferAmount.sub(tLiquidity)

  ID: 5
  Type: NodeType.RETURN
  Expression: (tTransferAmount,tFee,tLiquidity)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _getRValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rAmount = tAmount.mul(currentRate)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rFee = tFee.mul(currentRate)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rLiquidity = tLiquidity.mul(currentRate)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rTransferAmount = rAmount.sub(rFee)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: rTransferAmount = rTransferAmount.sub(rLiquidity)

  ID: 6
  Type: NodeType.RETURN
  Expression: (rAmount,rTransferAmount,rFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (rSupply,tSupply) = _getCurrentSupply()

  ID: 4
  Type: NodeType.RETURN
  Expression: rSupply.div(tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getCurrentSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rSupply = _rTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tSupply = _tTotal

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _excluded.length

  ID: 7
  Type: NodeType.IF
  Expression: _rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply

  ID: 8
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: rSupply = rSupply.sub(_rOwned[_excluded[i]])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tSupply = tSupply.sub(_tOwned[_excluded[i]])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.IF
  Expression: rSupply < _rTotal.div(_tTotal)

  ID: 14
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.RETURN
  Expression: (rSupply,tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 13
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 6
  13 -> 14
  13 -> 15
  15 -> 16

Function: takeTransactionFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tAmount <= 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rAmount = tAmount.mul(currentRate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _rOwned[to] = _rOwned[to].add(rAmount)

  ID: 6
  Type: NodeType.IF
  Expression: _isExcluded[to]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _tOwned[to] = _tOwned[to].add(tAmount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8

Function: calculateFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: amount.mul(fee).div(100)

Edges:
  0 -> 1

Function: isExcludedFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcludedFromFee[account]

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),BEP20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),BEP20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),BEP20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),BEP20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: from != owner() && to != owner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount,Transfer amount exceeds the maxTxAmount.)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 8
  Type: NodeType.IF
  Expression: contractTokenBalance >= _maxTxAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: contractTokenBalance = _maxTxAmount

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: from != owner() && to != owner() && to != address(0) && to != address(0xdead) && to != _uniswapV2Pair

  ID: 12
  Type: NodeType.VARIABLE
  Expression: contractBalanceRecepient = balanceOf(to)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(contractBalanceRecepient + amount <= maxWalletToken,Exceeds maximum wallet token amount.)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: isOverMinTokenBalance = contractTokenBalance >= _minTokenBalance

  ID: 16
  Type: NodeType.IF
  Expression: isOverMinTokenBalance && ! _inSwapAndLiquify && ! _isExcludedFromAutoLiquidity[from] && _swapAndLiquifyEnabled

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: swapAndLiquify(contractTokenBalance)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: takeFee = true

  ID: 20
  Type: NodeType.IF
  Expression: _isExcludedFromFee[from] || _isExcludedFromFee[to]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: takeFee = false

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _tokenTransfer(from,to,amount,takeFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 14
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23

Function: swapAndLiquify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: half = contractTokenBalance.div(2)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: otherHalf = contractTokenBalance.sub(half)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: initialBalance = address(this).balance

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: swapTokensForBnb(half)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: newBalance = address(this).balance.sub(initialBalance)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: marketingFee = newBalance.mul(_percentageOfLiquidityForMarketing).div(100)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: bnbForLiquidity = newBalance.sub(marketingFee)

  ID: 8
  Type: NodeType.IF
  Expression: marketingFee > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: address(_marketingWallet).transfer(marketingFee)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: MarketingFeeSent(_marketingWallet,marketingFee)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: addLiquidity(otherHalf,bnbForLiquidity)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SwapAndLiquify(half,bnbForLiquidity,otherHalf)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 1

Function: swapTokensForBnb
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_uniswapV2Router),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _uniswapV2Router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: _tokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: previousTaxFee = _taxFee

  ID: 2
  Type: NodeType.VARIABLE
  Expression: previousLiquidityFee = _liquidityFee

  ID: 3
  Type: NodeType.IF
  Expression: ! takeFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _taxFee = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = 0

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transferFromExcluded(sender,recipient,amount)

  ID: 9
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && _isExcluded[recipient]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _transferToExcluded(sender,recipient,amount)

  ID: 11
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _transferStandard(sender,recipient,amount)

  ID: 13
  Type: NodeType.IF
  Expression: _isExcluded[sender] && _isExcluded[recipient]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _transferBothExcluded(sender,recipient,amount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _transferStandard(sender,recipient,amount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: ! takeFee

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _taxFee = previousTaxFee

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _liquidityFee = previousLiquidityFee

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 19
  9 -> 10
  9 -> 11
  10 -> 18
  11 -> 12
  11 -> 13
  12 -> 17
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23

Function: _transferStandard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: takeTransactionFee(address(this),tLiquidity,currentRate)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14

Function: _transferBothExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: takeTransactionFee(address(this),tLiquidity,currentRate)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: _transferToExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: takeTransactionFee(address(this),tLiquidity,currentRate)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _transferFromExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (tTransferAmount,tFee,tLiquidity) = _getTValues(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: (rAmount,rTransferAmount,rFee) = _getRValues(tAmount,tFee,tLiquidity,currentRate)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(rAmount)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: takeTransactionFee(address(this),tLiquidity,currentRate)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _reflectFee(rFee,tFee)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 100000000 * 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _rTotal = (MAX - (MAX % _tTotal))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Token Name

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = TOKEN

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxFee = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _liquidityFee = 2

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _percentageOfLiquidityForMarketing = 50

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxWalletToken = _tTotal

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = _tTotal

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _minTokenBalance = 1 * 10 ** 18

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapAndLiquifyEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

Edges:


