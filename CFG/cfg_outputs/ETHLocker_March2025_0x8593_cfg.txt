Contract: I_chainlink
==================================================


Contract: ETHLocker_March2025
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = address(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: max_eth_usdt = 3900 * 10 ** 8

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: min_eth_usdt = 1200 * 10 ** 8

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(max_eth_usdt > min_eth_usdt,max target price should be greater than min)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: hard_unlock_time = 1767225600

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nextUnlockTime = block.timestamp + 5184000

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: init_time = block.timestamp

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: get_ETH_price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ChainLink = I_chainlink(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419)

  ID: 2
  Type: NodeType.IF
  Expression: _roundId != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (None,historicalPrice,None,historicalTimestamp,None) = ChainLink.getRoundData(_roundId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(historicalTimestamp > init_time,historical data timestamp should be greater than init_time)

  ID: 7
  Type: NodeType.RETURN
  Expression: historicalPrice

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (None,latestPrice,None,None,None) = ChainLink.latestRoundData()

  ID: 11
  Type: NodeType.RETURN
  Expression: latestPrice

  ID: 12
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 8
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 10
  10 -> 11

Function: setUnlockTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newUnlockTime > block.timestamp,Unlock time must be in the future)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newUnlockTime > nextUnlockTime,New unlock time must be greater than current unlock time)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newUnlockTime < hard_unlock_time,New unlock time must be less than hard unlock time)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nextUnlockTime = newUnlockTime

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: init_time = block.timestamp

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: UnlockTimeUpdated(newUnlockTime)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: canUnlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: block.timestamp > hard_unlock_time

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: ethPrice = get_ETH_price(_round_id)

  ID: 5
  Type: NodeType.IF
  Expression: ethPrice == 0

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (ethPrice > max_eth_usdt || ethPrice < min_eth_usdt || block.timestamp > nextUnlockTime)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(canUnlock(_round_id),Unlock conditions not met)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance > 0,No balance to withdraw)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (sent,None) = owner.call{value: balance}()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sent,Transfer failed)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Withdrawn(owner,balance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Deposited(msg.sender,msg.value)

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Deposited(msg.sender,msg.value)

Edges:
  0 -> 1

Function: backup_withdraw_2
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp > hard_unlock_time,current time should be > hard_unlock_time)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(balance)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


