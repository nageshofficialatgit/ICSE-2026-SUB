Contract: IERC20
==================================================


Contract: IUniswapV2Router
==================================================


Contract: DexSniper
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: router = _router

Edges:
  0 -> 1
  1 -> 2

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingEnabled = _state

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setProfitTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: profitTarget = _target

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: recoverTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).transfer(owner,IERC20(token).balanceOf(address(this)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: recoverEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: snipe
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingEnabled,Trading disabled)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = IUniswapV2Router(router).WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 5
  Type: NodeType.VARIABLE
  Expression: deadline = block.timestamp + 300

  ID: 6
  Type: NodeType.VARIABLE
  Expression: startBalance = IERC20(tokenOut).balanceOf(address(this))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router(router).swapExactETHForTokens{value: msg.value}(amountOutMin,path,address(this),deadline)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: endBalance = IERC20(tokenOut).balanceOf(address(this))

  ID: 9
  Type: NodeType.IF
  Expression: (endBalance - startBalance) > 0

  ID: 10
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 11
  Type: NodeType.IF
  Expression: ethBalance >= profitTarget

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(ethBalance)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  15 -> 1

Function: getEstimatedTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = IUniswapV2Router(router).WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router(router).getAmountsOut(amountIn,path)

  ID: 5
  Type: NodeType.RETURN
  Expression: amounts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingEnabled = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: profitTarget = 50000000000000000

Edges:
  0 -> 1


