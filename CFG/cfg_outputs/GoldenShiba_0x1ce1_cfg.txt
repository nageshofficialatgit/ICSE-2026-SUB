Contract: GoldenShiba
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[from][msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,Transfer > allowance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(from,msg.sender,currentAllowance - amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),New owner is zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingOpen = _open

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TradingOpened(_open)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPair[pair] = status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: PairUpdated(pair,status)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(holder != address(0),Approve from zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Approve to zero addr)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[holder][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(holder,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),Transfer from zero addr)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),Transfer to zero addr)

  ID: 3
  Type: NodeType.IF
  Expression: ! tradingOpen

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from == owner,Trading not opened)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: fromBalance = _balances[from]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromBalance >= amount,Insufficient balance)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: takeTax = false

  ID: 9
  Type: NodeType.VARIABLE
  Expression: taxAmount = 0

  ID: 10
  Type: NodeType.IF
  Expression: isPair[from]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: takeTax = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: taxAmount = (amount * buyTax) / 100

  ID: 13
  Type: NodeType.IF
  Expression: isPair[to]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: takeTax = true

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: taxAmount = (amount * sellTax) / 100

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - amount

  ID: 19
  Type: NodeType.IF
  Expression: takeTax && taxAmount > 0

  ID: 20
  Type: NodeType.VARIABLE
  Expression: transferAmount = amount - taxAmount

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _balances[taxWallet] += taxAmount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += transferAmount

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,taxWallet,taxAmount)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,transferAmount)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 13
  11 -> 12
  12 -> 17
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 25
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 27
  25 -> 26
  26 -> 27

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingOpen = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = BLACK

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = BLK

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 1_000_000_000 * 10 ** _decimals

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyTax = 5

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellTax = 5

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: taxWallet = 0x50Ee2d1d768398081CC9c4f425709cAe3C2F4711

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


