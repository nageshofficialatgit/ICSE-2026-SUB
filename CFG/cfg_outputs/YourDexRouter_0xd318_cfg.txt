Contract: IERC20
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: YourDexRouter
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeCollector != address(0),YourDexRouter: ZERO_ADDRESS)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_feeRate <= 300,YourDexRouter: FEE_TOO_HIGH)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feeCollector = _feeCollector

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: feeRate = _feeRate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: updateFeeCollector
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newFeeCollector != address(0),YourDexRouter: ZERO_ADDRESS)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldFeeCollector = feeCollector

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feeCollector = _newFeeCollector

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FeeCollectorUpdated(oldFeeCollector,_newFeeCollector)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyFeeCollector()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateFeeRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newFeeRate <= 300,YourDexRouter: FEE_TOO_HIGH)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldFeeRate = feeRate

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: feeRate = _newFeeRate

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FeeRateUpdated(oldFeeRate,_newFeeRate)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyFeeCollector()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: swapETHForTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,YourDexRouter: ZERO_ETH_SENT)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (msg.value * feeRate) / FEE_DENOMINATOR

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = msg.value - fee

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: (success,None) = feeCollector.call{value: fee}()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,YourDexRouter: FEE_TRANSFER_FAILED)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = WETH

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 10
  Type: NodeType.VARIABLE
  Expression: initialBalance = IERC20(tokenOut).balanceOf(msg.sender)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router02(UNISWAP_ROUTER).swapExactETHForTokens{value: swapAmount}(minAmountOut,path,msg.sender,block.timestamp + 300)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: finalBalance = IERC20(tokenOut).balanceOf(msg.sender)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountOut = finalBalance - initialBalance

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(msg.sender,WETH,tokenOut,msg.value,amountOut,fee)

  ID: 15
  Type: NodeType.RETURN
  Expression: amountOut

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 17
  Type: NodeType.RETURN
  Expression: amountOut

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: swapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,YourDexRouter: ZERO_AMOUNT_IN)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (amountIn * feeRate) / FEE_DENOMINATOR

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = amountIn - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transferFrom(msg.sender,address(this),amountIn)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transfer(feeCollector,fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).approve(UNISWAP_ROUTER,swapAmount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 10
  Type: NodeType.VARIABLE
  Expression: initialBalance = address(msg.sender).balance

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForETH(swapAmount,minAmountOut,path,msg.sender,block.timestamp + 300)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: finalBalance = address(msg.sender).balance

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountOut = finalBalance - initialBalance

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(msg.sender,tokenIn,WETH,amountIn,amountOut,fee)

  ID: 15
  Type: NodeType.RETURN
  Expression: amountOut

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 17
  Type: NodeType.RETURN
  Expression: amountOut

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: swapTokensForTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,YourDexRouter: ZERO_AMOUNT_IN)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (amountIn * feeRate) / FEE_DENOMINATOR

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = amountIn - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transferFrom(msg.sender,address(this),amountIn)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).transfer(feeCollector,fee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).approve(UNISWAP_ROUTER,swapAmount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 10
  Type: NodeType.VARIABLE
  Expression: initialBalance = IERC20(tokenOut).balanceOf(msg.sender)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForTokens(swapAmount,minAmountOut,path,msg.sender,block.timestamp + 300)

  ID: 12
  Type: NodeType.VARIABLE
  Expression: finalBalance = IERC20(tokenOut).balanceOf(msg.sender)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountOut = finalBalance - initialBalance

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: SwapExecuted(msg.sender,tokenIn,tokenOut,amountIn,amountOut,fee)

  ID: 15
  Type: NodeType.RETURN
  Expression: amountOut

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

  ID: 17
  Type: NodeType.RETURN
  Expression: amountOut

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1

Function: getAmountOut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amountIn > 0,YourDexRouter: ZERO_AMOUNT_IN)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (amountIn * feeRate) / FEE_DENOMINATOR

  ID: 3
  Type: NodeType.VARIABLE
  Expression: swapAmount = amountIn - fee

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router02(UNISWAP_ROUTER).getAmountsOut(swapAmount,path)

  ID: 8
  Type: NodeType.RETURN
  Expression: amounts[1]

  ID: 9
  Type: NodeType.RETURN
  Expression: amountOut

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: getProtocolInfo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (PROTOCOL_NAME,VERSION,feeRate)

  ID: 2
  Type: NodeType.RETURN
  Expression: (name,version,currentFeeRate)

Edges:
  0 -> 1

Function: rescueTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).transfer(feeCollector,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyFeeCollector()

Edges:
  0 -> 2
  2 -> 1

Function: rescueETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = feeCollector.call{value: amount}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,YourDexRouter: ETH_TRANSFER_FAILED)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyFeeCollector()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_DENOMINATOR = 10000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PROTOCOL_NAME = YourDex Protocol

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 1.0.0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


