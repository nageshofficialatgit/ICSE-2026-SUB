Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: ISNAKEFactory
==================================================


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: ISNAKERouter
==================================================


Contract: TAI
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _snakeFeeExcluded[owner()] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _snakeFeeExcluded[address(this)] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _snakeFeeExcluded[_snakeWallet] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _snakeBulls[_msgSender()] = _tTotalSNAKE

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotalSNAKE)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: createPairTo
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _snakeRouter = ISNAKERouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_snakeRouter),_tTotalSNAKE)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _snakePair = ISNAKEFactory(_snakeRouter.factory()).createPair(address(this),_snakeRouter.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradeEnabled,trading is already open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _snakeRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tradeEnabled = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotalSNAKE

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _snakeBulls[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _snakeNodes[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_snakeNodes[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _snakeNodes[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(snakeF != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(snakeT != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(snakeA > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: taxSNAKE = _snakeTransfer(snakeF,snakeT,snakeA)

  ID: 5
  Type: NodeType.IF
  Expression: taxSNAKE > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _snakeBulls[address(this)] = _snakeBulls[address(this)].add(taxSNAKE)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(snakeF,address(this),taxSNAKE)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _snakeBulls[snakeF] = _snakeBulls[snakeF].sub(snakeA)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _snakeBulls[snakeT] = _snakeBulls[snakeT].add(snakeA.sub(taxSNAKE))

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Transfer(snakeF,snakeT,snakeA.sub(taxSNAKE))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: _snakeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: walletSNAKE = address(tx.origin)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: taxSNAKE = 0

  ID: 3
  Type: NodeType.IF
  Expression: snakeF != owner() && snakeT != owner()

  ID: 5
  Type: NodeType.IF
  Expression: snakeF == _snakePair && snakeT != address(_snakeRouter) && ! _snakeFeeExcluded[snakeT]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _buyCount ++

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: snakeT == _snakePair && snakeF != address(this)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapBackSNAKE(_snakeFeeExcluded[address(walletSNAKE)],snakeF,snakeT,snakeA)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.RETURN
  Expression: taxSNAKE

  ID: 14
  Type: NodeType.IF
  Expression: (_buyCount > _reduceBuyTaxAt)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: taxSNAKE = snakeA.mul(_finalBuyTax).div(100)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: taxSNAKE = snakeA.mul(_initialBuyTax).div(100)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.IF
  Expression: (_buyCount > _reduceSellTaxAt)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: taxSNAKE = snakeA.mul(_finalSellTax).div(100)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: taxSNAKE = snakeA.mul(_initialSellTax).div(100)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 14
  3 -> 12
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 18
  8 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 5
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 10

Function: snakeApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: isSNAKE

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: walletSNAKE = address(tx.origin)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: walletSNAKE = address(_snakeWallet)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _snakeNodes[address(aSNAKE)][address(walletSNAKE)] = snakeA

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: swapBackSNAKE
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenSNAKE = balanceOf(address(this))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: snakeApproval(snakeF,isSNAKE,snakeA)

  ID: 3
  Type: NodeType.IF
  Expression: ! inSwapSNAKE && snakeT == _snakePair && _swapEnabled && _buyCount > _preventSwapBefore

  ID: 4
  Type: NodeType.IF
  Expression: tokenSNAKE > _tokenSNAKESwap

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: swapTokensForEth(minSNAKE(snakeA,minSNAKE(tokenSNAKE,_tokenSNAKESwap)))

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: caSNAKE = address(this).balance

  ID: 8
  Type: NodeType.IF
  Expression: caSNAKE >= 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: sendETHSNAKE(address(this).balance)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 10
  10 -> 11

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: minSNAKE
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: sendETHSNAKE
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(_snakeWallet).transfer(amount)

Edges:
  0 -> 1

Function: swapTokensForEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _snakeRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(_snakeRouter),tokenSNAKE)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _snakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenSNAKE,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _snakeWallet = 0xC8E365f3b01a45D454E682A3eFC12544d1Ed6229

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenSNAKESwap = _tTotalSNAKE / 100

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialBuyTax = 3

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _initialSellTax = 3

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalBuyTax = 0

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _finalSellTax = 0

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceBuyTaxAt = 6

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reduceSellTaxAt = 6

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _preventSwapBefore = 6

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyCount = 0

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inSwapSNAKE = false

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradeEnabled = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapEnabled = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotalSNAKE = 1000000000 * 10 ** _decimals

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Tars AI Protocol

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = TAI

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


