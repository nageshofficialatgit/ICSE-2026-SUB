Contract: Aureon
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = initialSupply * (10 ** uint256(decimals))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] = totalSupply

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][spender] = value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance[from][msg.sender] >= value,Allowance exceeded)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowance[from][msg.sender] -= value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[from] >= value,Insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fee = (value * sellFee) / 100

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newAmount = value - fee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += newAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] += fee

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,newAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,owner,fee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: setSellFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fee <= 10,Fee too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sellFee = fee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = Aureon

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = AUR

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: sellFee = 5

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


