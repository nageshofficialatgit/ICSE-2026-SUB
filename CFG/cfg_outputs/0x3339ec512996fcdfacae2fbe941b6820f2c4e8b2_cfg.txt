Contract: Owned
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: NewOwner(msg.sender,_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: Escapable
==================================================

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: NewOwner(msg.sender,_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Escapable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: escapeHatchCaller = _escapeHatchCaller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: escapeHatchDestination = _escapeHatchDestination

Edges:
  0 -> 1
  1 -> 2

Function: escapeHatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: total = this.balance

  ID: 2
  Type: NodeType.IF
  Expression: ! escapeHatchDestination.send(total)

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: EscapeHatchCalled(total)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyEscapeHatchCallerOrOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  6 -> 1

Function: changeEscapeCaller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: escapeHatchCaller = _newEscapeHatchCaller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyEscapeHatchCallerOrOwner()

Edges:
  0 -> 2
  2 -> 1


Contract: Vault
==================================================

Function: Escapable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: escapeHatchCaller = _escapeHatchCaller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: escapeHatchDestination = _escapeHatchDestination

Edges:
  0 -> 1
  1 -> 2

Function: escapeHatch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: total = this.balance

  ID: 2
  Type: NodeType.IF
  Expression: ! escapeHatchDestination.send(total)

  ID: 3
  Type: NodeType.THROW
  Expression: 

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: EscapeHatchCalled(total)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyEscapeHatchCallerOrOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  6 -> 1

Function: changeEscapeCaller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: escapeHatchCaller = _newEscapeHatchCaller

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyEscapeHatchCallerOrOwner()

Edges:
  0 -> 2
  2 -> 1

Function: Owned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: NewOwner(msg.sender,_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Vault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: absoluteMinTimeLock = _absoluteMinTimeLock

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: timeLock = _timeLock

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: securityGuard = _securityGuard

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: maxSecurityGuardDelay = _maxSecurityGuardDelay

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Escapable(_escapeHatchCaller,_escapeHatchDestination)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: numberOfAuthorizedPayments
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: authorizedPayments.length

Edges:
  0 -> 1

Function: receiveEther
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: EtherReceived(msg.sender,msg.value)

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: receiveEther()

Edges:
  0 -> 1

Function: authorizePayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! allowedSpenders[msg.sender]

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: idPayment = authorizedPayments.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: authorizedPayments.length ++

  ID: 6
  Type: NodeType.VARIABLE
  Expression: p = authorizedPayments[idPayment]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: p.spender = msg.sender

  ID: 8
  Type: NodeType.IF
  Expression: _paymentDelay > 10 ** 18

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: p.recipient = _recipient

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: p.amount = _amount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: p.name = _name

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: p.reference = _reference

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: PaymentAuthorized(idPayment,p.recipient,p.amount)

  ID: 17
  Type: NodeType.RETURN
  Expression: idPayment

  ID: 18
  Type: NodeType.IF
  Expression: _paymentDelay >= timeLock

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: p.earliestPayTime = now + _paymentDelay

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: p.earliestPayTime = now + timeLock

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 18
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 12

Function: collectAuthorizedPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _idPayment >= authorizedPayments.length

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: p = authorizedPayments[_idPayment]

  ID: 5
  Type: NodeType.IF
  Expression: msg.sender != p.recipient

  ID: 6
  Type: NodeType.THROW
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: ! allowedSpenders[p.spender]

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: now < p.earliestPayTime

  ID: 12
  Type: NodeType.THROW
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.IF
  Expression: p.canceled

  ID: 15
  Type: NodeType.THROW
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: p.paid

  ID: 18
  Type: NodeType.THROW
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: this.balance < p.amount

  ID: 21
  Type: NodeType.THROW
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: p.paid = true

  ID: 24
  Type: NodeType.IF
  Expression: ! p.recipient.send(p.amount)

  ID: 25
  Type: NodeType.THROW
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: PaymentExecuted(_idPayment,p.recipient,p.amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  26 -> 27

Function: delayPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _idPayment >= authorizedPayments.length

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _delay > 10 ** 18

  ID: 5
  Type: NodeType.THROW
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: p = authorizedPayments[_idPayment]

  ID: 8
  Type: NodeType.IF
  Expression: (p.securityGuardDelay + _delay > maxSecurityGuardDelay) || (p.paid) || (p.canceled)

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: p.securityGuardDelay += _delay

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: p.earliestPayTime += _delay

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlySecurityGuard()

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: cancelPayment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _idPayment >= authorizedPayments.length

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: p = authorizedPayments[_idPayment]

  ID: 5
  Type: NodeType.IF
  Expression: p.canceled

  ID: 6
  Type: NodeType.THROW
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: p.paid

  ID: 9
  Type: NodeType.THROW
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: p.canceled = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: PaymentCanceled(_idPayment)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 13
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  11 -> 12
  13 -> 1

Function: authorizeSpender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowedSpenders[_spender] = _authorize

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SpenderAuthorization(_spender,_authorize)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setSecurityGuard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: securityGuard = _newSecurityGuard

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setTimelock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _newTimeLock < absoluteMinTimeLock

  ID: 2
  Type: NodeType.THROW
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: timeLock = _newTimeLock

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  3 -> 4
  5 -> 1

Function: setMaxSecurityGuardDelay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxSecurityGuardDelay = _maxSecurityGuardDelay

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1


