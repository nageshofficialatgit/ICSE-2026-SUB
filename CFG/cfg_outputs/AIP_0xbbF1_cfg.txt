Contract: Auth
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = creatorOwner

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IERC20
==================================================


Contract: AIP
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balance[msg.sender] = tSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,balance[msg.sender])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: noFee[_owner] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: noFee[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: noFee[_taxWallet] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: noFee[routerAddress] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _nolimits[_owner] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _nolimits[address(this)] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _nolimits[_taxWallet] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _nolimits[routerAddress] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Auth(msg.sender)

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tSupply

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: name_

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: tokenSymbol

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balance[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowances[holder][spender]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isTradingOpen(msg.sender),Trading not open)

  ID: 2
  Type: NodeType.RETURN
  Expression: _transferFrom(msg.sender,toWallet,amount)

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isTradingOpen(fromWallet),Trading not open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowances[fromWallet][msg.sender] -= amount

  ID: 3
  Type: NodeType.RETURN
  Expression: _transferFrom(fromWallet,toWallet,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: setMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isLP[marketingWlt],LP cannot be tax wallet)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _taxWallet = address(marketingWlt)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: noFee[marketingWlt] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _nolimits[marketingWlt] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: isTradingOpen
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: checkResult = false

  ID: 2
  Type: NodeType.IF
  Expression: tradingEnabled

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: checkResult = true

  ID: 4
  Type: NodeType.IF
  Expression: noFee[fromWallet] && _nolimits[fromWallet]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: checkResult = true

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: checkResult

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 7
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: setExemption
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isNoLimits || isNoFees

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isLP[wlt],Cannot exempt LP)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: noFee[wlt] = isNoFees

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _nolimits[wlt] = isNoLimits

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingEnabled,trading open)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _openTrading()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _addLiquidityToLP
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSwapMax(_tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: _ethAmountWei}(address(this),_tokenAmount,0,0,_owner,block.timestamp)

Edges:
  0 -> 1
  1 -> 2

Function: _transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),No transfers from 0 wallet)

  ID: 2
  Type: NodeType.IF
  Expression: ! tradingEnabled

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(noFee[sender] && _nolimits[sender],Trading not yet open)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: ! isInSwap && isLP[toWallet] && shouldSwap(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _swapTaxTokens()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: block.number >= _launchBlock

  ID: 9
  Type: NodeType.IF
  Expression: block.number < _antiMevBlock && isLP[sender]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(toWallet == tx.origin,MEV block)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: block.number < _antiMevBlock + 600 && isLP[toWallet] && sender != address(this)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: sellsThisBlock[block.number][toWallet] += 1

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sellsThisBlock[block.number][toWallet] <= 2,MEV block)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: sender != address(this) && toWallet != address(this) && sender != _owner

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_checkLimits(sender,toWallet,amount),TX over limits)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.VARIABLE
  Expression: _taxAmount = getTaxAmount(sender,toWallet,amount)

  ID: 21
  Type: NodeType.VARIABLE
  Expression: _transferAmount = amount - _taxAmount

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: balance[sender] -= amount

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: swapLimits += _taxAmount

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: balance[toWallet] += _transferAmount

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,toWallet,amount)

  ID: 26
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(primaryLP == address(0),LP created)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! tradingEnabled,trading open)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0 || address(this).balance > 0,No ETH)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balance[address(this)] > 0,No tokens)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: primaryLP = IUniswapV2Factory(router.factory()).createPair(address(this),router.WETH())

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _addLiquidityToLP(balance[address(this)],address(this).balance)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: lockTaxSwap()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: getTaxAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: ! tradingEnabled || noFee[fromWallet] || noFee[recipient]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: taxAmount = 0

  ID: 4
  Type: NodeType.IF
  Expression: isLP[fromWallet]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount * _buyTaxRate / 100

  ID: 6
  Type: NodeType.IF
  Expression: isLP[recipient]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: taxAmount = amount * _sellTax / 100

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: taxAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 10
  4 -> 5
  4 -> 6
  5 -> 9
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: isWalletExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (noFee[wallet],_nolimits[wallet])

  ID: 2
  Type: NodeType.RETURN
  Expression: (fees,limits)

Edges:
  0 -> 1

Function: _swapTaxTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _taxTokenAvailable = swapLimits

  ID: 2
  Type: NodeType.IF
  Expression: _taxTokenAvailable >= _swapMinAmt && tradingEnabled

  ID: 3
  Type: NodeType.IF
  Expression: _taxTokenAvailable >= _swapMaxAmt

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _taxTokenAvailable = _swapMaxAmt

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _tokensForSwap = _taxTokenAvailable

  ID: 7
  Type: NodeType.IF
  Expression: _tokensForSwap > 1 * 10 ** _decimals

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: balance[address(this)] += _taxTokenAvailable

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: swapTokensForETH(_tokensForSwap)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: swapLimits -= _taxTokenAvailable

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: _contractETHBalance = address(this).balance

  ID: 13
  Type: NodeType.IF
  Expression: _contractETHBalance > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: distributeTax(_contractETHBalance)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: lockTaxSwap()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  2 -> 16
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  17 -> 1

Function: shouldSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: swapMinVal > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: lpTkn = balance[primaryLP]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: lpWeth = IERC20(router.WETH()).balanceOf(primaryLP)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: weiValue = (tokenAmt * lpWeth) / lpTkn

  ID: 6
  Type: NodeType.IF
  Expression: weiValue >= swapMinVal

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: result = true

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: result = true

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 10
  9 -> 10
  10 -> 11

Function: marketingWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _taxWallet

Edges:
  0 -> 1

Function: distributeTax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _taxWallet.transfer(amount)

Edges:
  0 -> 1

Function: buyFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _buyTaxRate

Edges:
  0 -> 1

Function: sellFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _sellTax

Edges:
  0 -> 1

Function: swapMin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _swapMinAmt

Edges:
  0 -> 1

Function: swapMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _swapMaxAmt

Edges:
  0 -> 1

Function: setFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(buyFeePercent + sellFeePercent <= 20,Roundtrip too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _buyTaxRate = buyFeePercent

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _sellTax = sellFeePercent

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _openTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: maxTxAmt = 20 * tSupply / 1000

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxWalletAmt = 20 * tSupply / 1000

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balance[primaryLP] -= swapLimits

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (isLP[primaryLP],None) = primaryLP.call(abi.encodeWithSignature(sync()))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isLP[primaryLP],Failed bootstrap)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _launchBlock = block.number

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _antiMevBlock = _antiMevBlock + _launchBlock

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: tradingEnabled = true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: setTaxSwaps
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _swapMinAmt = tSupply * minVal / minDiv

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _swapMaxAmt = tSupply * maxVal / maxDiv

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapMinVal = trigger * 10 ** 15

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_swapMaxAmt >= _swapMinAmt,Min-Max error)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: updateLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newTxAmt = tSupply * maxTransPermille / 1000 + 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newTxAmt >= maxTxAmt,tx too low)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: maxTxAmt = newTxAmt

  ID: 4
  Type: NodeType.VARIABLE
  Expression: newWalletAmt = tSupply * maxWaletPermille / 1000 + 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newWalletAmt >= _maxWalletAmt,wallet too low)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _maxWalletAmt = newWalletAmt

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: _approveSwapMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: allowances[address(this)][routerAddress] < _tokenAmount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowances[address(this)][routerAddress] = type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(address(this),routerAddress,type()(uint256).max)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 4

Function: _checkLimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: limitCheckPassed = true

  ID: 2
  Type: NodeType.IF
  Expression: tradingEnabled && ! _nolimits[fromWallet] && ! _nolimits[toWallet]

  ID: 3
  Type: NodeType.IF
  Expression: transferAmount > maxTxAmt

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: limitCheckPassed = false

  ID: 5
  Type: NodeType.IF
  Expression: ! isLP[toWallet] && (balance[toWallet] + transferAmount > _maxWalletAmt)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: limitCheckPassed = false

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.RETURN
  Expression: limitCheckPassed

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  3 -> 5
  4 -> 8
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: swapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approveSwapMax(tokenAmount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = router.WETH()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: maxWalletAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _maxWalletAmt

Edges:
  0 -> 1

Function: maxTxAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: maxTxAmt

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _taxWallet = address(0x9622b93334c8270689ADC04cF0cE11206f9d44E3)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _antiMevBlock = 2

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _sellTax = 10

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _buyTaxRate = 10

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: maxTxAmt = tSupply

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxWalletAmt = tSupply

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapMinAmt = tSupply * 10 / 100000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapMaxAmt = tSupply * 999 / 100000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapMinVal = 2 * (10 ** 16)

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapLimits = _swapMinAmt * 53 * 100

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: router = IUniswapV2Router02(routerAddress)

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isInSwap = false

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tokenSymbol = AIP

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name_ = Predict AI

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tSupply = 100000000 * (10 ** _decimals)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: routerAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IUniswapV2Router02
==================================================


Contract: IUniswapV2Factory
==================================================


