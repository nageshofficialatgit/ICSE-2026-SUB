Contract: ERC721
==================================================


Contract: EtherConsole
==================================================

Function: EtherConsole
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = msg.sender

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: item23IndexToApproved[_tokenId] = _to

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: createContractItem23
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _createItem23(_name,address(this),stringToUint(_startingP))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: stringToUint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: b = bytes(_amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: result = 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: totNum = b.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totNum --

  ID: 8
  Type: NodeType.VARIABLE
  Expression: hasDot = false

  ID: 9
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: i = 0

  ID: 12
  Type: NodeType.IFLOOP
  Expression: i < b.length

  ID: 13
  Type: NodeType.VARIABLE
  Expression: c = uint256(b[i])

  ID: 14
  Type: NodeType.IF
  Expression: c >= 48 && c <= 57

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: result = result * 10 + (c - 48)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: counterBeforeDot ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: totNum --

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: c == 46

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: hasDot = true

  ID: 21
  Type: NodeType.BREAK
  Expression: 

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 24
  Type: NodeType.IF
  Expression: hasDot

  ID: 25
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 26
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 27
  Type: NodeType.VARIABLE
  Expression: j = counterBeforeDot + 1

  ID: 28
  Type: NodeType.IFLOOP
  Expression: j < 18

  ID: 29
  Type: NodeType.VARIABLE
  Expression: m = uint256(b[j])

  ID: 30
  Type: NodeType.IF
  Expression: m >= 48 && m <= 57

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: result = result * 10 + (m - 48)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: counterAfterDot ++

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: totNum --

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.IF
  Expression: totNum == 0

  ID: 36
  Type: NodeType.BREAK
  Expression: 

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: j ++

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.IF
  Expression: counterAfterDot < 18

  ID: 41
  Type: NodeType.VARIABLE
  Expression: addNum = 18 - counterAfterDot

  ID: 42
  Type: NodeType.VARIABLE
  Expression: multuply = 10 ** addNum

  ID: 43
  Type: NodeType.RETURN
  Expression: result = result * multuply

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.RETURN
  Expression: result

  ID: 46
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 11
  9 -> 12
  10 -> 24
  11 -> 9
  12 -> 13
  12 -> 10
  13 -> 14
  14 -> 15
  14 -> 18
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 22
  20 -> 21
  21 -> 10
  22 -> 23
  23 -> 12
  24 -> 27
  24 -> 39
  25 -> 28
  26 -> 39
  27 -> 25
  28 -> 29
  28 -> 26
  29 -> 30
  30 -> 31
  30 -> 34
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  35 -> 37
  36 -> 26
  37 -> 38
  38 -> 28
  39 -> 40
  40 -> 41
  40 -> 44
  41 -> 42
  42 -> 43
  44 -> 45

Function: getItem23
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: item23 = item23s[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: item23Name = item23.name

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: sellingPrice = item23IndexToPrice[_tokenId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = item23IndexToOwner[_tokenId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: previousPrice = item23IndexToPreviousPrice[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: previousOwners = item23IndexToPreviousOwners[_tokenId]

  ID: 7
  Type: NodeType.RETURN
  Expression: (item23Name,sellingPrice,owner,previousPrice,previousOwners)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: implementsERC721
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: NAME

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = item23IndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _payout(_to)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 2
  2 -> 1

Function: purchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = item23IndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 3
  Type: NodeType.VARIABLE
  Expression: previousOwners = item23IndexToPreviousOwners[_tokenId]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sellingPrice = item23IndexToPrice[_tokenId]

  ID: 5
  Type: NodeType.VARIABLE
  Expression: previousPrice = item23IndexToPreviousPrice[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(oldOwner != newOwner)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= sellingPrice)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: priceDelta = SafeMath.sub(sellingPrice,previousPrice)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: ownerPayout = SafeMath.add(previousPrice,SafeMath.mul(SafeMath.div(priceDelta,100),40))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: purchaseExcess = SafeMath.sub(msg.value,sellingPrice)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice,150),100)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousPrice[_tokenId] = sellingPrice

  ID: 14
  Type: NodeType.VARIABLE
  Expression: strangePrice = uint256(SafeMath.mul(SafeMath.div(priceDelta,100),10))

  ID: 15
  Type: NodeType.VARIABLE
  Expression: strangePrice2 = uint256(0)

  ID: 16
  Type: NodeType.IF
  Expression: oldOwner != address(this)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: oldOwner.transfer(ownerPayout)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: strangePrice = SafeMath.add(ownerPayout,strangePrice)

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 21
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 23
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 24
  Type: NodeType.IF
  Expression: previousOwners[i] != address(this)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: strangePrice2 += uint256(SafeMath.mul(SafeMath.div(priceDelta,100),10))

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: strangePrice = SafeMath.add(strangePrice,uint256(SafeMath.mul(SafeMath.div(priceDelta,100),10)))

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: ceoAddress.transfer(strangePrice + strangePrice2)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(purchaseExcess)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 19
  18 -> 19
  19 -> 22
  20 -> 23
  21 -> 29
  22 -> 20
  23 -> 24
  23 -> 21
  24 -> 25
  24 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 23
  29 -> 30
  30 -> 31

Function: priceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: item23IndexToPrice[_tokenId]

  ID: 2
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SYMBOL

Edges:
  0 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: newOwner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldOwner = item23IndexToOwner[_tokenId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(newOwner))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(newOwner,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(oldOwner,newOwner,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalItem23s = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: item23Id = 0

  ID: 11
  Type: NodeType.IFLOOP
  Expression: item23Id <= totalItem23s

  ID: 12
  Type: NodeType.IF
  Expression: item23IndexToOwner[item23Id] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = item23Id

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: item23Id ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: item23s.length

  ID: 2
  Type: NodeType.RETURN
  Expression: total

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approved(_to,_tokenId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_addressNotNull(_to))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _addressNotNull
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _to != address(0)

Edges:
  0 -> 1

Function: _approved
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: item23IndexToApproved[_tokenId] == _to

Edges:
  0 -> 1

Function: _createItem23
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _item23 = Item23({name:_name})

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newItem23Id = item23s.push(_item23) - 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newItem23Id == uint256(uint32(newItem23Id)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Birth(newItem23Id,_name,_owner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPrice[newItem23Id] = _price

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousPrice[newItem23Id] = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[newItem23Id] = (address(this),address(this),address(this),address(this))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),_owner,newItem23Id)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: claimant == item23IndexToOwner[_tokenId]

Edges:
  0 -> 1

Function: _payout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _to == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress.transfer(this.balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _to.transfer(this.balance)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: item23IndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete item23IndexToApproved[_tokenId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][4] = item23IndexToPreviousOwners[_tokenId][3]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][3] = item23IndexToPreviousOwners[_tokenId][2]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][2] = item23IndexToPreviousOwners[_tokenId][1]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][1] = item23IndexToPreviousOwners[_tokenId][0]

  ID: 11
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][0] = _from

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: item23IndexToPreviousOwners[_tokenId][0] = address(this)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NAME = CrypoConsoles

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SYMBOL = CryptoConsole

Edges:
  0 -> 1


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


