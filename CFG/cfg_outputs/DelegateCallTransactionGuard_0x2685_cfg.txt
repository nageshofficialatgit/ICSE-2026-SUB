Contract: Enum
==================================================


Contract: IERC165
==================================================


Contract: ErrorMessage
==================================================

Function: revertWithError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr_revertWithError_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0,0x08c379a000000000000000000000000000000000000000000000000000000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x04,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x24,0x05)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x44,error)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr_revertWithError_asm_0,0x64)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


Contract: SelfAuthorized
==================================================

Function: revertWithError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr_revertWithError_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0,0x08c379a000000000000000000000000000000000000000000000000000000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x04,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x24,0x05)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x44,error)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr_revertWithError_asm_0,0x64)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: requireSelfCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS031)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3


Contract: IGuardManager
==================================================


Contract: ITransactionGuard
==================================================


Contract: BaseTransactionGuard
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(ITransactionGuard).interfaceId || interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: GuardManager
==================================================

Function: requireSelfCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS031)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: revertWithError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr_revertWithError_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0,0x08c379a000000000000000000000000000000000000000000000000000000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x04,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x24,0x05)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x44,error)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr_revertWithError_asm_0,0x64)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: setGuard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: guard != address(0) && ! ITransactionGuard(guard).supportsInterface(type()(ITransactionGuard).interfaceId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS300)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: sstore(uint256,uint256)(GUARD_STORAGE_SLOT,guard)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ChangedGuard(guard)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 8
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: getGuard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: guard = sload(uint256)(GUARD_STORAGE_SLOT)

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: guard

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8

Edges:


Contract: IModuleManager
==================================================


Contract: Executor
==================================================

Function: execute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: operation == Enum.Operation.DelegateCall

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: success = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(txGas,to,data + 0x20,mload(uint256)(data),0,0)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(txGas,to,value,data + 0x20,mload(uint256)(data),0,0)

  ID: 7
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


Contract: IModuleGuard
==================================================


Contract: BaseModuleGuard
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(IModuleGuard).interfaceId || interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: ModuleManager
==================================================

Function: execute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: operation == Enum.Operation.DelegateCall

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: success = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(txGas,to,data + 0x20,mload(uint256)(data),0,0)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(txGas,to,value,data + 0x20,mload(uint256)(data),0,0)

  ID: 7
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 3
  3 -> 4
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: requireSelfCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != address(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS031)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: revertWithError
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr_revertWithError_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0,0x08c379a000000000000000000000000000000000000000000000000000000000)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x04,0x20)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x24,0x05)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr_revertWithError_asm_0 + 0x44,error)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(ptr_revertWithError_asm_0,0x64)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: setupModules
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: modules[SENTINEL_MODULES] != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS100)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: modules[SENTINEL_MODULES] = SENTINEL_MODULES

  ID: 5
  Type: NodeType.IF
  Expression: to != address(0)

  ID: 6
  Type: NodeType.IF
  Expression: ! isContract(to)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS002)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: ! execute(to,0,data,Enum.Operation.DelegateCall,type()(uint256).max)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS000)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 12
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12

Function: preModuleExecution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onBeforeExecTransactionFromModule(to,value,data,operation)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: guard = getModuleGuard()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0),GS104)

  ID: 4
  Type: NodeType.IF
  Expression: guard != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: guardHash = IModuleGuard(guard).checkModuleTransaction(to,value,data,operation,msg.sender)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (guard,guardHash)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: postModuleExecution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: guard != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IModuleGuard(guard).checkAfterModuleExecution(guardHash,success)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: success

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ExecutionFromModuleSuccess(msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ExecutionFromModuleFailure(msg.sender)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7

Function: enableModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: module == address(0) || module == SENTINEL_MODULES

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS101)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: modules[module] != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS102)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: modules[module] = modules[SENTINEL_MODULES]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: modules[SENTINEL_MODULES] = module

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: EnabledModule(module)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: disableModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: module == address(0) || module == SENTINEL_MODULES

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS101)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: modules[prevModule] != module

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS103)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: modules[prevModule] = modules[module]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: modules[module] = address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: DisabledModule(module)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 10
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: execTransactionFromModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (guard,guardHash) = preModuleExecution(to,value,data,operation)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: success = execute(to,value,data,operation,type()(uint256).max)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: postModuleExecution(guard,guardHash,success)

  ID: 6
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: execTransactionFromModuleReturnData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (guard,guardHash) = preModuleExecution(to,value,data,operation)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: success = execute(to,value,data,operation,type()(uint256).max)

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: returnData = mload(uint256)(0x40)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(0x40,returnData + returndatasize()() + 0x20)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(returnData,returndatasize()())

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: returndatacopy(uint256,uint256,uint256)(returnData + 0x20,0,returndatasize()())

  ID: 10
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: postModuleExecution(guard,guardHash,success)

  ID: 12
  Type: NodeType.RETURN
  Expression: (success,returnData)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: isModuleEnabled
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SENTINEL_MODULES != module && modules[module] != address(0)

Edges:
  0 -> 1

Function: getModulesPaginated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: start != SENTINEL_MODULES && ! isModuleEnabled(start)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS105)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: pageSize == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS106)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: array = new address[](pageSize)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: moduleCount = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: next = modules[start]

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.IFLOOP
  Expression: next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: array[moduleCount] = next

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: next = modules[next]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ++ moduleCount

  ID: 15
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: next != SENTINEL_MODULES

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: next = array[moduleCount - 1]

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(array,moduleCount)

  ID: 21
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: (array,next)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 11
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: size = extcodesize(uint256)(account)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: size > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: setModuleGuard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: moduleGuard != address(0) && ! IModuleGuard(moduleGuard).supportsInterface(type()(IModuleGuard).interfaceId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revertWithError(GS301)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: slot = MODULE_GUARD_STORAGE_SLOT

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sstore(uint256,uint256)(slot,moduleGuard)

  ID: 7
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ChangedModuleGuard(moduleGuard)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: authorized()

Edges:
  0 -> 9
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: getModuleGuard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: slot = MODULE_GUARD_STORAGE_SLOT

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: moduleGuard = sload(uint256)(slot)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: moduleGuard

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: onBeforeExecTransactionFromModule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SENTINEL_MODULES = address(0x1)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MODULE_GUARD_STORAGE_SLOT = 0xb104e0b93118902c651344349b610029d694cfdec91c589c91ebafbcd0289947

Edges:
  0 -> 1


Contract: BaseGuard
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(ITransactionGuard).interfaceId || interfaceId == type()(IModuleGuard).interfaceId || interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1


Contract: DelegateCallTransactionGuard
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: interfaceId == type()(ITransactionGuard).interfaceId || interfaceId == type()(IERC165).interfaceId

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ALLOWED_TARGET = target

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: checkTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET,This call is restricted)

Edges:
  0 -> 1

Function: checkAfterExecution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: checkModuleTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET,This call is restricted)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: moduleTxHash = keccak256(bytes)(abi.encodePacked(to,value,data,operation,module))

  ID: 3
  Type: NodeType.RETURN
  Expression: moduleTxHash

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: checkAfterModuleExecution
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


