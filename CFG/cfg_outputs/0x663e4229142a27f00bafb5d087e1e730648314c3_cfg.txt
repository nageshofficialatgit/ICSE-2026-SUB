Contract: ERC20
==================================================


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1


Contract: ERC721
==================================================


Contract: GeneScienceInterface
==================================================


Contract: PandaAccessControl
==================================================

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: PandaBase
==================================================

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

Edges:


Contract: ERC721Metadata
==================================================

Function: getMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenId == 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = Hello World! :D

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: count = 15

  ID: 4
  Type: NodeType.IF
  Expression: _tokenId == 2

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = I would definitely choose a medi

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = um length string.

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: count = 49

  ID: 8
  Type: NodeType.IF
  Expression: _tokenId == 3

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: buffer[0] = Lorem ipsum dolor sit amet, mi e

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: buffer[1] = st accumsan dapibus augue lorem,

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: buffer[2] =  tristique vestibulum id, libero

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: buffer[3] =  suscipit varius sapien aliquam.

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: count = 128

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.RETURN
  Expression: (buffer,count)

Edges:
  0 -> 1
  1 -> 2
  1 -> 4
  2 -> 3
  3 -> 16
  4 -> 5
  4 -> 8
  5 -> 6
  6 -> 7
  7 -> 15
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17


Contract: PandaOwnership
==================================================

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(saleAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(siringAuction))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandas.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = pandaIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCats = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: catId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: catId <= totalCats

  ID: 12
  Type: NodeType.IF
  Expression: pandaIndexToOwner[catId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = catId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: catId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = PandaEarth

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = PE

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(totalSupply())) ^ bytes4(keccak256()(balanceOf(address))) ^ bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(transfer(address,uint256))) ^ bytes4(keccak256()(transferFrom(address,address,uint256))) ^ bytes4(keccak256()(tokensOfOwner(address))) ^ bytes4(keccak256()(tokenMetadata(uint256,string)))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: PandaBreeding
==================================================

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(saleAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(siringAuction))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandas.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = pandaIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCats = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: catId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: catId <= totalCats

  ID: 12
  Type: NodeType.IF
  Expression: pandaIndexToOwner[catId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = catId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: catId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: setGeneScienceAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = GeneScienceInterface(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isGeneScience())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: geneScience = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: _isSiringPermitted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matronOwner = pandaIndexToOwner[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sireOwner = pandaIndexToOwner[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _triggerCooldown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)

  ID: 2
  Type: NodeType.IF
  Expression: _kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownIndex += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: approveSiring
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_sireId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sireAllowedToAddress[_sireId] = _addr

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutoBirthFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoBirthFee = val

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _isReadyToGiveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kit = pandas[_pandaId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isReadyToBreed(kit)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isPregnant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: pandas[_pandaId].siringWithId != 0

Edges:
  0 -> 1
  1 -> 2

Function: _isValidMatingPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _matronId == _sireId

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _matron.matronId == _sireId || _matron.sireId == _sireId

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _sire.matronId == _matronId || _sire.sireId == _matronId

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _sire.matronId == 0 || _matron.matronId == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId

  ID: 14
  Type: NodeType.RETURN
  Expression: false

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId

  ID: 17
  Type: NodeType.RETURN
  Expression: false

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1

  ID: 20
  Type: NodeType.RETURN
  Expression: false

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22

Function: _canBreedWithViaAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: canBreedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 5
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId) && _isSiringPermitted(_sireId,_matronId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _exchangeMatronSireId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: geneScience.getSex(pandas[_matronId].genes) == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: (_sireId,_matronId)

  ID: 3
  Type: NodeType.RETURN
  Expression: (_matronId,_sireId)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _breedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: matron.siringWithId = uint32(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(sire)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(matron)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_matronId]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_sireId]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: childOwner[_matronId] = _owner

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Pregnant(pandaIndexToOwner[_matronId],_matronId,_sireId,matron.cooldownEndBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: breedWithAuto
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= autoBirthFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isSiringPermitted(_sireId,_matronId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(matron))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(sire))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isValidMatingPair(matron,_matronId,sire,_sireId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _breedWith(_matronId,_sireId,msg.sender)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: giveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(matron.birthTime != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToGiveBirth(matron))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sireId = matron.siringWithId

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sire = pandas[sireId]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: parentGen = matron.generation

  ID: 7
  Type: NodeType.IF
  Expression: sire.generation > matron.generation

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: parentGen = sire.generation

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: childGenes = _childGenes

  ID: 11
  Type: NodeType.VARIABLE
  Expression: kittenId = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]

  ID: 13
  Type: NodeType.IF
  Expression: probability >= (parentGen + 1) * _factors[1]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: probability = probability - (parentGen + 1) * _factors[1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: uint256(keccak256()(block.blockhash(block.number - 2),now)) % 100 < probability

  ID: 21
  Type: NodeType.VARIABLE
  Expression: owner = childOwner[_matronId]

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: kittenId = _createPanda(_matronId,matron.siringWithId,parentGen + 1,childGenes,owner)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Abortion(pandaIndexToOwner[_matronId],_matronId,sireId)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: delete matron.siringWithId

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas --

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: msg.sender.send(autoBirthFee)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: delete childOwner[_matronId]

  ID: 29
  Type: NodeType.RETURN
  Expression: kittenId

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  31 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoBirthFee = 2000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = PandaEarth

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = PE

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(totalSupply())) ^ bytes4(keccak256()(balanceOf(address))) ^ bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(transfer(address,uint256))) ^ bytes4(keccak256()(transferFrom(address,address,uint256))) ^ bytes4(keccak256()(tokensOfOwner(address))) ^ bytes4(keccak256()(tokenMetadata(uint256,string)))

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GENSIS_TOTAL_COUNT = 100

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: ClockAuctionBase
==================================================

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: ClockAuction
==================================================

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: res = nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(msg.sender,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now),0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _bid(_tokenId,msg.value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:


Contract: SiringClockAuction
==================================================

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: res = nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now),0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seller = tokenIdToAuction[_tokenId].seller

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _bid(_tokenId,msg.value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(seller,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: SiringClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ClockAuction(_nftAddr,_cut)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isSiringClockAuction = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:


Contract: SaleClockAuction
==================================================

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: res = nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now),0)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: isGen0 = tokenIdToAuction[_tokenId].isGen0

  ID: 2
  Type: NodeType.VARIABLE
  Expression: price = _bid(_tokenId,msg.value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_tokenId)

  ID: 4
  Type: NodeType.IF
  Expression: isGen0 == 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastGen0SalePrices[gen0SaleCount % 5] = price

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: gen0SaleCount ++

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 7

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: SaleClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: CommonPandaIndex = 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RarePandaIndex = 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ClockAuction(_nftAddr,_cut)

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: createGen0Auction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_tokenId)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now),1)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _addAuction(_tokenId,auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 2
  Type: NodeType.IF
  Expression: _type == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: CommonPanda.push(_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RarePanda.push(_tokenId)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5

Function: surprisePanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bHash = keccak256()(block.blockhash(block.number),block.blockhash(block.number - 1))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: bHash[25] > 0xC8

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(uint256(RarePanda.length) >= RarePandaIndex)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: PandaIndex = RarePandaIndex

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: RarePandaIndex ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(uint256(CommonPanda.length) >= CommonPandaIndex)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: PandaIndex = CommonPandaIndex

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: CommonPandaIndex ++

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,PandaIndex)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: packageCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: common = CommonPanda.length + 1 - CommonPandaIndex

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: surprise = RarePanda.length + 1 - RarePandaIndex

  ID: 3
  Type: NodeType.RETURN
  Expression: (common,surprise)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: averageGen0SalePrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: sum = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: sum += lastGen0SalePrices[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.RETURN
  Expression: sum / 5

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isSaleClockAuction = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SurpriseValue = 10000000000000000

Edges:
  0 -> 1


Contract: SaleClockAuctionERC20
==================================================

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_cut <= 10000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ownerCut = _cut

  ID: 3
  Type: NodeType.VARIABLE
  Expression: candidateContract = ERC721(_nftAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract = candidateContract

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftAddress = address(nonFungibleContract)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == nftAddress)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: res = nftAddress.send(this.balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startingPrice == uint256(uint128(_startingPrice)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endingPrice == uint256(uint128(_endingPrice)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration == uint256(uint64(_duration)))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(erc20ContractsSwitcher[_erc20Address] > 0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _escrow(_seller,_tokenId)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: auction = Auction(_seller,uint128(_startingPrice),uint128(_endingPrice),uint64(_duration),uint64(now),0)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _addAuctionERC20(_tokenId,auction,_erc20Address)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: tokenIdToErc20Address[_tokenId] = _erc20Address

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == seller)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,seller)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToErc20Address[_tokenId]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: cancelAuctionWhenPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_tokenId,auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startingPrice,auction.endingPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startingPrice,endingPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (nonFungibleContract.ownerOf(_tokenId) == _claimant)

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transferFrom(_owner,this,_tokenId)

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: nonFungibleContract.transfer(_receiver,_tokenId)

Edges:
  0 -> 1

Function: _addAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_seller,_tokenId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 7
  Type: NodeType.IF
  Expression: price > 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 9
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(sellerProceeds)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: bidExcess = _bidAmount - price

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(bidExcess)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 15
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 11
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToAuction[_tokenId]

Edges:
  0 -> 1

Function: _isOnAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_auction.startedAt > 0)

Edges:
  0 -> 1

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: secondsPassed = 0

  ID: 2
  Type: NodeType.IF
  Expression: now > _auction.startedAt

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: secondsPassed = now - _auction.startedAt

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _computeCurrentPrice(_auction.startingPrice,_auction.endingPrice,_auction.duration,secondsPassed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _computeCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _secondsPassed >= _duration

  ID: 2
  Type: NodeType.RETURN
  Expression: _endingPrice

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: currentPrice = int256(_startingPrice) + currentPriceChange

  ID: 6
  Type: NodeType.RETURN
  Expression: uint256(currentPrice)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _computeCut
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * ownerCut / 10000

Edges:
  0 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  1 -> 3
  2 -> 3
  4 -> 1

Function: SaleClockAuctionERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ClockAuction(_nftAddr,_cut)

Edges:
  0 -> 1

Function: erc20ContractSwitch
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_erc20address != address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: erc20ContractsSwitcher[_erc20address] = _onoff

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _addAuctionERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_auction.duration >= 60)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: tokenIdToAuction[_tokenId] = _auction

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionERC20Created(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration),_erc20address)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: bidERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: seller = tokenIdToAuction[_tokenId].seller

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _erc20address = tokenIdToErc20Address[_tokenId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_erc20address != address(0))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: price = _bidERC20(_erc20address,msg.sender,_tokenId,_amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete tokenIdToErc20Address[_tokenId]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdrawERC20Balance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(balances[_erc20Address] > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(nonFungibleContract))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ERC20(_erc20Address).transfer(_to,balances[_erc20Address])

  ID: 4
  Type: NodeType.RETURN
  Expression: res

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _bidERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = tokenIdToAuction[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isOnAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId])

  ID: 4
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_bidAmount >= price)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_tokenId)

  ID: 8
  Type: NodeType.IF
  Expression: price > 0

  ID: 9
  Type: NodeType.VARIABLE
  Expression: auctioneerCut = _computeCut(price)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: sellerProceeds = price - auctioneerCut

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds))

  ID: 12
  Type: NodeType.IF
  Expression: auctioneerCut > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut))

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: balances[_erc20Address] += auctioneerCut

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_tokenId,price,msg.sender)

  ID: 18
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isSaleClockAuctionERC20 = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(0x9a20483d)

Edges:


Contract: PandaAuction
==================================================

Function: setGeneScienceAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = GeneScienceInterface(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isGeneScience())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: geneScience = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: _isSiringPermitted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matronOwner = pandaIndexToOwner[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sireOwner = pandaIndexToOwner[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _triggerCooldown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)

  ID: 2
  Type: NodeType.IF
  Expression: _kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownIndex += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: approveSiring
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_sireId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sireAllowedToAddress[_sireId] = _addr

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutoBirthFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoBirthFee = val

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _isReadyToGiveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kit = pandas[_pandaId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isReadyToBreed(kit)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isPregnant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: pandas[_pandaId].siringWithId != 0

Edges:
  0 -> 1
  1 -> 2

Function: _isValidMatingPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _matronId == _sireId

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _matron.matronId == _sireId || _matron.sireId == _sireId

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _sire.matronId == _matronId || _sire.sireId == _matronId

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _sire.matronId == 0 || _matron.matronId == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId

  ID: 14
  Type: NodeType.RETURN
  Expression: false

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId

  ID: 17
  Type: NodeType.RETURN
  Expression: false

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1

  ID: 20
  Type: NodeType.RETURN
  Expression: false

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22

Function: _canBreedWithViaAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: canBreedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 5
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId) && _isSiringPermitted(_sireId,_matronId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _exchangeMatronSireId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: geneScience.getSex(pandas[_matronId].genes) == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: (_sireId,_matronId)

  ID: 3
  Type: NodeType.RETURN
  Expression: (_matronId,_sireId)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _breedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: matron.siringWithId = uint32(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(sire)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(matron)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_matronId]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_sireId]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: childOwner[_matronId] = _owner

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Pregnant(pandaIndexToOwner[_matronId],_matronId,_sireId,matron.cooldownEndBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: breedWithAuto
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= autoBirthFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isSiringPermitted(_sireId,_matronId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(matron))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(sire))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isValidMatingPair(matron,_matronId,sire,_sireId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _breedWith(_matronId,_sireId,msg.sender)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: giveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(matron.birthTime != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToGiveBirth(matron))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sireId = matron.siringWithId

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sire = pandas[sireId]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: parentGen = matron.generation

  ID: 7
  Type: NodeType.IF
  Expression: sire.generation > matron.generation

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: parentGen = sire.generation

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: childGenes = _childGenes

  ID: 11
  Type: NodeType.VARIABLE
  Expression: kittenId = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]

  ID: 13
  Type: NodeType.IF
  Expression: probability >= (parentGen + 1) * _factors[1]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: probability = probability - (parentGen + 1) * _factors[1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: uint256(keccak256()(block.blockhash(block.number - 2),now)) % 100 < probability

  ID: 21
  Type: NodeType.VARIABLE
  Expression: owner = childOwner[_matronId]

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: kittenId = _createPanda(_matronId,matron.siringWithId,parentGen + 1,childGenes,owner)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Abortion(pandaIndexToOwner[_matronId],_matronId,sireId)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: delete matron.siringWithId

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas --

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: msg.sender.send(autoBirthFee)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: delete childOwner[_matronId]

  ID: 29
  Type: NodeType.RETURN
  Expression: kittenId

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  31 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(saleAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(siringAuction))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandas.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = pandaIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCats = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: catId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: catId <= totalCats

  ID: 12
  Type: NodeType.IF
  Expression: pandaIndexToOwner[catId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = catId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: catId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: setSaleAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSaleAuctionERC20Address
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuctionERC20(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuctionERC20())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20 = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSiringAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SiringClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSiringClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: siringAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createSaleAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: createSaleAuctionERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuctionERC20)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.createAuction(_pandaId,_erc20address,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: switchSaleAuctionERC20For
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: createSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,siringAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: siringAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: bidOnSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_canBreedWithViaAuction(_matronId,_sireId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPrice = siringAuction.getCurrentPrice(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= currentPrice + autoBirthFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _breedWith(uint32(_matronId),uint32(_sireId),msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: withdrawAuctionBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuction.withdrawBalance()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: siringAuction.withdrawBalance()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawERC20Balance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(saleAuctionERC20 != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoBirthFee = 2000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = PandaEarth

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = PE

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(totalSupply())) ^ bytes4(keccak256()(balanceOf(address))) ^ bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(transfer(address,uint256))) ^ bytes4(keccak256()(transferFrom(address,address,uint256))) ^ bytes4(keccak256()(tokensOfOwner(address))) ^ bytes4(keccak256()(tokenMetadata(uint256,string)))

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GENSIS_TOTAL_COUNT = 100

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


Contract: PandaMinting
==================================================

Function: setSaleAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSaleAuctionERC20Address
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuctionERC20(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuctionERC20())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20 = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSiringAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SiringClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSiringClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: siringAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createSaleAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: createSaleAuctionERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuctionERC20)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.createAuction(_pandaId,_erc20address,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: switchSaleAuctionERC20For
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: createSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,siringAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: siringAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: bidOnSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_canBreedWithViaAuction(_matronId,_sireId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPrice = siringAuction.getCurrentPrice(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= currentPrice + autoBirthFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _breedWith(uint32(_matronId),uint32(_sireId),msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: withdrawAuctionBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuction.withdrawBalance()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: siringAuction.withdrawBalance()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawERC20Balance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(saleAuctionERC20 != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setGeneScienceAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = GeneScienceInterface(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isGeneScience())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: geneScience = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: _isSiringPermitted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matronOwner = pandaIndexToOwner[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sireOwner = pandaIndexToOwner[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _triggerCooldown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)

  ID: 2
  Type: NodeType.IF
  Expression: _kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownIndex += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: approveSiring
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_sireId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sireAllowedToAddress[_sireId] = _addr

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutoBirthFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoBirthFee = val

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _isReadyToGiveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kit = pandas[_pandaId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isReadyToBreed(kit)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isPregnant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: pandas[_pandaId].siringWithId != 0

Edges:
  0 -> 1
  1 -> 2

Function: _isValidMatingPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _matronId == _sireId

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _matron.matronId == _sireId || _matron.sireId == _sireId

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _sire.matronId == _matronId || _sire.sireId == _matronId

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _sire.matronId == 0 || _matron.matronId == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId

  ID: 14
  Type: NodeType.RETURN
  Expression: false

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId

  ID: 17
  Type: NodeType.RETURN
  Expression: false

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1

  ID: 20
  Type: NodeType.RETURN
  Expression: false

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22

Function: _canBreedWithViaAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: canBreedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 5
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId) && _isSiringPermitted(_sireId,_matronId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _exchangeMatronSireId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: geneScience.getSex(pandas[_matronId].genes) == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: (_sireId,_matronId)

  ID: 3
  Type: NodeType.RETURN
  Expression: (_matronId,_sireId)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _breedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: matron.siringWithId = uint32(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(sire)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(matron)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_matronId]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_sireId]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: childOwner[_matronId] = _owner

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Pregnant(pandaIndexToOwner[_matronId],_matronId,_sireId,matron.cooldownEndBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: breedWithAuto
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= autoBirthFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isSiringPermitted(_sireId,_matronId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(matron))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(sire))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isValidMatingPair(matron,_matronId,sire,_sireId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _breedWith(_matronId,_sireId,msg.sender)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: giveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(matron.birthTime != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToGiveBirth(matron))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sireId = matron.siringWithId

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sire = pandas[sireId]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: parentGen = matron.generation

  ID: 7
  Type: NodeType.IF
  Expression: sire.generation > matron.generation

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: parentGen = sire.generation

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: childGenes = _childGenes

  ID: 11
  Type: NodeType.VARIABLE
  Expression: kittenId = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]

  ID: 13
  Type: NodeType.IF
  Expression: probability >= (parentGen + 1) * _factors[1]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: probability = probability - (parentGen + 1) * _factors[1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: uint256(keccak256()(block.blockhash(block.number - 2),now)) % 100 < probability

  ID: 21
  Type: NodeType.VARIABLE
  Expression: owner = childOwner[_matronId]

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: kittenId = _createPanda(_matronId,matron.siringWithId,parentGen + 1,childGenes,owner)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Abortion(pandaIndexToOwner[_matronId],_matronId,sireId)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: delete matron.siringWithId

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas --

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: msg.sender.send(autoBirthFee)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: delete childOwner[_matronId]

  ID: 29
  Type: NodeType.RETURN
  Expression: kittenId

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  31 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(saleAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(siringAuction))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandas.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = pandaIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCats = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: catId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: catId <= totalCats

  ID: 12
  Type: NodeType.IF
  Expression: pandaIndexToOwner[catId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = catId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: catId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: createWizzPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pandaOwner = _owner

  ID: 2
  Type: NodeType.IF
  Expression: pandaOwner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pandaOwner = cooAddress

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _createPanda(0,0,_generation,_genes,pandaOwner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= OPEN_PACKAGE_PRICE)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kittenId = _createPanda(0,0,_generation,_genes,saleAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createPanda(kittenId,_type)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: createGen0Auction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createGen0Auction(_pandaId,_computeNextGen0Price(),0,GEN0_AUCTION_DURATION,msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _computeNextGen0Price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: avePrice = saleAuction.averageGen0SalePrice()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(avePrice == uint256(uint128(avePrice)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nextPrice = avePrice + (avePrice / 2)

  ID: 4
  Type: NodeType.IF
  Expression: nextPrice < GEN0_STARTING_PRICE

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nextPrice = GEN0_STARTING_PRICE

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: nextPrice

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoBirthFee = 2000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = PandaEarth

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = PE

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(totalSupply())) ^ bytes4(keccak256()(balanceOf(address))) ^ bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(transfer(address,uint256))) ^ bytes4(keccak256()(transferFrom(address,address,uint256))) ^ bytes4(keccak256()(tokensOfOwner(address))) ^ bytes4(keccak256()(tokenMetadata(uint256,string)))

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GENSIS_TOTAL_COUNT = 100

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_CREATION_LIMIT = 45000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_STARTING_PRICE = 100000000000000000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_AUCTION_DURATION = 86400

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: OPEN_PACKAGE_PRICE = 10000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


Contract: PandaCore
==================================================

Function: createWizzPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: pandaOwner = _owner

  ID: 2
  Type: NodeType.IF
  Expression: pandaOwner == address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pandaOwner = cooAddress

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _createPanda(0,0,_generation,_genes,pandaOwner)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 1

Function: createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= OPEN_PACKAGE_PRICE)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kittenId = _createPanda(0,0,_generation,_genes,saleAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createPanda(kittenId,_type)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: createGen0Auction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuction)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createGen0Auction(_pandaId,_computeNextGen0Price(),0,GEN0_AUCTION_DURATION,msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _computeNextGen0Price
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: avePrice = saleAuction.averageGen0SalePrice()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(avePrice == uint256(uint128(avePrice)))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: nextPrice = avePrice + (avePrice / 2)

  ID: 4
  Type: NodeType.IF
  Expression: nextPrice < GEN0_STARTING_PRICE

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nextPrice = GEN0_STARTING_PRICE

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: nextPrice

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: setSaleAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSaleAuctionERC20Address
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SaleClockAuctionERC20(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSaleClockAuctionERC20())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20 = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setSiringAuctionAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = SiringClockAuction(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isSiringClockAuction())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: siringAuction = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: createSaleAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: createSaleAuctionERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! isPregnant(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,saleAuctionERC20)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.createAuction(_pandaId,_erc20address,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: switchSaleAuctionERC20For
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: createSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_pandaId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_pandaId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_pandaId,siringAuction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: siringAuction.createAuction(_pandaId,_startingPrice,_endingPrice,_duration,msg.sender)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: bidOnSiringAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isReadyToBreed(_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_canBreedWithViaAuction(_matronId,_sireId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: currentPrice = siringAuction.getCurrentPrice(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= currentPrice + autoBirthFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _breedWith(uint32(_matronId),uint32(_sireId),msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: withdrawAuctionBalances
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: saleAuction.withdrawBalance()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: siringAuction.withdrawBalance()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: withdrawERC20Balance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(saleAuctionERC20 != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setGeneScienceAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: candidateContract = GeneScienceInterface(_address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(candidateContract.isGeneScience())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: geneScience = candidateContract

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: _isSiringPermitted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matronOwner = pandaIndexToOwner[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sireOwner = pandaIndexToOwner[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _triggerCooldown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)

  ID: 2
  Type: NodeType.IF
  Expression: _kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _kitten.cooldownIndex += 1

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: approveSiring
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_sireId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: sireAllowedToAddress[_sireId] = _addr

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setAutoBirthFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoBirthFee = val

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCOO()

Edges:
  0 -> 2
  2 -> 1

Function: _isReadyToGiveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))

Edges:
  0 -> 1

Function: isReadyToBreed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: kit = pandas[_pandaId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isReadyToBreed(kit)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: isPregnant
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_pandaId > 0)

  ID: 2
  Type: NodeType.RETURN
  Expression: pandas[_pandaId].siringWithId != 0

Edges:
  0 -> 1
  1 -> 2

Function: _isValidMatingPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _matronId == _sireId

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _matron.matronId == _sireId || _matron.sireId == _sireId

  ID: 5
  Type: NodeType.RETURN
  Expression: false

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: _sire.matronId == _matronId || _sire.sireId == _matronId

  ID: 8
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _sire.matronId == 0 || _matron.matronId == 0

  ID: 11
  Type: NodeType.RETURN
  Expression: true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: _sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId

  ID: 14
  Type: NodeType.RETURN
  Expression: false

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId

  ID: 17
  Type: NodeType.RETURN
  Expression: false

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1

  ID: 20
  Type: NodeType.RETURN
  Expression: false

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  21 -> 22

Function: _canBreedWithViaAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: canBreedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId > 0)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 5
  Type: NodeType.RETURN
  Expression: _isValidMatingPair(matron,_matronId,sire,_sireId) && _isSiringPermitted(_sireId,_matronId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _exchangeMatronSireId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: geneScience.getSex(pandas[_matronId].genes) == 1

  ID: 2
  Type: NodeType.RETURN
  Expression: (_sireId,_matronId)

  ID: 3
  Type: NodeType.RETURN
  Expression: (_matronId,_sireId)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: _breedWith
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 3
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: matron.siringWithId = uint32(_sireId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(sire)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _triggerCooldown(matron)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_matronId]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_sireId]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: childOwner[_matronId] = _owner

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: Pregnant(pandaIndexToOwner[_matronId],_matronId,_sireId,matron.cooldownEndBlock)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: breedWithAuto
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= autoBirthFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_matronId))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isSiringPermitted(_sireId,_matronId))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(matron))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: sire = pandas[_sireId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToBreed(sire))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isValidMatingPair(matron,_matronId,sire,_sireId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _breedWith(_matronId,_sireId,msg.sender)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: giveBirth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: matron = pandas[_matronId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(matron.birthTime != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_isReadyToGiveBirth(matron))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: sireId = matron.siringWithId

  ID: 5
  Type: NodeType.VARIABLE
  Expression: sire = pandas[sireId]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: parentGen = matron.generation

  ID: 7
  Type: NodeType.IF
  Expression: sire.generation > matron.generation

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: parentGen = sire.generation

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: childGenes = _childGenes

  ID: 11
  Type: NodeType.VARIABLE
  Expression: kittenId = 0

  ID: 12
  Type: NodeType.VARIABLE
  Expression: probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]

  ID: 13
  Type: NodeType.IF
  Expression: probability >= (parentGen + 1) * _factors[1]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: probability = probability - (parentGen + 1) * _factors[1]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.IF
  Expression: parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: probability = 0

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: uint256(keccak256()(block.blockhash(block.number - 2),now)) % 100 < probability

  ID: 21
  Type: NodeType.VARIABLE
  Expression: owner = childOwner[_matronId]

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: kittenId = _createPanda(_matronId,matron.siringWithId,parentGen + 1,childGenes,owner)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: Abortion(pandaIndexToOwner[_matronId],_matronId,sireId)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: delete matron.siringWithId

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: pregnantPandas --

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: msg.sender.send(autoBirthFee)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: delete childOwner[_matronId]

  ID: 29
  Type: NodeType.RETURN
  Expression: kittenId

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 30
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  30 -> 31
  31 -> 1

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToOwner[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandaIndexToApproved[_tokenId] == _claimant

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToApproved[_tokenId] = _approved

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipTokenCount[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(saleAuction))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(siringAuction))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_tokenId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_tokenId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_tokenId,_to)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_to,_tokenId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_tokenId))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(_from,_tokenId))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,_to,_tokenId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: pandas.length - 1

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = pandaIndexToOwner[_tokenId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: tokensOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tokenCount = balanceOf(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: tokenCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](tokenCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCats = totalSupply()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: catId = 1

  ID: 11
  Type: NodeType.IFLOOP
  Expression: catId <= totalCats

  ID: 12
  Type: NodeType.IF
  Expression: pandaIndexToOwner[catId] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = catId

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: catId ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

  ID: 19
  Type: NodeType.RETURN
  Expression: ownerTokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 17
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 11

Function: _memcpy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.IFLOOP
  Expression: _len >= 32

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _dest += 32

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _src += 32

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _len -= 32

  ID: 9
  Type: NodeType.VARIABLE
  Expression: mask = 256 ** (32 - _len) - 1

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 3
  2 -> 9
  3 -> 4
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 3
  9 -> 10
  10 -> 11

Function: _toString
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: outputString = new string(_stringLength)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _memcpy(outputPtr,bytesPtr,_stringLength)

  ID: 7
  Type: NodeType.RETURN
  Expression: outputString

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getWizzPandaQuotaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaQuota[_tp]

Edges:
  0 -> 1

Function: getWizzPandaCountOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: wizzPandaCount[_tp]

Edges:
  0 -> 1

Function: setTotalWizzPandaOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(wizzPandaQuota[_tp] == 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_total == uint256(uint32(_total)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[_tp] = _total

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getWizzTypeOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _p = pandas[_id]

  ID: 2
  Type: NodeType.RETURN
  Expression: geneScience.getWizzType(_p.genes)

Edges:
  0 -> 1
  1 -> 2

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pandaIndexToOwner[_tokenId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipTokenCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete sireAllowedToAddress[_tokenId]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: delete pandaIndexToApproved[_tokenId]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_tokenId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _createPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_matronId == uint256(uint32(_matronId)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_sireId == uint256(uint32(_sireId)))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_generation == uint256(uint16(_generation)))

  ID: 4
  Type: NodeType.VARIABLE
  Expression: cooldownIndex = 0

  ID: 5
  Type: NodeType.IF
  Expression: pandas.length > 0

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pureDegree = uint16(geneScience.getPureFromGene(_genes))

  ID: 7
  Type: NodeType.IF
  Expression: pureDegree == 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: pureDegree = 1

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 1000 / pureDegree

  ID: 11
  Type: NodeType.IF
  Expression: cooldownIndex % 10 < 5

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex / 10 + 1

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = cooldownIndex - 1

  ID: 16
  Type: NodeType.IF
  Expression: cooldownIndex > 8

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 8

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _tp = geneScience.getWizzType(_genes)

  ID: 20
  Type: NodeType.IF
  Expression: _tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _genes = geneScience.clearWizzType(_genes)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _tp = 0

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.IF
  Expression: _tp == 1

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = 5

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.IF
  Expression: _tp > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.IF
  Expression: _generation <= 1 && _tp != 1

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: gen0CreatedCount ++

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.VARIABLE
  Expression: _panda = Panda({genes:_genes,birthTime:uint64(now),cooldownEndBlock:0,matronId:uint32(_matronId),sireId:uint32(_sireId),siringWithId:0,cooldownIndex:cooldownIndex,generation:uint16(_generation)})

  ID: 36
  Type: NodeType.VARIABLE
  Expression: newKittenId = pandas.push(_panda) - 1

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newKittenId == uint256(uint32(newKittenId)))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: _transfer(0,_owner,newKittenId)

  ID: 40
  Type: NodeType.RETURN
  Expression: newKittenId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 34
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 33
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40

Function: setSecondsPerBlock
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(secs < cooldowns[0])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: secondsPerBlock = secs

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCEO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCEO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = _newCEO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setCOO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCOO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cooAddress = _newCOO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCLevel()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(saleAuction != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(siringAuction != address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(geneScience != address(0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newContractAddress == address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: super.unpause()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: PandaCore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ceoAddress = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: cooAddress = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(pandas.length == 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _genes = (uint256(- 1),uint256(- 1))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: wizzPandaQuota[1] = 100

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _createPanda(0,0,0,_genes,address(0))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: setNewAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: newContractAddress = _v2Address

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ContractUpgrade(_v2Address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCEO()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(saleAuction) || msg.sender == address(siringAuction))

Edges:
  0 -> 1

Function: getPanda
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: kit = pandas[_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isGestating = (kit.siringWithId != 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isReady = (kit.cooldownEndBlock <= block.number)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: cooldownIndex = uint256(kit.cooldownIndex)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nextActionAt = uint256(kit.cooldownEndBlock)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: siringWithId = uint256(kit.siringWithId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: birthTime = uint256(kit.birthTime)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: matronId = uint256(kit.matronId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: sireId = uint256(kit.sireId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: generation = uint256(kit.generation)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: genes = kit.genes

  ID: 12
  Type: NodeType.RETURN
  Expression: (isGestating,isReady,cooldownIndex,nextActionAt,siringWithId,birthTime,matronId,sireId,generation,genes)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = this.balance

  ID: 2
  Type: NodeType.VARIABLE
  Expression: subtractFees = (pregnantPandas + 1) * autoBirthFee

  ID: 3
  Type: NodeType.IF
  Expression: balance > subtractFees

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: cfoAddress.send(balance - subtractFees)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: cooldowns = (uint32(300),uint32(1800),uint32(7200),uint32(14400),uint32(28800),uint32(86400),uint32(172800),uint32(259200),uint32(604800))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: secondsPerBlock = 15

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: autoBirthFee = 2000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_TOTAL_COUNT = 16200

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = PandaEarth

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = PE

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: InterfaceSignature_ERC721 = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(totalSupply())) ^ bytes4(keccak256()(balanceOf(address))) ^ bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(transfer(address,uint256))) ^ bytes4(keccak256()(transferFrom(address,address,uint256))) ^ bytes4(keccak256()(tokensOfOwner(address))) ^ bytes4(keccak256()(tokenMetadata(uint256,string)))

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GENSIS_TOTAL_COUNT = 100

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_CREATION_LIMIT = 45000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_STARTING_PRICE = 100000000000000000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: GEN0_AUCTION_DURATION = 86400

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: OPEN_PACKAGE_PRICE = 10000000000000000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


