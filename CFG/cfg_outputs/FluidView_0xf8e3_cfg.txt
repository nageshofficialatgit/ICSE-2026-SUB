Contract: MainnetFluidAddresses
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: DFSMath
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2


Contract: FluidHelper
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IFluidVaultResolver
==================================================


Contract: IERC20
==================================================


Contract: IWETH
==================================================


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalance(uint256,uint256)(balance,amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 7
  Type: NodeType.IF
  Expression: ! (success)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: revert SendingValueFail()()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance < value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientBalanceForCall(uint256,uint256)(balance,value)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! (isContract(target))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert NonContractCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 7
  Type: NodeType.IF
  Expression: success

  ID: 8
  Type: NodeType.RETURN
  Expression: returndata

  ID: 9
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 10
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 14
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  9 -> 10
  9 -> 15
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 16
  15 -> 16
  16 -> 17


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

  ID: 2
  Type: NodeType.IF
  Expression: ! _callOptionalReturnBool(token,approvalCall)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,approvalCall)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(returndata.length == 0 || abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturnBool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: success && (returndata.length == 0 || abi.decode(returndata,(bool))) && address(token).code.length > 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: TokenUtils
==================================================

Function: approveToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: IERC20(_tokenAddr).allowance(address(this),_to) < _amount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenAddr).safeApprove(_to,_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6

Function: pullTokensIfNeeded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,_from)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransferFrom(_from,address(this),_amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7

Function: withdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amount == type()(uint256).max

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _amount = getBalance(_token,address(this))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: _to != address(0) && _to != address(this) && _amount != 0

  ID: 5
  Type: NodeType.IF
  Expression: _token != ETH_ADDR

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).safeTransfer(_to,_amount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (success,None) = _to.call{value: _amount}()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Eth send fail)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.RETURN
  Expression: _amount

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 11
  5 -> 6
  5 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12

Function: depositWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).deposit{value: _amount}()

Edges:
  0 -> 1

Function: withdrawWeth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IWETH(WETH_ADDR).withdraw(_amount)

Edges:
  0 -> 1

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _tokenAddr == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: _acc.balance

  ID: 3
  Type: NodeType.RETURN
  Expression: IERC20(_tokenAddr).balanceOf(_acc)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: getTokenDecimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _token == ETH_ADDR

  ID: 2
  Type: NodeType.RETURN
  Expression: 18

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: IERC20(_token).decimals()

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:
  0 -> 1


Contract: FluidRatioHelper
==================================================

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (userPosition,vaultData) = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionByNftId(_nftId)

  ID: 4
  Type: NodeType.IF
  Expression: vaultData.constantVariables.vaultType == T1_VAULT_TYPE

  ID: 5
  Type: NodeType.VARIABLE
  Expression: collAmount = userPosition.supply

  ID: 6
  Type: NodeType.VARIABLE
  Expression: collToken = vaultData.constantVariables.supplyToken.token0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: debtAmount = userPosition.borrow

  ID: 8
  Type: NodeType.VARIABLE
  Expression: debtToken = vaultData.constantVariables.borrowToken.token0

  ID: 9
  Type: NodeType.IF
  Expression: debtAmount == 0

  ID: 10
  Type: NodeType.RETURN
  Expression: uint256(0)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: price = vaultData.configs.oraclePriceOperate

  ID: 15
  Type: NodeType.VARIABLE
  Expression: priceScaler = 10 ** (ORACLE_PRICE_DECIMALS - collDec + debtDec)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: collAmountInDebtToken = ((collAmount * price) / priceScaler) * (10 ** debtDec) / (10 ** collDec)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ratio = collAmountInDebtToken * WAD / debtAmount

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: collToken != TokenUtils.ETH_ADDR

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: collDec = IERC20(collToken).decimals()

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: collDec = ETH_DECIMALS

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: debtToken != TokenUtils.ETH_ADDR

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: debtDec = IERC20(debtToken).decimals()

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: debtDec = ETH_DECIMALS

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 18
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  11 -> 19
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 27
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 14

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T1_VAULT_TYPE = 1e4

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T2_VAULT_TYPE = 2e4

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T3_VAULT_TYPE = 3e4

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T4_VAULT_TYPE = 4e4

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ORACLE_PRICE_DECIMALS = 27

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_DECIMALS = 18

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 1e18

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10


Contract: IFluidLendingResolver
==================================================


Contract: FluidView
==================================================

Function: getRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (userPosition,vaultData) = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionByNftId(_nftId)

  ID: 4
  Type: NodeType.IF
  Expression: vaultData.constantVariables.vaultType == T1_VAULT_TYPE

  ID: 5
  Type: NodeType.VARIABLE
  Expression: collAmount = userPosition.supply

  ID: 6
  Type: NodeType.VARIABLE
  Expression: collToken = vaultData.constantVariables.supplyToken.token0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: debtAmount = userPosition.borrow

  ID: 8
  Type: NodeType.VARIABLE
  Expression: debtToken = vaultData.constantVariables.borrowToken.token0

  ID: 9
  Type: NodeType.IF
  Expression: debtAmount == 0

  ID: 10
  Type: NodeType.RETURN
  Expression: uint256(0)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: price = vaultData.configs.oraclePriceOperate

  ID: 15
  Type: NodeType.VARIABLE
  Expression: priceScaler = 10 ** (ORACLE_PRICE_DECIMALS - collDec + debtDec)

  ID: 16
  Type: NodeType.VARIABLE
  Expression: collAmountInDebtToken = ((collAmount * price) / priceScaler) * (10 ** debtDec) / (10 ** collDec)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ratio = collAmountInDebtToken * WAD / debtAmount

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: collToken != TokenUtils.ETH_ADDR

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: collDec = IERC20(collToken).decimals()

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: collDec = ETH_DECIMALS

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.IF
  Expression: debtToken != TokenUtils.ETH_ADDR

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: debtDec = IERC20(debtToken).decimals()

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: debtDec = ETH_DECIMALS

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.RETURN
  Expression: ratio

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 18
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  11 -> 19
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 27
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 14

Function: signed256
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(x <= uint256(type()(int256).max))

  ID: 2
  Type: NodeType.RETURN
  Expression: int256(x)

Edges:
  0 -> 1
  1 -> 2

Function: getUserPositions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftIds = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionsNftIdOfUser(_user)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: positions = new FluidView.UserPosition[](nftIds.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vaults = new FluidView.VaultData[](nftIds.length)

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < nftIds.length

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: (positions[i],vaults[i]) = getPositionByNftId(nftIds[i])

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: (positions,vaults)

  ID: 11
  Type: NodeType.RETURN
  Expression: (positions,vaults)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 10
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 7

Function: getUserNftIds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionsNftIdOfUser(_user)

Edges:
  0 -> 1

Function: getUserNftIdsWithVaultIds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: nftIds = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionsNftIdOfUser(_user)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: retVal = new FluidView.NftWithVault[](nftIds.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < nftIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: vaultByNft = IFluidVaultResolver(FLUID_VAULT_RESOLVER).vaultByNftId(nftIds[i])

  ID: 8
  Type: NodeType.VARIABLE
  Expression: vaultId = IFluidVaultResolver(FLUID_VAULT_RESOLVER).getVaultId(vaultByNft)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: retVal[i] = NftWithVault({nftId:nftIds[i],vaultId:vaultId,vaultAddr:vaultByNft})

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.RETURN
  Expression: retVal

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 11
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6

Function: getPositionByNftId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (userPosition,vaultData) = IFluidVaultResolver(FLUID_VAULT_RESOLVER).positionByNftId(_nftId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: position = UserPosition({nftId:userPosition.nftId,owner:userPosition.owner,isLiquidated:userPosition.isLiquidated,isSupplyPosition:userPosition.isSupplyPosition,supply:userPosition.supply,borrow:userPosition.borrow,ratio:getRatio(userPosition.nftId),tick:userPosition.tick,tickId:userPosition.tickId})

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: vault = getVaultData(vaultData.vault)

  ID: 6
  Type: NodeType.RETURN
  Expression: (position,vault)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: getVaultData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = IFluidVaultResolver(FLUID_VAULT_RESOLVER).getVaultEntireData(_vault)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: supplyToken0 = data.constantVariables.supplyToken.token0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: supplyToken1 = data.constantVariables.supplyToken.token1

  ID: 4
  Type: NodeType.VARIABLE
  Expression: borrowToken0 = data.constantVariables.borrowToken.token0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: borrowToken1 = data.constantVariables.borrowToken.token1

  ID: 7
  Type: NodeType.IF
  Expression: borrowToken1 != address(0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: vaultData = VaultData({vault:_vault,vaultId:data.constantVariables.vaultId,vaultType:data.constantVariables.vaultType,isSmartColl:data.isSmartCol,isSmartDebt:data.isSmartDebt,supplyToken0:supplyToken0,supplyToken1:supplyToken1,borrowToken0:borrowToken0,borrowToken1:borrowToken1,supplyToken0Decimals:18,supplyToken1Decimals:0,borrowToken0Decimals:18,borrowToken1Decimals:0,collateralFactor:data.configs.collateralFactor,liquidationThreshold:data.configs.liquidationThreshold,liquidationMaxLimit:data.configs.liquidationMaxLimit,withdrawalGap:data.configs.withdrawalGap,liquidationPenalty:data.configs.liquidationPenalty,borrowFee:data.configs.borrowFee,oracle:data.configs.oracle,oraclePriceOperate:data.configs.oraclePriceOperate,oraclePriceLiquidate:data.configs.oraclePriceLiquidate,vaultSupplyExchangePrice:data.exchangePricesAndRates.vaultSupplyExchangePrice,vaultBorrowExchangePrice:data.exchangePricesAndRates.vaultBorrowExchangePrice,supplyRateVault:data.exchangePricesAndRates.supplyRateVault,borrowRateVault:data.exchangePricesAndRates.borrowRateVault,rewardsOrFeeRateSupply:data.exchangePricesAndRates.rewardsOrFeeRateSupply,rewardsOrFeeRateBorrow:data.exchangePricesAndRates.rewardsOrFeeRateBorrow,totalPositions:data.vaultState.totalPositions,totalSupplyVault:data.totalSupplyAndBorrow.totalSupplyVault,totalBorrowVault:data.totalSupplyAndBorrow.totalBorrowVault,withdrawalLimit:data.liquidityUserSupplyData.withdrawalLimit,withdrawableUntilLimit:data.liquidityUserSupplyData.withdrawableUntilLimit,withdrawable:data.liquidityUserSupplyData.withdrawable,baseWithdrawalLimit:data.liquidityUserSupplyData.baseWithdrawalLimit,withdrawExpandPercent:data.liquidityUserSupplyData.expandPercent,withdrawExpandDuration:data.liquidityUserSupplyData.expandDuration,borrowLimit:data.liquidityUserBorrowData.borrowLimit,borrowableUntilLimit:data.liquidityUserBorrowData.borrowableUntilLimit,borrowable:data.liquidityUserBorrowData.borrowable,borrowLimitUtilization:data.liquidityUserBorrowData.borrowLimitUtilization,maxBorrowLimit:data.liquidityUserBorrowData.maxBorrowLimit,borrowExpandPercent:data.liquidityUserBorrowData.expandPercent,borrowExpandDuration:data.liquidityUserBorrowData.expandDuration,baseBorrowLimit:data.liquidityUserBorrowData.baseBorrowLimit,minimumBorrowing:data.limitsAndAvailability.minimumBorrowing})

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: borrowToken1 != ETH_ADDR

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: vaultData = VaultData({vault:_vault,vaultId:data.constantVariables.vaultId,vaultType:data.constantVariables.vaultType,isSmartColl:data.isSmartCol,isSmartDebt:data.isSmartDebt,supplyToken0:supplyToken0,supplyToken1:supplyToken1,borrowToken0:borrowToken0,borrowToken1:borrowToken1,supplyToken0Decimals:IERC20(supplyToken0).decimals(),supplyToken1Decimals:IERC20(supplyToken1).decimals(),borrowToken0Decimals:IERC20(borrowToken0).decimals(),borrowToken1Decimals:IERC20(borrowToken1).decimals(),collateralFactor:data.configs.collateralFactor,liquidationThreshold:data.configs.liquidationThreshold,liquidationMaxLimit:data.configs.liquidationMaxLimit,withdrawalGap:data.configs.withdrawalGap,liquidationPenalty:data.configs.liquidationPenalty,borrowFee:data.configs.borrowFee,oracle:data.configs.oracle,oraclePriceOperate:data.configs.oraclePriceOperate,oraclePriceLiquidate:data.configs.oraclePriceLiquidate,vaultSupplyExchangePrice:data.exchangePricesAndRates.vaultSupplyExchangePrice,vaultBorrowExchangePrice:data.exchangePricesAndRates.vaultBorrowExchangePrice,supplyRateVault:data.exchangePricesAndRates.supplyRateVault,borrowRateVault:data.exchangePricesAndRates.borrowRateVault,rewardsOrFeeRateSupply:data.exchangePricesAndRates.rewardsOrFeeRateSupply,rewardsOrFeeRateBorrow:data.exchangePricesAndRates.rewardsOrFeeRateBorrow,totalPositions:data.vaultState.totalPositions,totalSupplyVault:data.totalSupplyAndBorrow.totalSupplyVault,totalBorrowVault:data.totalSupplyAndBorrow.totalBorrowVault,withdrawalLimit:data.liquidityUserSupplyData.withdrawalLimit,withdrawableUntilLimit:data.liquidityUserSupplyData.withdrawableUntilLimit,withdrawable:data.liquidityUserSupplyData.withdrawable,baseWithdrawalLimit:data.liquidityUserSupplyData.baseWithdrawalLimit,withdrawExpandPercent:data.liquidityUserSupplyData.expandPercent,withdrawExpandDuration:data.liquidityUserSupplyData.expandDuration,borrowLimit:data.liquidityUserBorrowData.borrowLimit,borrowableUntilLimit:data.liquidityUserBorrowData.borrowableUntilLimit,borrowable:data.liquidityUserBorrowData.borrowable,borrowLimitUtilization:data.liquidityUserBorrowData.borrowLimitUtilization,maxBorrowLimit:data.liquidityUserBorrowData.maxBorrowLimit,borrowExpandPercent:data.liquidityUserBorrowData.expandPercent,borrowExpandDuration:data.liquidityUserBorrowData.expandDuration,baseBorrowLimit:data.liquidityUserBorrowData.baseBorrowLimit,minimumBorrowing:data.limitsAndAvailability.minimumBorrowing})

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: vaultData = VaultData({vault:_vault,vaultId:data.constantVariables.vaultId,vaultType:data.constantVariables.vaultType,isSmartColl:data.isSmartCol,isSmartDebt:data.isSmartDebt,supplyToken0:supplyToken0,supplyToken1:supplyToken1,borrowToken0:borrowToken0,borrowToken1:borrowToken1,supplyToken0Decimals:IERC20(supplyToken0).decimals(),supplyToken1Decimals:18,borrowToken0Decimals:IERC20(borrowToken0).decimals(),borrowToken1Decimals:18,collateralFactor:data.configs.collateralFactor,liquidationThreshold:data.configs.liquidationThreshold,liquidationMaxLimit:data.configs.liquidationMaxLimit,withdrawalGap:data.configs.withdrawalGap,liquidationPenalty:data.configs.liquidationPenalty,borrowFee:data.configs.borrowFee,oracle:data.configs.oracle,oraclePriceOperate:data.configs.oraclePriceOperate,oraclePriceLiquidate:data.configs.oraclePriceLiquidate,vaultSupplyExchangePrice:data.exchangePricesAndRates.vaultSupplyExchangePrice,vaultBorrowExchangePrice:data.exchangePricesAndRates.vaultBorrowExchangePrice,supplyRateVault:data.exchangePricesAndRates.supplyRateVault,borrowRateVault:data.exchangePricesAndRates.borrowRateVault,rewardsOrFeeRateSupply:data.exchangePricesAndRates.rewardsOrFeeRateSupply,rewardsOrFeeRateBorrow:data.exchangePricesAndRates.rewardsOrFeeRateBorrow,totalPositions:data.vaultState.totalPositions,totalSupplyVault:data.totalSupplyAndBorrow.totalSupplyVault,totalBorrowVault:data.totalSupplyAndBorrow.totalBorrowVault,withdrawalLimit:data.liquidityUserSupplyData.withdrawalLimit,withdrawableUntilLimit:data.liquidityUserSupplyData.withdrawableUntilLimit,withdrawable:data.liquidityUserSupplyData.withdrawable,baseWithdrawalLimit:data.liquidityUserSupplyData.baseWithdrawalLimit,withdrawExpandPercent:data.liquidityUserSupplyData.expandPercent,withdrawExpandDuration:data.liquidityUserSupplyData.expandDuration,borrowLimit:data.liquidityUserBorrowData.borrowLimit,borrowableUntilLimit:data.liquidityUserBorrowData.borrowableUntilLimit,borrowable:data.liquidityUserBorrowData.borrowable,borrowLimitUtilization:data.liquidityUserBorrowData.borrowLimitUtilization,maxBorrowLimit:data.liquidityUserBorrowData.maxBorrowLimit,borrowExpandPercent:data.liquidityUserBorrowData.expandPercent,borrowExpandDuration:data.liquidityUserBorrowData.expandDuration,baseBorrowLimit:data.liquidityUserBorrowData.baseBorrowLimit,minimumBorrowing:data.limitsAndAvailability.minimumBorrowing})

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.RETURN
  Expression: vaultData

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 7
  7 -> 11
  7 -> 9
  9 -> 10
  10 -> 15
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 10

Function: getAllFTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IFluidLendingResolver(FLUID_LENDING_RESOLVER).getAllFTokens()

Edges:
  0 -> 1

Function: getFTokenData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: _fToken == F_WETH_TOKEN_ADDR && block.chainid != 42161

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: details = IFluidLendingResolver(FLUID_LENDING_RESOLVER).getFTokenDetails{gas: 9_000_000}(_fToken)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: details = IFluidLendingResolver(FLUID_LENDING_RESOLVER).getFTokenDetails(_fToken)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: fTokenData = _filterFTokenData(details)

  ID: 7
  Type: NodeType.RETURN
  Expression: fTokenData

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: getAllFTokensData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: fTokens = IFluidLendingResolver(FLUID_LENDING_RESOLVER).getAllFTokens()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: fTokenData = new FluidView.FTokenData[](fTokens.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < fTokens.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: fTokenData[i] = getFTokenData(fTokens[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: fTokenData

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: getUserEarnPosition
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: data = IFluidLendingResolver(FLUID_LENDING_RESOLVER).getUserPosition(_fToken,_user)

  ID: 2
  Type: NodeType.RETURN
  Expression: UserEarnPosition({fTokenShares:data.fTokenShares,underlyingAssets:data.underlyingAssets,underlyingBalance:data.underlyingBalance,allowance:data.allowance})

Edges:
  0 -> 1
  1 -> 2

Function: getUserEarnPositionWithFToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: userData = IFluidLendingResolver(FLUID_LENDING_RESOLVER).getUserPosition(_fToken,_user)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: userPosition = UserEarnPosition({fTokenShares:userData.fTokenShares,underlyingAssets:userData.underlyingAssets,underlyingBalance:userData.underlyingBalance,allowance:userData.allowance})

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: fTokenData = getFTokenData(_fToken)

  ID: 4
  Type: NodeType.RETURN
  Expression: (userPosition,fTokenData)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getAllUserEarnPositionsWithFTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fTokensData = getAllFTokensData()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: userPositions = new FluidView.UserEarnPosition[](fTokensData.length)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < fTokensData.length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: userPositions[i] = getUserEarnPosition(fTokensData[i].tokenAddress,_user)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: (userPositions,fTokensData)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6

Function: _filterFTokenData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fTokenData = FTokenData({tokenAddress:_details.tokenAddress,isNativeUnderlying:_details.isNativeUnderlying,name:_details.name,symbol:_details.symbol,decimals:_details.decimals,asset:_details.asset,totalAssets:_details.totalAssets,totalSupply:_details.totalSupply,convertToShares:_details.convertToShares,convertToAssets:_details.convertToAssets,rewardsRate:_details.rewardsRate,supplyRate:_details.supplyRate,withdrawable:_details.liquidityUserSupplyData.withdrawable,modeWithInterest:_details.liquidityUserSupplyData.modeWithInterest,expandPercent:_details.liquidityUserSupplyData.expandPercent,expandDuration:_details.liquidityUserSupplyData.expandDuration})

  ID: 2
  Type: NodeType.RETURN
  Expression: fTokenData

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_VAULT_RESOLVER = 0x814c8C7ceb1411B364c2940c4b9380e739e06686

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FLUID_LENDING_RESOLVER = 0xC215485C572365AE87f908ad35233EC2572A3BEC

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: F_WETH_TOKEN_ADDR = 0x90551c1795392094FE6D29B758EcCD233cFAa260

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T1_VAULT_TYPE = 1e4

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T2_VAULT_TYPE = 2e4

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T3_VAULT_TYPE = 3e4

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: T4_VAULT_TYPE = 4e4

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ORACLE_PRICE_DECIMALS = 27

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_DECIMALS = 18

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 1e18

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10


