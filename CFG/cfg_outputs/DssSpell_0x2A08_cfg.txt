Contract: PauseAbstract
==================================================


Contract: Changelog
==================================================


Contract: SpellAction
==================================================


Contract: DssExec
==================================================

Function: description
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).description()

Edges:
  0 -> 1

Function: officeHours
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).officeHours()

Edges:
  0 -> 1

Function: nextCastTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).nextCastTime(eta)

  ID: 2
  Type: NodeType.RETURN
  Expression: castTime

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pause = PauseAbstract(log.getAddress(MCD_PAUSE))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: expiration = _expiration

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: action = _spellAction

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: sig = abi.encodeWithSignature(execute())

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _action = _spellAction

  ID: 7
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tag = extcodehash(uint256)(_action)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: tag = _tag

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: schedule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= expiration,This contract has expired)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(eta == 0,This spell has already been scheduled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: eta = block.timestamp + PauseAbstract(pause).delay()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pause.plot(action,tag,sig,eta)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: cast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! done,spell-already-cast)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: done = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pause.exec(action,tag,sig,eta)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: log = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F)

Edges:


Contract: GemAbstract
==================================================


Contract: OsmAbstract
==================================================


Contract: Initializable
==================================================


Contract: Authorizable
==================================================


Contract: Fileable
==================================================


Contract: Drippable
==================================================


Contract: Pricing
==================================================


Contract: ERC20
==================================================


Contract: DssVat
==================================================


Contract: ClipLike
==================================================


Contract: DogLike
==================================================


Contract: JoinLike
==================================================


Contract: OracleLike_0
==================================================


Contract: MomLike
==================================================


Contract: RegistryLike
==================================================


Contract: ChainlogLike
==================================================


Contract: IAMLike
==================================================


Contract: LerpFactoryLike
==================================================


Contract: LerpLike
==================================================


Contract: RwaOracleLike
==================================================


Contract: DssExecLib
==================================================

Function: dai
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_DAI)

Edges:
  0 -> 1

Function: mkr
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_GOV)

Edges:
  0 -> 1

Function: vat
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_VAT)

Edges:
  0 -> 1

Function: jug
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_JUG)

Edges:
  0 -> 1

Function: pot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_POT)

Edges:
  0 -> 1

Function: vow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_VOW)

Edges:
  0 -> 1

Function: end
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_END)

Edges:
  0 -> 1

Function: reg
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(ILK_REGISTRY)

Edges:
  0 -> 1

Function: daiJoin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(MCD_JOIN_DAI)

Edges:
  0 -> 1

Function: lerpFab
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: getChangelogAddress(LERP_FAB)

Edges:
  0 -> 1

Function: clip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _clip

Edges:
  0 -> 1

Function: flip
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _flip

Edges:
  0 -> 1

Function: calc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _calc

Edges:
  0 -> 1

Function: getChangelogAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setAuthority
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: canCast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: nextCastTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: castTime

Edges:
  0 -> 1

Function: setValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setDSR
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: setIlkStabilityFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: sendPaymentFromSurplusBuffer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: linearInterpolation
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAY = 10 ** 27

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RAD = 10 ** 45

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: THOUSAND = 10 ** 3

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MILLION = 10 ** 6

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BPS_ONE_PCT = 100

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BPS_ONE_HUNDRED_PCT = 100 * BPS_ONE_PCT

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RATES_ONE_HUNDRED_PCT = 1000000021979553151239153027

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8


Contract: OracleLike_1
==================================================


Contract: DssAction
==================================================

Function: officeHours
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: execute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: actions()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: limited()

Edges:
  0 -> 2
  2 -> 1

Function: nextCastTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(eta <= type()(uint40).max)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: castTime = DssExecLib.nextCastTime(uint40(eta),uint40(block.timestamp),officeHours())

  ID: 3
  Type: NodeType.RETURN
  Expression: castTime

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SUsdsLike
==================================================


Contract: DaiUsdsLike
==================================================


Contract: MkrSkyLike
==================================================


Contract: StakingRewardsLike
==================================================


Contract: ProxyLike
==================================================


Contract: DssSpellAction
==================================================

Function: officeHours
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1

Function: execute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: actions()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: limited()

Edges:
  0 -> 2
  2 -> 1

Function: nextCastTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(eta <= type()(uint40).max)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: castTime = DssExecLib.nextCastTime(uint40(eta),uint40(block.timestamp),officeHours())

  ID: 3
  Type: NodeType.RETURN
  Expression: castTime

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: actions
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OsmAbstract(PIP_ETH).change(0x46ef0071b1E2fF6B42d36e5A177EA43Ae5917f4E)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OsmAbstract(PIP_WSTETH).change(0xA770582353b573CbfdCC948751750EeB3Ccf23CF)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(ETH-A,SIX_PCT_RATE,true)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(ETH-B,SIX_PT_FIVE_PCT_RATE,true)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(ETH-C,FIVE_PT_SEVEN_FIVE_PCT_RATE,true)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(WSTETH-A,SEVEN_PCT_RATE,true)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(WSTETH-B,SIX_PT_SEVEN_FIVE_PCT_RATE,true)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(WBTC-A,ELEVEN_PCT_RATE,true)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(WBTC-B,ELEVEN_PT_FIVE_PCT_RATE,true)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(WBTC-C,TEN_PT_SEVEN_FIVE_PCT_RATE,true)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setIlkStabilityFee(ALLOCATOR-SPARK-A,TWO_PT_SIX_TWO_PCT_RATE,true)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setDSR(THREE_PT_FIVE_PCT_RATE,true)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SUsdsLike(SUSDS).drip()

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: SUsdsLike(SUSDS).file(ssr,FOUR_PT_FIVE_PCT_RATE)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.setValue(MCD_SPLIT,hop,1728)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: StakingRewardsLike(REWARDS_LSMKR_USDS).setRewardsDuration(1728)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(IMMUNEFI_USER_PAYOUT_2025_03_20,50_000 * WAD)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(IMMUNEFI_COMISSION,5_000 * WAD)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(BLUE,4_000 * WAD)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(BONAPUBLICA,4_000 * WAD)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(CLOAKY_2,4_000 * WAD)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(JULIACHANG,4_000 * WAD)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(WBC,3_613 * WAD)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(PBG,3_429 * WAD)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(BYTERON,571 * WAD)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(BLUE,50_167 * WAD)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(CLOAKY_2,16_417 * WAD)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(CLOAKY_KOHLA_2,10_000 * WAD)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(CLOAKY_ENNOIA,10_055 * WAD)

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _transferSky(BLUE,330_000 * WAD)

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: _transferSky(CLOAKY_2,288_000 * WAD)

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _transferUsds(INTEGRATION_BOOST_INITIATIVE,3_000_000 * WAD)

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: ProxyLike(SPARK_PROXY).exec(SPARK_SPELL,abi.encodeWithSignature(execute()))

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33

Function: _transferUsds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(wad % WAD == 0,transferUsds/non-integer-wad)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DssExecLib.sendPaymentFromSurplusBuffer(address(this),wad / WAD)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DAI.approve(DAI_USDS,wad)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: DaiUsdsLike(DAI_USDS).daiToUsds(usr,wad)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transferSky
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mkrWad = wad / MKR_SKY_RATE

  ID: 2
  Type: NodeType.IF
  Expression: wad % MKR_SKY_RATE != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mkrWad ++

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MKR.approve(MKR_SKY,mkrWad)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: MkrSkyLike(MKR_SKY).mkrToSky(address(this),mkrWad)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: GemAbstract(SKY).transfer(usr,wad)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI = GemAbstract(DssExecLib.dai())

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR = GemAbstract(DssExecLib.mkr())

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SKY = GemAbstract(DssExecLib.getChangelogAddress(SKY))

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PIP_ETH = DssExecLib.getChangelogAddress(PIP_ETH)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PIP_WSTETH = DssExecLib.getChangelogAddress(PIP_WSTETH)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SUSDS = DssExecLib.getChangelogAddress(SUSDS)

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MCD_SPLIT = DssExecLib.getChangelogAddress(MCD_SPLIT)

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: REWARDS_LSMKR_USDS = DssExecLib.getChangelogAddress(REWARDS_LSMKR_USDS)

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI_USDS = DssExecLib.getChangelogAddress(DAI_USDS)

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_SKY = DssExecLib.getChangelogAddress(MKR_SKY)

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MKR_SKY_RATE = MkrSkyLike(DssExecLib.getChangelogAddress(MKR_SKY)).rate()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: description = 2025-03-20 MakerDAO Executive Spell | Hash: 0x222fd7fe53603675db01f1cc524770291cc40ba246dc4ffc350f955ee6217c84

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TWO_PT_SIX_TWO_PCT_RATE = 1000000000820099554044024241

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: THREE_PT_FIVE_PCT_RATE = 1000000001090862085746321732

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FOUR_PT_FIVE_PCT_RATE = 1000000001395766281313196627

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FIVE_PT_SEVEN_FIVE_PCT_RATE = 1000000001772819380639683201

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SIX_PCT_RATE = 1000000001847694957439350562

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SIX_PT_FIVE_PCT_RATE = 1000000001996917783620820123

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SIX_PT_SEVEN_FIVE_PCT_RATE = 1000000002071266685321207000

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SEVEN_PCT_RATE = 1000000002145441671308778766

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TEN_PT_SEVEN_FIVE_PCT_RATE = 1000000003237735385034516037

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ELEVEN_PCT_RATE = 1000000003309234382829738808

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ELEVEN_PT_FIVE_PCT_RATE = 1000000003451750542235895695

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WAD = 10 ** 18

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BLUE = 0xb6C09680D822F162449cdFB8248a7D3FC26Ec9Bf

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BONAPUBLICA = 0x167c1a762B08D7e78dbF8f24e5C3f1Ab415021D3

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BYTERON = 0xc2982e72D060cab2387Dba96b846acb8c96EfF66

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CLOAKY_2 = 0x9244F47D70587Fa2329B89B6f503022b63Ad54A5

  ID: 17
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CLOAKY_KOHLA_2 = 0x73dFC091Ad77c03F2809204fCF03C0b9dccf8c7a

  ID: 18
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: CLOAKY_ENNOIA = 0xA7364a1738D0bB7D1911318Ca3FB3779A8A58D7b

  ID: 19
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTEGRATION_BOOST_INITIATIVE = 0xD6891d1DFFDA6B0B1aF3524018a1eE2E608785F7

  ID: 20
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IMMUNEFI_COMISSION = 0x7119f398b6C06095c6E8964C1f58e7C1BAa79E18

  ID: 21
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: IMMUNEFI_USER_PAYOUT_2025_03_20 = 0x29d17B5AcB1C68C574712B11F36C859F6FbdBe32

  ID: 22
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: JULIACHANG = 0x252abAEe2F4f4b8D39E5F12b163eDFb7fac7AED7

  ID: 23
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WBC = 0xeBcE83e491947aDB1396Ee7E55d3c81414fB0D47

  ID: 24
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PBG = 0x8D4df847dB7FfE0B46AF084fE031F7691C6478c2

  ID: 25
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_PROXY = 0x3300f198988e4C9C63F75dF86De36421f06af8c4

  ID: 26
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: SPARK_SPELL = 0x1e865856d8F97FB34FBb0EDbF63f53E29a676aB6

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26


Contract: DssSpell
==================================================

Function: description
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).description()

Edges:
  0 -> 1

Function: officeHours
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).officeHours()

Edges:
  0 -> 1

Function: nextCastTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: SpellAction(action).nextCastTime(eta)

  ID: 2
  Type: NodeType.RETURN
  Expression: castTime

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: DssExec(block.timestamp + 2592000,address(new DssSpellAction()))

Edges:
  0 -> 1

Function: schedule
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp <= expiration,This contract has expired)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(eta == 0,This spell has already been scheduled)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: eta = block.timestamp + PauseAbstract(pause).delay()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: pause.plot(action,tag,sig,eta)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: cast
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! done,spell-already-cast)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: done = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pause.exec(action,tag,sig,eta)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: log = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F)

Edges:


