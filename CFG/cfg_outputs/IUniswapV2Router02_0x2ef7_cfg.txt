Contract: IUniswapV2Router02
==================================================

Function: WETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: swapExactETHForTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: amounts

Edges:
  0 -> 1

Function: swapExactTokensForTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: amounts

Edges:
  0 -> 1

Function: swapExactTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: amounts

Edges:
  0 -> 1


Contract: IERC20
==================================================

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:


Contract: UniswapSlippageBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV2Router02(_uniswapRouter)

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: withdrawal
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(owner).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: executeArbitrage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value >= amountIn,Insufficient ETH)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: path1 = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path1[0] = uniswapRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path1[1] = tokenA

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amounts1 = uniswapRouter.swapExactETHForTokens{value: amountIn}(0,path1,address(this),block.timestamp + 300)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenA).approve(address(uniswapRouter),amounts1[1])

  ID: 7
  Type: NodeType.VARIABLE
  Expression: path2 = new address[](2)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: path2[0] = tokenA

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: path2[1] = tokenB

  ID: 10
  Type: NodeType.VARIABLE
  Expression: amounts2 = uniswapRouter.swapExactTokensForTokens(amounts1[1],0,path2,address(this),block.timestamp + 300)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenB).approve(address(uniswapRouter),amounts2[1])

  ID: 12
  Type: NodeType.VARIABLE
  Expression: path3 = new address[](2)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: path3[0] = tokenB

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: path3[1] = uniswapRouter.WETH()

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForETH(amounts2[1],0,path3,address(this),block.timestamp + 300)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1


