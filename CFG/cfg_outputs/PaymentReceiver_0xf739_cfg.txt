Contract: AddressUpgradeable
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: returndata

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 7

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: Initializable
==================================================

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized < type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1


Contract: ContextUpgradeable
==================================================

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized < type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: OwnableUpgradeable
==================================================

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized < type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: __Ownable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Ownable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20Upgradeable
==================================================


Contract: PaymentReceiver
==================================================

Function: __Ownable_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init_unchained()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: __Ownable_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 2
  2 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: __Context_init
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: __Context_init_unchained
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: onlyInitializing()

Edges:
  0 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _disableInitializers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _initializing,Initializable: contract is initializing)

  ID: 2
  Type: NodeType.IF
  Expression: _initialized < type()(uint8).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _initialized = type()(uint8).max

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Initialized(type()(uint8).max)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5

Function: _getInitializedVersion
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initialized

Edges:
  0 -> 1

Function: _isInitializing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _initializing

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _disableInitializers()

Edges:
  0 -> 1

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: __Ownable_init()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: usdtToken = IERC20Upgradeable(usdtAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: arbAddress = 0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: arbToken = IERC20Upgradeable(arbAddress)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: roguePriceETH = 370000000000

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: roguePriceUSDT = 1000

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: roguePriceARB = 2092000000000000

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: paymentReceiverAdmin = 0x4eD7291e0677B3238933CA98E8ba5E1f232327f6

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: initializer()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Received(msg.sender,msg.value)

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Received(msg.sender,msg.value)

Edges:
  0 -> 1

Function: purchaseROGUETokensETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value > 0,PaymentReceiver: purchaseROGUETokensETH: msg.value must be greater than 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: chainID = block.chainid

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: chainID == 1 || chainID == 11155111

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 1

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 2

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _rogueAmount = msg.value / roguePriceETH

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_rogueAmount >= 10000,PaymentReceiver: purchaseROGUETokensETH: _rogueAmount must be greater than 10,000)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalROGUESold += _rogueAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: totalETHReceived += msg.value

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: purchaseCount ++

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: purchaseCountETH ++

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldETH += _rogueAmount

  ID: 15
  Type: NodeType.VARIABLE
  Expression: purchase = ROGUETokenPurchase(msg.sender,roguePriceETH,_rogueAmount,msg.value,false,1,paymentChain,bytes32(0),bytes32(0),block.timestamp,0)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[msg.sender].push(purchase)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ROGUETokensPurchasedEvent(msg.sender,roguePriceETH,_rogueAmount,msg.value,1,paymentChain,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17

Function: purchaseROGUETokensUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount > 0,PaymentReceiver: purchaseROGUETokensUSDT: _amount must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdtToken.allowance(msg.sender,address(this)) >= _amount,Token allowance too low)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sent = usdtToken.transferFrom(msg.sender,address(this),_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sent,token transfer failed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: chainID = block.chainid

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: chainID == 1 || chainID == 11155111

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 2

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: _rogueAmount = _amount / roguePriceUSDT

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_rogueAmount >= 10000,PaymentReceiver: purchaseROGUETokensUSDT: _rogueAmount must be greater than 10,000)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalROGUESold += _rogueAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalUSDTReceived += _amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: purchaseCount ++

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: purchaseCountUSDT ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldUSDT += _rogueAmount

  ID: 18
  Type: NodeType.VARIABLE
  Expression: purchase = ROGUETokenPurchase(msg.sender,roguePriceUSDT,_rogueAmount,_amount,false,2,paymentChain,bytes32(0),bytes32(0),block.timestamp,0)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[msg.sender].push(purchase)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ROGUETokensPurchasedEvent(msg.sender,roguePriceUSDT,_rogueAmount,_amount,2,paymentChain,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: purchaseROGUETokensARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_amount > 0,PaymentReceiver: purchaseROGUETokensARB: _amount must be greater than 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(arbToken.allowance(msg.sender,address(this)) >= _amount,Token allowance too low)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: sent = arbToken.transferFrom(msg.sender,address(this),_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sent,token transfer failed)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: chainID = block.chainid

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: chainID == 1 || chainID == 11155111

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 1

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: paymentChain = 2

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: _rogueAmount = _amount / roguePriceARB

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_rogueAmount >= 10000,PaymentReceiver: purchaseROGUETokensARB: _rogueAmount must be greater than 10,000)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: totalROGUESold += _rogueAmount

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: totalARBReceived += _amount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: purchaseCount ++

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: purchaseCountARB ++

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldARB += _rogueAmount

  ID: 18
  Type: NodeType.VARIABLE
  Expression: purchase = ROGUETokenPurchase(msg.sender,roguePriceARB,_rogueAmount,_amount,false,3,paymentChain,bytes32(0),bytes32(0),block.timestamp,0)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[msg.sender].push(purchase)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ROGUETokensPurchasedEvent(msg.sender,roguePriceARB,_rogueAmount,_amount,3,paymentChain,block.timestamp)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 10
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20

Function: getROGUETokenPurchaseByPaymentTxHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: paymentTxHashPurchases[_paymentTxHash]

Edges:
  0 -> 1

Function: getROGUETokenPurchaseByDeliveryTxHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: deliveryTxHashPurchases[_deliveryTxHash]

Edges:
  0 -> 1

Function: getROGUETokenPurchasesByBuyer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: buyerPurchases[_buyer]

Edges:
  0 -> 1

Function: getROGUETokenPurchaseByBuyerAndRogueAmountAndTimestamp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 5
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].rogueAmount == _rogueAmount && buyerPurchases[_buyer][i].paymentTimestamp == _timestamp

  ID: 6
  Type: NodeType.RETURN
  Expression: buyerPurchases[_buyer][i]

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.RETURN
  Expression: purchase

Edges:
  0 -> 3
  1 -> 4
  2 -> 9
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  5 -> 7
  7 -> 8
  8 -> 4

Function: getROGUETokenPurchaseByBuyerAndIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: buyerPurchases[_buyer][_index]

Edges:
  0 -> 1

Function: setPaymentReceiverAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paymentReceiverAdmin = _admin

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getPaymentReceiverAdmin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: paymentReceiverAdmin

Edges:
  0 -> 1

Function: setRoguePriceETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == paymentReceiverAdmin,PaymentReceiver: setRoguePriceETH: only paymentReceiverAdmin can call this function)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: roguePriceETH = _price

Edges:
  0 -> 1
  1 -> 2

Function: setRoguePriceUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == paymentReceiverAdmin,PaymentReceiver: setRoguePriceUSDT: only paymentReceiverAdmin can call this function)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: roguePriceUSDT = _price

Edges:
  0 -> 1
  1 -> 2

Function: setRoguePriceARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == paymentReceiverAdmin,PaymentReceiver: setRoguePriceARB: only paymentReceiverAdmin can call this function)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: roguePriceARB = _price

Edges:
  0 -> 1
  1 -> 2

Function: setRoguePrices
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == paymentReceiverAdmin,PaymentReceiver: setPrices: only paymentReceiverAdmin can call this function)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: roguePriceETH = _priceETH

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: roguePriceUSDT = _priceUSDT

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: roguePriceARB = _priceARB

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ROGUEPricesUpdatedEvent(roguePriceETH,roguePriceUSDT,roguePriceARB)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(owner()).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdtToken.transfer(owner(),usdtToken.balanceOf(address(this)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: arbToken.transfer(owner(),arbToken.balanceOf(address(this)))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: getRoguePriceETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: roguePriceETH

Edges:
  0 -> 1

Function: getRoguePriceUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: roguePriceUSDT

Edges:
  0 -> 1

Function: getRoguePriceARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: roguePriceARB

Edges:
  0 -> 1

Function: getRoguePrices
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (roguePriceETH,roguePriceUSDT,roguePriceARB)

Edges:
  0 -> 1

Function: getUSDTBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: usdtToken.balanceOf(address(this))

Edges:
  0 -> 1

Function: getARBBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: arbToken.balanceOf(address(this))

Edges:
  0 -> 1

Function: getETHBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(this).balance

Edges:
  0 -> 1

Function: updatePaymentTxHashAndDeliveryTxHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == paymentReceiverAdmin,PaymentReceiver: updatePaymentTxHashAndDeliveryTxHash: only paymentReceiverAdmin can call this function)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: length = buyerPurchases[buyer].length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < length

  ID: 7
  Type: NodeType.IF
  Expression: buyerPurchases[buyer][i].rogueAmount == _rogueAmount && buyerPurchases[buyer][i].paymentTimestamp == _paymentTimestamp

  ID: 8
  Type: NodeType.IF
  Expression: buyerPurchases[buyer][i].rogueDelivered == false

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[buyer][i].rogueDelivered = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[buyer][i].paymentTxHash = _paymentTxHash

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[buyer][i].deliveryTxHash = _deliveryTxHash

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: buyerPurchases[buyer][i].deliveryTimestamp = _deliveryTimestamp

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: paymentTxHashPurchases[_paymentTxHash] = buyerPurchases[buyer][i]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: deliveryTxHashPurchases[_deliveryTxHash] = buyerPurchases[buyer][i]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ROGUETokenPurchaseUpdatedEvent(buyer,_rogueAmount,_paymentTimestamp,_paymentTxHash,_deliveryTxHash,_deliveryTimestamp)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 17
  8 -> 9
  8 -> 16
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 6

Function: getTotalROGUESold
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalROGUESold

Edges:
  0 -> 1

Function: getTotalETHReceived
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalETHReceived

Edges:
  0 -> 1

Function: getTotalUSDTReceived
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalUSDTReceived

Edges:
  0 -> 1

Function: getTotalARBReceived
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalARBReceived

Edges:
  0 -> 1

Function: getTotalROGUESoldETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalROGUESoldETH

Edges:
  0 -> 1

Function: getTotalROGUESoldUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalROGUESoldUSDT

Edges:
  0 -> 1

Function: getTotalROGUESoldARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: totalROGUESoldARB

Edges:
  0 -> 1

Function: getPurchaseCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: purchaseCount

Edges:
  0 -> 1

Function: getPurchaseCountETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: purchaseCountETH

Edges:
  0 -> 1

Function: getPurchaseCountUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: purchaseCountUSDT

Edges:
  0 -> 1

Function: getPurchaseCountARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: purchaseCountARB

Edges:
  0 -> 1

Function: getTotalROGUESoldForBuyer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalROGUESoldForBuyer = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldForBuyer += buyerPurchases[_buyer][i].rogueAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.RETURN
  Expression: totalROGUESoldForBuyer

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 8
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: getTotalROGUESoldForBuyerETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalROGUESoldForBuyerETH = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldForBuyerETH += buyerPurchases[_buyer][i].rogueAmount

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: totalROGUESoldForBuyerETH

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getTotalROGUESoldForBuyerUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalROGUESoldForBuyerUSDT = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 2

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldForBuyerUSDT += buyerPurchases[_buyer][i].rogueAmount

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: totalROGUESoldForBuyerUSDT

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getTotalROGUESoldForBuyerARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalROGUESoldForBuyerARB = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 3

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: totalROGUESoldForBuyerARB += buyerPurchases[_buyer][i].rogueAmount

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: totalROGUESoldForBuyerARB

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getPurchaseCountForBuyer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: buyerPurchases[_buyer].length

Edges:
  0 -> 1

Function: getPurchaseCountForBuyerETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: count = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: count ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getPurchaseCountForBuyerUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: count = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 2

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: count ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: getPurchaseCountForBuyerARB
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: count = 0

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < buyerPurchases[_buyer].length

  ID: 6
  Type: NodeType.IF
  Expression: buyerPurchases[_buyer][i].paymentCurrency == 3

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: count ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.RETURN
  Expression: count

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  3 -> 10
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 5

Function: setUSDTAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdtAddress = _address

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: usdtToken = IERC20Upgradeable(usdtAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setARBAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: arbAddress = _address

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: arbToken = IERC20Upgradeable(arbAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getUSDTAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: usdtAddress

Edges:
  0 -> 1

Function: getARBAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: arbAddress

Edges:
  0 -> 1


