Contract: IERC20Extended
==================================================


Contract: IDexFactory
==================================================


Contract: IDexRouter
==================================================


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: The_X_Doge
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: router_ = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: autoLpReceiver = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: marketingReceiver = 0x628e27e8e244e3C57DCC68C4e5EA89960422e101

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: xBankFundsReceiver = 0xcdaf2D72BD967879372DF5E6193a3B7c8fe6895D

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: nftPoolReceiver = 0xc0C5058136560A8e83F5C001dEbd592B1174980E

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: router = IDexRouter(router_)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: pair = IDexFactory(router.factory()).createPair(address(this),router.WETH())

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: isPair[pair] = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[msg.sender] = true

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[autoLpReceiver] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[marketingReceiver] = true

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[xBankFundsReceiver] = true

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[nftPoolReceiver] = true

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: _balances[msg.sender] = _totalSupply

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(address(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[holder][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _allowances[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: approve(spender,_totalSupply)

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _transferFrom(msg.sender,recipient,amount)

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _allowances[sender][msg.sender] != _totalSupply

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: _transferFrom(sender,recipient,amount)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! isFeeExempt[sender] && ! isFeeExempt[recipient]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(trading,Trading not enabled yet)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: inSwap

  ID: 5
  Type: NodeType.RETURN
  Expression: _basicTransfer(sender,recipient,amount)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: shouldSwapBack()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: swapBack()

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: isFeeExempt[sender] || isFeeExempt[recipient] || (! isPair[sender] && ! isPair[recipient])

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountReceived = amount

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: isPair[sender]

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: amountReceived = amount

  ID: 17
  Type: NodeType.IF
  Expression: isPair[recipient]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.mul(totalSellFee).div(feeDenominator)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: amountReceived = amount.sub(feeAmount)

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: takeFee(sender,feeAmount)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: setSellAccFee(amount)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amountReceived)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amountReceived)

  ID: 27
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 24
  14 -> 15
  15 -> 16
  15 -> 17
  16 -> 23
  17 -> 18
  17 -> 22
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27

Function: _basicTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[sender] = _balances[sender].sub(amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _balances[recipient] = _balances[recipient].add(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: takeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] = _balances[address(this)].add(feeAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),feeAmount)

Edges:
  0 -> 1
  1 -> 2

Function: setSellAccFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _liquidityFeeCount += _amount.mul(_liquiditySellFee).div(feeDenominator)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _marketingFeeCount += _amount.mul(_marketingSellFee).div(feeDenominator)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _xBankFeeCount += _amount.mul(_xBankSellFee).div(feeDenominator)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _nftHoldersFeeCount += _amount.mul(_nftHoldersSellFee).div(feeDenominator)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: shouldSwapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ! isPair[msg.sender] && ! inSwap && swapEnabled && _balances[address(this)] >= swapThreshold

Edges:
  0 -> 1

Function: swapBack
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: totalFee = _liquidityFeeCount.add(_marketingFeeCount).add(_xBankFeeCount).add(_nftHoldersFeeCount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amountToLiquify = swapThreshold.mul(_liquidityFeeCount).div(totalFee).div(2)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amountToSwap = swapThreshold.sub(amountToLiquify)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _allowances[address(this)][address(router)] = _totalSupply

  ID: 5
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = router.WETH()

  ID: 8
  Type: NodeType.VARIABLE
  Expression: balanceBefore = address(this).balance

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: amountBNB = address(this).balance.sub(balanceBefore)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: totalBNBFee = totalFee.sub(_liquidityFeeCount.div(2))

  ID: 12
  Type: NodeType.VARIABLE
  Expression: amountBNBLiquidity = amountBNB.mul(_liquidityFeeCount).div(totalBNBFee).div(2)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: amountBNBMarketing = amountBNB.mul(_marketingFeeCount).div(totalBNBFee)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: amountBNBEcological = amountBNB.mul(_xBankFeeCount).div(totalBNBFee)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: amountBNBPrizePool = amountBNB.mul(_nftHoldersFeeCount).div(totalBNBFee)

  ID: 16
  Type: NodeType.IF
  Expression: amountBNBMarketing > 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: address(marketingReceiver).transfer(amountBNBMarketing)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: amountBNBEcological > 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: address(xBankFundsReceiver).transfer(amountBNBEcological)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: amountBNBPrizePool > 0

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: address(nftPoolReceiver).transfer(amountBNBPrizePool)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: amountToLiquify > 0

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLpReceiver,block.timestamp)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: AutoLiquify(amountBNBLiquidity,amountToLiquify)

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: _liquidityFeeCount = 0

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: _marketingFeeCount = 0

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: _xBankFeeCount = 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: _nftHoldersFeeCount = 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: swapping()

Edges:
  0 -> 33
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 28
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  33 -> 1

Function: removeStuckBnb
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(receiver).transfer(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: removeStuckTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferFrom(address(this),receiver,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setIsFeeExempt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isFeeExempt[holder] = exempt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setSellFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _liquiditySellFee = _liquidityFee

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _marketingSellFee = _marketingFee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _xBankSellFee = _ecologicalFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _nftHoldersSellFee = _prizePoolFee

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalSellFee = _liquidityFee.add(_marketingFee).add(_ecologicalFee).add(_prizePoolFee)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(totalSellFee <= feeDenominator.mul(15).div(100),Can't be greater than 15%)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: setFeeReceivers
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: autoLpReceiver = _autoLpReceiver

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingReceiver = _marketingReceiver

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: xBankFundsReceiver = _xBankFundsReceiver

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: nftPoolReceiver = _nftPoolReceiver

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: setSwapBackSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(swapThreshold > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = _enabled

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapThreshold = _amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! trading,Already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: trading = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swapEnabled = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: launchedAt = block.timestamp

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: addPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPair[_pair] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: removePair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isPair[_pair] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _marketingSellFee = 2_00

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _liquiditySellFee = 2_00

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _xBankSellFee = 2_00

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _nftHoldersSellFee = 2_00

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: totalSellFee = 8_00

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: feeDenominator = 100_00

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: swapThreshold = _totalSupply / 2000

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = The X Doge

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = XDOGE

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalSupply = 100_000_000 * 10 ** _decimals

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: SafeMath
==================================================

Function: tryAdd
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.IF
  Expression: c < a

  ID: 3
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5

Function: trySub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b > a

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a - b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (true,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.IF
  Expression: c / a != b

  ID: 6
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: (true,c)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8

Function: tryDiv
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a / b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: tryMod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: b == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: (false,0)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: (true,a % b)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a + b

Edges:
  0 -> 1

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: a * b

Edges:
  0 -> 1

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


