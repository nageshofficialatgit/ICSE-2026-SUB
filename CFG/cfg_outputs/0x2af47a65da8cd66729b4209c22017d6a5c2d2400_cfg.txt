Contract: Token
==================================================


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[msg.sender] >= _value && _value > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] += _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] -= _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1


Contract: HumanStandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[msg.sender] >= _value && _value > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] += _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.RETURN
  Expression: false

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] += _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] -= _value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] -= _value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

  ID: 7
  Type: NodeType.RETURN
  Expression: false

  ID: 9
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: HumanStandardToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = _initialAmount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply = _initialAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: name = _tokenName

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: decimals = _decimalUnits

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: symbol = _tokenSymbol

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: approveAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: version = H0.1

Edges:


Contract: StandardBounties
==================================================

Function: StandardBounties
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

Edges:
  0 -> 1

Function: issueBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties.push(Bounty(_issuer,_deadline,_data,_fulfillmentAmount,_arbiter,_paysTokens,BountyStages.Draft,0))

  ID: 2
  Type: NodeType.IF
  Expression: _paysTokens

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: tokenContracts[bounties.length - 1] = HumanStandardToken(_tokenContract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BountyIssued(bounties.length - 1)

  ID: 6
  Type: NodeType.RETURN
  Expression: (bounties.length - 1)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: validateDeadline(_deadline)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: amountIsNotZero(_fulfillmentAmount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: validateNotTooManyBounties()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 1

Function: issueAndActivateBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value >= _fulfillmentAmount)

  ID: 2
  Type: NodeType.IF
  Expression: _paysTokens

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value == 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenContracts[bounties.length] = HumanStandardToken(_tokenContract)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenContracts[bounties.length].transferFrom(msg.sender,this,_value))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value * 1) == msg.value)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: bounties.push(Bounty(_issuer,_deadline,_data,_fulfillmentAmount,_arbiter,_paysTokens,BountyStages.Active,_value))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: BountyIssued(bounties.length - 1)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: ContributionAdded(bounties.length - 1,msg.sender,_value)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: BountyActivated(bounties.length - 1,msg.sender)

  ID: 12
  Type: NodeType.RETURN
  Expression: (bounties.length - 1)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: validateDeadline(_deadline)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: amountIsNotZero(_fulfillmentAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: validateNotTooManyBounties()

Edges:
  0 -> 13
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  13 -> 14
  14 -> 15
  15 -> 1

Function: contribute
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].balance += _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ContributionAdded(_bountyId,msg.sender,_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isBeforeDeadline(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isNotDead(_bountyId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: amountIsNotZero(_value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: transferredAmountEqualsValue(_bountyId,_value)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 1

Function: activateBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].balance += _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(bounties[_bountyId].balance >= bounties[_bountyId].fulfillmentAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transitionToState(_bountyId,BountyStages.Active)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ContributionAdded(_bountyId,msg.sender,_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BountyActivated(_bountyId,msg.sender)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isBeforeDeadline(_bountyId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: transferredAmountEqualsValue(_bountyId,_value)

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 1

Function: fulfillBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fulfillments[_bountyId].push(Fulfillment(false,msg.sender,_data))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BountyFulfilled(_bountyId,msg.sender,(fulfillments[_bountyId].length - 1))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: validateNotTooManyFulfillments(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Active)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isBeforeDeadline(_bountyId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: notIssuerOrArbiter(_bountyId)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 1

Function: updateFulfillment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fulfillments[_bountyId][_fulfillmentId].data = _data

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: FulfillmentUpdated(_bountyId,_fulfillmentId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: validateFulfillmentArrayIndex(_bountyId,_fulfillmentId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyFulfiller(_bountyId,_fulfillmentId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: notYetAccepted(_bountyId,_fulfillmentId)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 1

Function: acceptFulfillment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: fulfillments[_bountyId][_fulfillmentId].accepted = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: numAccepted[_bountyId] ++

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].balance -= bounties[_bountyId].fulfillmentAmount

  ID: 4
  Type: NodeType.IF
  Expression: bounties[_bountyId].paysTokens

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenContracts[_bountyId].transfer(fulfillments[_bountyId][_fulfillmentId].fulfiller,bounties[_bountyId].fulfillmentAmount))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: fulfillments[_bountyId][_fulfillmentId].fulfiller.transfer(bounties[_bountyId].fulfillmentAmount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: FulfillmentAccepted(_bountyId,msg.sender,_fulfillmentId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: validateFulfillmentArrayIndex(_bountyId,_fulfillmentId)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyIssuerOrArbiter(_bountyId)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Active)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: fulfillmentNotYetAccepted(_bountyId,_fulfillmentId)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: enoughFundsToPay(_bountyId)

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 1

Function: killBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: transitionToState(_bountyId,BountyStages.Dead)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: oldBalance = bounties[_bountyId].balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].balance = 0

  ID: 4
  Type: NodeType.IF
  Expression: oldBalance > 0

  ID: 5
  Type: NodeType.IF
  Expression: bounties[_bountyId].paysTokens

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(tokenContracts[_bountyId].transfer(bounties[_bountyId].issuer,oldBalance))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].issuer.transfer(oldBalance)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: BountyKilled(_bountyId,msg.sender)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

Edges:
  0 -> 11
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 9
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  11 -> 12
  12 -> 1

Function: extendDeadline
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].deadline = _newDeadline

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DeadlineExtended(_bountyId,_newDeadline)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: newDeadlineIsValid(_bountyId,_newDeadline)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 1

Function: transferIssuer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].issuer = _newIssuer

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IssuerTransferred(_bountyId,_newIssuer)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: changeBountyDeadline
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].deadline = _newDeadline

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BountyChanged(_bountyId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: validateDeadline(_newDeadline)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Draft)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 1

Function: changeBountyData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].data = _newData

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BountyChanged(_bountyId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Draft)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 1

Function: changeBountyFulfillmentAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].fulfillmentAmount = _newFulfillmentAmount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BountyChanged(_bountyId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Draft)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 1

Function: changeBountyArbiter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].arbiter = _newArbiter

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BountyChanged(_bountyId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: isAtStage(_bountyId,BountyStages.Draft)

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 5
  5 -> 1

Function: increasePayout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].balance += _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(bounties[_bountyId].balance >= _newFulfillmentAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].fulfillmentAmount = _newFulfillmentAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: PayoutIncreased(_bountyId,_newFulfillmentAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyIssuer(_bountyId)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: newFulfillmentAmountIsIncrease(_bountyId,_newFulfillmentAmount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: transferredAmountEqualsValue(_bountyId,_value)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 1

Function: getFulfillment
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (fulfillments[_bountyId][_fulfillmentId].accepted,fulfillments[_bountyId][_fulfillmentId].fulfiller,fulfillments[_bountyId][_fulfillmentId].data)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: validateFulfillmentArrayIndex(_bountyId,_fulfillmentId)

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: getBounty
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (bounties[_bountyId].issuer,bounties[_bountyId].deadline,bounties[_bountyId].fulfillmentAmount,bounties[_bountyId].paysTokens,uint256(bounties[_bountyId].bountyStage),bounties[_bountyId].balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

Edges:
  0 -> 2
  2 -> 1

Function: getBountyArbiter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (bounties[_bountyId].arbiter)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

Edges:
  0 -> 2
  2 -> 1

Function: getBountyData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (bounties[_bountyId].data)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

Edges:
  0 -> 2
  2 -> 1

Function: getBountyToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (tokenContracts[_bountyId])

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

Edges:
  0 -> 2
  2 -> 1

Function: getNumBounties
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: bounties.length

Edges:
  0 -> 1

Function: getNumFulfillments
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: fulfillments[_bountyId].length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: validateBountyArrayIndex(_bountyId)

Edges:
  0 -> 2
  2 -> 1

Function: transitionToState
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: bounties[_bountyId].bountyStage = _newStage

Edges:
  0 -> 1


