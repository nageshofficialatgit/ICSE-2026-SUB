Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c / a == b)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: Claimable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: Pausable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: ERC20Basic
==================================================


Contract: ERC20
==================================================


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(token.transfer(to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(token.transferFrom(from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(token.approve(spender,value))

Edges:
  0 -> 1


Contract: CanReclaimToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: ERC721
==================================================


Contract: ERC721Metadata
==================================================


Contract: DWorldAccessControl
==================================================

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: DWorldBase
==================================================

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: DWorldDeed
==================================================

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


Contract: DWorldFinance
==================================================

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setUnclaimedPlotPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unclaimedPlotPrice = _unclaimedPlotPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: setClaimDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(10000 <= _claimDividendPercentage && _claimDividendPercentage <= 100000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimDividendPercentage = _claimDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(2000 <= _buyoutDividendPercentage && _buyoutDividendPercentage <= 12500)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutDividendPercentage = _buyoutDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _buyoutFeePercentage && _buyoutFeePercentage <= 5000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutFeePercentage = _buyoutFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: unclaimedPlotPrice.mul(claimDividendPercentage).div(100000)

Edges:
  0 -> 1

Function: setFreeClaimAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[addr] = allowance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: freeClaimAllowanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: freeClaimAllowance[addr]

Edges:
  0 -> 1

Function: _assignBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[addr] = addressToEtherOwed[addr].add(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: outstandingEther = outstandingEther.add(amount)

Edges:
  0 -> 1
  1 -> 2

Function: _claimedSurroundingPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimed = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _plots = new uint256[](8)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: dx = - 1

  ID: 9
  Type: NodeType.IFLOOP
  Expression: dx <= 1

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: dy = - 1

  ID: 13
  Type: NodeType.IFLOOP
  Expression: dy <= 1

  ID: 14
  Type: NodeType.IF
  Expression: dx == 0 && dy == 0

  ID: 15
  Type: NodeType.CONTINUE
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: neighborIdentifier = coordinateToIdentifier(uint256(int256(x) + dx) % 65536,uint256(int256(y) + dy) % 65536)

  ID: 18
  Type: NodeType.IF
  Expression: identifierToOwner[neighborIdentifier] != 0x0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _plots[claimed] = neighborIdentifier

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: claimed ++

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: dy ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: dx ++

  ID: 24
  Type: NodeType.VARIABLE
  Expression: plots = new uint256[](claimed)

  ID: 25
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 26
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 27
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 28
  Type: NodeType.IFLOOP
  Expression: i < claimed

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _plots[i]

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 31
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 24
  8 -> 6
  9 -> 12
  9 -> 7
  10 -> 13
  11 -> 23
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  14 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 21
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 9
  24 -> 27
  25 -> 28
  26 -> 31
  27 -> 25
  28 -> 29
  28 -> 26
  29 -> 30
  30 -> 28

Function: _assignClaimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ClaimDividend(_from,_to,_deedIdFrom,_deedIdTo,_claimDividend)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(_to,_claimDividend)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _calculateAndAssignClaimDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 8
  Type: NodeType.IF
  Expression: identifierToOwner[claimedSurroundingPlots[i]] != msg.sender

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = totalClaimDividend.add(_claimDividend)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _assignClaimDividend(msg.sender,identifierToOwner[claimedSurroundingPlots[i]],_deedId,claimedSurroundingPlots[i])

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: totalClaimDividend

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 13
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: nextBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: totalCost < 50000000000000000

  ID: 2
  Type: NodeType.RETURN
  Expression: totalCost * 2

  ID: 3
  Type: NodeType.IF
  Expression: totalCost < 200000000000000000

  ID: 4
  Type: NodeType.RETURN
  Expression: totalCost * 170 / 100

  ID: 5
  Type: NodeType.IF
  Expression: totalCost < 500000000000000000

  ID: 6
  Type: NodeType.RETURN
  Expression: totalCost * 150 / 100

  ID: 7
  Type: NodeType.RETURN
  Expression: totalCost.mul(125).div(100)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: buyoutCost
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 4
  Type: NodeType.RETURN
  Expression: price.add(flatDividends)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _assignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Buyout(msg.sender,currentOwner,_deedId,currentOwnerWinnings,totalCost,nextBuyoutPrice(totalCost))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(currentOwner,currentOwnerWinnings)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: beneficiary = identifierToOwner[claimedSurroundingPlots[i]]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BuyoutDividend(msg.sender,beneficiary,_deedId,claimedSurroundingPlots[i],totalDividendPerBeneficiary)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(beneficiary,totalDividendPerBeneficiary)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6

Function: _calculateAndAssignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalCost = price.add(flatDividends)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: variableDividends = price.mul(buyoutDividendPercentage).div(100000)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: fee = price.mul(buyoutFeePercentage).div(100000)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentOwnerWinnings = price.sub(fee)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: claimedSurroundingPlots.length > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalDividendPerBeneficiary = flatDividends.add(variableDividends) / claimedSurroundingPlots.length

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _assignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots,currentOwnerWinnings,totalDividendPerBeneficiary,totalCost)

  ID: 13
  Type: NodeType.RETURN
  Expression: totalCost

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: buyout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyoutWithData(_deedId,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: buyoutWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyoutsEnabledFromTimestamp <= block.timestamp)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentOwner = identifierToOwner[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(currentOwner != 0x0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCost = _calculateAndAssignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= totalCost)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(currentOwner,msg.sender,_deedId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SetData(_deedId,name,description,imageUrl,infoUrl)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = nextBuyoutPrice(totalCost)

  ID: 10
  Type: NodeType.IF
  Expression: ! identifierToBoughtOutOnce[_deedId]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: identifierToBoughtOutOnce[_deedId] = true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - totalCost

  ID: 14
  Type: NodeType.IF
  Expression: excess > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  17 -> 1

Function: maximumInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mul = 4

  ID: 2
  Type: NodeType.IF
  Expression: identifierIsOriginal[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mul = 100

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: initialPricePaid[_deedId].mul(mul)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: validInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (price >= unclaimedPlotPrice && price <= maximumInitialBuyoutPrice(_deedId))

Edges:
  0 -> 1

Function: setInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! identifierToBoughtOutOnce[_deedId])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validInitialBuyoutPrice(_deedId,price))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = price

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,price)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: unclaimedPlotPrice = 12500000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimDividendPercentage = 50000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutDividendPercentage = 5000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutFeePercentage = 3500

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


Contract: DWorldMinting
==================================================

Function: setUnclaimedPlotPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unclaimedPlotPrice = _unclaimedPlotPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: setClaimDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(10000 <= _claimDividendPercentage && _claimDividendPercentage <= 100000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimDividendPercentage = _claimDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(2000 <= _buyoutDividendPercentage && _buyoutDividendPercentage <= 12500)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutDividendPercentage = _buyoutDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _buyoutFeePercentage && _buyoutFeePercentage <= 5000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutFeePercentage = _buyoutFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: unclaimedPlotPrice.mul(claimDividendPercentage).div(100000)

Edges:
  0 -> 1

Function: setFreeClaimAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[addr] = allowance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: freeClaimAllowanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: freeClaimAllowance[addr]

Edges:
  0 -> 1

Function: _assignBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[addr] = addressToEtherOwed[addr].add(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: outstandingEther = outstandingEther.add(amount)

Edges:
  0 -> 1
  1 -> 2

Function: _claimedSurroundingPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimed = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _plots = new uint256[](8)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: dx = - 1

  ID: 9
  Type: NodeType.IFLOOP
  Expression: dx <= 1

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: dy = - 1

  ID: 13
  Type: NodeType.IFLOOP
  Expression: dy <= 1

  ID: 14
  Type: NodeType.IF
  Expression: dx == 0 && dy == 0

  ID: 15
  Type: NodeType.CONTINUE
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: neighborIdentifier = coordinateToIdentifier(uint256(int256(x) + dx) % 65536,uint256(int256(y) + dy) % 65536)

  ID: 18
  Type: NodeType.IF
  Expression: identifierToOwner[neighborIdentifier] != 0x0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _plots[claimed] = neighborIdentifier

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: claimed ++

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: dy ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: dx ++

  ID: 24
  Type: NodeType.VARIABLE
  Expression: plots = new uint256[](claimed)

  ID: 25
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 26
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 27
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 28
  Type: NodeType.IFLOOP
  Expression: i < claimed

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _plots[i]

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 31
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 24
  8 -> 6
  9 -> 12
  9 -> 7
  10 -> 13
  11 -> 23
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  14 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 21
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 9
  24 -> 27
  25 -> 28
  26 -> 31
  27 -> 25
  28 -> 29
  28 -> 26
  29 -> 30
  30 -> 28

Function: _assignClaimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ClaimDividend(_from,_to,_deedIdFrom,_deedIdTo,_claimDividend)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(_to,_claimDividend)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _calculateAndAssignClaimDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 8
  Type: NodeType.IF
  Expression: identifierToOwner[claimedSurroundingPlots[i]] != msg.sender

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = totalClaimDividend.add(_claimDividend)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _assignClaimDividend(msg.sender,identifierToOwner[claimedSurroundingPlots[i]],_deedId,claimedSurroundingPlots[i])

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: totalClaimDividend

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 13
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: nextBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: totalCost < 50000000000000000

  ID: 2
  Type: NodeType.RETURN
  Expression: totalCost * 2

  ID: 3
  Type: NodeType.IF
  Expression: totalCost < 200000000000000000

  ID: 4
  Type: NodeType.RETURN
  Expression: totalCost * 170 / 100

  ID: 5
  Type: NodeType.IF
  Expression: totalCost < 500000000000000000

  ID: 6
  Type: NodeType.RETURN
  Expression: totalCost * 150 / 100

  ID: 7
  Type: NodeType.RETURN
  Expression: totalCost.mul(125).div(100)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: buyoutCost
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 4
  Type: NodeType.RETURN
  Expression: price.add(flatDividends)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _assignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Buyout(msg.sender,currentOwner,_deedId,currentOwnerWinnings,totalCost,nextBuyoutPrice(totalCost))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(currentOwner,currentOwnerWinnings)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: beneficiary = identifierToOwner[claimedSurroundingPlots[i]]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BuyoutDividend(msg.sender,beneficiary,_deedId,claimedSurroundingPlots[i],totalDividendPerBeneficiary)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(beneficiary,totalDividendPerBeneficiary)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6

Function: _calculateAndAssignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalCost = price.add(flatDividends)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: variableDividends = price.mul(buyoutDividendPercentage).div(100000)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: fee = price.mul(buyoutFeePercentage).div(100000)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentOwnerWinnings = price.sub(fee)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: claimedSurroundingPlots.length > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalDividendPerBeneficiary = flatDividends.add(variableDividends) / claimedSurroundingPlots.length

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _assignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots,currentOwnerWinnings,totalDividendPerBeneficiary,totalCost)

  ID: 13
  Type: NodeType.RETURN
  Expression: totalCost

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: buyout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyoutWithData(_deedId,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: buyoutWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyoutsEnabledFromTimestamp <= block.timestamp)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentOwner = identifierToOwner[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(currentOwner != 0x0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCost = _calculateAndAssignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= totalCost)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(currentOwner,msg.sender,_deedId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SetData(_deedId,name,description,imageUrl,infoUrl)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = nextBuyoutPrice(totalCost)

  ID: 10
  Type: NodeType.IF
  Expression: ! identifierToBoughtOutOnce[_deedId]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: identifierToBoughtOutOnce[_deedId] = true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - totalCost

  ID: 14
  Type: NodeType.IF
  Expression: excess > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  17 -> 1

Function: maximumInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mul = 4

  ID: 2
  Type: NodeType.IF
  Expression: identifierIsOriginal[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mul = 100

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: initialPricePaid[_deedId].mul(mul)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: validInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (price >= unclaimedPlotPrice && price <= maximumInitialBuyoutPrice(_deedId))

Edges:
  0 -> 1

Function: setInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! identifierToBoughtOutOnce[_deedId])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validInitialBuyoutPrice(_deedId,price))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = price

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,price)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimPlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotWithData(_deedId,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,name,description,imageUrl,infoUrl)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimPlotMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotMultipleWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buyAmount = _deedIds.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > 0

  ID: 4
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > buyAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[msg.sender] -= buyAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: etherRequired = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: freeAmount = freeClaimAllowance[msg.sender]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete freeClaimAllowance[msg.sender]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount - freeAmount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: offset = plots.length

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: plots.length = plots.length.add(_deedIds.length)

  ID: 15
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 18
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool)(identifierToOwner[_deedId] == address(0))

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: plots[offset + i] = uint32(_deedId)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),msg.sender,_deedId)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _setPlotData(_deedId,name,description,imageUrl,infoUrl)

  ID: 25
  Type: NodeType.VARIABLE
  Expression: claimDividends = _calculateAndAssignClaimDividends(_deedId)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: etherRequired = etherRequired.add(claimDividends)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: initialPricePaid[_deedId] = unclaimedPlotPrice.add(claimDividends)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: setInitialBuyoutPrice(_deedId,_buyoutPrice)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= etherRequired)

  ID: 31
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - etherRequired

  ID: 32
  Type: NodeType.IF
  Expression: excess > 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 35
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 17
  15 -> 18
  16 -> 30
  17 -> 15
  18 -> 19
  18 -> 16
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 18
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 34
  33 -> 34
  35 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: unclaimedPlotPrice = 12500000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimDividendPercentage = 50000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutDividendPercentage = 5000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutFeePercentage = 3500

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


Contract: ClockAuctionBase
==================================================

Function: ClockAuctionBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract = ERC721(_deedContractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(deedContract.supportsInterface(0xda671b9b))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _fee && _fee <= 100000)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fee = _fee

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _activeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: auction.startedAt > 0

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract.takeOwnership(_deedId)

Edges:
  0 -> 1

Function: _createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToAuction[_deedId] = auction

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(auction.seller,_deedId,auction.startPrice,auction.endPrice,auction.duration)

Edges:
  0 -> 1
  1 -> 2

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = identifierToAuction[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_activeAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.IF
  Expression: price > 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: totalFee = _calculateFee(price)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: proceeds = price - totalFee

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignProceeds(seller,proceeds)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_buyer,_deedId,price)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _winBid(seller,_buyer,_deedId,price)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _winBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_winner,_deedId)

Edges:
  0 -> 1

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_deedId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(auction.seller,_deedId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete identifierToAuction[_deedId]

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract.transfer(_to,_deedId)

Edges:
  0 -> 1

Function: _assignProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: outstandingEther += _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[_to] += _value

Edges:
  0 -> 1
  1 -> 2

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= _auction.startedAt)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: secondsPassed = now - _auction.startedAt

  ID: 3
  Type: NodeType.IF
  Expression: secondsPassed >= _auction.duration

  ID: 4
  Type: NodeType.RETURN
  Expression: _auction.endPrice

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(secondsPassed) / int256(_auction.duration)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: price = int256(_auction.startPrice) + currentPriceChange

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(price >= 0)

  ID: 9
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _calculateFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * fee / 100000

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

Edges:


Contract: ClockAuction
==================================================

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: ClockAuctionBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract = ERC721(_deedContractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(deedContract.supportsInterface(0xda671b9b))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _fee && _fee <= 100000)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: fee = _fee

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _activeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: auction.startedAt > 0

Edges:
  0 -> 1

Function: _escrow
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract.takeOwnership(_deedId)

Edges:
  0 -> 1

Function: _createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToAuction[_deedId] = auction

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: AuctionCreated(auction.seller,_deedId,auction.startPrice,auction.endPrice,auction.duration)

Edges:
  0 -> 1
  1 -> 2

Function: _bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = identifierToAuction[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_activeAuction(auction))

  ID: 3
  Type: NodeType.VARIABLE
  Expression: price = _currentPrice(auction)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_value >= price)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: seller = auction.seller

  ID: 6
  Type: NodeType.IF
  Expression: price > 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: totalFee = _calculateFee(price)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: proceeds = price - totalFee

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignProceeds(seller,proceeds)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: AuctionSuccessful(_buyer,_deedId,price)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _winBid(seller,_buyer,_deedId,price)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: _winBid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_winner,_deedId)

Edges:
  0 -> 1

Function: _cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _removeAuction(_deedId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(auction.seller,_deedId)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: AuctionCancelled(_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _removeAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete identifierToAuction[_deedId]

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: deedContract.transfer(_to,_deedId)

Edges:
  0 -> 1

Function: _assignProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: outstandingEther += _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[_to] += _value

Edges:
  0 -> 1
  1 -> 2

Function: _currentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(now >= _auction.startedAt)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: secondsPassed = now - _auction.startedAt

  ID: 3
  Type: NodeType.IF
  Expression: secondsPassed >= _auction.duration

  ID: 4
  Type: NodeType.RETURN
  Expression: _auction.endPrice

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = totalPriceChange * int256(secondsPassed) / int256(_auction.duration)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: price = int256(_auction.startPrice) + currentPriceChange

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(price >= 0)

  ID: 9
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: _calculateFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _price * fee / 100000

Edges:
  0 -> 1

Function: ClockAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ClockAuctionBase(_deedContractAddress,_fee)

Edges:
  0 -> 1

Function: setFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _fee && _fee <= 100000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: fee = _fee

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = identifierToAuction[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_activeAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: (auction.seller,auction.startPrice,auction.endPrice,auction.duration,auction.startedAt)

  ID: 4
  Type: NodeType.RETURN
  Expression: (seller,startPrice,endPrice,duration,startedAt)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: createAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedOwner = deedContract.ownerOf(_deedId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == address(deedContract) || msg.sender == deedOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_duration >= 60)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _escrow(_deedId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: auction = Auction(deedOwner,uint128(_startPrice),uint128(_endPrice),uint64(_duration),uint64(now))

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _createAuction(_deedId,auction)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: fitsIn128Bits(_startPrice)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: fitsIn128Bits(_endPrice)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: fitsIn64Bits(_duration)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 1

Function: cancelAuction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = identifierToAuction[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_activeAuction(auction))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == auction.seller)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _cancelAuction(_deedId,auction)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: bid
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _bid(msg.sender,msg.value,_deedId)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: getCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: auction = identifierToAuction[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_activeAuction(auction))

  ID: 3
  Type: NodeType.RETURN
  Expression: _currentPrice(auction)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: withdrawAuctionBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == beneficiary || msg.sender == address(deedContract))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: etherOwed = addressToEtherOwed[beneficiary]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(etherOwed > 0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: delete addressToEtherOwed[beneficiary]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: outstandingEther -= etherOwed

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: beneficiary.transfer(etherOwed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: withdrawFreeBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: freeBalance = this.balance - outstandingEther

  ID: 2
  Type: NodeType.VARIABLE
  Expression: deedContractAddress = address(deedContract)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender == owner || msg.sender == deedContractAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: deedContractAddress.transfer(freeBalance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:
  0 -> 1


Contract: OriginalDWorldBase
==================================================

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:


Contract: OriginalDWorldDeed
==================================================

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


Contract: DWorldUpgrade
==================================================

Function: claimPlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotWithData(_deedId,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,name,description,imageUrl,infoUrl)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimPlotMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotMultipleWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buyAmount = _deedIds.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > 0

  ID: 4
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > buyAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[msg.sender] -= buyAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: etherRequired = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: freeAmount = freeClaimAllowance[msg.sender]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete freeClaimAllowance[msg.sender]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount - freeAmount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: offset = plots.length

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: plots.length = plots.length.add(_deedIds.length)

  ID: 15
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 18
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool)(identifierToOwner[_deedId] == address(0))

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: plots[offset + i] = uint32(_deedId)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),msg.sender,_deedId)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _setPlotData(_deedId,name,description,imageUrl,infoUrl)

  ID: 25
  Type: NodeType.VARIABLE
  Expression: claimDividends = _calculateAndAssignClaimDividends(_deedId)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: etherRequired = etherRequired.add(claimDividends)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: initialPricePaid[_deedId] = unclaimedPlotPrice.add(claimDividends)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: setInitialBuyoutPrice(_deedId,_buyoutPrice)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= etherRequired)

  ID: 31
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - etherRequired

  ID: 32
  Type: NodeType.IF
  Expression: excess > 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 35
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 17
  15 -> 18
  16 -> 30
  17 -> 15
  18 -> 19
  18 -> 16
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 18
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 34
  33 -> 34
  35 -> 1

Function: setUnclaimedPlotPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unclaimedPlotPrice = _unclaimedPlotPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: setClaimDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(10000 <= _claimDividendPercentage && _claimDividendPercentage <= 100000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimDividendPercentage = _claimDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(2000 <= _buyoutDividendPercentage && _buyoutDividendPercentage <= 12500)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutDividendPercentage = _buyoutDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _buyoutFeePercentage && _buyoutFeePercentage <= 5000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutFeePercentage = _buyoutFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: unclaimedPlotPrice.mul(claimDividendPercentage).div(100000)

Edges:
  0 -> 1

Function: setFreeClaimAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[addr] = allowance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: freeClaimAllowanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: freeClaimAllowance[addr]

Edges:
  0 -> 1

Function: _assignBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[addr] = addressToEtherOwed[addr].add(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: outstandingEther = outstandingEther.add(amount)

Edges:
  0 -> 1
  1 -> 2

Function: _claimedSurroundingPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimed = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _plots = new uint256[](8)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: dx = - 1

  ID: 9
  Type: NodeType.IFLOOP
  Expression: dx <= 1

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: dy = - 1

  ID: 13
  Type: NodeType.IFLOOP
  Expression: dy <= 1

  ID: 14
  Type: NodeType.IF
  Expression: dx == 0 && dy == 0

  ID: 15
  Type: NodeType.CONTINUE
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: neighborIdentifier = coordinateToIdentifier(uint256(int256(x) + dx) % 65536,uint256(int256(y) + dy) % 65536)

  ID: 18
  Type: NodeType.IF
  Expression: identifierToOwner[neighborIdentifier] != 0x0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _plots[claimed] = neighborIdentifier

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: claimed ++

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: dy ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: dx ++

  ID: 24
  Type: NodeType.VARIABLE
  Expression: plots = new uint256[](claimed)

  ID: 25
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 26
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 27
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 28
  Type: NodeType.IFLOOP
  Expression: i < claimed

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _plots[i]

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 31
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 24
  8 -> 6
  9 -> 12
  9 -> 7
  10 -> 13
  11 -> 23
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  14 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 21
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 9
  24 -> 27
  25 -> 28
  26 -> 31
  27 -> 25
  28 -> 29
  28 -> 26
  29 -> 30
  30 -> 28

Function: _assignClaimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ClaimDividend(_from,_to,_deedIdFrom,_deedIdTo,_claimDividend)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(_to,_claimDividend)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _calculateAndAssignClaimDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 8
  Type: NodeType.IF
  Expression: identifierToOwner[claimedSurroundingPlots[i]] != msg.sender

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = totalClaimDividend.add(_claimDividend)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _assignClaimDividend(msg.sender,identifierToOwner[claimedSurroundingPlots[i]],_deedId,claimedSurroundingPlots[i])

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: totalClaimDividend

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 13
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: nextBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: totalCost < 50000000000000000

  ID: 2
  Type: NodeType.RETURN
  Expression: totalCost * 2

  ID: 3
  Type: NodeType.IF
  Expression: totalCost < 200000000000000000

  ID: 4
  Type: NodeType.RETURN
  Expression: totalCost * 170 / 100

  ID: 5
  Type: NodeType.IF
  Expression: totalCost < 500000000000000000

  ID: 6
  Type: NodeType.RETURN
  Expression: totalCost * 150 / 100

  ID: 7
  Type: NodeType.RETURN
  Expression: totalCost.mul(125).div(100)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: buyoutCost
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 4
  Type: NodeType.RETURN
  Expression: price.add(flatDividends)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _assignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Buyout(msg.sender,currentOwner,_deedId,currentOwnerWinnings,totalCost,nextBuyoutPrice(totalCost))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(currentOwner,currentOwnerWinnings)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: beneficiary = identifierToOwner[claimedSurroundingPlots[i]]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BuyoutDividend(msg.sender,beneficiary,_deedId,claimedSurroundingPlots[i],totalDividendPerBeneficiary)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(beneficiary,totalDividendPerBeneficiary)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6

Function: _calculateAndAssignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalCost = price.add(flatDividends)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: variableDividends = price.mul(buyoutDividendPercentage).div(100000)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: fee = price.mul(buyoutFeePercentage).div(100000)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentOwnerWinnings = price.sub(fee)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: claimedSurroundingPlots.length > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalDividendPerBeneficiary = flatDividends.add(variableDividends) / claimedSurroundingPlots.length

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _assignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots,currentOwnerWinnings,totalDividendPerBeneficiary,totalCost)

  ID: 13
  Type: NodeType.RETURN
  Expression: totalCost

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: buyout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyoutWithData(_deedId,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: buyoutWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyoutsEnabledFromTimestamp <= block.timestamp)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentOwner = identifierToOwner[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(currentOwner != 0x0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCost = _calculateAndAssignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= totalCost)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(currentOwner,msg.sender,_deedId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SetData(_deedId,name,description,imageUrl,infoUrl)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = nextBuyoutPrice(totalCost)

  ID: 10
  Type: NodeType.IF
  Expression: ! identifierToBoughtOutOnce[_deedId]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: identifierToBoughtOutOnce[_deedId] = true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - totalCost

  ID: 14
  Type: NodeType.IF
  Expression: excess > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  17 -> 1

Function: maximumInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mul = 4

  ID: 2
  Type: NodeType.IF
  Expression: identifierIsOriginal[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mul = 100

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: initialPricePaid[_deedId].mul(mul)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: validInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (price >= unclaimedPlotPrice && price <= maximumInitialBuyoutPrice(_deedId))

Edges:
  0 -> 1

Function: setInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! identifierToBoughtOutOnce[_deedId])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validInitialBuyoutPrice(_deedId,price))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = price

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,price)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: DWorldUpgrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: originalContractAddress != 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _startMigration(originalContractAddress,originalSaleAuctionAddress,originalRentAuctionAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: migrationFinished = true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: _startMigration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: originalContract = OriginalDWorldDeed(originalContractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: originalSaleAuction = ClockAuction(originalSaleAuctionAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: originalRentAuction = ClockAuction(originalRentAuctionAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 5
  Type: NodeType.VARIABLE
  Expression: numPlots = originalContract.countOfDeeds()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: plots.length = numPlots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: migrationStep
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! migrationFinished)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: numPlots = originalContract.countOfDeeds()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i = migrationNumPlotsTransferred

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < numPlots && i < migrationNumPlotsTransferred + numPlotsTransfer

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _deedId = originalContract.plots(i)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _deedId

  ID: 10
  Type: NodeType.VARIABLE
  Expression: owner = originalContract.ownerOf(_deedId)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: owner == address(originalSaleAuction)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (seller,None) = originalSaleAuction.getAuction(_deedId)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: owner = seller

  ID: 15
  Type: NodeType.IF
  Expression: owner == address(originalRentAuction)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (seller,None) = originalRentAuction.getAuction(_deedId)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: owner = seller

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),owner,_deedId)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: initialPricePaid[_deedId] = 12500000000000000

  ID: 22
  Type: NodeType.VARIABLE
  Expression: _initialBuyoutPrice = 50000000000000000

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = _initialBuyoutPrice

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,_initialBuyoutPrice)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: identifierIsOriginal[_deedId] = true

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: migrationNumPlotsTransferred += i

  ID: 28
  Type: NodeType.IF
  Expression: i == numPlots

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: migrationFinished = true

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 31
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 27
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 19
  15 -> 16
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 7
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  31 -> 32
  32 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: unclaimedPlotPrice = 12500000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimDividendPercentage = 50000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutDividendPercentage = 5000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutFeePercentage = 3500

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: migrationFinished = false

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: migrationNumPlotsTransferred = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


Contract: DWorldCore
==================================================

Function: DWorldUpgrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: originalContractAddress != 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _startMigration(originalContractAddress,originalSaleAuctionAddress,originalRentAuctionAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: migrationFinished = true

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: _startMigration
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: originalContract = OriginalDWorldDeed(originalContractAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: originalSaleAuction = ClockAuction(originalSaleAuctionAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: originalRentAuction = ClockAuction(originalRentAuctionAddress)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 5
  Type: NodeType.VARIABLE
  Expression: numPlots = originalContract.countOfDeeds()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: plots.length = numPlots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: migrationStep
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! migrationFinished)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: numPlots = originalContract.countOfDeeds()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i = migrationNumPlotsTransferred

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < numPlots && i < migrationNumPlotsTransferred + numPlotsTransfer

  ID: 8
  Type: NodeType.VARIABLE
  Expression: _deedId = originalContract.plots(i)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _deedId

  ID: 10
  Type: NodeType.VARIABLE
  Expression: owner = originalContract.ownerOf(_deedId)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: owner == address(originalSaleAuction)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: (seller,None) = originalSaleAuction.getAuction(_deedId)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: owner = seller

  ID: 15
  Type: NodeType.IF
  Expression: owner == address(originalRentAuction)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: (seller,None) = originalRentAuction.getAuction(_deedId)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: owner = seller

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),owner,_deedId)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: initialPricePaid[_deedId] = 12500000000000000

  ID: 22
  Type: NodeType.VARIABLE
  Expression: _initialBuyoutPrice = 50000000000000000

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = _initialBuyoutPrice

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,_initialBuyoutPrice)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: identifierIsOriginal[_deedId] = true

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: migrationNumPlotsTransferred += i

  ID: 28
  Type: NodeType.IF
  Expression: i == numPlots

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: migrationFinished = true

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 31
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 27
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 19
  15 -> 16
  15 -> 18
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 7
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  31 -> 32
  32 -> 1

Function: claimPlot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotWithData(_deedId,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,name,description,imageUrl,infoUrl)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimPlotMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: claimPlotMultipleWithData(_deedIds,_buyoutPrice,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: claimPlotMultipleWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: buyAmount = _deedIds.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > 0

  ID: 4
  Type: NodeType.IF
  Expression: freeClaimAllowance[msg.sender] > buyAmount

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[msg.sender] -= buyAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: etherRequired = 0

  ID: 7
  Type: NodeType.VARIABLE
  Expression: freeAmount = freeClaimAllowance[msg.sender]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: delete freeClaimAllowance[msg.sender]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount - freeAmount)

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: etherRequired = unclaimedPlotPrice.mul(buyAmount)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: offset = plots.length

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: plots.length = plots.length.add(_deedIds.length)

  ID: 15
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 16
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 18
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 19
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool)(identifierToOwner[_deedId] == address(0))

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: plots[offset + i] = uint32(_deedId)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: _transfer(address(0),msg.sender,_deedId)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: _setPlotData(_deedId,name,description,imageUrl,infoUrl)

  ID: 25
  Type: NodeType.VARIABLE
  Expression: claimDividends = _calculateAndAssignClaimDividends(_deedId)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: etherRequired = etherRequired.add(claimDividends)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: initialPricePaid[_deedId] = unclaimedPlotPrice.add(claimDividends)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: setInitialBuyoutPrice(_deedId,_buyoutPrice)

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= etherRequired)

  ID: 31
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - etherRequired

  ID: 32
  Type: NodeType.IF
  Expression: excess > 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 35
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 11
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 17
  15 -> 18
  16 -> 30
  17 -> 15
  18 -> 19
  18 -> 16
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 18
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 34
  33 -> 34
  35 -> 1

Function: setUnclaimedPlotPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: unclaimedPlotPrice = _unclaimedPlotPrice

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: setClaimDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(10000 <= _claimDividendPercentage && _claimDividendPercentage <= 100000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: claimDividendPercentage = _claimDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutDividendPercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(2000 <= _buyoutDividendPercentage && _buyoutDividendPercentage <= 12500)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutDividendPercentage = _buyoutDividendPercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setBuyoutFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(0 <= _buyoutFeePercentage && _buyoutFeePercentage <= 5000)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: buyoutFeePercentage = _buyoutFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: unclaimedPlotPrice.mul(claimDividendPercentage).div(100000)

Edges:
  0 -> 1

Function: setFreeClaimAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: freeClaimAllowance[addr] = allowance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 2
  2 -> 1

Function: freeClaimAllowanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: freeClaimAllowance[addr]

Edges:
  0 -> 1

Function: _assignBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressToEtherOwed[addr] = addressToEtherOwed[addr].add(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: outstandingEther = outstandingEther.add(amount)

Edges:
  0 -> 1
  1 -> 2

Function: _claimedSurroundingPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimed = 0

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _plots = new uint256[](8)

  ID: 6
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.VARIABLE
  Expression: dx = - 1

  ID: 9
  Type: NodeType.IFLOOP
  Expression: dx <= 1

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: dy = - 1

  ID: 13
  Type: NodeType.IFLOOP
  Expression: dy <= 1

  ID: 14
  Type: NodeType.IF
  Expression: dx == 0 && dy == 0

  ID: 15
  Type: NodeType.CONTINUE
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: neighborIdentifier = coordinateToIdentifier(uint256(int256(x) + dx) % 65536,uint256(int256(y) + dy) % 65536)

  ID: 18
  Type: NodeType.IF
  Expression: identifierToOwner[neighborIdentifier] != 0x0

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: _plots[claimed] = neighborIdentifier

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: claimed ++

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: dy ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: dx ++

  ID: 24
  Type: NodeType.VARIABLE
  Expression: plots = new uint256[](claimed)

  ID: 25
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 26
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 27
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 28
  Type: NodeType.IFLOOP
  Expression: i < claimed

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: plots[i] = _plots[i]

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 31
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 8
  6 -> 9
  7 -> 24
  8 -> 6
  9 -> 12
  9 -> 7
  10 -> 13
  11 -> 23
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  14 -> 16
  15 -> 22
  16 -> 17
  17 -> 18
  18 -> 19
  18 -> 21
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 9
  24 -> 27
  25 -> 28
  26 -> 31
  27 -> 25
  28 -> 29
  28 -> 26
  29 -> 30
  30 -> 28

Function: _assignClaimDividend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ClaimDividend(_from,_to,_deedIdFrom,_deedIdTo,_claimDividend)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(_to,_claimDividend)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _calculateAndAssignClaimDividends
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _claimDividend = claimDividend()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = 0

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 8
  Type: NodeType.IF
  Expression: identifierToOwner[claimedSurroundingPlots[i]] != msg.sender

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: totalClaimDividend = totalClaimDividend.add(_claimDividend)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _assignClaimDividend(msg.sender,identifierToOwner[claimedSurroundingPlots[i]],_deedId,claimedSurroundingPlots[i])

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.RETURN
  Expression: totalClaimDividend

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  5 -> 13
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 7

Function: nextBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: totalCost < 50000000000000000

  ID: 2
  Type: NodeType.RETURN
  Expression: totalCost * 2

  ID: 3
  Type: NodeType.IF
  Expression: totalCost < 200000000000000000

  ID: 4
  Type: NodeType.RETURN
  Expression: totalCost * 170 / 100

  ID: 5
  Type: NodeType.IF
  Expression: totalCost < 500000000000000000

  ID: 6
  Type: NodeType.RETURN
  Expression: totalCost * 150 / 100

  ID: 7
  Type: NodeType.RETURN
  Expression: totalCost.mul(125).div(100)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  5 -> 7

Function: buyoutCost
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 4
  Type: NodeType.RETURN
  Expression: price.add(flatDividends)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _assignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Buyout(msg.sender,currentOwner,_deedId,currentOwnerWinnings,totalCost,nextBuyoutPrice(totalCost))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(currentOwner,currentOwnerWinnings)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < claimedSurroundingPlots.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: beneficiary = identifierToOwner[claimedSurroundingPlots[i]]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BuyoutDividend(msg.sender,beneficiary,_deedId,claimedSurroundingPlots[i],totalDividendPerBeneficiary)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _assignBalance(beneficiary,totalDividendPerBeneficiary)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6

Function: _calculateAndAssignBuyoutProceeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = identifierToBuyoutPrice[_deedId]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: flatDividends = claimDividend().mul(claimedSurroundingPlots.length)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalCost = price.add(flatDividends)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: variableDividends = price.mul(buyoutDividendPercentage).div(100000)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: fee = price.mul(buyoutFeePercentage).div(100000)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentOwnerWinnings = price.sub(fee)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.IF
  Expression: claimedSurroundingPlots.length > 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: totalDividendPerBeneficiary = flatDividends.add(variableDividends) / claimedSurroundingPlots.length

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _assignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots,currentOwnerWinnings,totalDividendPerBeneficiary,totalCost)

  ID: 13
  Type: NodeType.RETURN
  Expression: totalCost

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13

Function: buyout
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyoutWithData(_deedId,,,,)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 1

Function: buyoutWithData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(buyoutsEnabledFromTimestamp <= block.timestamp)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentOwner = identifierToOwner[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(currentOwner != 0x0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: claimedSurroundingPlots = _claimedSurroundingPlots(_deedId)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalCost = _calculateAndAssignBuyoutProceeds(currentOwner,_deedId,claimedSurroundingPlots)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= totalCost)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _transfer(currentOwner,msg.sender,_deedId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: SetData(_deedId,name,description,imageUrl,infoUrl)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = nextBuyoutPrice(totalCost)

  ID: 10
  Type: NodeType.IF
  Expression: ! identifierToBoughtOutOnce[_deedId]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: identifierToBoughtOutOnce[_deedId] = true

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.VARIABLE
  Expression: excess = msg.value - totalCost

  ID: 14
  Type: NodeType.IF
  Expression: excess > 0

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(excess)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 17
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  14 -> 16
  15 -> 16
  17 -> 1

Function: maximumInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: mul = 4

  ID: 2
  Type: NodeType.IF
  Expression: identifierIsOriginal[_deedId]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: mul = 100

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: initialPricePaid[_deedId].mul(mul)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: validInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (price >= unclaimedPlotPrice && price <= maximumInitialBuyoutPrice(_deedId))

Edges:
  0 -> 1

Function: setInitialBuyoutPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! identifierToBoughtOutOnce[_deedId])

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validInitialBuyoutPrice(_deedId,price))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: identifierToBuyoutPrice[_deedId] = price

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SetBuyoutPrice(_deedId,price)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedName = DWorld Plots

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedName

Edges:
  0 -> 1
  1 -> 2

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _deedSymbol = DWP

  ID: 2
  Type: NodeType.RETURN
  Expression: _deedSymbol

Edges:
  0 -> 1
  1 -> 2

Function: supportsInterface
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721) || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata))

Edges:
  0 -> 1

Function: _owns
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToOwner[_deedId] == _owner

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: identifierToApproved[_deedId] = _to

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2

Function: _approvedFor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifierToApproved[_deedId] == _claimant

Edges:
  0 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_to] ++

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: identifierToOwner[_deedId] = _to

  ID: 3
  Type: NodeType.IF
  Expression: _from != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ownershipDeedCount[_from] --

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: delete identifierToApproved[_deedId]

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_deedId)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  5 -> 6
  6 -> 7

Function: countOfDeeds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots.length

Edges:
  0 -> 1

Function: countOfDeedsByOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ownershipDeedCount[_owner]

Edges:
  0 -> 1

Function: ownerOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = identifierToOwner[_deedId]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owner != address(0))

  ID: 3
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: approveMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approveMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.sender != _to)

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,_to,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 5
  10 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: transferMultiple(_to,_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(this))

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 7
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,_to,_deedId)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 11
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 6
  11 -> 1

Function: takeOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _deedIds = new uint256[](1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _deedIds[0] = _deedId

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: takeOwnershipMultiple(_deedIds)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: takeOwnershipMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _from = identifierToOwner[_deedId]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_approvedFor(msg.sender,_deedId))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _transfer(_from,msg.sender,_deedId)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 10
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 4
  10 -> 3

Function: deedsOfOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: deedCount = countOfDeedsByOwner(_owner)

  ID: 2
  Type: NodeType.IF
  Expression: deedCount == 0

  ID: 3
  Type: NodeType.RETURN
  Expression: new uint256[](0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: result = new uint256[](deedCount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 6
  Type: NodeType.VARIABLE
  Expression: resultIndex = 0

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 11
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 12
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: result[resultIndex] = identifier

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: resultIndex ++

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

  ID: 17
  Type: NodeType.RETURN
  Expression: result

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 17
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  12 -> 15
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 10

Function: deedOfOwnerByIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_index < countOfDeedsByOwner(_owner))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: seen = 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: totalDeeds = countOfDeeds()

  ID: 4
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 5
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deedNumber = 0

  ID: 7
  Type: NodeType.IFLOOP
  Expression: deedNumber < totalDeeds

  ID: 8
  Type: NodeType.VARIABLE
  Expression: identifier = plots[deedNumber]

  ID: 9
  Type: NodeType.IF
  Expression: identifierToOwner[identifier] == _owner

  ID: 10
  Type: NodeType.IF
  Expression: seen == _index

  ID: 11
  Type: NodeType.RETURN
  Expression: identifier

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: seen ++

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: deedNumber ++

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 6
  4 -> 7
  6 -> 4
  7 -> 8
  7 -> 5
  8 -> 9
  9 -> 10
  9 -> 14
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 7

Function: deedUri
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(_deedId))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (x,y) = identifierToCoordinate(_deedId)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uri = https://dworld.io/plot/xxxxx/xxxxx

  ID: 6
  Type: NodeType.VARIABLE
  Expression: _uri = bytes(uri)

  ID: 7
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 8
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 10
  Type: NodeType.IFLOOP
  Expression: i < 5

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _uri[27 - i] = bytes1(48 + (x / 10 ** i) % 10)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: _uri[33 - i] = bytes1(48 + (y / 10 ** i) % 10)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 14
  Type: NodeType.RETURN
  Expression: uri

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 9
  7 -> 10
  8 -> 14
  9 -> 7
  10 -> 11
  10 -> 8
  11 -> 12
  12 -> 13
  13 -> 10

Function: getAllPlots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: plots

Edges:
  0 -> 1

Function: coordinateToIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validCoordinate(x,y))

  ID: 2
  Type: NodeType.RETURN
  Expression: (y << 16) + x

Edges:
  0 -> 1
  1 -> 2

Function: identifierToCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validIdentifier(identifier))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = identifier >> 16

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: x = identifier - (y << 16)

  ID: 4
  Type: NodeType.RETURN
  Expression: (x,y)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: validCoordinate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: x < 65536 && y < 65536

Edges:
  0 -> 1

Function: validIdentifier
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: identifier < 4294967296

Edges:
  0 -> 1

Function: _setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SetData(identifier,name,description,imageUrl,infoUrl)

Edges:
  0 -> 1

Function: DWorldAccessControl
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = msg.sender

Edges:
  0 -> 1

Function: setCFO
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_newCFO != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress = _newCFO

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: reclaimToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = token.balanceOf(this)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(owner,balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Pause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpause()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,pendingOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: DWorldCore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyoutsEnabledFromTimestamp = block.timestamp + buyoutsEnabledAfterHours * 3600

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: DWorldUpgrade(originalContractAddress,originalSaleAuctionAddress,originalRentAuctionAddress)

Edges:
  0 -> 2
  2 -> 1

Function: setUpgradedContractAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: upgradedContractAddress = _upgradedContractAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ContractUpgrade(_upgradedContractAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: setPlotData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_owns(msg.sender,_deedId))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPlotData(_deedId,name,description,imageUrl,infoUrl)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setPlotDataMultiple
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _deedIds.length

  ID: 5
  Type: NodeType.VARIABLE
  Expression: _deedId = _deedIds[i]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: setPlotData(_deedId,name,description,imageUrl,infoUrl)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 8
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 4
  8 -> 3

Function: withdrawBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: etherOwed = addressToEtherOwed[msg.sender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(etherOwed > 0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: delete addressToEtherOwed[msg.sender]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: outstandingEther -= etherOwed

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(etherOwed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: withdrawFreeBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: freeBalance = this.balance - outstandingEther

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: cfoAddress.transfer(freeBalance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyCFO()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: outstandingEther = 0

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: unclaimedPlotPrice = 12500000000000000

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: claimDividendPercentage = 50000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutDividendPercentage = 5000

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: buyoutFeePercentage = 3500

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: migrationFinished = false

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: migrationNumPlotsTransferred = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()(supportsInterface(bytes4)))

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()(ownerOf(uint256))) ^ bytes4(keccak256()(countOfDeeds())) ^ bytes4(keccak256()(countOfDeedsByOwner(address))) ^ bytes4(keccak256()(deedOfOwnerByIndex(address,uint256))) ^ bytes4(keccak256()(approve(address,uint256))) ^ bytes4(keccak256()(takeOwnership(uint256)))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: INTERFACE_SIGNATURE_ERC721Metadata = bytes4(keccak256()(name())) ^ bytes4(keccak256()(symbol())) ^ bytes4(keccak256()(deedUri(uint256)))

Edges:
  0 -> 1
  1 -> 2


