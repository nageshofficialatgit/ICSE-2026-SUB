Contract: DecoderCustomTypes
==================================================


Contract: INonFungiblePositionManager
==================================================


Contract: BaseDecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1


Contract: MasterChefV3DecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: harvest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: abi.encodePacked(_to)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: abi.encodePacked(_to)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1


Contract: NativeWrapperDecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1


Contract: PendleRouterDecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: mintSyFromToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,sy,input.tokenIn)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: mintPyFromSy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,yt)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: swapExactPtForYt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: swapExactPtForToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,output.tokenOut)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: swapExactYtForPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: addLiquidityDualSyAndPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: removeLiquidityDualSyAndPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: redeemPyToSy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,yt)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: redeemSyToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,sy,output.tokenOut)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: swapExactTokenForPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: redeemDueInterestAndRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sysLength = sys.length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < sysLength

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,sys[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 9
  Type: NodeType.VARIABLE
  Expression: ytsLength = yts.length

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < ytsLength

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,yts[i_scope_0])

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_0

  ID: 16
  Type: NodeType.VARIABLE
  Expression: marketsLength = markets.length

  ID: 17
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 18
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: 

  ID: 20
  Type: NodeType.IFLOOP
  Expression: i_scope_1 < marketsLength

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,markets[i_scope_1])

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_1

  ID: 23
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  9 -> 12
  10 -> 13
  11 -> 16
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  15 -> 13
  16 -> 19
  17 -> 20
  18 -> 23
  19 -> 17
  20 -> 21
  20 -> 18
  21 -> 22
  22 -> 20

Function: addLiquiditySingleTokenKeepYt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquiditySingleToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: removeLiquiditySingleToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,output.tokenOut)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: exitPostExpToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,output.tokenOut,output.tokenRedeemSy)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5


Contract: SuperBridgeDecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: proveWithdrawalTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: finalizeWithdrawalTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: finalizeWithdrawalTransactionExternalProof
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2


Contract: TempestDecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: boringVault = _boringVault

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: redeemWithoutSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: checkSlippage

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert TempestDecoderAndSanitizer__CheckSlippageRequired()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: deposits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: checkSlippage

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert TempestDecoderAndSanitizer__CheckSlippageRequired()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  4 -> 5

Function: redeem
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2


Contract: UniswapV3DecoderAndSanitizer
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: uniswapV3NonFungiblePositionManager = INonFungiblePositionManager(_uniswapV3NonFungiblePositionManager)

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: exactInput
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: chunkSize = 23

  ID: 2
  Type: NodeType.VARIABLE
  Expression: pathLength = params.path.length

  ID: 3
  Type: NodeType.IF
  Expression: pathLength % chunkSize != 20

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: revert UniswapV3DecoderAndSanitizer__BadPathFormat()()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: pathAddressLength = 1 + (pathLength / chunkSize)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: 

  ID: 8
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 9
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.IFLOOP
  Expression: i < pathAddressLength

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,params.path)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: pathIndex += chunkSize

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,params.recipient)

  ID: 16
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 10
  8 -> 11
  9 -> 15
  10 -> 8
  11 -> 12
  11 -> 9
  12 -> 13
  13 -> 14
  14 -> 11
  15 -> 16

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(params.token0,params.token1,params.recipient)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: increaseLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uniswapV3NonFungiblePositionManager.ownerOf(params.tokenId) != boringVault

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert UniswapV3DecoderAndSanitizer__BadTokenId()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (None,operator,token0,token1,None,None,None,None,None,None,None,None) = uniswapV3NonFungiblePositionManager.positions(params.tokenId)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(operator,token0,token1)

  ID: 9
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: decreaseLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uniswapV3NonFungiblePositionManager.ownerOf(params.tokenId) != boringVault

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert UniswapV3DecoderAndSanitizer__BadTokenId()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: addressesFound

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: collect
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uniswapV3NonFungiblePositionManager.ownerOf(params.tokenId) != boringVault

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert UniswapV3DecoderAndSanitizer__BadTokenId()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(params.recipient)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: uniswapV3NonFungiblePositionManager.ownerOf(tokenId) != boringVault

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert UniswapV3DecoderAndSanitizer__BadTokenId()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(to)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2


Contract: EarnETHDecoderAndSanitizer
==================================================

Function: proveWithdrawalTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: finalizeWithdrawalTransaction
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: finalizeWithdrawalTransactionExternalProof
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encode(_tx.sender,_tx.target,_tx.data)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: BaseDecoderAndSanitizer(_boringVault)

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(spender)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(newOwner)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: revert BaseDecoderAndSanitizer__FunctionNotImplemented(bytes)(msg.data)

Edges:
  0 -> 1

Function: mintSyFromToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,sy,input.tokenIn)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: mintPyFromSy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,yt)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: swapExactPtForYt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: swapExactPtForToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,output.tokenOut)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: swapExactYtForPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: addLiquidityDualSyAndPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: removeLiquidityDualSyAndPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,market)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: redeemPyToSy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,yt)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2

Function: redeemSyToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user,sy,output.tokenOut)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: swapExactTokenForPt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: redeemDueInterestAndRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(user)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: sysLength = sys.length

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < sysLength

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,sys[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 9
  Type: NodeType.VARIABLE
  Expression: ytsLength = yts.length

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.IFLOOP
  Expression: i_scope_0 < ytsLength

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,yts[i_scope_0])

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_0

  ID: 16
  Type: NodeType.VARIABLE
  Expression: marketsLength = markets.length

  ID: 17
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 18
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 19
  Type: NodeType.VARIABLE
  Expression: 

  ID: 20
  Type: NodeType.IFLOOP
  Expression: i_scope_1 < marketsLength

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(addressesFound,markets[i_scope_1])

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: ++ i_scope_1

  ID: 23
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 9
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  9 -> 12
  10 -> 13
  11 -> 16
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  15 -> 13
  16 -> 19
  17 -> 20
  18 -> 23
  19 -> 17
  20 -> 21
  20 -> 18
  21 -> 22
  22 -> 20

Function: addLiquiditySingleTokenKeepYt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: addLiquiditySingleToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: input.swapData.swapType != DecoderCustomTypes.SwapType.NONE || input.swapData.extRouter != address(0) || input.pendleSwap != address(0) || input.tokenIn != input.tokenMintSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressesFound = abi.encodePacked(receiver,market,input.tokenIn)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: removeLiquiditySingleToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0) || output.tokenOut != output.tokenRedeemSy

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.IF
  Expression: limit.limitRouter != address(0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__LimitOrderSwapsNotPermitted()()

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,output.tokenOut)

  ID: 8
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8

Function: exitPostExpToToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: output.swapData.swapType != DecoderCustomTypes.SwapType.NONE || output.swapData.extRouter != address(0) || output.pendleSwap != address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert PendleRouterDecoderAndSanitizer__AggregatorSwapsNotPermitted()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: addressFound = abi.encodePacked(receiver,market,output.tokenOut,output.tokenRedeemSy)

  ID: 5
  Type: NodeType.RETURN
  Expression: addressFound

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5

Function: harvest
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: abi.encodePacked(_to)

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: addressesFound

  ID: 2
  Type: NodeType.RETURN
  Expression: addressesFound

Edges:
  0 -> 1


