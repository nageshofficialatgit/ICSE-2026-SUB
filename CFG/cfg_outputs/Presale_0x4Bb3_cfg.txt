Contract: Ownable
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnerSet(address(0),owner)

Edges:
  0 -> 1
  1 -> 2

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnerSet(owner,newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1


Contract: TransferHelper
==================================================

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeApprove: approve failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: safeTransferETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = to.call{value: value}(new bytes(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: Presale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: hasStarted = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDC = _USDC

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalDonated = _totalDonatedETH

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalDonatedUSDC = _totalDonatedUSDC

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: changeOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnerSet(owner,newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: owner

Edges:
  0 -> 1

Function: startSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: hasStarted = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: endSale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: hasStarted = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: USDC = _USDC

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransfer(token_,msg.sender,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(presaleReceiver,address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setPresaleReceiver
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newReceiver != address(0),Zero Address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: presaleReceiver = newReceiver

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setDev0
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == dev0,Only Dev0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newDev0 != address(0),Zero Address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: dev0 = newDev0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: donateETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _handleETH(ref)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _process(msg.sender,msg.value,0)

Edges:
  0 -> 1
  1 -> 2

Function: donateUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amountReceived = _transferIn(USDC,amount,ref)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _process(msg.sender,amountReceived,1)

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _handleETH(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _process(msg.sender,msg.value,0)

Edges:
  0 -> 1
  1 -> 2

Function: donated
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: donors[user]

Edges:
  0 -> 1

Function: allDonors
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allDonors

Edges:
  0 -> 1

Function: allDonorsAndDonationAmounts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: len = _allDonors.length

  ID: 2
  Type: NodeType.VARIABLE
  Expression: addresses = new address[](len)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](len)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amountsUSDC = new uint256[](len)

  ID: 5
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 6
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 8
  Type: NodeType.IFLOOP
  Expression: i < len

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: addresses[i] = _allDonors[i]

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: amounts[i] = donors[_allDonors[i]].amountETH

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: amountsUSDC[i] = donors[_allDonors[i]].amountUSDC

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 13
  Type: NodeType.RETURN
  Expression: (addresses,amounts,amountsUSDC)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 7
  5 -> 8
  6 -> 13
  7 -> 5
  8 -> 9
  8 -> 6
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 8

Function: paginateDonorsAndDonationAmounts
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(startIndex < endIndex,Invalid Indexes)

  ID: 2
  Type: NodeType.IF
  Expression: endIndex > _allDonors.length

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: endIndex = _allDonors.length

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: len = endIndex - startIndex

  ID: 6
  Type: NodeType.VARIABLE
  Expression: addresses = new address[](len)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: amounts = new uint256[](len)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: amountsUSDC = new uint256[](len)

  ID: 9
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 10
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: i = startIndex

  ID: 12
  Type: NodeType.IFLOOP
  Expression: i < endIndex

  ID: 13
  Type: NodeType.VARIABLE
  Expression: index = i - startIndex

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: addresses[index] = _allDonors[i]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: amounts[index] = donors[_allDonors[i]].amountETH

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: amountsUSDC[index] = donors[_allDonors[i]].amountUSDC

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 18
  Type: NodeType.RETURN
  Expression: (addresses,amounts,amountsUSDC)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 11
  9 -> 12
  10 -> 18
  11 -> 9
  12 -> 13
  12 -> 10
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 12

Function: donorAtIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allDonors[index]

Edges:
  0 -> 1

Function: numberOfDonors
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allDonors.length

Edges:
  0 -> 1

Function: getDonatedTotals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (totalDonated,totalDonatedUSDC)

Edges:
  0 -> 1

Function: _process
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(hasStarted,Sale Has Not Started)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Zero Amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _processUser(user)

  ID: 4
  Type: NodeType.IF
  Expression: TYPE == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _processETH(user,amount)

  ID: 6
  Type: NodeType.IF
  Expression: TYPE == 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _processUSDC(user,amount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 9
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9

Function: _processETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: donors[user].amountETH += amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalDonated += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DonatedETH(user,amount,donors[user].amountETH)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _processUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: donors[user].amountUSDC += amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalDonatedUSDC += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: DonatedUSDC(user,amount,donors[user].amountUSDC)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _processUser
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: donors[user].amountETH == 0 && donors[user].amountUSDC == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _allDonors.push(user)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: _handleETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: bal = address(this).balance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(dev0,bal / 10)

  ID: 3
  Type: NodeType.IF
  Expression: ref != address(0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(ref,bal / 20)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(presaleReceiver,address(this).balance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: _transferIn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).balanceOf(msg.sender) >= amount,Insufficient Balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(IERC20(token).allowance(msg.sender,address(this)) >= amount,Insufficient Allowance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: balBefore = IERC20(token).balanceOf(presaleReceiver) + IERC20(token).balanceOf(dev0)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: dev0Amount = amount / 10

  ID: 6
  Type: NodeType.IF
  Expression: refAmount > 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(token,msg.sender,ref,refAmount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(token,msg.sender,dev0,dev0Amount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(token,msg.sender,presaleReceiver,amount - (dev0Amount + refAmount))

  ID: 11
  Type: NodeType.VARIABLE
  Expression: balAfter = IERC20(token).balanceOf(presaleReceiver) + IERC20(token).balanceOf(dev0)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balAfter > balBefore,Transfer In Failed)

  ID: 13
  Type: NodeType.RETURN
  Expression: amount

  ID: 14
  Type: NodeType.IF
  Expression: ref == address(0)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: refAmount = 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: refAmount = amount / 20

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 14
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  14 -> 15
  14 -> 16
  15 -> 17
  16 -> 17
  17 -> 6

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: presaleReceiver = 0xD0DB54c5892040b32EdED39B89eDB4dC1839f3a9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: dev0 = 0xBcDDa7af5558e00BcAE4B449059872879DF3d184

Edges:
  0 -> 1


