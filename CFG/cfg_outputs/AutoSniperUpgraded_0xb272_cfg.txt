Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IERC20
==================================================


Contract: IUniswapV2Router01
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: AutoSniperUpgraded
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV2Router02(_router)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = uniswapRouter.WETH()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: USDC = _usdc

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: tokenToTrade = _tokenToTrade

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: priceThreshold = _priceThreshold

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: minProfit = _minProfit

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: withdrawTimeLock = block.timestamp + 86400

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: setAuthorizedUser
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: authorizedUsers[_user] = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setTradeSettings
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: priceThreshold = _newThreshold

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: minProfit = _newProfit

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: SettingsUpdated(_newThreshold,_newProfit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: switchBaseToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: useETHBase = _useETH

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: BaseTokenSwitched(_useETH)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: getTokenPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: pair = IUniswapV2Factory(uniswapRouter.factory()).getPair(tokenToTrade,baseToken)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(pair != address(0),Pair does not exist)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (reserve0,reserve1,None) = IUniswapV2Pair(pair).getReserves()

  ID: 7
  Type: NodeType.IF
  Expression: IUniswapV2Pair(pair).token0() == tokenToTrade

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.IF
  Expression: useETHBase

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: baseToken = WETH

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: baseToken = USDC

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: reserve1 == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: price = 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: price = (reserve0 * 1e18) / reserve1

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: reserve0 == 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: price = 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: price = (reserve1 * 1e18) / reserve0

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 11
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 15
  7 -> 19
  10 -> 23
  11 -> 12
  11 -> 13
  12 -> 14
  13 -> 14
  14 -> 2
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 10
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 10

Function: trade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingEnabled,Trading is disabled)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: priceNow = getTokenPrice()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(priceNow >= priceThreshold,Price not met)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = baseToken

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenToTrade

  ID: 8
  Type: NodeType.VARIABLE
  Expression: deadline = block.timestamp + 120

  ID: 9
  Type: NodeType.IF
  Expression: useETHBase

  ID: 10
  Type: NodeType.VARIABLE
  Expression: amounts = uniswapRouter.swapExactETHForTokens{value: amountIn}(minProfit,path,address(this),deadline)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(amountIn,amounts[1])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: IERC20(USDC).approve(address(uniswapRouter),amountIn)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: amounts_scope_0 = uniswapRouter.swapExactTokensForTokens(amountIn,minProfit,path,address(this),deadline)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(amountIn,amounts_scope_0[1])

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

  ID: 17
  Type: NodeType.IF
  Expression: useETHBase

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: baseToken = WETH

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: baseToken = USDC

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 16
  1 -> 2
  2 -> 3
  3 -> 17
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 15
  12 -> 13
  13 -> 14
  14 -> 15
  16 -> 1
  17 -> 18
  17 -> 19
  18 -> 20
  19 -> 20
  20 -> 5

Function: sellTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tradingEnabled,Trading disabled)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenToTrade

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[1] = baseToken

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenToTrade).approve(address(uniswapRouter),tokenAmount)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: deadline = block.timestamp + 120

  ID: 9
  Type: NodeType.IF
  Expression: useETHBase

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),deadline)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: balanceAfter = address(this).balance

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: TokensSold(tokenAmount,balanceAfter - balanceBefore)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForTokens(tokenAmount,0,path,address(this),deadline)

  ID: 14
  Type: NodeType.VARIABLE
  Expression: balanceAfter_scope_0 = IERC20(USDC).balanceOf(address(this))

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: TokensSold(tokenAmount,balanceAfter_scope_0 - balanceBefore)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: onlyAuthorized()

  ID: 18
  Type: NodeType.IF
  Expression: useETHBase

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: baseToken = WETH

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: baseToken = USDC

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: useETHBase

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: balanceBefore = address(this).balance

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: balanceBefore = IERC20(USDC).balanceOf(address(this))

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 17
  1 -> 18
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 22
  8 -> 9
  9 -> 10
  9 -> 13
  10 -> 11
  11 -> 12
  12 -> 16
  13 -> 14
  14 -> 15
  15 -> 16
  17 -> 1
  18 -> 19
  18 -> 20
  19 -> 21
  20 -> 21
  21 -> 3
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 8

Function: withdrawFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.timestamp >= withdrawTimeLock,Time-lock active)

  ID: 2
  Type: NodeType.IF
  Expression: useETHBase

  ID: 3
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: address(owner()).transfer(balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: FundsWithdrawn(owner(),balance)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: usdcBalance = IERC20(USDC).balanceOf(address(this))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(USDC).transfer(owner(),usdcBalance)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: FundsWithdrawn(owner(),usdcBalance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  2 -> 6
  3 -> 4
  4 -> 5
  5 -> 9
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: toggleTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: tradingEnabled = _status

  ID: 2
  Type: NodeType.IF
  Expression: _status

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TradingStarted()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TradingStopped()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  6 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: tradingEnabled = true

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: useETHBase = true

Edges:
  0 -> 1


