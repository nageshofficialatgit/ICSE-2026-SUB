Contract: IConfigStore
==================================================


Contract: IGovernance
==================================================


Contract: ConfigStore
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: governance = _governance

Edges:
  0 -> 1

Function: customParamNamesLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: customParamNames.length

  ID: 2
  Type: NodeType.RETURN
  Expression: length

Edges:
  0 -> 1

Function: _setCustomParam
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: customParam[paramName] = paramValue

  ID: 2
  Type: NodeType.IF
  Expression: customParamNames.length == 0 || customParamNames[customParamNamesIdx[paramName]] != paramName

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: customParamNamesIdx[paramName] = customParamNames.length

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: customParamNames.push(paramName)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ParamSet(paramName,paramValue)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  5 -> 6

Function: setCustomParam
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setCustomParam(paramName,paramValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyVoting()

Edges:
  0 -> 2
  2 -> 1

Function: setMultiCustomParam
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: length = paramName.length

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(length == paramValue.length,length not match)

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < length

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _setCustomParam(paramName[i],paramValue[i])

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyVoting()

Edges:
  0 -> 9
  1 -> 2
  2 -> 5
  3 -> 6
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  8 -> 6
  9 -> 1


