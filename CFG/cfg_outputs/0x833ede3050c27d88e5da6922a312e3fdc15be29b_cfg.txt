Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(a == 0 || c / a == b)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 2
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(b <= a)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: assert(bool)(c >= a)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ERC20Basic
==================================================


Contract: ERC20
==================================================


Contract: BasicToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1


Contract: StandardToken
==================================================

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7


Contract: Ownable
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: MintableToken
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _allowance = allowed[_from][msg.sender]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_from] = balances[_from].sub(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: allowed[_from][msg.sender] = _allowance.sub(_value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(_from,_to,_value)

  ID: 7
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_to != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = balances[msg.sender].sub(_value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,_to,_value)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

Edges:


Contract: usingMyWillConsts
==================================================

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS_UINT8 = 18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

Edges:
  0 -> 1
  1 -> 2


Contract: MyWillToken
==================================================

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply = totalSupply.add(_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[_to] = balances[_to].add(_amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Mint(_to,_amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(0x0,_to,_amount)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: canMint()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 7
  7 -> 1

Function: finishMinting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mintingFinished = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MintFinished()

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! paused || excluded[_from])

  ID: 2
  Type: NodeType.RETURN
  Expression: super.transferFrom(_from,_to,_value)

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = _value

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,_value)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowed[_owner][_spender]

  ID: 2
  Type: NodeType.RETURN
  Expression: remaining

Edges:
  0 -> 1

Function: increaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 3
  Type: NodeType.RETURN
  Expression: true

  ID: 4
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: decreaseApproval
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldValue = allowed[msg.sender][_spender]

  ID: 2
  Type: NodeType.IF
  Expression: _subtractedValue > oldValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,_spender,allowed[msg.sender][_spender])

  ID: 7
  Type: NodeType.RETURN
  Expression: true

  ID: 8
  Type: NodeType.RETURN
  Expression: success

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! paused || excluded[msg.sender])

  ID: 2
  Type: NodeType.RETURN
  Expression: super.transfer(_to,_value)

Edges:
  0 -> 1
  1 -> 2

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[_owner]

  ID: 2
  Type: NodeType.RETURN
  Expression: balance

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: MyWill Coin

  ID: 2
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: WIL

  ID: 2
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: TOKEN_DECIMALS_UINT8

  ID: 2
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: crowdsaleFinished
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: addExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: excluded[_toExclude] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: mintingFinished = false

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: paused = true

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS_UINT8 = 18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

Edges:
  0 -> 1
  1 -> 2


Contract: Crowdsale
==================================================

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startTime >= now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endTime >= _startTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_hardCap > 0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startTime = _startTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endTime = _endTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: hardCap = _hardCap

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: getRateScale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender,msg.value)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalSupply = token.totalSupply()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(amountWei)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rateScale = getRateScale()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase(amountWei,actualRate,totalSupply))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokens = amountWei.mul(actualRate).div(rateScale)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: change = 0

  ID: 8
  Type: NodeType.IF
  Expression: tokens.add(totalSupply) > hardCap

  ID: 9
  Type: NodeType.VARIABLE
  Expression: maxTokens = hardCap.sub(totalSupply)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: realAmount = maxTokens.mul(rateScale).div(actualRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = realAmount.mul(actualRate).div(rateScale)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: change = amountWei - realAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountWei = realAmount

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(amountWei)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: soldTokens = soldTokens.add(tokens)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,amountWei,tokens)

  ID: 19
  Type: NodeType.IF
  Expression: change != 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(change)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: forwardFunds(amountWei)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(amountWei)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: withinPeriod = now >= startTime && now <= endTime

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nonZeroPurchase = _amountWei != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: hardCapNotReached = _totalSupply <= hardCap.sub(_actualRate)

  ID: 4
  Type: NodeType.RETURN
  Expression: withinPeriod && nonZeroPurchase && hardCapNotReached

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(_value)

  ID: 2
  Type: NodeType.RETURN
  Expression: now > endTime || token.totalSupply() > hardCap.sub(actualRate)

Edges:
  0 -> 1
  1 -> 2

Function: hasStarted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now >= startTime

Edges:
  0 -> 1


Contract: FinalizableCrowdsale
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startTime >= now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endTime >= _startTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_hardCap > 0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startTime = _startTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endTime = _endTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: hardCap = _hardCap

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: getRateScale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender,msg.value)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalSupply = token.totalSupply()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(amountWei)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rateScale = getRateScale()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase(amountWei,actualRate,totalSupply))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokens = amountWei.mul(actualRate).div(rateScale)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: change = 0

  ID: 8
  Type: NodeType.IF
  Expression: tokens.add(totalSupply) > hardCap

  ID: 9
  Type: NodeType.VARIABLE
  Expression: maxTokens = hardCap.sub(totalSupply)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: realAmount = maxTokens.mul(rateScale).div(actualRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = realAmount.mul(actualRate).div(rateScale)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: change = amountWei - realAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountWei = realAmount

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(amountWei)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: soldTokens = soldTokens.add(tokens)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,amountWei,tokens)

  ID: 19
  Type: NodeType.IF
  Expression: change != 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(change)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: forwardFunds(amountWei)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(amountWei)

Edges:
  0 -> 1

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: withinPeriod = now >= startTime && now <= endTime

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nonZeroPurchase = _amountWei != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: hardCapNotReached = _totalSupply <= hardCap.sub(_actualRate)

  ID: 4
  Type: NodeType.RETURN
  Expression: withinPeriod && nonZeroPurchase && hardCapNotReached

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(_value)

  ID: 2
  Type: NodeType.RETURN
  Expression: now > endTime || token.totalSupply() > hardCap.sub(actualRate)

Edges:
  0 -> 1
  1 -> 2

Function: hasStarted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now >= startTime

Edges:
  0 -> 1

Function: FinalizableCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Crowdsale(_startTime,_endTime,_hardCap,_wallet)

Edges:
  0 -> 1

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(hasEnded())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: finalization()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isFinalized = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: finalization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFinalized = false

Edges:


Contract: RefundVault
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: RefundVault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: state = State.Active

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: deposit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(state == State.Active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: deposited[investor] = deposited[investor].add(msg.value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: close
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(state == State.Active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: state = State.Closed

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Closed()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(this.balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: enableRefunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(state == State.Active)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: state = State.Refunding

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: RefundsEnabled()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: refund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(state == State.Refunding)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: depositedValue = deposited[investor]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: deposited[investor] = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: investor.transfer(depositedValue)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Refunded(investor,depositedValue)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1


Contract: RefundableCrowdsale
==================================================

Function: FinalizableCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Crowdsale(_startTime,_endTime,_hardCap,_wallet)

Edges:
  0 -> 1

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(hasEnded())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: finalization()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isFinalized = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: finalization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: super.finalization()

  ID: 2
  Type: NodeType.IF
  Expression: goalReached()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault.close()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vault.enableRefunds()

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startTime >= now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endTime >= _startTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_hardCap > 0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startTime = _startTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endTime = _endTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: hardCap = _hardCap

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MintableToken()

Edges:
  0 -> 1

Function: getRateScale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender,msg.value)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalSupply = token.totalSupply()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(amountWei)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rateScale = getRateScale()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase(amountWei,actualRate,totalSupply))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokens = amountWei.mul(actualRate).div(rateScale)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: change = 0

  ID: 8
  Type: NodeType.IF
  Expression: tokens.add(totalSupply) > hardCap

  ID: 9
  Type: NodeType.VARIABLE
  Expression: maxTokens = hardCap.sub(totalSupply)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: realAmount = maxTokens.mul(rateScale).div(actualRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = realAmount.mul(actualRate).div(rateScale)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: change = amountWei - realAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountWei = realAmount

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(amountWei)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: soldTokens = soldTokens.add(tokens)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,amountWei,tokens)

  ID: 19
  Type: NodeType.IF
  Expression: change != 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(change)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: forwardFunds(amountWei)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: goalReached()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(amountWei)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault.deposit.value(amountWei)(msg.sender)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: withinPeriod = now >= startTime && now <= endTime

  ID: 2
  Type: NodeType.VARIABLE
  Expression: nonZeroPurchase = _amountWei != 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: hardCapNotReached = _totalSupply <= hardCap.sub(_actualRate)

  ID: 4
  Type: NodeType.RETURN
  Expression: withinPeriod && nonZeroPurchase && hardCapNotReached

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(_value)

  ID: 2
  Type: NodeType.RETURN
  Expression: now > endTime || token.totalSupply() > hardCap.sub(actualRate)

Edges:
  0 -> 1
  1 -> 2

Function: hasStarted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now >= startTime

Edges:
  0 -> 1

Function: RefundableCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_goal > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vault = new RefundVault(wallet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: goal = _goal

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FinalizableCrowdsale(_startTime,_endTime,_hardCap,_wallet)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: claimRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! goalReached())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault.refund(msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: closeVault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(goalReached())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vault.close()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: goalReached
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: weiRaised >= goal

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFinalized = false

Edges:


Contract: MyWillRateProviderI
==================================================


Contract: MyWillRateProvider
==================================================

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: getRateScale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: RATE_SCALE

Edges:
  0 -> 1

Function: getBaseRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: BASE_RATE

Edges:
  0 -> 1

Function: getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: totalSold < STEP_30

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: rate = RATE_30

  ID: 4
  Type: NodeType.IF
  Expression: totalSold < STEP_20

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: rate = RATE_20

  ID: 6
  Type: NodeType.IF
  Expression: totalSold < STEP_10

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: rate = RATE_10

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: rate = BASE_RATE

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.ENDIF
  Expression: 

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.IF
  Expression: amountWei >= 1000000000000000000000

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 13 / 100

  ID: 14
  Type: NodeType.IF
  Expression: amountWei >= 500000000000000000000

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 10 / 100

  ID: 16
  Type: NodeType.IF
  Expression: amountWei >= 100000000000000000000

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 7 / 100

  ID: 18
  Type: NodeType.IF
  Expression: amountWei >= 50000000000000000000

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 5 / 100

  ID: 20
  Type: NodeType.IF
  Expression: amountWei >= 30000000000000000000

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 4 / 100

  ID: 22
  Type: NodeType.IF
  Expression: amountWei >= 10000000000000000000

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: rate += rate * 25 / 1000

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.ENDIF
  Expression: 

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

  ID: 30
  Type: NodeType.VARIABLE
  Expression: eRate = exclusiveRate[buyer]

  ID: 31
  Type: NodeType.IF
  Expression: eRate.exists && eRate.workUntil >= now

  ID: 32
  Type: NodeType.IF
  Expression: eRate.rate != 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: rate = eRate.rate

  ID: 34
  Type: NodeType.ENDIF
  Expression: 

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: rate += rate * eRate.bonusPercent1000 / 1000

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.RETURN
  Expression: rate

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 11
  4 -> 5
  4 -> 6
  5 -> 10
  6 -> 7
  6 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 29
  14 -> 15
  14 -> 16
  15 -> 28
  16 -> 17
  16 -> 18
  17 -> 27
  18 -> 19
  18 -> 20
  19 -> 26
  20 -> 21
  20 -> 22
  21 -> 25
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 36
  32 -> 33
  32 -> 34
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37

Function: setExclusiveRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: exclusiveRate[_investor] = ExclusiveRate(_workUntil,_rate,_bonusPercent1000,true)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: removeExclusiveRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: delete exclusiveRate[_investor]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS_UINT8 = 18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RATE_SCALE = 10000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STEP_30 = 20000000 * TOKEN_DECIMAL_MULTIPLIER

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STEP_20 = 40000000 * TOKEN_DECIMAL_MULTIPLIER

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: STEP_10 = 60000000 * TOKEN_DECIMAL_MULTIPLIER

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RATE_30 = 1950 * RATE_SCALE

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RATE_20 = 1800 * RATE_SCALE

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: RATE_10 = 1650 * RATE_SCALE

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BASE_RATE = 1500 * RATE_SCALE

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10


Contract: MyWillCrowdsale
==================================================

Function: RefundableCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_goal > 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vault = new RefundVault(wallet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: goal = _goal

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: FinalizableCrowdsale(_startTime,_endTime,_hardCap,_wallet)

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: forwardFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: wallet.transfer(amountWei)

Edges:
  0 -> 1

Function: claimRefund
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(isFinalized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! goalReached())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vault.refund(msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: closeVault
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(goalReached())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vault.close()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: finalization
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: super.finalization()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.finishMinting()

  ID: 3
  Type: NodeType.IF
  Expression: ! goalReached()

  ID: 4
  Type: NodeType.RETURN
  Expression: 

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: MyWillToken(token).crowdsaleFinished()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: token.transferOwnership(owner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  5 -> 6
  6 -> 7

Function: goalReached
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: weiRaised >= goal

Edges:
  0 -> 1

Function: FinalizableCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: Crowdsale(_startTime,_endTime,_hardCap,_wallet)

Edges:
  0 -> 1

Function: finalize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(hasEnded())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: finalization()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Finalized()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isFinalized = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 6
  6 -> 1

Function: Ownable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(newOwner != address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: Crowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_startTime >= now)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endTime >= _startTime)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_wallet != 0x0)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_hardCap > 0)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: token = createTokenContract()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: startTime = _startTime

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: endTime = _endTime

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: hardCap = _hardCap

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: wallet = _wallet

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: createTokenContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: new MyWillToken()

Edges:
  0 -> 1

Function: getRateScale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: rateProvider.getRateScale()

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: buyTokens(msg.sender,msg.value)

Edges:
  0 -> 1

Function: buyTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(beneficiary != 0x0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: totalSupply = token.totalSupply()

  ID: 3
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(amountWei)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rateScale = getRateScale()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(validPurchase(amountWei,actualRate,totalSupply))

  ID: 6
  Type: NodeType.VARIABLE
  Expression: tokens = amountWei.mul(actualRate).div(rateScale)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: change = 0

  ID: 8
  Type: NodeType.IF
  Expression: tokens.add(totalSupply) > hardCap

  ID: 9
  Type: NodeType.VARIABLE
  Expression: maxTokens = hardCap.sub(totalSupply)

  ID: 10
  Type: NodeType.VARIABLE
  Expression: realAmount = maxTokens.mul(rateScale).div(actualRate)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tokens = realAmount.mul(actualRate).div(rateScale)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: change = amountWei - realAmount

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: amountWei = realAmount

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: weiRaised = weiRaised.add(amountWei)

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: soldTokens = soldTokens.add(tokens)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: token.mint(beneficiary,tokens)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: TokenPurchase(msg.sender,beneficiary,amountWei,tokens)

  ID: 19
  Type: NodeType.IF
  Expression: change != 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(change)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: forwardFunds(amountWei)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22

Function: validPurchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _amountWei < minimalPurchase

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: super.validPurchase(_amountWei,_actualRate,_totalSupply)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: hasEnded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: actualRate = getRate(_value)

  ID: 2
  Type: NodeType.RETURN
  Expression: now > endTime || token.totalSupply() > hardCap.sub(actualRate)

Edges:
  0 -> 1
  1 -> 2

Function: hasStarted
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: now >= startTime

Edges:
  0 -> 1

Function: MyWillCrowdsale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: token.mint(teamAddress,teamTokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: token.mint(bountyAddress,bountyTokens)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: token.mint(icoAccountAddress,icoTokens)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: MyWillToken(token).addExcluded(teamAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: MyWillToken(token).addExcluded(bountyAddress)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: MyWillToken(token).addExcluded(icoAccountAddress)

  ID: 7
  Type: NodeType.VARIABLE
  Expression: provider = new MyWillRateProvider()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: provider.transferOwnership(owner)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: rateProvider = provider

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: RefundableCrowdsale(_startTime,_endTime,_hardCapTokens * TOKEN_DECIMAL_MULTIPLIER,0x80826b5b717aDd3E840343364EC9d971FBa3955C,_softCapWei)

Edges:
  0 -> 10
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  10 -> 1

Function: getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: rateProvider.getRate(msg.sender,soldTokens,_value)

Edges:
  0 -> 1

Function: getBaseRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: rateProvider.getRate(msg.sender,soldTokens,minimalPurchase)

Edges:
  0 -> 1

Function: setRateProvider
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_rateProviderAddress != 0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: rateProvider = MyWillRateProviderI(_rateProviderAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setEndTime
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(_endTime > startTime)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: endTime = _endTime

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: notFinalized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 4
  4 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: isFinalized = false

Edges:

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMALS_UINT8 = 18

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: teamTokens = 11000000 * TOKEN_DECIMAL_MULTIPLIER

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: bountyTokens = 2000000 * TOKEN_DECIMAL_MULTIPLIER

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: icoTokens = 3038800 * TOKEN_DECIMAL_MULTIPLIER

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: minimalPurchase = 50000000000000000

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: teamAddress = 0xE4F0Ff4641f3c99de342b06c06414d94A585eFfb

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: bountyAddress = 0x76d4136d6EE53DB4cc087F2E2990283d5317A5e9

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: icoAccountAddress = 0x195610851A43E9685643A8F3b49F0F8a019204f1

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9


