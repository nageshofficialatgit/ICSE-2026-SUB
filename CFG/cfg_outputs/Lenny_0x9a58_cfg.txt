Contract: IERC20
==================================================


Contract: SafeMath
==================================================

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,SafeMath: addition overflow)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a - b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,SafeMath: multiplication overflow)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,errorMessage)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: c = a / b

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: mod
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b != 0,errorMessage)

  ID: 2
  Type: NodeType.RETURN
  Expression: a % b

Edges:
  0 -> 1
  1 -> 2


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: codehash = extcodehash(uint256)(account)

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.RETURN
  Expression: (codehash != accountHash && codehash != 0x0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.RETURN
  Expression: _functionCallWithValue(target,data,value,errorMessage)

Edges:
  0 -> 1
  1 -> 2

Function: _functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: weiValue}(data)

  ID: 5
  Type: NodeType.IF
  Expression: success

  ID: 6
  Type: NodeType.RETURN
  Expression: returndata

  ID: 7
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 8
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

  ID: 12
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  7 -> 8
  7 -> 13
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 14
  13 -> 14
  14 -> 15


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: msgSender = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = msgSender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),msgSender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IUniswapV2Router01
==================================================


Contract: IUniswapV2Router02
==================================================


Contract: Lenny
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rOwned[_msgSender()] = _rTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH())

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router = _uniswapV2Router

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[owner()] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[address(this)] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_msgSender(),_tTotal)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: address(msg.sender)

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: this

  ID: 2
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1
  1 -> 2

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tTotal

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _isExcluded[account]

  ID: 2
  Type: NodeType.RETURN
  Expression: _tOwned[account]

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: tokenFromReflection(_rOwned[account])

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,ERC20: decreased allowance below zero))

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: isExcludedFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcluded[account]

Edges:
  0 -> 1

Function: totalReflectionFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tReflectionFeeTotal

Edges:
  0 -> 1

Function: totalBurnFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tBurnFeeTotal

Edges:
  0 -> 1

Function: numTokensSwapToETHForMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _numTokensSwapToETHForMarketing

Edges:
  0 -> 1

Function: reflectionFromToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tAmount <= _tTotal,Amount must be less than supply)

  ID: 2
  Type: NodeType.IF
  Expression: ! deductTransferFee

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rAmount = _getValues(tAmount).rAmount

  ID: 4
  Type: NodeType.RETURN
  Expression: rAmount

  ID: 5
  Type: NodeType.VARIABLE
  Expression: rTransferAmount = _getValues(tAmount).rTransferAmount

  ID: 6
  Type: NodeType.RETURN
  Expression: rTransferAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  5 -> 6

Function: tokenFromReflection
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(rAmount <= _rTotal,Amount must be less than total reflections)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentRate = _getRate()

  ID: 3
  Type: NodeType.RETURN
  Expression: rAmount.div(currentRate)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: excludeFromReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != 0x4c9e29914eb8E983D8f711c0Daa0cC558D04d7EB,We can not exclude Uniswap router.)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _isExcluded[account],Account already excluded)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_excluded.length < 100,Excluded list is too long)

  ID: 4
  Type: NodeType.IF
  Expression: _rOwned[account] > 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _tOwned[account] = tokenFromReflection(_rOwned[account])

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _isExcluded[account] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _excluded.push(account)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: _distributeFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rTotal = _rTotal.sub(rReflectionFee).sub(rBurnFee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tReflectionFeeTotal = _tReflectionFeeTotal.add(tReflectionFee)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tTotal = _tTotal.sub(tBurnFee)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _tBurnFeeTotal = _tBurnFeeTotal.add(tBurnFee)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _rOwned[marketingTokenFeeWallet] = _rOwned[marketingTokenFeeWallet].add(rmarketingTokenFee)

  ID: 6
  Type: NodeType.IF
  Expression: _isExcluded[marketingTokenFeeWallet]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _tOwned[marketingTokenFeeWallet] = _tOwned[marketingTokenFeeWallet].add(tmarketingTokenFee)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8

Function: _getValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tvs = _getTValues(tAmount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rvs = _getRValues(tAmount,tvs.tReflectionFee,tvs.tBurnFee,tvs.tmarketingTokenFee,tvs.tMarketingETHFee,_getRate())

  ID: 3
  Type: NodeType.RETURN
  Expression: ValuesStruct(rvs.rAmount,rvs.rTransferAmount,rvs.rReflectionFee,rvs.rBurnFee,rvs.rmarketingTokenFee,rvs.rMarketingETHFee,tvs.tTransferAmount,tvs.tReflectionFee,tvs.tBurnFee,tvs.tmarketingTokenFee,tvs.tMarketingETHFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _getTValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: tReflectionFee = calculateReflectionFee(tAmount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tBurnFee = calculateBurnFee(tAmount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: tmarketingTokenFee = calculatemarketingTokenFee(tAmount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: tMarketingETHFee = calculateMarketingETHFee(tAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: tTransferAmount = tAmount.sub(tReflectionFee).sub(tBurnFee).sub(tmarketingTokenFee).sub(tMarketingETHFee)

  ID: 6
  Type: NodeType.RETURN
  Expression: TValuesStruct(tTransferAmount,tReflectionFee,tBurnFee,tmarketingTokenFee,tMarketingETHFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: _getRValues
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rAmount = tAmount.mul(currentRate)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rReflectionFee = tReflectionFee.mul(currentRate)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: rBurnFee = tBurnFee.mul(currentRate)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: rmarketingTokenFee = tmarketingTokenFee.mul(currentRate)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: rMarketingETHFee = tMarketingETHFee.mul(currentRate)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: rTransferAmount = rAmount.sub(rReflectionFee).sub(rMarketingETHFee).sub(rBurnFee).sub(rmarketingTokenFee)

  ID: 7
  Type: NodeType.RETURN
  Expression: RValuesStruct(rAmount,rTransferAmount,rReflectionFee,rBurnFee,rmarketingTokenFee,rMarketingETHFee)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: _getRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (rSupply,tSupply) = _getCurrentSupply()

  ID: 4
  Type: NodeType.RETURN
  Expression: rSupply.div(tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _getCurrentSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: rSupply = _rTotal

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tSupply = _tTotal

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 6
  Type: NodeType.IFLOOP
  Expression: i < _excluded.length

  ID: 7
  Type: NodeType.IF
  Expression: _rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply

  ID: 8
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: rSupply = rSupply.sub(_rOwned[_excluded[i]])

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: tSupply = tSupply.sub(_tOwned[_excluded[i]])

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 13
  Type: NodeType.IF
  Expression: rSupply < _rTotal.div(_tTotal)

  ID: 14
  Type: NodeType.RETURN
  Expression: (_rTotal,_tTotal)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.RETURN
  Expression: (rSupply,tSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 5
  3 -> 6
  4 -> 13
  5 -> 3
  6 -> 7
  6 -> 4
  7 -> 8
  7 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 6
  13 -> 14
  13 -> 15
  15 -> 16

Function: _takeMarketingETHFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rOwned[address(this)] = _rOwned[address(this)].add(rMarketingETHFee)

  ID: 2
  Type: NodeType.IF
  Expression: _isExcluded[address(this)]

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tOwned[address(this)] = _tOwned[address(this)].add(tMarketingETHFee)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4

Function: calculateReflectionFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_reflectionFee).div(10 ** 2)

Edges:
  0 -> 1

Function: calculateBurnFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_burnFee).div(10 ** 2)

Edges:
  0 -> 1

Function: calculatemarketingTokenFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_marketingTokenFee).div(10 ** 2)

Edges:
  0 -> 1

Function: calculateMarketingETHFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _amount.mul(_marketingETHFee).div(10 ** 2)

Edges:
  0 -> 1

Function: removeAllFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reflectionFee = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _marketingETHFee = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _burnFee = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _marketingTokenFee = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: restoreAllFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reflectionFee = 2

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _marketingETHFee = 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _marketingTokenFee = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _burnFee = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: isExcludedFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _isExcludedFromFee[account]

Edges:
  0 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),ERC20: approve from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: transfer from the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: transfer to the zero address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Transfer amount must be greater than zero)

  ID: 4
  Type: NodeType.IF
  Expression: ! _tradingEnabled && from != owner()

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Trading not yet enabled!)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.VARIABLE
  Expression: contractTokenBalance = balanceOf(address(this))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: overMinTokenBalance = contractTokenBalance >= _numTokensSwapToETHForMarketing

  ID: 9
  Type: NodeType.IF
  Expression: overMinTokenBalance && ! inMarketingEthSwap && from != uniswapV2Pair && _marketingConverttoETH

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: contractTokenBalance = _numTokensSwapToETHForMarketing

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: swapMarketingAndSendEth(contractTokenBalance)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _tokenTransfer(from,to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 12
  10 -> 11
  11 -> 12
  12 -> 13

Function: swapMarketingAndSendEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapV2Router.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapV2Router),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,marketingETHFeeWallet,block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lockTheSwap()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: _tokenTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _isExcludedFromFee[sender] || _isExcludedFromFee[recipient]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: removeAllFee()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTxAmount,Transfer amount exceeds the maxTxAmount.)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: vs = _getValues(amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _takeMarketingETHFee(vs.rMarketingETHFee,vs.tMarketingETHFee)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _distributeFee(vs.rReflectionFee,vs.rBurnFee,vs.rmarketingTokenFee,vs.tReflectionFee,vs.tBurnFee,vs.tmarketingTokenFee)

  ID: 8
  Type: NodeType.IF
  Expression: _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _transferFromExcluded(sender,recipient,amount,vs)

  ID: 10
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && _isExcluded[recipient]

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _transferToExcluded(sender,recipient,vs)

  ID: 12
  Type: NodeType.IF
  Expression: ! _isExcluded[sender] && ! _isExcluded[recipient]

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: _transferStandard(sender,recipient,vs)

  ID: 14
  Type: NodeType.IF
  Expression: _isExcluded[sender] && _isExcluded[recipient]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _transferBothExcluded(sender,recipient,amount,vs)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: _isExcludedFromFee[sender] || _isExcludedFromFee[recipient]

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: restoreAllFee()

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  8 -> 10
  9 -> 19
  10 -> 11
  10 -> 12
  11 -> 18
  12 -> 13
  12 -> 14
  13 -> 17
  14 -> 15
  14 -> 16
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22

Function: _transferStandard
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(vs.rAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(vs.rTransferAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,vs.tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _transferToExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(vs.rAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(vs.tTransferAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(vs.rTransferAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,vs.tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transferFromExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(vs.rAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(vs.rTransferAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,vs.tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _transferBothExcluded
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tOwned[sender] = _tOwned[sender].sub(tAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rOwned[sender] = _rOwned[sender].sub(vs.rAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _tOwned[recipient] = _tOwned[recipient].add(vs.tTransferAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _rOwned[recipient] = _rOwned[recipient].add(vs.rTransferAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,vs.tTransferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: excludeFromFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[account] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: includeInFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _isExcludedFromFee[account] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: enableAllFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reflectionFee = 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _burnFee = 1

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _marketingTokenFee = 1

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _marketingETHFee = 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _marketingConverttoETH = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: disableAllFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _reflectionFee = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _burnFee = 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _marketingTokenFee = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _marketingETHFee = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _marketingConverttoETH = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setMarketingETHWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketingETHFeeWallet = newWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMarketingTokenWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: marketingTokenFeeWallet = newWallet

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setMaxTxAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(maxAmountInTokensWithDecimals > 500 * 10 ** 6 * 10 ** 9,Cannot set transaction amount less than 0.1 percent of initial Total Supply!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxTxAmount = maxAmountInTokensWithDecimals

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradingEnabled,Trading already enabled!)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tradingEnabled = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setmarketingConverttoETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _marketingConverttoETH = _enabled

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setnumTokensSwapToETHForMarketing
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _numTokensSwapToETHForMarketing = tokenAmount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: recoverETHFromContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= weiAmount,insufficient ETH balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: address(owner()).transfer(weiAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: recoverAnyERC20TokensFromContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(_tokenAddr).transfer(_to,_amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tTotal = 500 * 10 ** 6 * 10 ** 9

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _rTotal = (MAX - (MAX % _tTotal))

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = Lenny

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = LEN

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 9

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _reflectionFee = 2

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _burnFee = 0

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _marketingTokenFee = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _marketingETHFee = 1

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: marketingTokenFeeWallet = 0xC9b5Fc35e1851040f5FD2743302d856DF3e498E9

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: marketingETHFeeWallet = 0xC9b5Fc35e1851040f5FD2743302d856DF3e498E9

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: inMarketingEthSwap = false

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _marketingConverttoETH = true

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tradingEnabled = false

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTxAmount = 500 * 10 ** 6 * 10 ** 9

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _numTokensSwapToETHForMarketing = 500 * 10 ** 3 * 10 ** 9

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX = ~ uint256(0)

Edges:


