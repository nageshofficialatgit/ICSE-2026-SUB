Contract: IUniswapV2Router02
==================================================


Contract: IUniswapV2Factory
==================================================


Contract: IUniswapV2Pair
==================================================


Contract: IERC20
==================================================


Contract: USITCoin
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = msg.sender

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalSupply = initialSupply * (10 ** uint256(decimals))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] = totalSupply

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter = IUniswapV2Router02(_router)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFees[owner] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFees[address(this)] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _statusFlags = 0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),msg.sender,totalSupply)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9

Function: initializeDomainSeparator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(DOMAIN_SEPARATOR == bytes32(0),Already initialized)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: chainId = chainid()()

  ID: 5
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: DOMAIN_SEPARATOR = keccak256(bytes)(abi.encode(keccak256(bytes)(EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)),keccak256(bytes)(bytes(name)),keccak256(bytes)(bytes(1)),chainId,address(this)))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: initializeUniswapPair
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(uniswapV2Pair == address(0),Pair already initialized)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapV2Pair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this),uniswapRouter.WETH())

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: balances[account]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,recipient,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,amount)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: allowances[_owner][spender]

Edges:
  0 -> 1

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowances[sender][msg.sender] >= amount,Allowance exceeded)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(sender,recipient,amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(sender,msg.sender,allowances[sender][msg.sender] - amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: _approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_owner != address(0) && spender != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: allowances[_owner][spender] = amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Approval(_owner,spender,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0) && recipient != address(0),Invalid address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! (blacklisted[sender] || blacklisted[recipient]),Blacklisted address)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[sender] >= amount,Insufficient balance)

  ID: 4
  Type: NodeType.IF
  Expression: isExcludedFromFees[sender] || isExcludedFromFees[recipient] || marketingFee == 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balances[sender] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount)

  ID: 8
  Type: NodeType.RETURN
  Expression: 

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: marketingAmount = amount * marketingFee / FEE_DENOMINATOR

  ID: 11
  Type: NodeType.VARIABLE
  Expression: transferAmount = amount - marketingAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: balances[sender] -= amount

  ID: 13
  Type: NodeType.IF
  Expression: marketingAmount > 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: balances[marketingWallet] += marketingAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,marketingWallet,marketingAmount)

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: balances[recipient] += transferAmount

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,transferAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 9
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 16
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18

Function: burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= amount,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balances[msg.sender] -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= amount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Burn(msg.sender,amount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,address(0),amount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balances[owner] += amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),owner,amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: pause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _statusFlags |= PAUSED_FLAG

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Paused()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: blacklistAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: blacklisted[account] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Blacklisted(account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: removeFromBlacklist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: blacklisted[account] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: RemovedFromBlacklist(account)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: unpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _statusFlags &= ~ PAUSED_FLAG

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Unpaused()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: isPaused
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (_statusFlags & PAUSED_FLAG) != 0

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owner = newOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: addLiquidity
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapRouter),tokenAmount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.addLiquidityETH{value: msg.value}(address(this),tokenAmount,0,0,owner,block.timestamp)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: swapTokensForETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= tokenAmount,Insufficient balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,address(this),tokenAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapRouter),tokenAmount)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: path[1] = uniswapRouter.WETH()

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,msg.sender,block.timestamp)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: TokensSwappedForETH(tokenAmount,0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 10
  10 -> 1

Function: setMarketingWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newWallet != address(0),Zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MarketingWalletUpdated(marketingWallet,newWallet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: marketingWallet = newWallet

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: setMarketingFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newFee <= 50,Fee too high)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MarketingFeeUpdated(marketingFee,newFee)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: marketingFee = newFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: excludeFromFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isExcludedFromFees[account] = excluded

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updateMetadata
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: website = _website

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: telegram = _telegram

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: twitter = _twitter

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: MetadataUpdated(_website,_telegram,_twitter)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: recoverERC20
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokenAddress != address(this),Cannot recover USIT tokens)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenAddress).transfer(owner,tokenAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: initializePrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balances[msg.sender] >= tokenAmount,Insufficient token balance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IERC20(USDT).transferFrom(msg.sender,address(this),usdtAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IERC20(USDT).approve(address(uniswapRouter),usdtAmount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transfer(msg.sender,address(this),tokenAmount)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _approve(address(this),address(uniswapRouter),tokenAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: uniswapRouter.addLiquidity(address(this),USDT,tokenAmount,usdtAmount,0,0,owner,block.timestamp)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: increaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,allowances[msg.sender][spender] + addedValue)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: decreaseAllowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: currentAllowance = allowances[msg.sender][spender]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentAllowance >= subtractedValue,Decreased allowance below zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _approve(msg.sender,spender,currentAllowance - subtractedValue)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: name = USIT Coin

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: symbol = USIT

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: decimals = 18

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: marketingFee = 20

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: website = https://usitcoin.com

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: telegram = https://t.me/usitcoin

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: twitter = https://twitter.com/usitcoin

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: VERSION = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PAUSED_FLAG = 1

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENTERED_FLAG = 2

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: FEE_DENOMINATOR = 1000

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6


