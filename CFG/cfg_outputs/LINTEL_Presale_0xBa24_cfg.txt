Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ENTERED = 2

Edges:
  0 -> 1


Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Address
==================================================

Function: isContract
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: account.code.length > 0

Edges:
  0 -> 1

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Address: unable to send value, recipient may have reverted)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: functionCallWithValue(target,data,0,errorMessage)

Edges:
  0 -> 1

Function: functionCallWithValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.call{value: value}(data)

  ID: 5
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: functionStaticCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.staticcall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: functionDelegateCall
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = target.delegatecall(data)

  ID: 4
  Type: NodeType.RETURN
  Expression: verifyCallResultFromTarget(target,success,returndata,errorMessage)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: verifyCallResultFromTarget
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.IF
  Expression: returndata.length == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isContract(target),Address: call to non-contract)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.RETURN
  Expression: returndata

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  6 -> 7

Function: verifyCallResult
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: success

  ID: 2
  Type: NodeType.RETURN
  Expression: returndata

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _revert(returndata,errorMessage)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: _revert
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: returndata_size__revert_asm_0 = mload(uint256)(returndata)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: revert(uint256,uint256)(32 + returndata,returndata_size__revert_asm_0)

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert(string)(errorMessage)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 8
  7 -> 8


Contract: IERC20
==================================================


Contract: IERC20Metadata
==================================================


Contract: Aggregator
==================================================


Contract: LINTEL_Presale
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: aggregatorInterface = Aggregator(_oracle)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SaleToken = _SaleToken

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: MinTokenTobuy = _MinTokenTobuy

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: USDTInterface = IERC20Metadata(_usdt)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: USDCInterface = IERC20Metadata(_usdc)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ETH_MULTIPLIER = (10 ** 18)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: USDT_MULTIPLIER = (10 ** 6)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = msg.sender

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _status = _ENTERED

Edges:
  0 -> 1
  1 -> 2

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = _NOT_ENTERED

Edges:
  0 -> 1

Function: createPresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_price > 0,Zero price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokensToSell > 0,Zero tokens to sell)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: presaleId ++

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: presale[presaleId] = PresaleData(0,0,_price,_nextStagePrice,0,_tokensToSell,_UsdtHardcap,0,false,false)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: PresaleCreated(presaleId,_tokensToSell,0,0)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: setPresaleStage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[_id].tokensToSell > 0,Presale don't exist)

  ID: 2
  Type: NodeType.IF
  Expression: currentSale != 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].endTime = block.timestamp

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].Active = false

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: presale[_id].startTime = block.timestamp

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: presale[_id].Active = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: currentSale = _id

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: setPresaleVesting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < _id.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: vesting[_id[i]] = VestingData(vestingStartTime[i],_initialClaimPercent[i],_vestingTime[i],_vestingPercentage[i],(1000 - _initialClaimPercent[i]) / _vestingPercentage[i])

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: updatePresaleVesting
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: vesting[_id].vestingStartTime = _vestingStartTime

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: vesting[_id].initialClaimPercent = _initialClaimPercent

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: vesting[_id].vestingTime = _vestingTime

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: vesting[_id].vestingPercentage = _vestingPercentage

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: vesting[_id].totalClaimCycles = (100 - _initialClaimPercent) / _vestingPercentage

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: enableClaim
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: presale[_id].isEnableClaim = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: updatePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_price > 0,Zero price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_tokensToSell > 0,Zero tokens to sell)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_Hardcap > 0,Zero harcap)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: presale[_id].price = _price

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: presale[_id].nextStagePrice = _nextStagePrice

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: presale[_id].tokensToSell = _tokensToSell

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: presale[_id].UsdtHardcap = _Hardcap

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: presale[_id].isEnableClaim = isclaimAble

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: changeFundWallet
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_wallet != address(0),Invalid parameters)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: fundReceiver = _wallet

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeUSDTToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newAddress != address(0),Zero token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDTInterface = IERC20Metadata(_newAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: changeUSDCToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_newAddress != address(0),Zero token address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: USDCInterface = IERC20Metadata(_newAddress)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: pausePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[_id],Already paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: paused[_id] = true

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PresalePaused(_id,block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: unPausePresale
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paused[_id],Not paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: paused[_id] = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: PresaleUnpaused(_id,block.timestamp)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(_id)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 5
  5 -> 1

Function: getLatestPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (None,price,None,None,None) = aggregatorInterface.latestRoundData()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: price = (price * (10 ** 10))

  ID: 4
  Type: NodeType.RETURN
  Expression: uint256(price)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: ExcludeAccouctFromMinBuy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isExcludeMinToken[_user] = _status

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: buyWithUSDT
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[currentSale],Presale paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].Active == true,Presale is not active yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isBlackList[msg.sender],Account is blackListed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].amountRaised + usdAmount <= presale[currentSale].UsdtHardcap,Amount should be less than leftHardcap)

  ID: 5
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: tokens = usdtToTokens(currentSale,usdAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].Sold += tokens

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].amountRaised += usdAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: overalllRaised += usdAmount

  ID: 13
  Type: NodeType.IF
  Expression: isExcludeMinToken[msg.sender] == false

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens >= MinTokenTobuy,Less than min amount)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _ref != address(0) && _ref != msg.sender

  ID: 17
  Type: NodeType.IF
  Expression: ! isExist[_ref]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: isExist[_ref] = true

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: refAmounts[_ref] == 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: refCount ++

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: refAddresses.push(_ref)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: refAmount = tokens * referFee / 100

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: refAmounts[_ref] += refAmount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: totalRefAmounts += refAmount

  ID: 27
  Type: NodeType.IF
  Expression: userClaimData[_ref][currentSale].claimAbleAmount > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale].claimAbleAmount += refAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale] = UserData(0,0,refAmount,0,0,0,0)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.IF
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount > 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].investedAmount += usdAmount

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale] = UserData(usdAmount,0,tokens,0,0,0,0)

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.VARIABLE
  Expression: ourAllowance = USDTInterface.allowance(_msgSender(),address(this))

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdAmount <= ourAllowance,Make sure to add enough allowance)

  ID: 39
  Type: NodeType.VARIABLE
  Expression: 

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(USDTInterface).call(abi.encodeWithSignature(transferFrom(address,address,uint256),_msgSender(),fundReceiver,usdAmount))

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Token payment failed)

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: TokensBought(_msgSender(),currentSale,address(USDTInterface),tokens,usdAmount,block.timestamp)

  ID: 43
  Type: NodeType.RETURN
  Expression: true

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(currentSale)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,usdtToTokens(currentSale,usdAmount))

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,usdtToTokens(currentSale,usdAmount))

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 44
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 31
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 35
  33 -> 34
  34 -> 36
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 1

Function: changeClaimAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 1

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < presaleId

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isExist[_oldAddress],User not a participant)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_newWallet][i].claimAbleAmount = userClaimData[_oldAddress][i].claimAbleAmount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_oldAddress][i].claimAbleAmount = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: isExist[_oldAddress] = false

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: isExist[_newWallet] = true

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 11
  1 -> 4
  2 -> 9
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 4
  9 -> 10
  11 -> 3

Function: blackListUser
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: isBlackList[_user] = _value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: buyWithUSDC
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[currentSale],Presale paused)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].Active == true,Presale is not active yet)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].amountRaised + usdcAmount <= presale[currentSale].UsdtHardcap,Amount should be less than leftHardcap)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isBlackList[msg.sender],Account is blackListed)

  ID: 5
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: tokens = usdtToTokens(currentSale,usdcAmount)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].Sold += tokens

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].amountRaised += usdcAmount

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: overalllRaised += usdcAmount

  ID: 13
  Type: NodeType.IF
  Expression: isExcludeMinToken[msg.sender] == false

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens >= MinTokenTobuy,Less than min amount)

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: _ref != address(0) && _ref != msg.sender

  ID: 17
  Type: NodeType.IF
  Expression: ! isExist[_ref]

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: isExist[_ref] = true

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.IF
  Expression: refAmounts[_ref] == 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: refCount ++

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: refAddresses.push(_ref)

  ID: 23
  Type: NodeType.ENDIF
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: refAmount = tokens * referFee / 100

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: refAmounts[_ref] += refAmount

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: totalRefAmounts += refAmount

  ID: 27
  Type: NodeType.IF
  Expression: userClaimData[_ref][currentSale].claimAbleAmount > 0

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale].claimAbleAmount += refAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale] = UserData(0,0,refAmount,0,0,0,0)

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.IF
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount > 0

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].investedAmount += usdcAmount

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale] = UserData(usdcAmount,0,tokens,0,0,0,0)

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isExist[_msgSender()],User not a participant)

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.VARIABLE
  Expression: ourAllowance = USDCInterface.allowance(_msgSender(),address(this))

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(usdcAmount <= ourAllowance,Make sure to add enough allowance)

  ID: 40
  Type: NodeType.VARIABLE
  Expression: 

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: (success,None) = address(USDCInterface).call(abi.encodeWithSignature(transferFrom(address,address,uint256),_msgSender(),fundReceiver,usdcAmount))

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,Token payment failed)

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: TokensBought(_msgSender(),currentSale,address(USDCInterface),tokens,usdcAmount,block.timestamp)

  ID: 44
  Type: NodeType.RETURN
  Expression: true

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(currentSale)

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,usdtToTokens(currentSale,usdcAmount))

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,usdtToTokens(currentSale,usdcAmount))

  ID: 48
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 45
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 8
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 31
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 23
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  27 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  32 -> 35
  33 -> 34
  34 -> 37
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  43 -> 44
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 1

Function: buyWithEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].amountRaised + usdAmount <= presale[currentSale].UsdtHardcap,Amount should be less than leftHardcap)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isBlackList[msg.sender],Account is blackListed)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! paused[currentSale],Presale paused)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(presale[currentSale].Active == true,Presale is not active yet)

  ID: 6
  Type: NodeType.IF
  Expression: ! isExist[msg.sender]

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: isExist[msg.sender] = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: uniqueBuyers ++

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.VARIABLE
  Expression: tokens = usdtToTokens(currentSale,usdAmount)

  ID: 11
  Type: NodeType.IF
  Expression: isExcludeMinToken[msg.sender] == false

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(tokens >= MinTokenTobuy,Insufficient amount!)

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].Sold += tokens

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: presale[currentSale].amountRaised += usdAmount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: overalllRaised += usdAmount

  ID: 17
  Type: NodeType.IF
  Expression: _ref != address(0) && _ref != msg.sender

  ID: 18
  Type: NodeType.IF
  Expression: ! isExist[_ref]

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: isExist[_ref] = true

  ID: 20
  Type: NodeType.ENDIF
  Expression: 

  ID: 21
  Type: NodeType.IF
  Expression: refAmounts[_ref] == 0

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: refCount ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: refAddresses.push(_ref)

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.VARIABLE
  Expression: refAmount = tokens * referFee / 100

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: refAmounts[_ref] += refAmount

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: totalRefAmounts += refAmount

  ID: 28
  Type: NodeType.IF
  Expression: userClaimData[_ref][currentSale].claimAbleAmount > 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale].claimAbleAmount += refAmount

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_ref][currentSale] = UserData(0,0,refAmount,0,0,0,0)

  ID: 31
  Type: NodeType.ENDIF
  Expression: 

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.IF
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount > 0

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale].investedAmount += usdAmount

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: userClaimData[_msgSender()][currentSale] = UserData(usdAmount,0,tokens,0,0,0,0)

  ID: 37
  Type: NodeType.ENDIF
  Expression: 

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: sendValue(address(fundReceiver),msg.value)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: TokensBought(_msgSender(),currentSale,address(0),tokens,msg.value,block.timestamp)

  ID: 40
  Type: NodeType.RETURN
  Expression: true

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: checkPresaleId(currentSale)

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,ethToTokens(currentSale,msg.value))

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: checkSaleState(currentSale,ethToTokens(currentSale,msg.value))

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 41
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  17 -> 32
  18 -> 19
  18 -> 20
  19 -> 20
  20 -> 21
  21 -> 22
  21 -> 24
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 31
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  33 -> 36
  34 -> 35
  35 -> 37
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 1

Function: ethBuyHelper
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdPrice = (amount * presale[_id].price)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ethAmount = (usdPrice * ETH_MULTIPLIER) / (getLatestPrice() * 10 ** IERC20Metadata(SaleToken).decimals())

  ID: 3
  Type: NodeType.RETURN
  Expression: ethAmount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: usdtBuyHelper
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdPrice = (amount * presale[_id].price) / 10 ** IERC20Metadata(SaleToken).decimals()

  ID: 2
  Type: NodeType.RETURN
  Expression: usdPrice

Edges:
  0 -> 1
  1 -> 2

Function: ethToTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: usdAmount = (amount * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _tokens = usdtToTokens(_id,usdAmount)

  ID: 3
  Type: NodeType.RETURN
  Expression: _tokens

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: usdtToTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER

  ID: 2
  Type: NodeType.RETURN
  Expression: _tokens

Edges:
  0 -> 1
  1 -> 2

Function: sendValue
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance >= amount,Low balance)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,None) = recipient.call{value: amount}()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH Payment failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: claimableAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: _user = userClaimData[user][_id]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_user.claimAbleAmount > 0,Nothing to claim)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: amount = _user.claimAbleAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Already claimed)

  ID: 5
  Type: NodeType.RETURN
  Expression: amount

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: claimAmount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isExist[_msgSender()],User not a participant)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: amount = claimableAmount(msg.sender,_id)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,No claimable amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isBlackList[msg.sender],Account is blackListed)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(SaleToken != address(0),Presale token address not set)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= IERC20(SaleToken).balanceOf(address(this)),Not enough tokens in the contract)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((presale[_id].isEnableClaim == true),Claim is not enable)

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: userClaimData[msg.sender][_id].claimCount == 0

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: transferAmount = (amount * (vesting[_id].initialClaimPercent)) / 1000

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].activePercentAmount = (amount * vesting[_id].vestingPercentage) / 1000

  ID: 12
  Type: NodeType.VARIABLE
  Expression: status = IERC20(SaleToken).transfer(msg.sender,transferAmount)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(status,Token transfer failed)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimedAmount += transferAmount

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimCount ++

  ID: 17
  Type: NodeType.IF
  Expression: userClaimData[msg.sender][_id].claimAbleAmount > userClaimData[msg.sender][_id].activePercentAmount

  ID: 18
  Type: NodeType.VARIABLE
  Expression: duration = block.timestamp - vesting[_id].vestingStartTime

  ID: 19
  Type: NodeType.VARIABLE
  Expression: multiplier = duration / vesting[_id].vestingTime

  ID: 20
  Type: NodeType.IF
  Expression: multiplier > vesting[_id].totalClaimCycles

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: multiplier = vesting[_id].totalClaimCycles

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.VARIABLE
  Expression: _amount = multiplier * userClaimData[msg.sender][_id].activePercentAmount

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: transferAmount = _amount - userClaimData[msg.sender][_id].claimedVestingAmount

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferAmount > 0,Please wait till next claim)

  ID: 26
  Type: NodeType.VARIABLE
  Expression: status_scope_0 = IERC20(SaleToken).transfer(msg.sender,transferAmount)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(status_scope_0,Token transfer failed)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimedVestingAmount += transferAmount

  ID: 30
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimedAmount += transferAmount

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimCount ++

  ID: 32
  Type: NodeType.VARIABLE
  Expression: duration_scope_1 = block.timestamp - vesting[_id].vestingStartTime

  ID: 33
  Type: NodeType.VARIABLE
  Expression: multiplier_scope_2 = duration_scope_1 / vesting[_id].vestingTime

  ID: 34
  Type: NodeType.IF
  Expression: multiplier_scope_2 > vesting[_id].totalClaimCycles + 1

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: transferAmount = userClaimData[msg.sender][_id].claimAbleAmount

  ID: 36
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(transferAmount > 0,Please wait till next claim)

  ID: 37
  Type: NodeType.VARIABLE
  Expression: status_scope_3 = IERC20(SaleToken).transfer(msg.sender,transferAmount)

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(status_scope_3,Token transfer failed)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount

  ID: 40
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimedAmount += transferAmount

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimedVestingAmount += transferAmount

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: userClaimData[msg.sender][_id].claimCount ++

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: revert(string)(Wait for next claiim)

  ID: 44
  Type: NodeType.ENDIF
  Expression: 

  ID: 45
  Type: NodeType.ENDIF
  Expression: 

  ID: 46
  Type: NodeType.ENDIF
  Expression: 

  ID: 47
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 17
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 46
  17 -> 18
  17 -> 32
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 45
  32 -> 33
  33 -> 34
  34 -> 35
  34 -> 43
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 44
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47

Function: WithdrawTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: IERC20(_token).transfer(fundReceiver,amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: WithdrawContractFunds
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: sendValue(address(fundReceiver),amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: ChangeTokenToSell
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: SaleToken = _token

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: EditMinTokenToBuy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: MinTokenTobuy = _amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: ChangeOracleAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: aggregatorInterface = Aggregator(_oracle)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: blockStamp
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: block.timestamp

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: referFee = 5

Edges:


