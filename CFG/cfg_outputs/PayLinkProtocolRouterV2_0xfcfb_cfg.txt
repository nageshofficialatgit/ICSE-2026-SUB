Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: initialOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(initialOwner)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: ReentrancyGuard
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: NOT_ENTERED = 1

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ENTERED = 2

Edges:
  0 -> 1


Contract: IERC20
==================================================


Contract: PayLinkProtocolRouterV2
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: providerFeeRecipientAddress = address(0xA4A52B2BF9AB8a5e20650b0A7326DC4E2A4c3Fa1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ecosystemTokenAddress = DEAD_ADDRESS

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: providerFeePercentage = 10

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: ecosystemTokenBeneficiaryFeePercentage = 5

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Ownable(msg.sender)

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: _checkOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: owner() != _msgSender()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableUnauthorizedAccount(address)(_msgSender())

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: newOwner == address(0)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert OwnableInvalidOwner(address)(address(0))

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  5 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: _contextSuffixLength
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 1

Function: _nonReentrantBefore
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _status == ENTERED

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert ReentrancyGuardReentrantCall()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _status = ENTERED

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: _nonReentrantAfter
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _status = NOT_ENTERED

Edges:
  0 -> 1

Function: _reentrancyGuardEntered
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _status == ENTERED

Edges:
  0 -> 1

Function: purchase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: data.purchaseTokenAddress == WETH

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: purchaseWithETH(data.appId,msg.value,data.clientWalletAddress,msg.sender)

  ID: 3
  Type: NodeType.IF
  Expression: data.purchaseType == PURCHASE_TYPE_HOLD

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: verifyHolding(data.purchaseAmount,data.purchaseTokenAddress)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: purchaseWithTokens(data.appId,data.purchaseAmount,data.purchaseTokenAddress,data.clientWalletAddress,data.burnPercentage,msg.sender)

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: Purchase(data.appId,data.userId,msg.sender,data.purchaseType,data.purchaseTokenAddress,data.purchaseAmount,data.expirationTimestamp)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 9
  1 -> 2
  1 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: verifyHolding
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: paymentToken = IERC20(purchaseTokenAddress)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentTokenBalance = paymentToken.balanceOf(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(currentTokenBalance >= purchaseAmount,Minimum token balance not reached)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: purchaseWithTokens
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: paymentToken = IERC20(purchaseTokenAddress)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.balanceOf(msg.sender) >= purchaseAmount,Insufficient Token Balance)

  ID: 3
  Type: NodeType.VARIABLE
  Expression: allowance = paymentToken.allowance(msg.sender,address(this))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(allowance >= purchaseAmount,Insufficient allowance)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.transferFrom(msg.sender,address(this),purchaseAmount),Token transfer to contract failed)

  ID: 6
  Type: NodeType.VARIABLE
  Expression: currentProviderFeePercentage = providerFeePercentage

  ID: 7
  Type: NodeType.VARIABLE
  Expression: plpFee = 0

  ID: 8
  Type: NodeType.VARIABLE
  Expression: purchaseMakerBenefit = 0

  ID: 9
  Type: NodeType.IF
  Expression: appIdFeeWhitelist[appId] == false

  ID: 10
  Type: NodeType.IF
  Expression: isBeneficiaryStatus(purchaseMaker)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: currentProviderFeePercentage -= ecosystemTokenBeneficiaryFeePercentage

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: purchaseMakerBenefit = (purchaseAmount * ecosystemTokenBeneficiaryFeePercentage) / 100

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.transfer(purchaseMaker,purchaseMakerBenefit),PurchaseMaker Benefit transfer failed)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: plpFee = (purchaseAmount * currentProviderFeePercentage) / 100

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.transfer(providerFeeRecipientAddress,plpFee),PLP fee transfer failed)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: remainingTokens = purchaseAmount - purchaseMakerBenefit - plpFee

  ID: 19
  Type: NodeType.VARIABLE
  Expression: burnAmount = (remainingTokens * burnPercentage) / 100

  ID: 20
  Type: NodeType.IF
  Expression: burnAmount != 0

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.transfer(DEAD_ADDRESS,burnAmount),Token burn failed)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: remainingTokens -= burnAmount

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(paymentToken.transfer(clientWalletAddress,remainingTokens),Token transfer to target wallet failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 17
  10 -> 11
  10 -> 14
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  20 -> 22
  21 -> 22
  22 -> 23
  23 -> 24

Function: purchaseWithETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.value == purchaseAmount,Incorrect ETH Amount)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: currentProviderFeePercentage = providerFeePercentage

  ID: 3
  Type: NodeType.VARIABLE
  Expression: plpFee = 0

  ID: 4
  Type: NodeType.VARIABLE
  Expression: purchaseMakerBenefit = 0

  ID: 5
  Type: NodeType.IF
  Expression: appIdFeeWhitelist[appId] == false

  ID: 6
  Type: NodeType.IF
  Expression: isBeneficiaryStatus(purchaseMaker)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: currentProviderFeePercentage -= ecosystemTokenBeneficiaryFeePercentage

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: purchaseMakerBenefit = (purchaseAmount * ecosystemTokenBeneficiaryFeePercentage) / 100

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (purchaseMakerBenefitTransfer,None) = purchaseMaker.call{value: purchaseMakerBenefit}()

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(purchaseMakerBenefitTransfer,PurchaseMaker Benefit transfer failed)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: plpFee = (purchaseAmount * currentProviderFeePercentage) / 100

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: (feeTransfer,None) = providerFeeRecipientAddress.call{value: plpFee}()

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(feeTransfer,PLP fee transfer failed)

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: remainingETH = purchaseAmount - plpFee - purchaseMakerBenefit

  ID: 19
  Type: NodeType.VARIABLE
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: (ethTransfer,None) = clientWalletAddress.call{value: remainingETH}()

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(ethTransfer,ETH transfer to target wallet failed)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 17
  6 -> 7
  6 -> 12
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21

Function: isBeneficiaryStatus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ecosystemTokenAddress == DEAD_ADDRESS

  ID: 2
  Type: NodeType.RETURN
  Expression: false

  ID: 3
  Type: NodeType.RETURN
  Expression: IERC20(ecosystemTokenAddress).balanceOf(purchaseMaker) >= ecosystemTokenMinimumBeneficiaryBalance

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: setProviderFeeRecipientAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: providerFeeRecipientAddress = newProviderFeeRecipientAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setProviderFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newProviderFeePercentage <= 100,Invalid percentage values)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: providerFeePercentage = newProviderFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: addAppIdToFeeWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: appIdFeeWhitelist[appId] = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: removeAppIdFromFeeWhitelist
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: appIdFeeWhitelist[appId] = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setEcosystemTokenAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ecosystemTokenAddress = newEcosystemTokenAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setEcosystemTokenMinimumBeneficiaryBalance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ecosystemTokenMinimumBeneficiaryBalance = newEcosystemTokenMinimumBeneficiaryBalance

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setEcosystemTokenBeneficiaryFeePercentage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newEcosystemTokenBeneficiaryFeePercentage <= providerFeePercentage,Beneficiary Fee must be smaller than Provider Fee)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ecosystemTokenBeneficiaryFeePercentage = newEcosystemTokenBeneficiaryFeePercentage

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEAD_ADDRESS = address(0x000000000000000000000000000000000000dEaD)

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: PURCHASE_TYPE_HOLD = 0

Edges:
  0 -> 1
  1 -> 2


