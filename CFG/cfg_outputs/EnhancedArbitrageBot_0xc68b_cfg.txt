Contract: IERC20
==================================================


Contract: IUniswapV2Router
==================================================


Contract: ICurvePool
==================================================


Contract: IBalancerVault
==================================================


Contract: EnhancedArbitrageBot
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _maxDailyLoss == 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: revert InvalidAmount()()

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: maxDailyLoss = _maxDailyLoss

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: lastResetTime = block.timestamp

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: executeArbitrage
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isRunning,Bot is not running)

  ID: 2
  Type: NodeType.IF
  Expression: circuitBroken

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert CircuitBreakerActive()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: risk = riskParams[token0]

  ID: 6
  Type: NodeType.IF
  Expression: amount > risk.maxTradeSize

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: revert ExceedsTradeSize()()

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.IF
  Expression: block.timestamp < lastTradeTimestamp[token0] + risk.cooldownPeriod

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: revert CooldownNotMet()()

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: gasStart = gasleft()()

  ID: 13
  Type: NodeType.VARIABLE
  Expression: balanceBefore = IERC20(token0).balanceOf(address(this))

  ID: 14
  Type: NodeType.VARIABLE
  Expression: midAmount = _executeProtocolTrade(sourceProtocol,token0,token1,amount)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: finalAmount = _executeProtocolTrade(targetProtocol,token1,token0,midAmount)

  ID: 17
  Type: NodeType.IF
  Expression: profit < risk.minProfit

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: revert InsufficientProfit()()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: _updateAnalytics(token0,amount,profit)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: TradeExecuted(token0,token1,profit,gasStart - gasleft()())

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 23
  Type: NodeType.IF
  Expression: finalAmount > balanceBefore

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: profit = finalAmount - balanceBefore

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: profit = 0

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 22
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  9 -> 11
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 23
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 1
  23 -> 24
  23 -> 25
  24 -> 26
  25 -> 26
  26 -> 17

Function: _executeProtocolTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: config = protocols[protocol]

  ID: 2
  Type: NodeType.IF
  Expression: ! config.active

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert InvalidProtocol()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: IERC20(tokenIn).approve(config.router,amount)

  ID: 6
  Type: NodeType.IF
  Expression: config.protocolType.isUniswap

  ID: 7
  Type: NodeType.RETURN
  Expression: _executeUniswapTrade(config.router,tokenIn,tokenOut,amount)

  ID: 8
  Type: NodeType.IF
  Expression: config.protocolType.isCurve

  ID: 9
  Type: NodeType.RETURN
  Expression: _executeCurveTrade(config.router,tokenIn,tokenOut,amount)

  ID: 10
  Type: NodeType.IF
  Expression: config.protocolType.isBalancer

  ID: 11
  Type: NodeType.RETURN
  Expression: _executeBalancerTrade(config.router,config.poolId,tokenIn,tokenOut,amount)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: revert InvalidProtocol()()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  8 -> 9
  8 -> 10
  10 -> 11
  10 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: _executeUniswapTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = tokenIn

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = tokenOut

  ID: 4
  Type: NodeType.VARIABLE
  Expression: amounts = IUniswapV2Router(router).swapExactTokensForTokens(amount,0,path,address(this),block.timestamp + DEADLINE_EXTENSION)

  ID: 5
  Type: NodeType.RETURN
  Expression: amounts[1]

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: _executeCurveTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: ICurvePool(pool).exchange(0,1,amount,0)

Edges:
  0 -> 1

Function: _executeBalancerTrade
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: IBalancerVault(vault).swap(poolId,1,tokenIn,tokenOut,amount,)

Edges:
  0 -> 1

Function: _updateAnalytics
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: stats = analytics[token]

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: stats.totalVolume += uint128(amount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: stats.profitLoss += uint96(profit)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stats.tradeCount += 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: lastTradeTimestamp[token] = block.timestamp

  ID: 6
  Type: NodeType.IF
  Expression: block.timestamp - lastResetTime >= 86400

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: dailyLoss = 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: lastResetTime = block.timestamp

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: profit == 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: dailyLoss += amount

  ID: 12
  Type: NodeType.IF
  Expression: dailyLoss > maxDailyLoss

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: circuitBroken = true

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 9
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 15
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  14 -> 15

Function: addProtocol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: protocols[protocolAddress] = ProtocolConfig({protocolType:ProtocolType(isUniswap,isCurve,isBalancer),router:protocolAddress,active:true,maxSlippage:maxSlippage,poolId:poolId})

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setRiskParameters
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: riskParams[token] = RiskParams({maxTradeSize:maxTradeSize,minProfit:minProfit,maxSlippage:maxSlippage,cooldownPeriod:cooldownPeriod})

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: withdrawToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(token).balanceOf(address(this))

  ID: 2
  Type: NodeType.IF
  Expression: balance == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert NoBalance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: withdrawAmount > balance

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = balance

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: success = IERC20(token).transfer(to,withdrawAmount)

  ID: 10
  Type: NodeType.IF
  Expression: ! success

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: revert TransferFailed()()

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: TokenWithdrawn(token,withdrawAmount,to)

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 15
  Type: NodeType.IF
  Expression: amount == 0

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = balance

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = amount

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 14
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 15
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  14 -> 1
  15 -> 16
  15 -> 17
  16 -> 18
  17 -> 18
  18 -> 6

Function: withdrawETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: balance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: balance == 0

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: revert NoBalance()()

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.IF
  Expression: withdrawAmount > balance

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = balance

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: (success,None) = to.call{value: withdrawAmount}()

  ID: 11
  Type: NodeType.IF
  Expression: ! success

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: revert TransferFailed()()

  ID: 13
  Type: NodeType.ENDIF
  Expression: 

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: EthWithdrawn(withdrawAmount,to)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

  ID: 16
  Type: NodeType.IF
  Expression: amount == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = balance

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: withdrawAmount = amount

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 15
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 16
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  11 -> 13
  12 -> 13
  13 -> 14
  15 -> 1
  16 -> 17
  16 -> 18
  17 -> 19
  18 -> 19
  19 -> 6

Function: emergencyWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 2
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (success,None) = owner.call{value: ethBalance}()

  ID: 5
  Type: NodeType.IF
  Expression: ! success

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: revert TransferFailed()()

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: EmergencyWithdrawal(address(0),ethBalance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 11
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 13
  Type: NodeType.IFLOOP
  Expression: i < tokens.length

  ID: 14
  Type: NodeType.VARIABLE
  Expression: balance = IERC20(tokens[i]).balanceOf(address(this))

  ID: 15
  Type: NodeType.IF
  Expression: balance > 0

  ID: 16
  Type: NodeType.VARIABLE
  Expression: success_scope_0 = IERC20(tokens[i]).transfer(owner,balance)

  ID: 17
  Type: NodeType.IF
  Expression: ! success_scope_0

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: revert TransferFailed()()

  ID: 19
  Type: NodeType.ENDIF
  Expression: 

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: EmergencyWithdrawal(tokens[i],balance)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 23
  1 -> 2
  2 -> 3
  2 -> 9
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 12
  10 -> 13
  12 -> 10
  13 -> 14
  13 -> 11
  14 -> 15
  15 -> 16
  15 -> 21
  16 -> 17
  17 -> 18
  17 -> 19
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 13
  23 -> 1

Function: startBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isRunning,Bot is already running)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _paused,Bot is paused)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! circuitBroken,Circuit breaker is active)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: isRunning = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: startTime = block.timestamp

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: totalRuns += 1

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: BotStarted(block.timestamp,msg.sender)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: BotStatus(isRunning,totalRuns,0)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: stopBot
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isRunning,Bot is not running)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isRunning = false

  ID: 3
  Type: NodeType.VARIABLE
  Expression: runningTime = block.timestamp - startTime

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BotStopped(block.timestamp,msg.sender,reason)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BotStatus(isRunning,totalRuns,runningTime)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: emergencyStop
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isRunning

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: isRunning = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _paused = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: circuitBroken = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: BotStopped(block.timestamp,msg.sender,Emergency stop triggered)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: BotStatus(isRunning,totalRuns,block.timestamp - startTime)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 8
  1 -> 2
  1 -> 7
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: getBotStats
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.RETURN
  Expression: (isRunning,_paused,circuitBroken,totalRuns,_currentRunTime,dailyLoss)

  ID: 3
  Type: NodeType.IF
  Expression: isRunning

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _currentRunTime = block.timestamp - startTime

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _currentRunTime = 0

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (_isRunning,_isPaused,_isCircuitBroken,_totalRuns,_currentRunTime,_dailyLoss)

Edges:
  0 -> 3
  3 -> 4
  3 -> 5
  4 -> 6
  5 -> 6
  6 -> 2

Function: togglePause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _paused = ! _paused

  ID: 2
  Type: NodeType.IF
  Expression: _paused && isRunning

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isRunning = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BotStopped(block.timestamp,msg.sender,Paused by owner)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  6 -> 1

Function: toggleCircuitBreaker
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: circuitBroken = ! circuitBroken

  ID: 2
  Type: NodeType.IF
  Expression: circuitBroken && isRunning

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isRunning = false

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: BotStopped(block.timestamp,msg.sender,Circuit breaker triggered)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  2 -> 5
  3 -> 4
  4 -> 5
  6 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: DEADLINE_EXTENSION = 300

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: BASIS_POINTS = 10000

Edges:
  0 -> 1


