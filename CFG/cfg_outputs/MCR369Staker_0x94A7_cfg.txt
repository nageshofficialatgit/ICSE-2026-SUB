Contract: SafeTransferLib
==================================================

Function: safeTransferETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: success = call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),to,amount,0,0,0,0)

  ID: 4
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,ETH_TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: freeMemoryPointer_safeTransferFrom_asm_0 = mload(uint256)(0x40)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransferFrom_asm_0,0x23b872dd00000000000000000000000000000000000000000000000000000000)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransferFrom_asm_0 + 4,from & 0xffffffffffffffffffffffffffffffffffffffff)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransferFrom_asm_0 + 36,to & 0xffffffffffffffffffffffffffffffffffffffff)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransferFrom_asm_0 + 68,amount)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: success = mload(uint256)(0) == 1 & returndatasize()() > 31 | ! returndatasize()() & call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,freeMemoryPointer_safeTransferFrom_asm_0,100,0,32)

  ID: 10
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TRANSFER_FROM_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: freeMemoryPointer_safeTransfer_asm_0 = mload(uint256)(0x40)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransfer_asm_0,0xa9059cbb00000000000000000000000000000000000000000000000000000000)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransfer_asm_0 + 4,to & 0xffffffffffffffffffffffffffffffffffffffff)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeTransfer_asm_0 + 36,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: success = mload(uint256)(0) == 1 & returndatasize()() > 31 | ! returndatasize()() & call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,freeMemoryPointer_safeTransfer_asm_0,68,0,32)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: freeMemoryPointer_safeApprove_asm_0 = mload(uint256)(0x40)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeApprove_asm_0,0x095ea7b300000000000000000000000000000000000000000000000000000000)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeApprove_asm_0 + 4,to & 0xffffffffffffffffffffffffffffffffffffffff)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: mstore(uint256,uint256)(freeMemoryPointer_safeApprove_asm_0 + 36,amount)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: success = mload(uint256)(0) == 1 & returndatasize()() > 31 | ! returndatasize()() & call(uint256,uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),token,0,freeMemoryPointer_safeApprove_asm_0,68,0,32)

  ID: 9
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,APPROVE_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10


Contract: ERC20
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: name = _name

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: symbol = _symbol

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: decimals = _decimals

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: INITIAL_CHAIN_ID = block.chainid

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator()

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: allowance[msg.sender][spender] = amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: Approval(msg.sender,spender,amount)

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balanceOf[msg.sender] -= amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(msg.sender,to,amount)

  ID: 4
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowed = allowance[from][msg.sender]

  ID: 2
  Type: NodeType.IF
  Expression: allowed != type()(uint256).max

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: allowance[from][msg.sender] = allowed - amount

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= amount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,to,amount)

  ID: 8
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 4
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: permit
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(deadline >= block.timestamp,PERMIT_DEADLINE_EXPIRED)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: recoveredAddress = ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(,DOMAIN_SEPARATOR(),keccak256(bytes)(abi.encode(keccak256(bytes)(Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)),owner,spender,value,nonces[owner] ++,deadline)))),v,r,s)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recoveredAddress != address(0) && recoveredAddress == owner,INVALID_SIGNER)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: allowance[recoveredAddress][spender] = value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: DOMAIN_SEPARATOR
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: block.chainid == INITIAL_CHAIN_ID

  ID: 3
  Type: NodeType.RETURN
  Expression: INITIAL_DOMAIN_SEPARATOR

  ID: 4
  Type: NodeType.RETURN
  Expression: computeDomainSeparator()

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: computeDomainSeparator
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encode(keccak256(bytes)(EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)),keccak256(bytes)(bytes(name)),keccak256(bytes)(1),block.chainid,address(this)))

Edges:
  0 -> 1

Function: _mint
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: totalSupply += amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: balanceOf[to] += amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),to,amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _burn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: balanceOf[from] -= amount

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: totalSupply -= amount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: Transfer(from,address(0),amount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: Owned
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(address(0),_owner)

Edges:
  0 -> 1
  1 -> 2

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferInitiated(msg.sender,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: delete pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1


Contract: ReentrancyGuard
==================================================

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: locked = 1

Edges:


Contract: MCR369Staker
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: mcr369 = _mcr369

Edges:
  0 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: pendingOwner = newOwner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferInitiated(msg.sender,newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: acceptOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(owner,msg.sender)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owner = pendingOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: delete pendingOwner

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyPendingOwner()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: addRewardToken
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! isRewardToken[rewardAsset],INVALID_REWARD_ASSET)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: rewardTokens.push(rewardAsset)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: isRewardToken[rewardAsset] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: RewardTokenAdded(rewardAsset)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 5
  1 -> 2
  2 -> 3
  3 -> 4
  5 -> 1

Function: stake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(value != 0,CAN'T_STAKE_ZERO)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeTransferLib.safeTransferFrom(ERC20(mcr369),msg.sender,address(this),value)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _updateAllRewards(msg.sender)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalMCR369Staked += value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: stakeBalance[msg.sender] += value

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: stakeBlock[msg.sender] = block.number

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: Stake(msg.sender,value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 1

Function: unstake
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(block.number > stakeBlock[msg.sender] + 10,WAIT_10_BLOCKS)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _updateAllRewards(msg.sender)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: totalMCR369Staked -= value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: stakeBalance[msg.sender] -= value

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SafeTransferLib.safeTransfer(ERC20(mcr369),msg.sender,value)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Unstake(msg.sender,value)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 1

Function: distributeReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(isRewardToken[rewardAsset],INVALID_REWARD_ASSET)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: SafeTransferLib.safeTransferFrom(ERC20(rewardAsset),msg.sender,address(this),rewardAmount)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _rewardDistributed[rewardAsset] += rewardAmount

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _rewardIndex[rewardAsset] += (rewardAmount * _BASE) / totalMCR369Staked

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: RewardDistribution(rewardAsset,rewardAmount)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: earned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _earned[staker][rewardAsset]

Edges:
  0 -> 1

Function: _calculateRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (stakeBalance[staker] * (_rewardIndex[rewardAsset] - _rewardIndexOf[staker][rewardAsset])) / _BASE

Edges:
  0 -> 1

Function: claimable
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _claimable[staker][rewardAsset] + _calculateRewards(staker,rewardAsset)

Edges:
  0 -> 1

Function: _updateRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _claimable[staker][rewardAsset] += _calculateRewards(staker,rewardAsset)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _rewardIndexOf[staker][rewardAsset] = _rewardIndex[rewardAsset]

Edges:
  0 -> 1
  1 -> 2

Function: _updateAllRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: len = rewardTokens.length

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < len

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _updateRewards(staker,rewardTokens[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

Edges:
  0 -> 1
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5

Function: _claimReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _updateRewards(staker,rewardAsset)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: rewardAmount = _claimable[staker][rewardAsset]

  ID: 3
  Type: NodeType.IF
  Expression: rewardAmount != 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _claimable[staker][rewardAsset] = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _earned[staker][rewardAsset] += rewardAmount

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: SafeTransferLib.safeTransfer(ERC20(rewardAsset),staker,rewardAmount)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: RewardClaimed(staker,rewardAsset,rewardAmount)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 7
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8

Function: claimReward
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _claimReward(msg.sender,rewardAsset)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 2
  2 -> 1

Function: claimAllRewards
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: len = rewardTokens.length

  ID: 2
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 3
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 5
  Type: NodeType.IFLOOP
  Expression: i < len

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: _claimReward(msg.sender,rewardTokens[i])

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ++ i

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: nonReentrant()

Edges:
  0 -> 8
  1 -> 4
  2 -> 5
  4 -> 2
  5 -> 6
  5 -> 3
  6 -> 7
  7 -> 5
  8 -> 1

Function: totalRewardsDistributed
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _rewardDistributed[rewardAsset]

Edges:
  0 -> 1

Function: rewardTokenCount
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: rewardTokens.length

Edges:
  0 -> 1

Function: rewardTokenList
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: rewardTokens

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _BASE = 1e21

Edges:


