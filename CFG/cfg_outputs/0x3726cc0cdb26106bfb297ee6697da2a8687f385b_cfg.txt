Contract: Crypland
==================================================

Function: Crypland
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner = msg.sender

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: paused = false

Edges:
  0 -> 1
  1 -> 2

Function: ownerPause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenOwner()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: ownerUnpause
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: paused = false

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenOwner()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: whenPaused()

Edges:
  0 -> 2
  2 -> 3
  3 -> 1

Function: ownerWithdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: owner.transfer(amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenOwner()

Edges:
  0 -> 2
  2 -> 1

Function: ownerDestroy
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: selfdestruct(address)(owner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: whenOwner()

Edges:
  0 -> 2
  2 -> 1

Function: publicGetAsset
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (calcAssetWorthIndex(asset),calcAssetBuyPrice(asset),calcAssetUpgradePrice(asset),calcAssetMax(asset),calcAssetAssigned(group,asset))

Edges:
  0 -> 1

Function: publicGetElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (addresses[group][asset][unit],elements[group][asset][unit].level,calcElementWorth(group,asset,unit),calcElementCooldown(group,asset,unit),calcElementCurrentPrice(group,asset,unit),offers[group][asset][unit].isOffer)

Edges:
  0 -> 1

Function: publicGetElementOffer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: (offers[group][asset][unit].startPrice,offers[group][asset][unit].endPrice,offers[group][asset][unit].startBlock,offers[group][asset][unit].endBlock,block.number)

Edges:
  0 -> 1

Function: userAssignElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = calcAssetBuyPrice(asset)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(group >= 0 && group < 4)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(asset >= 0 && asset < 23)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool)(calcAssetAssigned(group,asset) < calcAssetMax(asset))

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= price)

  ID: 6
  Type: NodeType.IF
  Expression: ref == address(0) || ref == msg.sender

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: ref = owner

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: paidWorth = uint256(block.blockhash(block.number - asset)) % 100 + 1

  ID: 10
  Type: NodeType.VARIABLE
  Expression: paidElement = Element(paidWorth,1,0)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: paidUnit = elements[group][asset].push(paidElement) - 1

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: addresses[group][asset][paidUnit] = msg.sender

  ID: 13
  Type: NodeType.VARIABLE
  Expression: freeWorth = uint256(block.blockhash(block.number - paidWorth)) % 100 + 1

  ID: 14
  Type: NodeType.VARIABLE
  Expression: freeElement = Element(freeWorth,1,0)

  ID: 15
  Type: NodeType.VARIABLE
  Expression: freeUnit = elements[group][23].push(freeElement) - 1

  ID: 16
  Type: NodeType.EXPRESSION
  Expression: addresses[group][23][freeUnit] = msg.sender

  ID: 17
  Type: NodeType.VARIABLE
  Expression: refWorth = uint256(block.blockhash(block.number - freeWorth)) % 100 + 1

  ID: 18
  Type: NodeType.VARIABLE
  Expression: refElement = Element(refWorth,1,0)

  ID: 19
  Type: NodeType.VARIABLE
  Expression: refUnit = elements[group][24].push(refElement) - 1

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: addresses[group][24][refUnit] = ref

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: ElementBought(group,asset,paidUnit,msg.sender,price,1,paidWorth)

  ID: 22
  Type: NodeType.EXPRESSION
  Expression: ElementBought(group,23,freeUnit,msg.sender,0,1,freeWorth)

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ElementBought(group,24,refUnit,ref,0,1,refWorth)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: UserBought(msg.sender,group,asset,paidUnit,price)

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: UserBought(msg.sender,group,23,freeUnit,0)

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: UserBought(ref,group,24,refUnit,0)

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

Edges:
  0 -> 27
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  6 -> 8
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  27 -> 1

Function: userUpgradeElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = calcAssetUpgradePrice(asset)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(elements[group][asset][unit].cooldown < block.number)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= price)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: elements[group][asset][unit].level = elements[group][asset][unit].level + 1

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: elements[group][asset][unit].cooldown = block.number + ((elements[group][asset][unit].level - 1) * 120)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ElementUpgraded(group,asset,unit,msg.sender,price,elements[group][asset][unit].level,calcElementWorth(group,asset,unit))

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: UserUpgraded(msg.sender,group,asset,unit,price)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whenElementHolder(group,asset,unit)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: userOfferSubmitElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(! offers[group][asset][unit].isOffer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(startPrice > 0 && endPrice > 0 && duration > 0 && startPrice >= endPrice)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].isOffer = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].startPrice = startPrice

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].endPrice = endPrice

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].startBlock = block.number

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].endBlock = block.number + duration

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: whenElementHolder(group,asset,unit)

Edges:
  0 -> 8
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  8 -> 9
  9 -> 1

Function: userOfferCancelElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(offers[group][asset][unit].isOffer)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].isOffer = false

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].startPrice = 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].endPrice = 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].startBlock = 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].endBlock = 0

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: whenElementHolder(group,asset,unit)

Edges:
  0 -> 7
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  7 -> 8
  8 -> 1

Function: userOfferAcceptElement
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = calcElementCurrentPrice(group,asset,unit)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool)(offers[group][asset][unit].isOffer)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool)(msg.value >= price)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: seller = addresses[group][asset][unit]

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: addresses[group][asset][unit] = msg.sender

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: offers[group][asset][unit].isOffer = false

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: seller.transfer(price * 97 / 100)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: msg.sender.transfer(msg.value - price)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: ElementTransferred(group,asset,unit,msg.sender,price,elements[group][asset][unit].level,calcElementWorth(group,asset,unit))

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: UserBought(msg.sender,group,asset,unit,price)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: UserSold(seller,group,asset,unit,price)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: whenNotPaused()

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: whenNotElementHolder(group,asset,unit)

Edges:
  0 -> 12
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  12 -> 13
  13 -> 1

Function: calcAssetWorthIndex
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: asset < 23

  ID: 3
  Type: NodeType.RETURN
  Expression: (24 - asset)

  ID: 4
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: calcAssetBuyPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: asset < 23

  ID: 3
  Type: NodeType.RETURN
  Expression: ((24 - asset) * (25 - asset) * 10 ** 15 / 2)

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: calcAssetUpgradePrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: calcAssetWorthIndex(asset) * 10 ** 15

Edges:
  0 -> 1

Function: calcAssetMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: asset < 23

  ID: 3
  Type: NodeType.RETURN
  Expression: ((asset + 1) * (asset + 2) / 2)

  ID: 4
  Type: NodeType.RETURN
  Expression: 2300

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: calcAssetAssigned
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: elements[group][asset].length

Edges:
  0 -> 1

Function: calcElementWorth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: elements[group][asset][unit].worth + ((elements[group][asset][unit].level - 1) * calcAssetWorthIndex(asset))

Edges:
  0 -> 1

Function: calcElementCooldown
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: elements[group][asset][unit].cooldown > block.number

  ID: 3
  Type: NodeType.RETURN
  Expression: elements[group][asset][unit].cooldown - block.number

  ID: 4
  Type: NodeType.RETURN
  Expression: 0

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: calcElementCurrentPrice
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: price = 0

  ID: 2
  Type: NodeType.IF
  Expression: offers[group][asset][unit].isOffer

  ID: 3
  Type: NodeType.IF
  Expression: block.number >= offers[group][asset][unit].endBlock

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: price = offers[group][asset][unit].endPrice

  ID: 5
  Type: NodeType.IF
  Expression: block.number <= offers[group][asset][unit].startBlock

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: price = offers[group][asset][unit].startPrice

  ID: 7
  Type: NodeType.IF
  Expression: offers[group][asset][unit].endPrice == offers[group][asset][unit].startPrice

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: price = offers[group][asset][unit].endPrice

  ID: 9
  Type: NodeType.VARIABLE
  Expression: currentBlockChange = block.number - offers[group][asset][unit].startBlock

  ID: 10
  Type: NodeType.VARIABLE
  Expression: totalBlockChange = offers[group][asset][unit].endBlock - offers[group][asset][unit].startBlock

  ID: 11
  Type: NodeType.VARIABLE
  Expression: totalPriceChange = offers[group][asset][unit].startPrice - offers[group][asset][unit].endPrice

  ID: 12
  Type: NodeType.VARIABLE
  Expression: currentPriceChange = currentBlockChange * totalPriceChange / totalBlockChange

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: price = offers[group][asset][unit].startPrice - currentPriceChange

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.ENDIF
  Expression: 

  ID: 17
  Type: NodeType.ENDIF
  Expression: 

  ID: 18
  Type: NodeType.RETURN
  Expression: price

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 17
  3 -> 4
  3 -> 5
  4 -> 16
  5 -> 6
  5 -> 7
  6 -> 15
  7 -> 8
  7 -> 9
  8 -> 14
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18


