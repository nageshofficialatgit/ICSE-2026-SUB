Contract: Context
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1


Contract: Ownable
==================================================

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(_msgSender())

Edges:
  0 -> 1

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: VerifySignature
==================================================

Function: getMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(_to,_payment,_amount,_usdAmount,_amountOut,_nonce))

Edges:
  0 -> 1

Function: getEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,_messageHash))

Edges:
  0 -> 1

Function: verify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: messageHash = getMessageHash(_to,_payment,_amount,_usdAmount,_amountOut,_nonce)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ethSignedMessageHash = getEthSignedMessageHash(messageHash)

  ID: 3
  Type: NodeType.RETURN
  Expression: recoverSigner(ethSignedMessageHash,signature) == _signer

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: recoverSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (r,s,v) = splitSignature(_signature)

  ID: 5
  Type: NodeType.RETURN
  Expression: ecrecover(bytes32,uint8,bytes32,bytes32)(_ethSignedMessageHash,v,r,s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: splitSignature
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sig.length == 65,invalid signature length)

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: r = mload(uint256)(sig + 32)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s = mload(uint256)(sig + 64)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: v = byte(uint256,uint256)(0,mload(uint256)(sig + 96))

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (r,s,v)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7


Contract: TransferHelper
==================================================

Function: safeTransferETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (success,None) = to.call{value: value}(new bytes(0))

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,TransferHelper: ETH_TRANSFER_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: TRANSFER_FROM_FAILED)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: PepePunchIdo
==================================================

Function: getMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(_to,_payment,_amount,_usdAmount,_amountOut,_nonce))

Edges:
  0 -> 1

Function: getEthSignedMessageHash
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,_messageHash))

Edges:
  0 -> 1

Function: verify
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: messageHash = getMessageHash(_to,_payment,_amount,_usdAmount,_amountOut,_nonce)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ethSignedMessageHash = getEthSignedMessageHash(messageHash)

  ID: 3
  Type: NodeType.RETURN
  Expression: recoverSigner(ethSignedMessageHash,signature) == _signer

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: recoverSigner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: (r,s,v) = splitSignature(_signature)

  ID: 5
  Type: NodeType.RETURN
  Expression: ecrecover(bytes32,uint8,bytes32,bytes32)(_ethSignedMessageHash,v,r,s)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5

Function: splitSignature
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sig.length == 65,invalid signature length)

  ID: 2
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: r = mload(uint256)(sig + 32)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: s = mload(uint256)(sig + 64)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: v = byte(uint256,uint256)(0,mload(uint256)(sig + 96))

  ID: 6
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 7
  Type: NodeType.RETURN
  Expression: (r,s,v)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: owner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _owner

Edges:
  0 -> 1

Function: renounceOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _transferOwnership(newOwner)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: oldOwner = _owner

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _owner = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(oldOwner,newOwner)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _msgSender
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: _msgData
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.data

Edges:
  0 -> 1

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: buyPepep
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(verify(owner(),msg.sender,_payment,_amount,_usdAmount,_amountOut,_nonce,_signature) && usedNonce[_nonce] == false,Invalid signature)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: owners[msg.sender].usdAmount += _usdAmount

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: owners[msg.sender].tokenAmount += _amountOut

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: totalToken += _amountOut

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: totalUsd += _usdAmount

  ID: 6
  Type: NodeType.VARIABLE
  Expression: refAmount = (_amount * refRate) / 100

  ID: 7
  Type: NodeType.IF
  Expression: _ref == address(0) || refAmount <= 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(_amount,_payment,msg.sender,devAddress)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(_amount - refAmount,_payment,msg.sender,devAddress)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: safeTransfer(refAmount,_payment,msg.sender,_ref)

  ID: 11
  Type: NodeType.ENDIF
  Expression: 

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: Buy(msg.sender,msg.sender,_usdAmount,_amountOut,_ref)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 11
  9 -> 10
  10 -> 11
  11 -> 12

Function: withdraw
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(address(this).balance > 0,Invalid amount)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(msg.sender,address(this).balance)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: setDevAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: devAddress = _devAddress

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUsdt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdt = _usdt

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setUsdc
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: usdc = _usdc

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: setRefRate
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: refRate = _refRate

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 2
  2 -> 1

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: _payment == 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferETH(_receiver,_amount)

  ID: 4
  Type: NodeType.ENDIF
  Expression: 

  ID: 5
  Type: NodeType.IF
  Expression: _payment == 2

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(usdt,_sender,_receiver,_amount)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: TransferHelper.safeTransferFrom(usdc,_sender,_receiver,_amount)

  ID: 8
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 5
  2 -> 4
  5 -> 6
  5 -> 7
  6 -> 8
  7 -> 8
  8 -> 4

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: devAddress = 0x5e4f37b7Af46b854245BdB9037F6FEdF3941e8AD

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: refRate = 10

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: usdc = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


