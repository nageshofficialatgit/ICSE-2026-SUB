Contract: IDODOAdapter
==================================================


Contract: INativeV3SwapCallback
==================================================


Contract: IUniV3
==================================================


Contract: IERC20
==================================================


Contract: SafeMath
==================================================

Function: mul
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: a == 0

  ID: 2
  Type: NodeType.RETURN
  Expression: 0

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: c = a * b

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c / a == b,MUL_ERROR)

  ID: 6
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  3 -> 4
  4 -> 5
  5 -> 6

Function: div
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b > 0,DIVIDING_ERROR)

  ID: 2
  Type: NodeType.RETURN
  Expression: a / b

Edges:
  0 -> 1
  1 -> 2

Function: divCeil
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: quotient = div(a,b)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: remainder = a - quotient * b

  ID: 3
  Type: NodeType.IF
  Expression: remainder > 0

  ID: 4
  Type: NodeType.RETURN
  Expression: quotient + 1

  ID: 5
  Type: NodeType.RETURN
  Expression: quotient

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  3 -> 5

Function: sub
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(b <= a,SUB_ERROR)

  ID: 2
  Type: NodeType.RETURN
  Expression: a - b

Edges:
  0 -> 1
  1 -> 2

Function: add
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: c = a + b

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(c >= a,ADD_ERROR)

  ID: 3
  Type: NodeType.RETURN
  Expression: c

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: sqrt
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: z = x / 2 + 1

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: y = x

  ID: 3
  Type: NodeType.STARTLOOP
  Expression: 

  ID: 4
  Type: NodeType.IFLOOP
  Expression: z < y

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: y = z

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: z = (x / z + z) / 2

  ID: 7
  Type: NodeType.ENDLOOP
  Expression: 

  ID: 8
  Type: NodeType.RETURN
  Expression: y

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  4 -> 7
  5 -> 6
  6 -> 4
  7 -> 8


Contract: SafeERC20
==================================================

Function: safeTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

Edges:
  0 -> 1

Function: safeTransferFrom
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

Edges:
  0 -> 1

Function: safeApprove
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

Edges:
  0 -> 1
  1 -> 2

Function: _callOptionalReturn
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (success,returndata) = address(token).call(data)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(success,SafeERC20: low-level call failed)

  ID: 5
  Type: NodeType.IF
  Expression: returndata.length > 0

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  5 -> 7
  6 -> 7


Contract: UniversalERC20
==================================================

Function: universalTransfer
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: amount > 0

  ID: 2
  Type: NodeType.IF
  Expression: isETH(token)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: to.transfer(amount)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token.safeTransfer(to,amount)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  2 -> 4
  3 -> 5
  4 -> 5
  5 -> 6

Function: universalApproveMax
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: allowance = token.allowance(address(this),to)

  ID: 2
  Type: NodeType.IF
  Expression: allowance < amount

  ID: 3
  Type: NodeType.IF
  Expression: allowance > 0

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: token.safeApprove(to,0)

  ID: 5
  Type: NodeType.ENDIF
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: token.safeApprove(to,type()(uint256).max)

  ID: 7
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  2 -> 7
  3 -> 4
  3 -> 5
  4 -> 5
  5 -> 6
  6 -> 7

Function: universalBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: isETH(token)

  ID: 2
  Type: NodeType.RETURN
  Expression: who.balance

  ID: 3
  Type: NodeType.RETURN
  Expression: token.balanceOf(who)

Edges:
  0 -> 1
  1 -> 2
  1 -> 3

Function: tokenBalanceOf
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: token.balanceOf(who)

Edges:
  0 -> 1

Function: isETH
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.RETURN
  Expression: token == ETH_ADDRESS

Edges:
  0 -> 1

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)

Edges:


Contract: TickMath
==================================================

Function: getSqrtRatioAtTick
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(absTick <= uint256(uint24(MAX_TICK)),T)

  ID: 4
  Type: NodeType.IF
  Expression: absTick & 0x2 != 0

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128

  ID: 6
  Type: NodeType.ENDIF
  Expression: 

  ID: 7
  Type: NodeType.IF
  Expression: absTick & 0x4 != 0

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128

  ID: 9
  Type: NodeType.ENDIF
  Expression: 

  ID: 10
  Type: NodeType.IF
  Expression: absTick & 0x8 != 0

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128

  ID: 12
  Type: NodeType.ENDIF
  Expression: 

  ID: 13
  Type: NodeType.IF
  Expression: absTick & 0x10 != 0

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: absTick & 0x20 != 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: absTick & 0x40 != 0

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: absTick & 0x80 != 0

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128

  ID: 24
  Type: NodeType.ENDIF
  Expression: 

  ID: 25
  Type: NodeType.IF
  Expression: absTick & 0x100 != 0

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128

  ID: 27
  Type: NodeType.ENDIF
  Expression: 

  ID: 28
  Type: NodeType.IF
  Expression: absTick & 0x200 != 0

  ID: 29
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128

  ID: 30
  Type: NodeType.ENDIF
  Expression: 

  ID: 31
  Type: NodeType.IF
  Expression: absTick & 0x400 != 0

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128

  ID: 33
  Type: NodeType.ENDIF
  Expression: 

  ID: 34
  Type: NodeType.IF
  Expression: absTick & 0x800 != 0

  ID: 35
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128

  ID: 36
  Type: NodeType.ENDIF
  Expression: 

  ID: 37
  Type: NodeType.IF
  Expression: absTick & 0x1000 != 0

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128

  ID: 39
  Type: NodeType.ENDIF
  Expression: 

  ID: 40
  Type: NodeType.IF
  Expression: absTick & 0x2000 != 0

  ID: 41
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128

  ID: 42
  Type: NodeType.ENDIF
  Expression: 

  ID: 43
  Type: NodeType.IF
  Expression: absTick & 0x4000 != 0

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128

  ID: 45
  Type: NodeType.ENDIF
  Expression: 

  ID: 46
  Type: NodeType.IF
  Expression: absTick & 0x8000 != 0

  ID: 47
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128

  ID: 48
  Type: NodeType.ENDIF
  Expression: 

  ID: 49
  Type: NodeType.IF
  Expression: absTick & 0x10000 != 0

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128

  ID: 51
  Type: NodeType.ENDIF
  Expression: 

  ID: 52
  Type: NodeType.IF
  Expression: absTick & 0x20000 != 0

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128

  ID: 54
  Type: NodeType.ENDIF
  Expression: 

  ID: 55
  Type: NodeType.IF
  Expression: absTick & 0x40000 != 0

  ID: 56
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128

  ID: 57
  Type: NodeType.ENDIF
  Expression: 

  ID: 58
  Type: NodeType.IF
  Expression: absTick & 0x80000 != 0

  ID: 59
  Type: NodeType.EXPRESSION
  Expression: ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128

  ID: 60
  Type: NodeType.ENDIF
  Expression: 

  ID: 61
  Type: NodeType.IF
  Expression: tick > 0

  ID: 62
  Type: NodeType.EXPRESSION
  Expression: ratio = type()(uint256).max / ratio

  ID: 63
  Type: NodeType.ENDIF
  Expression: 

  ID: 65
  Type: NodeType.IF
  Expression: tick < 0

  ID: 66
  Type: NodeType.EXPRESSION
  Expression: absTick = uint256(- int256(tick))

  ID: 67
  Type: NodeType.EXPRESSION
  Expression: absTick = uint256(int256(tick))

  ID: 68
  Type: NodeType.ENDIF
  Expression: 

  ID: 69
  Type: NodeType.IF
  Expression: absTick & 0x1 != 0

  ID: 70
  Type: NodeType.EXPRESSION
  Expression: ratio = 0xfffcb933bd6fad37aa2d162d1a594001

  ID: 71
  Type: NodeType.EXPRESSION
  Expression: ratio = 0x100000000000000000000000000000000

  ID: 72
  Type: NodeType.ENDIF
  Expression: 

  ID: 73
  Type: NodeType.IF
  Expression: ratio % (1 << 32) == 0

  ID: 74
  Type: NodeType.EXPRESSION
  Expression: sqrtPriceX96 = uint160((ratio >> 32) + 0)

  ID: 75
  Type: NodeType.EXPRESSION
  Expression: sqrtPriceX96 = uint160((ratio >> 32) + 1)

  ID: 76
  Type: NodeType.ENDIF
  Expression: 

  ID: 77
  Type: NodeType.RETURN
  Expression: sqrtPriceX96

Edges:
  0 -> 65
  2 -> 69
  4 -> 5
  4 -> 6
  5 -> 6
  6 -> 7
  7 -> 8
  7 -> 9
  8 -> 9
  9 -> 10
  10 -> 11
  10 -> 12
  11 -> 12
  12 -> 13
  13 -> 14
  13 -> 15
  14 -> 15
  15 -> 16
  16 -> 17
  16 -> 18
  17 -> 18
  18 -> 19
  19 -> 20
  19 -> 21
  20 -> 21
  21 -> 22
  22 -> 23
  22 -> 24
  23 -> 24
  24 -> 25
  25 -> 26
  25 -> 27
  26 -> 27
  27 -> 28
  28 -> 29
  28 -> 30
  29 -> 30
  30 -> 31
  31 -> 32
  31 -> 33
  32 -> 33
  33 -> 34
  34 -> 35
  34 -> 36
  35 -> 36
  36 -> 37
  37 -> 38
  37 -> 39
  38 -> 39
  39 -> 40
  40 -> 41
  40 -> 42
  41 -> 42
  42 -> 43
  43 -> 44
  43 -> 45
  44 -> 45
  45 -> 46
  46 -> 47
  46 -> 48
  47 -> 48
  48 -> 49
  49 -> 50
  49 -> 51
  50 -> 51
  51 -> 52
  52 -> 53
  52 -> 54
  53 -> 54
  54 -> 55
  55 -> 56
  55 -> 57
  56 -> 57
  57 -> 58
  58 -> 59
  58 -> 60
  59 -> 60
  60 -> 61
  61 -> 62
  61 -> 63
  62 -> 63
  63 -> 73
  65 -> 66
  65 -> 67
  66 -> 68
  67 -> 68
  68 -> 2
  69 -> 70
  69 -> 71
  70 -> 72
  71 -> 72
  72 -> 4
  73 -> 74
  73 -> 75
  74 -> 76
  75 -> 76
  76 -> 77

Function: getTickAtSqrtRatio
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,R)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: ratio = uint256(sqrtPriceX96) << 32

  ID: 3
  Type: NodeType.VARIABLE
  Expression: r = ratio

  ID: 4
  Type: NodeType.VARIABLE
  Expression: msb = 0

  ID: 5
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_0 = r > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF << 7

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_0

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_0

  ID: 10
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 11
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 12
  Type: NodeType.VARIABLE
  Expression: 

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_1 = r > 0xFFFFFFFFFFFFFFFF << 6

  ID: 14
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_1

  ID: 15
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_1

  ID: 16
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 17
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 18
  Type: NodeType.VARIABLE
  Expression: 

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_2 = r > 0xFFFFFFFF << 5

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_2

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_2

  ID: 22
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 23
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 24
  Type: NodeType.VARIABLE
  Expression: 

  ID: 25
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_3 = r > 0xFFFF << 4

  ID: 26
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_3

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_3

  ID: 28
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 29
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 30
  Type: NodeType.VARIABLE
  Expression: 

  ID: 31
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_4 = r > 0xFF << 3

  ID: 32
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_4

  ID: 33
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_4

  ID: 34
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 35
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 36
  Type: NodeType.VARIABLE
  Expression: 

  ID: 37
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_5 = r > 0xF << 2

  ID: 38
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_5

  ID: 39
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_5

  ID: 40
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 41
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 42
  Type: NodeType.VARIABLE
  Expression: 

  ID: 43
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_6 = r > 0x3 << 1

  ID: 44
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_6

  ID: 45
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_6

  ID: 46
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 47
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 48
  Type: NodeType.VARIABLE
  Expression: 

  ID: 49
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_7 = r > 0x1

  ID: 50
  Type: NodeType.EXPRESSION
  Expression: msb = msb | f_getTickAtSqrtRatio_asm_7

  ID: 51
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 52
  Type: NodeType.IF
  Expression: msb >= 128

  ID: 53
  Type: NodeType.EXPRESSION
  Expression: r = ratio >> (msb - 127)

  ID: 54
  Type: NodeType.EXPRESSION
  Expression: r = ratio << (127 - msb)

  ID: 55
  Type: NodeType.ENDIF
  Expression: 

  ID: 56
  Type: NodeType.VARIABLE
  Expression: log_2 = (int256(msb) - 128) << 64

  ID: 57
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 58
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 59
  Type: NodeType.VARIABLE
  Expression: 

  ID: 60
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_8 = r >> 128

  ID: 61
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_8 << 63

  ID: 62
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_8

  ID: 63
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 64
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 65
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 66
  Type: NodeType.VARIABLE
  Expression: 

  ID: 67
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_9 = r >> 128

  ID: 68
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_9 << 62

  ID: 69
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_9

  ID: 70
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 71
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 72
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 73
  Type: NodeType.VARIABLE
  Expression: 

  ID: 74
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_10 = r >> 128

  ID: 75
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_10 << 61

  ID: 76
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_10

  ID: 77
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 78
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 79
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 80
  Type: NodeType.VARIABLE
  Expression: 

  ID: 81
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_11 = r >> 128

  ID: 82
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_11 << 60

  ID: 83
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_11

  ID: 84
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 85
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 86
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 87
  Type: NodeType.VARIABLE
  Expression: 

  ID: 88
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_12 = r >> 128

  ID: 89
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_12 << 59

  ID: 90
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_12

  ID: 91
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 92
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 93
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 94
  Type: NodeType.VARIABLE
  Expression: 

  ID: 95
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_13 = r >> 128

  ID: 96
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_13 << 58

  ID: 97
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_13

  ID: 98
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 99
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 100
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 101
  Type: NodeType.VARIABLE
  Expression: 

  ID: 102
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_14 = r >> 128

  ID: 103
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_14 << 57

  ID: 104
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_14

  ID: 105
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 106
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 107
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 108
  Type: NodeType.VARIABLE
  Expression: 

  ID: 109
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_15 = r >> 128

  ID: 110
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_15 << 56

  ID: 111
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_15

  ID: 112
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 113
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 114
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 115
  Type: NodeType.VARIABLE
  Expression: 

  ID: 116
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_16 = r >> 128

  ID: 117
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_16 << 55

  ID: 118
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_16

  ID: 119
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 120
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 121
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 122
  Type: NodeType.VARIABLE
  Expression: 

  ID: 123
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_17 = r >> 128

  ID: 124
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_17 << 54

  ID: 125
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_17

  ID: 126
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 127
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 128
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 129
  Type: NodeType.VARIABLE
  Expression: 

  ID: 130
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_18 = r >> 128

  ID: 131
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_18 << 53

  ID: 132
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_18

  ID: 133
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 134
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 135
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 136
  Type: NodeType.VARIABLE
  Expression: 

  ID: 137
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_19 = r >> 128

  ID: 138
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_19 << 52

  ID: 139
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_19

  ID: 140
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 141
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 142
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 143
  Type: NodeType.VARIABLE
  Expression: 

  ID: 144
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_20 = r >> 128

  ID: 145
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_20 << 51

  ID: 146
  Type: NodeType.EXPRESSION
  Expression: r = r >> f_getTickAtSqrtRatio_asm_20

  ID: 147
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 148
  Type: NodeType.ASSEMBLY
  Expression: 

  ID: 149
  Type: NodeType.EXPRESSION
  Expression: r = r * r >> 127

  ID: 150
  Type: NodeType.VARIABLE
  Expression: 

  ID: 151
  Type: NodeType.EXPRESSION
  Expression: f_getTickAtSqrtRatio_asm_21 = r >> 128

  ID: 152
  Type: NodeType.EXPRESSION
  Expression: log_2 = log_2 | f_getTickAtSqrtRatio_asm_21 << 50

  ID: 153
  Type: NodeType.ENDASSEMBLY
  Expression: 

  ID: 154
  Type: NodeType.VARIABLE
  Expression: log_sqrt10001 = log_2 * 255738958999603826347141

  ID: 155
  Type: NodeType.VARIABLE
  Expression: tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128)

  ID: 156
  Type: NodeType.VARIABLE
  Expression: tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128)

  ID: 158
  Type: NodeType.IF
  Expression: tickLow == tickHi

  ID: 159
  Type: NodeType.EXPRESSION
  Expression: tick = tickLow

  ID: 161
  Type: NodeType.ENDIF
  Expression: 

  ID: 162
  Type: NodeType.IF
  Expression: getSqrtRatioAtTick(tickHi) <= sqrtPriceX96

  ID: 163
  Type: NodeType.EXPRESSION
  Expression: tick = tickHi

  ID: 164
  Type: NodeType.EXPRESSION
  Expression: tick = tickLow

  ID: 165
  Type: NodeType.ENDIF
  Expression: 

  ID: 166
  Type: NodeType.RETURN
  Expression: tick

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 10
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15
  15 -> 16
  16 -> 17
  17 -> 18
  18 -> 19
  19 -> 20
  20 -> 21
  21 -> 22
  22 -> 23
  23 -> 24
  24 -> 25
  25 -> 26
  26 -> 27
  27 -> 28
  28 -> 29
  29 -> 30
  30 -> 31
  31 -> 32
  32 -> 33
  33 -> 34
  34 -> 35
  35 -> 36
  36 -> 37
  37 -> 38
  38 -> 39
  39 -> 40
  40 -> 41
  41 -> 42
  42 -> 43
  43 -> 44
  44 -> 45
  45 -> 46
  46 -> 47
  47 -> 48
  48 -> 49
  49 -> 50
  50 -> 51
  51 -> 52
  52 -> 53
  52 -> 54
  53 -> 55
  54 -> 55
  55 -> 56
  56 -> 57
  57 -> 58
  58 -> 59
  59 -> 60
  60 -> 61
  61 -> 62
  62 -> 63
  63 -> 64
  64 -> 65
  65 -> 66
  66 -> 67
  67 -> 68
  68 -> 69
  69 -> 70
  70 -> 71
  71 -> 72
  72 -> 73
  73 -> 74
  74 -> 75
  75 -> 76
  76 -> 77
  77 -> 78
  78 -> 79
  79 -> 80
  80 -> 81
  81 -> 82
  82 -> 83
  83 -> 84
  84 -> 85
  85 -> 86
  86 -> 87
  87 -> 88
  88 -> 89
  89 -> 90
  90 -> 91
  91 -> 92
  92 -> 93
  93 -> 94
  94 -> 95
  95 -> 96
  96 -> 97
  97 -> 98
  98 -> 99
  99 -> 100
  100 -> 101
  101 -> 102
  102 -> 103
  103 -> 104
  104 -> 105
  105 -> 106
  106 -> 107
  107 -> 108
  108 -> 109
  109 -> 110
  110 -> 111
  111 -> 112
  112 -> 113
  113 -> 114
  114 -> 115
  115 -> 116
  116 -> 117
  117 -> 118
  118 -> 119
  119 -> 120
  120 -> 121
  121 -> 122
  122 -> 123
  123 -> 124
  124 -> 125
  125 -> 126
  126 -> 127
  127 -> 128
  128 -> 129
  129 -> 130
  130 -> 131
  131 -> 132
  132 -> 133
  133 -> 134
  134 -> 135
  135 -> 136
  136 -> 137
  137 -> 138
  138 -> 139
  139 -> 140
  140 -> 141
  141 -> 142
  142 -> 143
  143 -> 144
  144 -> 145
  145 -> 146
  146 -> 147
  147 -> 148
  148 -> 149
  149 -> 150
  150 -> 151
  151 -> 152
  152 -> 153
  153 -> 154
  154 -> 155
  155 -> 156
  156 -> 158
  158 -> 159
  158 -> 162
  159 -> 161
  161 -> 166
  162 -> 163
  162 -> 164
  163 -> 165
  164 -> 165
  165 -> 161

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_TICK = - 887272

  ID: 1
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_TICK = - MIN_TICK

  ID: 2
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MIN_SQRT_RATIO = 4295128739

  ID: 3
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342

Edges:
  0 -> 1
  1 -> 2
  2 -> 3


Contract: IWETH
==================================================


Contract: PoolAddress
==================================================

Function: getPoolKey
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: tokenA > tokenB

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: (tokenA,tokenB) = (tokenB,tokenA)

  ID: 3
  Type: NodeType.ENDIF
  Expression: 

  ID: 4
  Type: NodeType.RETURN
  Expression: PoolKey({token0:tokenA,token1:tokenB,fee:fee})

Edges:
  0 -> 1
  1 -> 2
  1 -> 3
  2 -> 3
  3 -> 4

Function: computeAddress
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(key.token0 < key.token1)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: pool = address(uint160(uint256(keccak256(bytes)(abi.encodePacked(0xff,factory,keccak256(bytes)(abi.encode(key.token0,key.token1,key.fee)),POOL_INIT_CODE_HASH)))))

  ID: 3
  Type: NodeType.RETURN
  Expression: pool

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: POOL_INIT_CODE_HASH = 0x6f4fcfea116711b167b87469b22333669e4ceb8f39b24bef28be93f45af8b70c

Edges:


Contract: InitializableOwnable
==================================================

Function: initOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _INITIALIZED_ = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _OWNER_ = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: notInitialized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferPrepared(_OWNER_,newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _NEW_OWNER_ = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == _NEW_OWNER_,INVALID_CLAIM)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_OWNER_,_NEW_OWNER_)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _OWNER_ = _NEW_OWNER_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _NEW_OWNER_ = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4


Contract: IV3Factory
==================================================


Contract: INativeLPToken
==================================================


Contract: NativeAdapter
==================================================

Function: initOwner
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _INITIALIZED_ = true

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _OWNER_ = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: notInitialized()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: transferOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferPrepared(_OWNER_,newOwner)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _NEW_OWNER_ = newOwner

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: onlyOwner()

Edges:
  0 -> 3
  1 -> 2
  3 -> 1

Function: claimOwnership
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == _NEW_OWNER_,INVALID_CLAIM)

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: OwnershipTransferred(_OWNER_,_NEW_OWNER_)

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: _OWNER_ = _NEW_OWNER_

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _NEW_OWNER_ = address(0)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: constructor
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: _WETH_ = weth

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: _V3_FACTORY_ = factory

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: initOwner(msg.sender)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3

Function: _uniV3Swap
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.EXPRESSION
  Expression: (fromToken,toToken,ntlpIn,ntlpOut,fee) = abi.decode(data,(address,address,address,address,uint24))

  ID: 7
  Type: NodeType.VARIABLE
  Expression: sellAmount = INativeLPToken(ntlpIn).getSharesByUnderlying(IERC20(fromToken).balanceOf(address(this)))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: zeroForOne = fromToken < toToken

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: INativeLPToken(ntlpOut).redeemTo(INativeLPToken(ntlpOut).sharesOf(address(this)),to)

  ID: 11
  Type: NodeType.VARIABLE
  Expression: leftSellAmount = IERC20(fromToken).balanceOf(address(this))

  ID: 12
  Type: NodeType.IF
  Expression: leftSellAmount > 0

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(IERC20(fromToken),tx.origin,leftSellAmount)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.IF
  Expression: sqrtX96 == 0

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: IUniV3(pool).swap(address(this),zeroForOne,int256(sellAmount),sqrtX96,data)

  ID: 18
  Type: NodeType.ENDIF
  Expression: 

  ID: 19
  Type: NodeType.IF
  Expression: zeroForOne

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: IUniV3(pool).swap(address(this),zeroForOne,int256(sellAmount),TickMath.MIN_SQRT_RATIO + 1,data)

  ID: 21
  Type: NodeType.EXPRESSION
  Expression: IUniV3(pool).swap(address(this),zeroForOne,int256(sellAmount),TickMath.MAX_SQRT_RATIO - 1,data)

  ID: 22
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 15
  10 -> 11
  11 -> 12
  12 -> 13
  12 -> 14
  13 -> 14
  15 -> 19
  15 -> 17
  17 -> 18
  18 -> 10
  19 -> 20
  19 -> 21
  20 -> 22
  21 -> 22
  22 -> 18

Function: sellBase
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (sqrtX96,data) = abi.decode(moreInfo,(uint160,bytes))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _uniV3Swap(to,pool,sqrtX96,data)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: sellQuote
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.VARIABLE
  Expression: 

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: (sqrtX96,data) = abi.decode(moreInfo,(uint160,bytes))

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: _uniV3Swap(to,pool,sqrtX96,data)

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4

Function: nativeV3SwapCallback
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.EXPRESSION
  Expression: require(bool)(amount0Delta > 0 || amount1Delta > 0)

  ID: 2
  Type: NodeType.VARIABLE
  Expression: 

  ID: 3
  Type: NodeType.VARIABLE
  Expression: 

  ID: 4
  Type: NodeType.VARIABLE
  Expression: 

  ID: 5
  Type: NodeType.VARIABLE
  Expression: 

  ID: 6
  Type: NodeType.VARIABLE
  Expression: 

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: (tokenIn,tokenOut,ntlpIn,ntlpOut,fee) = abi.decode(_data,(address,address,address,address,uint24))

  ID: 8
  Type: NodeType.VARIABLE
  Expression: 

  ID: 9
  Type: NodeType.VARIABLE
  Expression: 

  ID: 11
  Type: NodeType.VARIABLE
  Expression: poolAddress = IV3Factory(_V3_FACTORY_).getPool(ntlpIn,ntlpOut,fee)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: require(bool,string)(msg.sender == poolAddress || msg.sender == _OWNER_,not available call address)

  ID: 13
  Type: NodeType.VARIABLE
  Expression: 

  ID: 14
  Type: NodeType.VARIABLE
  Expression: 

  ID: 16
  Type: NodeType.IF
  Expression: isExactInput

  ID: 17
  Type: NodeType.EXPRESSION
  Expression: pay(tokenIn,ntlpIn,address(this),msg.sender,amountToPay)

  ID: 18
  Type: NodeType.EXPRESSION
  Expression: tokenIn = tokenOut

  ID: 19
  Type: NodeType.EXPRESSION
  Expression: ntlpIn = ntlpOut

  ID: 20
  Type: NodeType.EXPRESSION
  Expression: pay(tokenIn,ntlpIn,address(this),msg.sender,amountToPay)

  ID: 21
  Type: NodeType.ENDIF
  Expression: 

  ID: 22
  Type: NodeType.IF
  Expression: tokenIn < tokenOut

  ID: 23
  Type: NodeType.EXPRESSION
  Expression: (token0,token1) = (tokenIn,tokenOut)

  ID: 24
  Type: NodeType.EXPRESSION
  Expression: (token0,token1) = (tokenOut,tokenIn)

  ID: 25
  Type: NodeType.ENDIF
  Expression: 

  ID: 26
  Type: NodeType.IF
  Expression: amount0Delta > 0

  ID: 27
  Type: NodeType.EXPRESSION
  Expression: (isExactInput,amountToPay) = (tokenIn < tokenOut,uint256(amount0Delta))

  ID: 28
  Type: NodeType.EXPRESSION
  Expression: (isExactInput,amountToPay) = (tokenOut < tokenIn,uint256(amount1Delta))

  ID: 29
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 8
  8 -> 9
  9 -> 22
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 26
  16 -> 17
  16 -> 18
  17 -> 21
  18 -> 19
  19 -> 20
  20 -> 21
  22 -> 23
  22 -> 24
  23 -> 25
  24 -> 25
  25 -> 11
  26 -> 27
  26 -> 28
  27 -> 29
  28 -> 29
  29 -> 16

Function: pay
------------------------------
Nodes:
  ID: 0
  Type: NodeType.ENTRYPOINT
  Expression: 

  ID: 1
  Type: NodeType.IF
  Expression: token == _WETH_ && address(this).balance >= value

  ID: 2
  Type: NodeType.EXPRESSION
  Expression: IWETH(_WETH_).deposit{value: value}()

  ID: 3
  Type: NodeType.EXPRESSION
  Expression: IWETH(_WETH_).approve(ntlpToken,value)

  ID: 4
  Type: NodeType.EXPRESSION
  Expression: INativeLPToken(ntlpToken).depositFor(address(this),value)

  ID: 5
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(IERC20(ntlpToken),recipient,value)

  ID: 6
  Type: NodeType.IF
  Expression: payer == address(this)

  ID: 7
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).approve(ntlpToken,value)

  ID: 8
  Type: NodeType.EXPRESSION
  Expression: INativeLPToken(ntlpToken).depositFor(address(this),value)

  ID: 9
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(IERC20(ntlpToken),recipient,value)

  ID: 10
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransferFrom(IERC20(token),payer,address(this),value)

  ID: 11
  Type: NodeType.EXPRESSION
  Expression: IERC20(token).approve(ntlpToken,value)

  ID: 12
  Type: NodeType.EXPRESSION
  Expression: INativeLPToken(ntlpToken).depositFor(address(this),value)

  ID: 13
  Type: NodeType.EXPRESSION
  Expression: SafeERC20.safeTransfer(IERC20(ntlpToken),recipient,value)

  ID: 14
  Type: NodeType.ENDIF
  Expression: 

  ID: 15
  Type: NodeType.ENDIF
  Expression: 

Edges:
  0 -> 1
  1 -> 2
  1 -> 6
  2 -> 3
  3 -> 4
  4 -> 5
  5 -> 15
  6 -> 7
  6 -> 10
  7 -> 8
  8 -> 9
  9 -> 14
  10 -> 11
  11 -> 12
  12 -> 13
  13 -> 14
  14 -> 15

Function: slitherConstructorConstantVariables
------------------------------
Nodes:
  ID: 0
  Type: NodeType.OTHER_ENTRYPOINT
  Expression: _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Edges:


