// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

/**
 * @title Garden Vulnerability Bounty Contract
 * @author BLOK Capital DAO
 * @notice This contract manages a bounty reward system for exposing vulnerabilities in the Garden.
 * @dev Only the wallet containing the recovery funds can interact with this contract.
 *      A percentage of the recovered funds is paid as a bounty, decreasing by 1% daily until the claim period is completed.
 */
contract GardenVulnerabilityBounty {
    /// @notice The DAO Treasury address where recovered funds (minus bounty) are sent.
    address public immutable daoTreasury;

    /// @notice The initial percentage (0-100) of recovered funds paid as the bounty reward.
    uint256 public immutable initialBountyPercentage;

    /// @notice Legal waiver text, immutable and accessible to all.
    string public constant LEGAL_WAIVER =
        "This contract is deployed by BLOK Capital DAO LLC with registration number 10050-23; and, registered address, PO Box 852, Long Island Rd, Majuro, Marshall Islands MH 96960 & ENS address blokcapital.eth. The contract is deployed for the specific purpose of the recovery of funds following an exploit of multiple Smart Wallet Accounts related to a Garden Vulnerability. There is a bounty payment due for the Bounty Hunter who will deposit the exact recovery funds by interacting with this contract. On successful interaction with this contract, by the bounty hunter, the recovery funds will move to the BLOK Capital DAO treasury and the Bounty Hunter will receive their bounty and upon receipt of their bounty payment this will serve as proof that all claims regarding this Garden Vulnerability will have been settled in a FULL and FINAL settlement. That all investigations by BLOK Capital DAO LLC into this matter will terminate with immediate effect. That the bounty hunter will have full anonymity and benefit from their reward.";

    /// @notice The exact amount of Ether expected to be deposited (64.4 ETH in wei).
    uint256 public constant EXPECTED_DEPOSIT = 64.4 ether;

    /// @notice The amount of exploited funds deposited into the contract.
    uint256 public exploitFunds;

    /// @notice Tracks whether the bounty has been claimed.
    bool public bountyClaimed;

    /// @notice The deadline (timestamp) after which the bounty can be claimed.
    uint256 public immutable claimDeadline;

    /// @notice The allowed slippage tolerance in BPS (0.03% = 0.03/100 * 10_000).
    uint256 public constant SLIPPAGE_TOLERANCE_BPS = 3; // 0.03%

    /// @notice Basis points (BPS) denominator (10,000 BPS = 100%).
    uint256 public constant BPS_DENOMINATOR = 10_000;

    /// @notice Event emitted when exploited funds are deposited.
    event FundsDeposited(address indexed depositor, uint256 amount);

    /// @notice Event emitted when the bounty is claimed, detailing amounts sent to the hunter and treasury.
    event BountyClaimed(address indexed claimant, uint256 bountyAmount, uint256 treasuryAmount);

    ///@notice Event emitted when contract is deployed.
    event BountyContractDeployed(address indexed daoTreasury, uint256 initialBountyPercentage, uint256 claimPeriod);

    /**
     * @notice Constructor to initialize the contract with key parameters.
     *
     * @param _daoTreasury The DAO Treasury address.
     * @param _initialBountyPercentage The initial percentage of funds allocated to the bounty (0-100).
     * @param _claimPeriod The time period (in seconds) after deployment until the bounty can be claimed.
     */
    constructor(
        address _daoTreasury,
        uint256 _initialBountyPercentage, //17%
        uint256 _claimPeriod //17 days in seconds = 17 * 86400 = 1468800
    ) {
        require(_daoTreasury != address(0), "Invalid DAO Treasury address");
        require(_initialBountyPercentage <= 100, "Initial bounty percentage must be <= 100");

        daoTreasury = _daoTreasury;
        initialBountyPercentage = _initialBountyPercentage; // e.g., 17 for 17%
        claimDeadline = block.timestamp + _claimPeriod;
        //event emission
        emit BountyContractDeployed(_daoTreasury, _initialBountyPercentage, _claimPeriod);
    }

    /**
     * @notice Allows bounty hunter to deposit funds within 1% slippage tolerance.
     * @dev Can only be called once.
     */
    function depositExploitFunds() external payable {
        require(exploitFunds == 0, "Funds already deposited");

        uint256 minDeposit = EXPECTED_DEPOSIT - ((EXPECTED_DEPOSIT * SLIPPAGE_TOLERANCE_BPS) / BPS_DENOMINATOR);
        uint256 maxDeposit = EXPECTED_DEPOSIT + ((EXPECTED_DEPOSIT * SLIPPAGE_TOLERANCE_BPS) / BPS_DENOMINATOR);

        require(msg.value >= minDeposit && msg.value <= maxDeposit, "Deposit amount out of allowed range");

        exploitFunds = msg.value;
        emit FundsDeposited(msg.sender, msg.value);
    }

    /**
     * @notice Calculates the current bounty percentage based on time elapsed since claim deadline.
     * since the number of days remaing corresponds to the reward percentage, returning number of days remaining ideally means returning the current bounty percentage.
     * @return The current bounty percentage (17% - 0%).
     */
    function getCurrentBountyPercentage() public view returns (uint256) {
        // if current timestamp is greater or equal to the deadline return 0.
        if (block.timestamp >= claimDeadline) {
            return 0;
        }
        // days remaining until deadline
        uint256 daysReamining = (claimDeadline - block.timestamp) / 86400;
        //daysRemaining = 17 days - 2 days = 15 days

        return daysReamining; //15 days
    }

    /**
     * @notice Allows the recovery funds wallet to claim the bounty after the claim deadline.
     * @param _rewardAddress The address to receive the bounty reward.
     * @dev Splits the deposited funds between the bounty hunter and the DAO Treasury based on the current bounty percentage.
     */
    function claimBounty(address payable _rewardAddress) external {
        require(block.timestamp <= claimDeadline, "Claim period has ended");
        require(!bountyClaimed, "Bounty already claimed");
        require(exploitFunds > 0, "No funds deposited");
        require(_rewardAddress != address(0), "Invalid reward address");

        bountyClaimed = true;

        // Calculate the current bounty percentage at the time of claiming
        uint256 currentBountyPercentage = getCurrentBountyPercentage();
        uint256 bountyAmount = (exploitFunds * currentBountyPercentage) / 100;
        uint256 treasuryAmount = exploitFunds - bountyAmount;

        // Transfer bounty to the reward address
        (bool sentBounty,) = _rewardAddress.call{value: bountyAmount}("");
        require(sentBounty, "Failed to send bounty to reward address");

        // Transfer remaining funds to DAO Treasury
        (bool sentTreasury,) = daoTreasury.call{value: treasuryAmount}("");
        require(sentTreasury, "Failed to send funds to DAO Treasury");

        emit BountyClaimed(msg.sender, bountyAmount, treasuryAmount);
    }

    /**
     * @notice Returns the legal waiver text.
     * @return The immutable legal waiver string.
     */
    function getLegalWaiver() external pure returns (string memory) {
        return LEGAL_WAIVER;
    }
}